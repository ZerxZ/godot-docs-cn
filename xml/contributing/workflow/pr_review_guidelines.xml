<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/contributing/workflow/pr_review_guidelines.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-pr-review-guidelines"></target>
    <section ids="pull-request-review-process doc-pr-review-guidelines" names="pull\ request\ review\ process 拉取请求审核流程 doc_pr_review_guidelines">
        <title>拉取请求审核流程</title>
        <note>
            <paragraph>This page is intended to provide insight into the pull request (PR) review
                process that we aspire to. As such, it is primarily targeted at engine
                maintainers who are responsible for reviewing and approving pull requests.
                That being said, much of the content is useful for prospective contributors
                wanting to know how to ensure that their PR is merged.</paragraph>
        </note>
        <paragraph>From a high level, the ideal life cycle of a pull request looks like the
            following:</paragraph>
        <block_quote>
            <enumerated_list enumtype="arabic" prefix="" suffix=".">
                <list_item>
                    <paragraph>A contributor opens a PR that fixes a specific problem (optimally closing
                        a GitHub <reference name="issue" refuri="https://github.com/godotengine/godot">issue</reference><target ids="issue" names="issue" refuri="https://github.com/godotengine/godot"></target> or implementing
                        a <reference name="proposal" refuri="https://github.com/godotengine/godot-proposals">proposal</reference><target ids="proposal" names="proposal" refuri="https://github.com/godotengine/godot-proposals"></target>).</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Other contributors provide feedback on the PR (including reviewing and/or
                        approving the PR, as appropriate).</paragraph>
                </list_item>
                <list_item>
                    <paragraph>An engine maintainer reviews the code and provides feedback, requests
                        changes, or approves the pull request, as appropriate.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Another maintainer reviews the code with a focus on code style/clarity and
                        approves it once satisfied.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>A team leader or a member of the <reference name="production team" refuri="https://godotengine.org/teams#production">production team</reference><target ids="production-team" names="production\ team" refuri="https://godotengine.org/teams#production"></target> merges the pull request if
                        satisfied that it has been sufficiently reviewed.</paragraph>
                </list_item>
            </enumerated_list>
        </block_quote>
        <paragraph>This document will explain steps 2, 3, 4, and 5 in more detail. For a more
            detailed explanation of the pull request workflow please see the <reference internal="True" refuri="pr_workflow#doc-pr-workflow"><inline classes="std std-ref">pull
                    request workflow document</inline></reference>.</paragraph>
        <note>
            <paragraph>In practice these steps may blend together. Oftentimes maintainers will
                provide comments on code style and code quality at the same time and will
                approve a pull request for both.</paragraph>
        </note>
        <paragraph>Typically the first interaction on a pull request will be an engine maintainer
            assigning tags to the pull request and flagging it for review by someone
            familiar with that area of code.</paragraph>
        <paragraph>Engine maintainers are folks who are "members" of the Godot project repository
            on GitHub and/or are listed on the <reference name="Teams page" refuri="https://godotengine.org/teams">Teams page</reference><target ids="teams-page" names="teams\ page" refuri="https://godotengine.org/teams"></target>
            on the Godot website. Maintainers are responsible for a given area of the
            engine. Typically this means they are the people who are given more trust to
            approve and recommend pull requests for merging.</paragraph>
        <paragraph>Even if you are not a maintainer, you can still help by reviewing code,
            providing feedback on PRs and testing PRs locally on your machine to confirm
            that they work as intended. Many of the currently active maintainers started out
            doing this before they became maintainers.</paragraph>
        <section ids="code-review-and-testing" names="code\ review\ and\ testing 代码评审与测试">
            <title>代码评审与测试</title>
            <paragraph>The following is a list of things that contributors and engine maintainers can
                do to conduct a substantive code review of a pull request.</paragraph>
            <note>
                <paragraph>If you want to conduct a code review, but can't do everything on this list,
                    say that in your review comment. For example, it is still very helpful to
                    provide comments on code, even if you can't build the pull request locally to
                    test the pull request (or vice versa). Feel free to review the code, just
                    remember to make a note at the end of your review that you have reviewed the
                    code only and have not tested the changes locally.</paragraph>
            </note>
            <section ids="confirm-that-the-problem-exists" names="1.\ confirm\ that\ the\ problem\ exists 1、确认存在问题">
                <title>1、确认存在问题</title>
                <paragraph>PRs need to solve problems and problems need to be documented. Make sure that
                    the pull request links and closes (or at least addresses) a bug or a proposal.
                    If it doesn't, consider asking the contributor to update the opening message of
                    the PR to explain the problem that the PR aims to solve in more detail.</paragraph>
                <note>
                    <paragraph>It should be clear _why_ a pull request is needed before it is merged. This
                        assists reviewers in determining whether a PR does what it says it does and it
                        helps contributors in the future understand why the code is the way it is.</paragraph>
                </note>
            </section>
            <section ids="test-the-pr-and-look-for-regressions" names="2.\ test\ the\ pr\ and\ look\ for\ regressions 2、测试\ pr\ 并查找\ regression">
                <title>2、测试 PR 并查找 Regression</title>
                <paragraph>While strict code review and CI help to ensure that all pull requests work as
                    intended, mistakes happen and sometimes contributors push code that creates a
                    problem in addition to solving a problem. Maintainers will avoid merging code
                    that contains a regression even if it solves the problem as intended.</paragraph>
                <paragraph>When reviewing a pull request, ensure that the PR does what it says it does
                    (i.e. fixes the linked bug or implements the new feature) and nothing outside of
                    the PR target area is broken by the change. You can do this by running the
                    editor and trying out some common functions of the editor (adding objects to a
                    scene, running GDScript, opening and closing menus etc.). Also, while reviewing
                    the code, look for suspicious changes in other parts of the engine. Sometimes
                    during rebasing changes slip through that contributors are not aware of.</paragraph>
            </section>
            <section ids="do-a-code-review" names="3.\ do\ a\ code\ review 3、进行代码评审">
                <title>3、进行代码评审</title>
                <paragraph>Code reviews are usually done by people who are already experienced in a given
                    area. They may be able to provide ideas to make code faster, more organized, or
                    more idiomatic. But, even if you are not very experienced, you may want to
                    conduct a code review to provide feedback within the scope of what you are
                    comfortable reviewing. Doing so is valuable for the area maintainer (as a second
                    set of eyes on a problem is always helpful) and it is also helpful for you as it
                    will help you get more familiar with that area of code and will expose you to
                    how other people solve problems. In fact, reviewing the code of experienced
                    engine maintainers is a great way to get to know the codebase.</paragraph>
                <paragraph>评审代码时，可以对这些内容进行检查：</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph><strong>代码仅涉及 PR（和提交信息）中提及的领域。</strong></paragraph>
                        <paragraph>It can be tempting to fix random things in the code, as you see them. However,
                            this can quickly make a pull request difficult to review and can make it hard
                            to dig through in the commit history. Small touch-ups next to the related area
                            are alright, but often bugs that you can find along the way are better fixed
                            in their own PRs.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><strong>代码正确使用了 Godot 自己的 API 和模式。</strong></paragraph>
                        <paragraph>Consistency is very important, and a solution that already exists in the
                            codebase is preferable to an ad-hoc solution.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><strong>修改影响核心区域吗？</strong></paragraph>
                        <paragraph>Sometimes a PR that is supposed to solve a local problem can have a
                            far-reaching effect way outside of its scope. Usually it is best to keep code
                            changes local to where the problem arises. If you think that the solution
                            requires changes outside the scope of the problem, it is usually best to seek
                            the opinion of a team leader who may have another idea for how to solve the
                            problem.</paragraph>
                    </list_item>
                </bullet_list>
            </section>
            <section ids="iterate-with-the-contributor-and-improve-the-pr" names="4.\ iterate\ with\ the\ contributor\ and\ improve\ the\ pr 4、与贡献者迭代改进\ pr">
                <title>4、与贡献者迭代改进 PR</title>
                <paragraph>Maintainers should provide feedback and suggestions for improvement if they spot
                    things in the code that they would like changed. Preferably, suggestions should
                    come in order of importance: first, address overall code design and the approach
                    to solving the problem, then make sure the code is complying with the engine's
                    best practices, and lastly, do the <reference internal="True" refid="doc-code-style-review"><inline classes="std std-ref">code style review</inline></reference>.</paragraph>
                <note>
                    <paragraph><strong>Communicate barriers to merging early in the review process.</strong></paragraph>
                    <paragraph>If the PR has clear blockers or will likely not get merged for whatever other
                        reason, that fact should be communicated as early and clearly as possible. We
                        want to avoid stringing people along because it feels bad to say "sorry, no".</paragraph>
                </note>
                <paragraph>As you review pull requests, keep the Godot <reference name="Code of Conduct" refuri="https://godotengine.org/code-of-conduct">Code of Conduct</reference><target ids="code-of-conduct" names="code\ of\ conduct" refuri="https://godotengine.org/code-of-conduct"></target> in mind. Especially the following:</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>Politeness is expected at all times. Be kind and courteous.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Always assume positive intent from others.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Feedback is always welcome but keep your criticism constructive.</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>与贡献者迭代拉取请求时，请避免以下情况：</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph><strong>不必要的多次评审。</strong></paragraph>
                        <paragraph>In other words, review the full PR at once and avoid coming back endless times
                            to point out issues that you could have noted in the first review. Of course,
                            this can't always be avoided, but we should try to catch everything at once.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><strong>过于吹毛求疵。</strong></paragraph>
                        <paragraph>Code quality can be flexible depending on the area of the engine you are
                            working in. In general, our standard for code quality is much higher in core
                            areas and in performance-sensitive areas than it is in editor code for
                            example.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><strong>扩大拉取请求的范围。</strong></paragraph>
                        <paragraph>Providing context or related/similar issues or proposals that may be fixed
                            similarly can be helpful, but adding a "may as well fix that thing over there
                            as well while at it" or "could we add to this as well?" isn't always fair to
                            the contributor. Use your judgement when deciding whether additional fixes are
                            within scope, but try to keep the scope as close to the original pull request
                            as possible.</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>And ultimately, don't feel pressured to deal with the PR all alone. Feel free to
                    ask for a helping hand on the <reference name="Godot Contributors Chat" refuri="https://chat.godotengine.org">Godot Contributors Chat</reference><target ids="godot-contributors-chat" names="godot\ contributors\ chat" refuri="https://chat.godotengine.org"></target>, in the appropriate channel or in #general.
                    Other teams may already be tagged for review, so you can also wait or ask for
                    their assistance.</paragraph>
            </section>
            <section ids="approve-the-pull-request" names="5.\ approve\ the\ pull\ request 5、批准拉取请求">
                <title>5、批准拉取请求</title>
                <paragraph>After reviewing the code, if you think that the code is ready to be merged into
                    the engine, then go ahead and "approve" it. Make sure to also comment and
                    specify the nature of your review (i.e. say whether you ran the code locally,
                    whether you reviewed for style as well as correctness, etc.). Even if you are
                    not an engine maintainer, approving a pull request signals to others that the
                    code is good and likely solves the problem the PR says it does. Approving a pull
                    request as a non-engine maintainer does not guarantee that the code will be
                    merged, other people will still review it, so don't be shy.</paragraph>
                <target refid="doc-code-style-review"></target>
            </section>
        </section>
        <section ids="code-style-review doc-code-style-review" names="code\ style\ review 代码风格评审 doc_code_style_review">
            <title>代码风格评审</title>
            <paragraph>Generally speaking, we aim to conduct a code review before a style/clarity
                review as contributors typically want to know if their general approach is
                acceptable before putting in the effort to make nitpicky changes to style. In
                other words, maintainers shouldn't ask contributors to change the style of code
                that may need to be rewritten in subsequent reviews. Similarly, maintainers
                should avoid asking for contributors to rebase PRs if the PR has not been
                reviewed.</paragraph>
            <paragraph>That being said, not everyone feels confident enough to provide a review on code
                correctness, in that case, providing comments on code style and clarity ahead of
                a more substantive code review is totally appropriate and more than welcome.</paragraph>
            <paragraph>In practice the code style review can be done as part of the substantive code
                review. The important thing is that both the substantive code and the code style
                need to be reviewed and considered before a pull request is merged.</paragraph>
            <paragraph>When reviewing code style pay particular attention to ensuring that the pull
                request follows the <reference internal="True" refuri="../development/code_style_guidelines#doc-code-style-guidelines"><inline classes="std std-ref">代码风格规范</inline></reference>. While <literal>clang-format</literal> and
                various CI checks can catch a lot of inconsistencies, they are far from perfect
                and are unable to detect some issues. For example, you should check that:</paragraph>
            <block_quote>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>The style of header includes is respected.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Identifiers use <literal>snake_case</literal> and follow our naming conventions.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Method parameters start with <literal>p_*</literal> or <literal>r_*</literal> (if they are used to return
                            a value).</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Braces are used appropriately, even for one-liner conditionals.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Code is properly spaced (exactly one empty line between methods, no
                            unnecessary empty lines inside of method bodies).</paragraph>
                    </list_item>
                </bullet_list>
            </block_quote>
            <note>
                <paragraph>This list is not complete and doesn't aim to be complete. Refer to
                    the linked style guide document for a complete set of rules. Keep
                    in mind that <literal>clang-format</literal> may not catch things you hope it would,
                    so pay attention and try to build a sense of what exactly it can and
                    cannot detect.</paragraph>
            </note>
        </section>
        <section ids="merging-pull-requests" names="merging\ pull\ requests 合并拉取请求">
            <title>合并拉取请求</title>
            <paragraph>In general, pull requests should only be merged by members of the production
                team or team leaders for pull requests in their area of the engine. For example,
                the networking team leader could merge a networking pull request that doesn't
                substantially change non-networking sections of code.</paragraph>
            <paragraph>In practice it is best to wait for a member of the production team to merge the
                pull request as they keep a close eye on the entire codebase and will likely
                have a better sense of what other recent/upcoming changes this pull request may
                conflict with (or any other reason that it may make sense to delay the pull
                request). Feel free to leave a comment saying that the PR should be ready to
                merge.</paragraph>
            <paragraph>The following are the steps to take before merging a pull request. The degree to
                which you adhere to these steps can be flexible for simple/straightforward pull
                requests, but they should be carefully taken for complex or risky pull requests.</paragraph>
            <paragraph>As a contributor you can help move a pull request forward by doing some of these
                steps yourself.</paragraph>
            <section ids="get-feedback-from-the-right-people-teams" names="1.\ get\ feedback\ from\ the\ right\ people/teams 1、从正确的人/团队获取反馈">
                <title>1、从正确的人/团队获取反馈</title>
                <paragraph>Production team members should ensure that the right people look at a pull
                    request before it is merged. In some cases this may require multiple people to
                    weigh in. In other cases, only one substantive approval is needed before the
                    code can be merged.</paragraph>
                <paragraph>In general, try not to merge things based on one review alone, especially if it
                    is your own. Get a second opinion from another maintainer, and make sure all the
                    teams that may be impacted have been reasonably represented by the reviewers.
                    For example, if a pull request adds to the documentation, it's often useful to
                    let the area maintainers check it for factual correctness and let documentation
                    maintainers check it for formatting, style, and grammar.</paragraph>
                <paragraph>A good rule of thumb is that at least one subject matter expert should have
                    approved the pull request for correctness, and at least one other maintainer
                    should have approved the pull request for code style. Either of those people
                    could be the person merging the pull request.</paragraph>
                <paragraph>Make sure that the reviews and approvals were left by people competent in that
                    specific engine area. It is possible that even a long-standing member of the
                    Godot organization left a review without having the relevant expertise.</paragraph>
                <note>
                    <paragraph>An easy way to find PRs that may be ready for merging is filtering by
                        approved PRs and sorting by recently updated. For example, in the main Godot
                        repository, you can use <reference name="this link" refuri="https://github.com/godotengine/godot/pulls?q=is%3Apr+is%3Aopen+review%3Aapproved+sort%3Aupdated-desc">this link</reference><target ids="this-link" names="this\ link" refuri="https://github.com/godotengine/godot/pulls?q=is%3Apr+is%3Aopen+review%3Aapproved+sort%3Aupdated-desc"></target>.</paragraph>
                </note>
            </section>
            <section ids="get-feedback-from-the-community" names="2.\ get\ feedback\ from\ the\ community 2、从社区获取反馈">
                <title>2、从社区获取反馈</title>
                <paragraph>If a pull request is having trouble attracting reviewers, you may need to reach
                    out more broadly to ask for help reviewing. Consider asking:</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>the person who reported the bug if the pull request fixes the bug for them,</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>contributors who have recently edited that file if they could take a look, or</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>a more experienced maintainer from another area if they could provide feedback.</paragraph>
                    </list_item>
                </bullet_list>
            </section>
            <section ids="git-checklist" names="3.\ git\ checklist 3、git\ 注意事项">
                <title>3、Git 注意事项</title>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph><strong>确保 PR 中只有一个提交。</strong></paragraph>
                        <paragraph>When each commit is self-contained and could be used to build a clean and
                            working version of the engine, it may be okay to merge a pull request with
                            multiple commits, but in general, we require that all pull requests only have
                            one commit. This helps us keep the Git history clean.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><strong>评审过程中作出的修改必须 Squash 到主提交中。</strong></paragraph>
                        <paragraph>For multi-commit PRs check that those fixes are amended in the relevant
                            commits, and are not just applied on top of everything.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><strong>确保 PR 没有合并冲突。</strong></paragraph>
                        <paragraph>Contributors may need to rebase their changes on top of the relevant branch
                            (e.g. <literal>master</literal> or <literal>3.x</literal>) and manually fix merge conflicts. Even if there
                            are no merge conflicts, contributors may need to rebase especially old PRs as
                            the GitHub conflict checker may not catch all conflicts, or the CI may have
                            changed since it was originally run.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><strong>检查正确的提交归属。</strong></paragraph>
                        <paragraph>If a contributor uses an author signature that is not listed in their GitHub
                            account, GitHub won't link the merged pull request to their account. This
                            keeps them from getting proper credit in the GitHub history and makes them
                            appear like a new contributor on the GitHub UI even after several
                            contributions.</paragraph>
                        <paragraph>Ultimately, it's up to the user if they want to fix it, but they can do so by
                            authoring the Git commit with the same email they use for their GitHub
                            account, or by adding the email they used for the Git commit to their GitHub
                            profile.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><strong>检查正确的提交消息。</strong></paragraph>
                        <paragraph>While we don't have a very strict ruleset for commit messages, we still
                            require them to be short yet descriptive and use proper English. As a
                            maintainer you've probably written them enough times to know how to make one,
                            but for a general template think about <emphasis>"Fix &lt;issue&gt; in &lt;part of codebase&gt;"</emphasis>.
                            For a more detailed recommendation see the <reference name="contributing.md" refuri="https://github.com/godotengine/godot/blob/master/CONTRIBUTING.md#format-your-commit-messages-with-readability-in-mind">contributing.md</reference><target ids="contributing-md" names="contributing.md" refuri="https://github.com/godotengine/godot/blob/master/CONTRIBUTING.md#format-your-commit-messages-with-readability-in-mind"></target>
                            page in the main Godot repository.</paragraph>
                    </list_item>
                </bullet_list>
            </section>
            <section ids="github-checklist" names="4.\ github\ checklist 4、github\ 注意事项">
                <title>4、GitHub 注意事项</title>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph><strong>确认 PR 的目标分支。</strong></paragraph>
                        <paragraph>Most Godot development happens around in the <literal>master</literal> branch. Therefore most
                            pull requests must be made against it. From there pull requests can then be
                            backported to other branches. Be wary of people making PRs on the version they
                            are using (e.g, <literal>3.3</literal>) and guide them to make a change against a
                            higher-order branch (e.g. <literal>3.x</literal>). If the change is not applicable for the
                            <literal>master</literal> branch, the initial PR can be made against the current maintenance
                            branch, such as <literal>3.x</literal>. It's okay for people to make multiple PRs for each
                            target branch, especially if the changes cannot be easily backported.
                            Cherry-picking is also an option, if possible. Use the appropriate labels if
                            the PR can be cherrypicked (e.g. <literal>cherrypick:3.x</literal>).</paragraph>
                    </list_item>
                </bullet_list>
                <note>
                    <paragraph>It is possible to change the target branch of the PR, that has already been
                        submitted, but be aware of the consequences. As it cannot be synchronized
                        with the push, the target branch change will inevitable tag the entire list
                        of maintainers for review. It may also render the CI incapable of running
                        properly. A push should help with that, but if nothing else, recommend
                        opening a new, fresh PR.</paragraph>
                </note>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph><strong>确保分配了合适的里程碑。</strong></paragraph>
                        <paragraph>This will make it more obvious which version would include the submitted
                            changes, should the pull request be merged now. Note, that the milestone is
                            not a binding contract and does not guarantee that this version is definitely
                            going to include the PR. If the pull request is not merged before the version
                            is released, the milestone will be moved (and the PR itself may require a
                            target branch change).</paragraph>
                        <paragraph>Similarly, when merging a PR with a higher milestone than the current version,
                            or a "wildcard" milestone (e.g. "4.x"), ensure to update the milestone to the
                            current version.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><strong>确保 PR 消息的开头包含“Closes #...”或“Fixes #...”咒语。</strong></paragraph>
                        <paragraph>These link the PR and the referenced issue together and allow GitHub to
                            auto-close the latter when you merge the changes. Note, that this only works
                            for the PRs that target the <literal>master</literal> branch. For others you need to pay
                            attention and close the related issues manually. Do it with <emphasis>"Fixed by #..."</emphasis>
                            or <emphasis>"Resolved by #..."</emphasis> comment to clearly indicate the act for future
                            contributors.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><strong>为 PR 所关闭的 Issue 添加最近的相关里程碑。</strong></paragraph>
                        <paragraph>In other words, if the PR is targeting the <literal>master</literal> branch, but is then also
                            cherrypicked for <literal>3.x</literal>, the next <literal>3.x</literal> release would be the appropriate
                            milestone for the closed issue.</paragraph>
                    </list_item>
                </bullet_list>
            </section>
            <section ids="merge-the-pull-request" names="5.\ merge\ the\ pull\ request 5、合并拉取请求">
                <title>5、合并拉取请求</title>
                <paragraph>If it is appropriate for you to be merging a pull request (i.e. you are on the
                    production team or you are the team leader for that area), you are confident
                    that the pull request has been sufficiently reviewed, and once you carry out
                    these steps you can go ahead and merge the pull request.</paragraph>
                <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
            </section>
        </section>
    </section>
</document>
