<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/tutorials/best_practices/godot_notifications.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-godot-notifications"></target>
    <section ids="godot-notifications doc-godot-notifications" names="godot\ notifications godot\ 通知 doc_godot_notifications">
        <title>Godot 通知</title>
        <paragraph>Godot 中的每个对象都实现了 <reference internal="True" refuri="../../classes/class_object#class-object-private-method-notification"><inline classes="std std-ref">_notification</inline></reference> 方法。其目的是允许对象响应可能与之相关的各种引擎级回调。例如，如果引擎告诉 <reference internal="True" refuri="../../classes/class_canvasitem#class-canvasitem"><inline classes="std std-ref">CanvasItem</inline></reference> 去“绘制”，则它将调用 <literal>_notification(NOTIFICATION_DRAW)</literal>。</paragraph>
        <paragraph>在所有这些通知之中，有很多类似“绘制”这样经常需要在脚本中去覆盖的通知，多到 Godot 要提供专用函数的地步：</paragraph>
        <bullet_list bullet="-">
            <list_item>
                <paragraph><literal>_ready()</literal>: <literal>NOTIFICATION_READY</literal></paragraph>
            </list_item>
            <list_item>
                <paragraph><literal>_enter_tree()</literal>: <literal>NOTIFICATION_ENTER_TREE</literal></paragraph>
            </list_item>
            <list_item>
                <paragraph><literal>_exit_tree()</literal>: <literal>NOTIFICATION_EXIT_TREE</literal></paragraph>
            </list_item>
            <list_item>
                <paragraph><literal>_process(delta)</literal>: <literal>NOTIFICATION_PROCESS</literal></paragraph>
            </list_item>
            <list_item>
                <paragraph><literal>_physics_process(delta)</literal>: <literal>NOTIFICATION_PHYSICS_PROCESS</literal></paragraph>
            </list_item>
            <list_item>
                <paragraph><literal>_draw()</literal>: <literal>NOTIFICATION_DRAW</literal></paragraph>
            </list_item>
        </bullet_list>
        <paragraph>用户可能<emphasis>不会</emphasis>意识到 Node 之外的类型也有通知，例如：</paragraph>
        <bullet_list bullet="-">
            <list_item>
                <paragraph><reference internal="True" refuri="../../classes/class_object#class-object-constant-notification-postinitialize"><inline classes="std std-ref">Object::NOTIFICATION_POSTINITIALIZE</inline></reference>：在对象初始化期间触发的回调。脚本无法访问。</paragraph>
            </list_item>
            <list_item>
                <paragraph><reference internal="True" refuri="../../classes/class_object#class-object-constant-notification-predelete"><inline classes="std std-ref">Object::NOTIFICATION_PREDELETE</inline></reference>：在引擎删除 Object 之前触发的回调，即析构函数。</paragraph>
            </list_item>
        </bullet_list>
        <paragraph>并且，在节点中也有很多很有用的回调，但是这些回调不存在专门的方法。</paragraph>
        <bullet_list bullet="-">
            <list_item>
                <paragraph><reference internal="True" refuri="../../classes/class_node#class-node-constant-notification-parented"><inline classes="std std-ref">Node::NOTIFICATION_PARENTED</inline></reference>: 将子节点添加到另一个节点时，会触发此回调。</paragraph>
            </list_item>
            <list_item>
                <paragraph><reference internal="True" refuri="../../classes/class_node#class-node-constant-notification-unparented"><inline classes="std std-ref">Node::NOTIFICATION_UNPARENTED</inline></reference>: 将子节点从另一个节点下删除时，会触发此回调。</paragraph>
            </list_item>
        </bullet_list>
        <paragraph>你可以在通用的 <literal>_notification()</literal> 方法中访问所有这些自定义通知。</paragraph>
        <note>
            <paragraph>文档中被标记为“virtual”的方法（即虚方法）可以被脚本覆盖重写。</paragraph>
            <paragraph>一个经典的例子是 <literal>Object</literal> 中的 <reference internal="True" refuri="../../classes/class_object#class-object-private-method-init"><inline classes="std std-ref">_init</inline></reference> 方法。虽然它没有等效的 <literal>NOTIFICATION_*</literal> 通知，但是引擎仍然会调用该方法。大多数语言（C#除外）都将其用作构造函数。</paragraph>
        </note>
        <paragraph>所以说，应该在哪些情况下使用这些通知或虚函数呢？</paragraph>
        <section ids="process-vs-physics-process-vs-input" names="_process\ vs.\ _physics_process\ vs.\ *_input">
            <title>_process vs. _physics_process vs. *_input</title>
            <paragraph>当需要使用“依赖于帧速率的 delta 时间增量”时，请使用 <literal>_process</literal> 。如果需要尽可能频繁地更新对象数据，也应该在这里处理。频繁执行的逻辑检查和数据缓存操作，大多数都在这里执行。但也需要注意执行频率，如果不需要每帧都执行，则可以选择用定时器循环来替代。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve"># Allows for recurring operations that don't trigger script logic
# every frame (or even every fixed frame).
func _ready():
    var timer = Timer.new()
    timer.autostart = true
    timer.wait_time = 0.5
    add_child(timer)
    timer.timeout.connect(func():
        print("This block runs every 0.5 seconds")
    )</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">using Godot;

public partial class MyNode : Node
{
    // Allows for recurring operations that don't trigger script logic
    // every frame (or even every fixed frame).
    public override void _Ready()
    {
        var timer = new Timer();
        timer.Autostart = true;
        timer.WaitTime = 0.5;
        AddChild(timer);
        timer.Timeout += () =&gt; GD.Print("This block runs every 0.5 seconds");
    }
}</literal_block>
                </div>
            </container>
            <paragraph>当需要与帧速率无关的时间增量时，请使用 <literal>_physics_process</literal> 。如果代码需要随着时间的推移进行一致的更新，不管时间推进速度是快还是慢，那么就应该在这里执行代码。频繁执行的运动学和对象变换操作，应在此处执行。</paragraph>
            <paragraph>为了获得最佳性能，应尽可能避免在这些回调期间进行输入检查。 <literal>_process</literal> 和 <literal>_physics_process</literal> 每次都会触发（默认情况下这些更新回调不会 “休眠”）。相反， <literal>*_input</literal> 回调仅在引擎实际检测到输入的帧上触发。</paragraph>
            <paragraph>在 input 回调中同样可以检查输入动作。如果要使用增量时间，则可以使用相关的增量时间获取方法来获取。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-1-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-1-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-1-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve"># Called every frame, even when the engine detects no input.
func _process(delta):
    if Input.is_action_just_pressed("ui_select"):
        print(delta)

# Called during every input event.
func _unhandled_input(event):
    match event.get_class():
        "InputEventKey":
            if Input.is_action_just_pressed("ui_accept"):
                print(get_process_delta_time())</literal_block>
                </div>
                <div aria-labelledby="tab-1-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-1-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">using Godot;

public partial class MyNode : Node
{

    // Called every frame, even when the engine detects no input.
    public void _Process(double delta)
    {
        if (Input.IsActionJustPressed("ui_select"))
            GD.Print(delta);
    }

    // Called during every input event. Equally true for _input().
    public void _UnhandledInput(InputEvent @event)
    {
        switch (@event)
        {
            case InputEventKey:
                if (Input.IsActionJustPressed("ui_accept"))
                    GD.Print(GetProcessDeltaTime());
                break;
        }
    }

}</literal_block>
                </div>
            </container>
        </section>
        <section ids="init-vs-initialization-vs-export" names="_init\ vs.\ initialization\ vs.\ export _init\ vs.\ 初始化\ vs.\ 导出">
            <title>_init vs. 初始化 vs. 导出</title>
            <paragraph>如果脚本初始化它自己的没有场景的节点子树，则该代码将会在 <literal>_init()</literal> 中执行。其他属性或独立于 <literal>SceneTree</literal> 的初始化也应在此处运行。</paragraph>
            <note>
                <paragraph>与 GDScript 的 _init() 方法等效的 C# 方法是构造函数。</paragraph>
            </note>
            <paragraph><literal>_init()</literal> 在 <literal>_enter_tree()</literal> 或 <literal>_ready()</literal> 之前触发，但在脚本创建并初始化其属性之后。实例化场景时，属性值将按照以下顺序设置：</paragraph>
            <enumerated_list enumtype="arabic" prefix="" suffix=".">
                <list_item>
                    <paragraph><strong>初始值赋值：</strong>一个属性被赋值为它的显式默认值，若无指定，则赋予缺省值。如果存在setter函数，它并不会被使用。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><strong>``_init()`` 赋值:</strong> 某个属性的值被任何在``_init()``中的赋值操作导致变更时，触发其setter函数。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><strong>导出值赋值:</strong> 一个导出属性的值如再次因Inspector中的任何设值操作导致变更，触发其setter函数。</paragraph>
                </list_item>
            </enumerated_list>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-2-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-2-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-2-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve"># test is initialized to "one", without triggering the setter.
@export var test: String = "one":
    set(value):
        test = value + "!"

func _init():
    # Triggers the setter, changing test's value from "one" to "two!".
    test = "two"

# If someone sets test to "three" from the Inspector, it would trigger
# the setter, changing test's value from "two!" to "three!".</literal_block>
                </div>
                <div aria-labelledby="tab-2-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-2-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">using Godot;

public partial class MyNode : Node
{
    private string _test = "one";

    [Export]
    public string Test
    {
        get { return _test; }
        set { _test = $"{value}!"; }
    }

    public MyNode()
    {
        // Triggers the setter, changing _test's value from "one" to "two!".
        Test = "two";
    }

    // If someone sets Test to "three" in the Inspector, it would trigger
    // the setter, changing _test's value from "two!" to "three!".
}</literal_block>
                </div>
            </container>
            <paragraph>因此，实例化一个脚本而非场景，将同时影响初始化 <emphasis>和</emphasis> 引擎调用setter函数的次数。</paragraph>
        </section>
        <section ids="ready-vs-enter-tree-vs-notification-parented" names="_ready\ vs.\ _enter_tree\ vs.\ notification_parented _ready、_enter_tree、notification_parented对比">
            <title>_ready、_enter_tree、NOTIFICATION_PARENTED对比</title>
            <paragraph>首次实例化一个场景并添加到场景树时，Godot将实例化节点（调用 <literal>_init</literal>）为树，同时自上而下地调用 <literal>_enter_tree</literal>。当树构建完成后，再自下而上地调用 <literal>_ready</literal>，最终反向回到树的顶点。</paragraph>
            <paragraph>当实例化脚本或独立的场景时，节点不会在创建时被添加到 SceneTree 中，所以未触发 <literal>_enter_tree</literal> 回调。而只有 <literal>_init</literal> 调用发生。当场景被添加到 SceneTree 时，才会调用 <literal>_enter_tree</literal> 和 <literal>_ready</literal> 。</paragraph>
            <paragraph>如果需要触发作为节点设置父级到另一个节点而发生的行为, 无论它是否作为在主要/活动场景中的部分发生, 都可以使用 <reference internal="True" refuri="../../classes/class_node#class-node-constant-notification-parented"><inline classes="std std-ref">PARENTED</inline></reference> 通知. 例如, 这有一个将节点方法连接到其父节点上自定义信号, 而不会失败的代码段。对可能在运行时创建并以数据为中心的节点很有用。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-3-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-3-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-3-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-3-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-3-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-3-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">extends Node

var parent_cache

func connection_check():
    return parent_cache.has_user_signal("interacted_with")

func _notification(what):
    match what:
        NOTIFICATION_PARENTED:
            parent_cache = get_parent()
            if connection_check():
                parent_cache.interacted_with.connect(_on_parent_interacted_with)
        NOTIFICATION_UNPARENTED:
            if connection_check():
                parent_cache.interacted_with.disconnect(_on_parent_interacted_with)

func _on_parent_interacted_with():
    print("I'm reacting to my parent's interaction!")</literal_block>
                </div>
                <div aria-labelledby="tab-3-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-3-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">using Godot;

public partial class MyNode : Node
{
    private Node _parentCache;

    public void ConnectionCheck()
    {
        return _parentCache.HasUserSignal("InteractedWith");
    }

    public void _Notification(int what)
    {
        switch (what)
        {
            case NotificationParented:
                _parentCache = GetParent();
                if (ConnectionCheck())
                {
                    _parentCache.Connect("InteractedWith", Callable.From(OnParentInteractedWith));
                }
                break;
            case NotificationUnparented:
                if (ConnectionCheck())
                {
                    _parentCache.Disconnect("InteractedWith", Callable.From(OnParentInteractedWith));
                }
                break;
        }
    }

    private void OnParentInteractedWith()
    {
        GD.Print("I'm reacting to my parent's interaction!");
    }
}</literal_block>
                </div>
            </container>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
