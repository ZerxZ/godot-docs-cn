<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/tutorials/best_practices/version_control_systems.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-version-control-systems"></target>
    <section ids="version-control-systems doc-version-control-systems" names="version\ control\ systems 版本控制系统 doc_version_control_systems">
        <title>版本控制系统</title>
        <section ids="introduction" names="introduction 前言">
            <title>前言</title>
            <paragraph>Godot 的目标是做到 VCS 友好，生成的文件大多可读、可合并。</paragraph>
        </section>
        <section ids="version-control-plugins" names="version\ control\ plugins 版本控制插件">
            <title>版本控制插件</title>
            <paragraph>Godot 旨在对版本控制系统（Version Control System，VCS）友好，并尽量生成可读且可合并的文件。Godot 支持通过插件在编辑器本身中使用 VCS。可以在编辑器中的<strong>项目&gt; 版本控制</strong>下设置或关闭 VCS。</paragraph>
            <paragraph>截至 2023 年 7 月，尚且只有一个 Git 插件可用，但社区可能会创建其他的 VCS 插件。</paragraph>
            <section ids="official-git-plugin" names="official\ git\ plugin 官方\ git\ 插件">
                <title>官方 Git 插件</title>
                <paragraph>有一个官方插件可以让你在编辑器中使用 Git。你可以在<reference name="GitHub" refuri="https://github.com/godotengine/godot-git-plugin/releases">GitHub</reference>找到最新的版本。</paragraph>
                <paragraph>最新的更新、文档和源代码可以在Godot iOS插件库找到 <reference name="Godot iOS plugins repository" refuri="https://github.com/godotengine/godot-ios-plugins">Godot iOS plugins repository</reference><target ids="godot-ios-plugins-repository" names="godot\ ios\ plugins\ repository" refuri="https://github.com/godotengine/godot-ios-plugins"></target>。</paragraph>
            </section>
        </section>
        <section ids="files-to-exclude-from-vcs" names="files\ to\ exclude\ from\ vcs 从\ vcs\ 中排除的文件">
            <title>从 VCS 中排除的文件</title>
            <note>
                <paragraph>这里列出了 Godot 4.1 及更高版本中应从版本控制中被忽略的文件和文件夹。</paragraph>
                <paragraph>Godot 4.0 及更低版本中的版本控制应忽略的文件夹及文件列表与 Godot 4.1 及更高版本 ** 完全 ** 不同。 这点非常重要，因为 Godot 3.x 和 4.0 可能会将敏感凭据存储在 <literal>export_presets.cfg</literal> 中，而 Godot 4.1 及更高版本不会。</paragraph>
                <paragraph>如果你正在使用 Godot 3，请查看本页说明文档的 <literal>3.5</literal> 版本。</paragraph>
            </note>
            <paragraph>当第一次在编辑器中打开项目时，Godot 会自动创建一些文件和文件夹。 为了避免生成的数据使版本控制仓库膨胀，你应该将它们添加到 VCS 忽略中：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><literal>. godot/</literal>：此文件夹存储各种项目缓存数据。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>*.translation</literal>：这些文件是从 CSV 文件生成的导入后的的二进制<reference internal="True" refuri="../i18n/internationalizing_games#doc-internationalizing-games"><inline classes="std std-ref">翻译</inline></reference>文件。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>你可以选择在 Godot 项目管理器创建项目时自动生成版本控制元数据。当选择 <strong>Git</strong> 选项时，将在项目根目录中创建 <literal>.gitignore</literal> 和 <literal>.gitattributes</literal> 文件：</paragraph>
            <figure align="center" ids="id1">
                <image alt="在项目管理器的“新建项目”对话框中创建版本控制元数据" candidates="{'*': 'tutorials/best_practices/img/version_control_systems_generate_metadata.webp'}" uri="tutorials/best_practices/img/version_control_systems_generate_metadata.webp"></image>
                <caption>在项目管理器的 <strong>新建项目</strong> 对话框中创建版本控制元数据</caption>
            </figure>
            <paragraph>在现有的项目中，选择编辑器顶部的 <strong>项目</strong> 菜单，然后选择 <strong>版本控制 &gt; 生成版本控制元数据</strong>。这将与在项目管理器中执行的操作一样创建相同的文件。</paragraph>
        </section>
        <section ids="working-with-git-on-windows" names="working\ with\ git\ on\ windows 在\ windows\ 上使用\ git">
            <title>在 Windows 上使用 Git</title>
            <paragraph>大多数 Git for Windows 客户端都将 <literal>core.autocrlf</literal> 设置为 <literal>true</literal>。可能会导致部分文件错误地被 Git 标记为已修改，因为这些文件的行尾被自动从 LF 转换成了 CRLF。</paragraph>
            <paragraph>最好将此选项设置为：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">git config --global core.autocrlf input</literal_block>
            <paragraph>使用项目管理器或编辑器创建版本控制元数据时，会使用 <literal>.gitattributes</literal> 文件自动强制使用 LF 行尾，因此无需更改 Git 配置。</paragraph>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
