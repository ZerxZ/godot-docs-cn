<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/tutorials/physics/collision_shapes_3d.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-collision-shapes-3d"></target>
    <section ids="collision-shapes-3d doc-collision-shapes-3d" names="collision\ shapes\ (3d) 碰撞形状（3d） doc_collision_shapes_3d">
        <title>碰撞形状（3D）</title>
        <paragraph>本指南解释：</paragraph>
        <bullet_list bullet="-">
            <list_item>
                <paragraph>Godot 3D 中可用的碰撞形状类型。</paragraph>
            </list_item>
            <list_item>
                <paragraph>使用凸形或凹形网格作为碰撞形状.</paragraph>
            </list_item>
            <list_item>
                <paragraph>有关3D碰撞的性能注意事项.</paragraph>
            </list_item>
        </bullet_list>
        <paragraph>Godot提供多种碰撞形状, 具有不同的性能和精度权衡.</paragraph>
        <paragraph>You can define the shape of a <reference internal="True" refuri="../../classes/class_physicsbody3d#class-physicsbody3d"><inline classes="std std-ref">PhysicsBody3D</inline></reference> by adding one or more
            <reference internal="True" refuri="../../classes/class_collisionshape3d#class-collisionshape3d"><inline classes="std std-ref">CollisionShape3Ds</inline></reference> as child nodes. Note that you must
            add a <reference internal="True" refuri="../../classes/class_shape3d#class-shape3d"><inline classes="std std-ref">Shape3D</inline></reference> <emphasis>resource</emphasis> to collision shape nodes in the Inspector
            dock.</paragraph>
        <note>
            <paragraph>当你将多个碰撞形状添加到一个PhysicsBody中时, 你不必担心它们会重叠, 它们不会相互 "碰撞".</paragraph>
        </note>
        <section ids="primitive-collision-shapes" names="primitive\ collision\ shapes 基本碰撞形状">
            <title>基本碰撞形状</title>
            <paragraph>Godot提供了以下基本碰撞形状类型:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../../classes/class_boxshape3d#class-boxshape3d"><inline classes="std std-ref">BoxShape3D</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../../classes/class_sphereshape3d#class-sphereshape3d"><inline classes="std std-ref">SphereShape3D</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../../classes/class_capsuleshape3d#class-capsuleshape3d"><inline classes="std std-ref">CapsuleShape3D</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../../classes/class_cylindershape3d#class-cylindershape3d"><inline classes="std std-ref">CylinderShape3D</inline></reference></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>你可以使用一个或多个原始形状来表示大多数较小物体的碰撞. 然而, 对于更复杂的物体, 如大型船舶或整个水平面, 你可能需要凸形或凹形来代替. 下面会有更多的介绍.</paragraph>
            <paragraph>建议动态对象使用原始图形（如 RigidBodies 和 KinematicBodies），因为它们的行为是可靠的，通常也能提供更好的性能。</paragraph>
        </section>
        <section ids="convex-collision-shapes" names="convex\ collision\ shapes 凸型碰撞形状">
            <title>凸型碰撞形状</title>
            <paragraph><reference internal="True" refuri="../../classes/class_convexpolygonshape3d#class-convexpolygonshape3d"><inline classes="std std-ref">Convex collision shapes</inline></reference> are a compromise
                between primitive collision shapes and concave collision shapes. They can
                represent shapes of any complexity, but with an important caveat. As their name
                implies, an individual shape can only represent a <emphasis>convex</emphasis> shape. For instance,
                a pyramid is <emphasis>convex</emphasis>, but a hollow box is <emphasis>concave</emphasis>. To define a concave object
                with a single collision shape, you need to use a concave collision shape.</paragraph>
            <paragraph>根据对象的复杂程度, 可能要通过使用多个凸形而不是一个凹形碰撞形状来获得更好的性能.Godot可以使用 <emphasis>凸分解</emphasis> 来生成与空心物体大致匹配的凸形. 请注意, 在一定数量的凸形之后, 就没有了这种性能优势, 对于大而复杂的对象, 如整个关卡, 建议使用凹形代替.</paragraph>
            <paragraph>You can generate one or several convex collision shapes from the editor by
                selecting a MeshInstance3D and using the <strong>Mesh</strong> menu at the top of the 3D
                viewport. The editor exposes two generation modes:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><strong>创建单凸碰撞同级</strong> 使用Quickhull算法, 创建一个CollisionShape碰撞形状节点, 并自动生成一个凸碰撞形状, 由于只生成单个形状, 因此提供了良好的性能, 非常适合小对象.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><strong>创建多个凸形碰撞同级</strong> 使用V-HACD算法. 创建多个CollisionShape碰撞形状节点, 每个节点都有一个凸形, 由于它能生成多个形状, 所以对于凹形物体来说, 精度更高, 但性能不佳. 对于中等复杂度的对象, 可能会比使用单个凹形碰撞形状更快.</paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section ids="concave-or-trimesh-collision-shapes" names="concave\ or\ trimesh\ collision\ shapes 凹面或三面体碰撞形状">
            <title>凹面或三面体碰撞形状</title>
            <paragraph><reference internal="True" refuri="../../classes/class_concavepolygonshape3d#class-concavepolygonshape3d"><inline classes="std std-ref">Concave collision shapes</inline></reference>, also called trimesh
                collision shapes, can take any form, from a few triangles to thousands of
                triangles. Concave shapes are the slowest option but are also the most accurate
                in Godot. <strong>You can only use concave shapes within StaticBodies.</strong> They will not
                work with CharacterBodies or RigidBodies unless the RigidBody's mode is Static.</paragraph>
            <note>
                <paragraph>即使凹形提供了最准确的 <emphasis>碰撞</emphasis>, 但触碰信息的精度可能不如基础形状.</paragraph>
            </note>
            <paragraph>当不使用网络地图进行关卡设计时, 凹形是关卡碰撞的最佳方法, 也就是说, 如果关卡有一些小细节, 可能希望将这些细节排除碰撞之外, 以保证性能和游戏体验, 要做到这一点, 可以在3D建模中建立一个简化的碰撞网格, 并让Godot为其自动生成一个碰撞形状. 下面会有更多的介绍</paragraph>
            <paragraph>请注意, 与基础形状和凸形状不同, 凹形碰撞形状没有实际的 "体积", 既可以将对象放置在形状的 <emphasis>外侧</emphasis>, 也可以放置在 <emphasis>内侧</emphasis>.</paragraph>
            <paragraph>You can generate a concave collision shape from the editor by selecting a
                MeshInstance3D and using the <strong>Mesh</strong> menu at the top of the 3D viewport. The
                editor exposes two options:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>创建三网格静态体是个方便的选择. 它创建一个包含与网格几何学匹配的凹形的静态体.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><strong>创建Trimesh(三角面)碰撞同级</strong> 创建具有与网格几何体匹配的凹面形状的CollisionShape(碰撞形状)节点.</paragraph>
                </list_item>
            </bullet_list>
            <seealso>
                <paragraph>See <reference internal="True" refuri="../assets_pipeline/importing_3d_scenes/index#doc-importing-3d-scenes"><inline classes="std std-ref">导入 3D 场景</inline></reference> for information on how to export models
                    for Godot and automatically generate collision shapes on import.</paragraph>
            </seealso>
        </section>
        <section ids="performance-caveats" names="performance\ caveats 性能方面的注意事项">
            <title>性能方面的注意事项</title>
            <paragraph>You aren't limited to a single collision shape per PhysicsBody. Still, we
                recommend keeping the number of shapes as low as possible to improve
                performance, especially for dynamic objects like RigidBodies and
                CharacterBodies. On top of that, avoid translating, rotating, or scaling
                CollisionShapes to benefit from the physics engine's internal optimizations.</paragraph>
            <paragraph>When using a single non-transformed collision shape in a StaticBody, the
                engine's <emphasis>broad phase</emphasis> algorithm can discard inactive PhysicsBodies. The <emphasis>narrow
                    phase</emphasis> will then only have to take into account the active bodies' shapes. If a
                StaticBody has many collision shapes, the broad phase will fail. The narrow
                phase, which is slower, must then perform a collision check against each shape.</paragraph>
            <paragraph>如果遇到性能问题，你可能需要在准确性方面进行权衡。大多数游戏都没有100%的精确碰撞。他们找到了一些具有创造性的方法来隐藏它，或者在正常的游戏中让它变得不被人注意到。</paragraph>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
