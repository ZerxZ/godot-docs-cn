<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/tutorials/physics/kinematic_character_2d.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-kinematic-character-2d"></target>
    <section ids="kinematic-character-2d doc-kinematic-character-2d" names="kinematic\ character\ (2d) 运动学角色（2d） doc_kinematic_character_2d">
        <title>运动学角色（2D）</title>
        <section ids="introduction" names="introduction 前言">
            <title>前言</title>
            <paragraph>是的，名字听起来很奇怪。“运动学角色”是什么东西？使用这个名称的原因是物理引擎问世之处，它们被称为“动力学（Dynamics）”引擎（因为它们主要处理碰撞响应）。人们做了许多尝试，想使用动力学引擎创建角色控制器，但它并不像看起来那么容易。Godot 拥有你能找到的最好的动力学角色控制器（可以在 2d/platformer 演示中查看），但使用它需要相当高水平的技能和对物理引擎的理解（或者对试验和试错有足够的耐心）。</paragraph>
            <paragraph>像 Havok 这样的物理引擎似乎认为力学角色控制器是最好的选择，而其他物理引擎（PhysX）则更愿意推广运动学（Kinematic）的角色控制器。</paragraph>
            <paragraph>那么区别是什么呢？：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><strong>动力学角色控制器</strong>使用的是一个具有无限惯性张量的刚体。这是一个不能旋转的刚体. 物理引擎总是让物体移动和碰撞, 然后一并解决它们的碰撞. 这使得动态角色控制器能够与其他物理对象无缝交互, 就像在平台游戏演示中看到的那样. 然而, 这些互动并不总是可预测的. 碰撞可能需要多于一帧的时间来解决, 所以几个碰撞可能看起来会有很小的位移. 这些问题是可以解决的, 但需要一定的技巧.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><strong>运动学角色控制器</strong>总是假设以非碰撞状态开始，并将总是移动到非碰撞状态。如果它开始时处于碰撞状态, 将像刚体一样尝试释放自己, 但这是特例, 而不是规则. 这使得它们的控制和运动更可预测, 更容易编程. 然而, 有一个缺点, 它们不能直接与其他物理对象交互, 除非在代码中手动完成.</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>This short tutorial focuses on the kinematic character controller.
                It uses the old-school way of handling collisions, which is not
                necessarily simpler under the hood, but well hidden and presented as an API.</paragraph>
        </section>
        <section ids="physics-process" names="physics\ process 物理过程处理">
            <title>物理过程处理</title>
            <paragraph>为了管理运动物体或角色的逻辑, 总是建议使用物理过程处理, 因为它在物理步骤之前被调用并且它的执行与物理服务器同步, 它也被以被每秒相同的次数调用. 这使得物理和运动计算以比使用常规过程处理更可预测的方式工作, 如果帧速率太高或太低, 则可能具有尖峰或丢失精度.</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">extends CharacterBody2D

func _physics_process(delta):
    pass</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">using Godot;

public partial class MyCharacterBody2D : CharacterBody2D
{
    public override void _PhysicsProcess(double delta)
    {
    }
}</literal_block>
                </div>
            </container>
        </section>
        <section ids="scene-setup" names="scene\ setup 场景设置">
            <title>场景设置</title>
            <paragraph>To have something to test, here's the scene (from the tilemap tutorial):
                <reference name="kinematic_character_2d_starter.zip" refuri="https://github.com/godotengine/godot-docs-project-starters/releases/download/latest-4.x/kinematic_character_2d_starter.zip">kinematic_character_2d_starter.zip</reference><target ids="kinematic-character-2d-starter-zip" names="kinematic_character_2d_starter.zip" refuri="https://github.com/godotengine/godot-docs-project-starters/releases/download/latest-4.x/kinematic_character_2d_starter.zip"></target>.
                We'll be creating a new scene for the character. Use the robot sprite and
                create a scene like this:</paragraph>
            <image candidates="{'*': 'tutorials/physics/img/kbscene.webp'}" uri="tutorials/physics/img/kbscene.webp"></image>
            <paragraph>你会注意到, 在 "二维碰撞形状 "(CollisionShape2D)节点旁边有一个警告图标；那是因为我们还没有定义它的形状. 在" 二维碰撞形状"(CollisionShape2D)的形状属性中创建一个新的二维圆形形状(CircleShape2D). 点击 &lt;二维圆形形状&gt;(CircleShape2D)进入选项, 将半径设置为30:</paragraph>
            <image candidates="{'*': 'tutorials/physics/img/kbradius.webp'}" uri="tutorials/physics/img/kbradius.webp"></image>
            <paragraph><strong>注意: 正如之前在物理教程中提到的, 物理引擎无法处理大多数类型形状的缩放, 只有碰撞多边形, 平面和段才有效, 所以, 总是改变形状的半径等参数, 而不是缩放它. 对于运动体或刚性体或静态体本身也是如此, 因为它们的比例会影响形状的比例.</strong></paragraph>
            <paragraph>现在, 为这个角色创建一个脚本, 上面作为例子的那个脚本可以作为基础.</paragraph>
            <paragraph>最后, 实例化tilemap中的角色场景, 并使地图场景成为主场景, 因此在按下播放时运行.</paragraph>
            <image candidates="{'*': 'tutorials/physics/img/kbinstance.webp'}" uri="tutorials/physics/img/kbinstance.webp"></image>
        </section>
        <section ids="moving-the-kinematic-character" names="moving\ the\ kinematic\ character 移动动态角色">
            <title>移动动态角色</title>
            <paragraph>Go back to the character scene, and open the script, the magic begins
                now! Kinematic body will do nothing by default, but it has a
                useful function called <literal>CharacterBody2D.move_and_collide()</literal>.
                This function takes a <reference internal="True" refuri="../../classes/class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> as
                an argument, and tries to apply that motion to the kinematic body. If a
                collision happens, it stops right at the moment of the collision.</paragraph>
            <paragraph>所以, 让我们向下移动我们的精灵, 直到它撞上地板:</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-1-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-1-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-1-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">extends CharacterBody2D

func _physics_process(delta):
    move_and_collide(Vector2(0, 1)) # Move down 1 pixel per physics frame</literal_block>
                </div>
                <div aria-labelledby="tab-1-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-1-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">using Godot;

public partial class MyCharacterBody2D : CharacterBody2D
{
    public override void _PhysicsProcess(double delta)
    {
        // Move down 1 pixel per physics frame
        MoveAndCollide(new Vector2(0, 1));
    }
}</literal_block>
                </div>
            </container>
            <paragraph>结果是角色会移动, 但在击中地板时会停止. 很酷, 对吧？</paragraph>
            <paragraph>下一步将加入重力, 这样一来, 它的行为就更像一个常规的游戏角色:</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-2-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-2-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-2-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">extends CharacterBody2D

const GRAVITY = 200.0

func _physics_process(delta):
    velocity.y += delta * GRAVITY

    var motion = velocity * delta
    move_and_collide(motion)</literal_block>
                </div>
                <div aria-labelledby="tab-2-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-2-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">using Godot;

public partial class MyCharacterBody2D : CharacterBody2D
{
    private const float Gravity = 200.0f;

    public override void _PhysicsProcess(double delta)
    {
        var velocity = Velocity;
        velocity.Y += (float)delta * Gravity;
        Velocity = velocity;

        var motion = velocity * (float)delta;
        MoveAndCollide(motion);
    }
}</literal_block>
                </div>
            </container>
            <paragraph>现在人物平滑下落. 我们让它向两边行走, 在按下方向键时向左或向右. 记住, 正在使用的值(至少对于速度)单位是像素/秒.</paragraph>
            <paragraph>This adds basic support for walking when pressing left and right:</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-3-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-3-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-3-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-3-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-3-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-3-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">extends CharacterBody2D

const GRAVITY = 200.0
const WALK_SPEED = 200

func _physics_process(delta):
    velocity.y += delta * GRAVITY

    if Input.is_action_pressed("ui_left"):
        velocity.x = -WALK_SPEED
    elif Input.is_action_pressed("ui_right"):
        velocity.x =  WALK_SPEED
    else:
        velocity.x = 0

    # "move_and_slide" already takes delta time into account.
    move_and_slide()</literal_block>
                </div>
                <div aria-labelledby="tab-3-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-3-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">using Godot;

public partial class MyCharacterBody2D : CharacterBody2D
{
    private const float Gravity = 200.0f;
    private const int WalkSpeed = 200;

    public override void _PhysicsProcess(double delta)
    {
        var velocity = Velocity;

        velocity.Y += (float)delta * Gravity;

        if (Input.IsActionPressed("ui_left"))
        {
            velocity.X = -WalkSpeed;
        }
        else if (Input.IsActionPressed("ui_right"))
        {
            velocity.X = WalkSpeed;
        }
        else
        {
            velocity.X = 0;
        }

        Velocity = velocity;

        // "MoveAndSlide" already takes delta time into account.
        MoveAndSlide();
    }
}</literal_block>
                </div>
            </container>
            <paragraph>试一试.</paragraph>
            <paragraph>这是平台游戏的良好起点. 可以在随引擎分发的演示zip中找到更完整的演示, 或者在https://github.com/godotengine/godot-demo-projects/tree/master/2d/kinematic_character中找到.</paragraph>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
