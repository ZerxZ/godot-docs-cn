<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/tutorials/physics/troubleshooting_physics_issues.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-troubleshooting-physics-issues"></target>
    <section ids="troubleshooting-physics-issues doc-troubleshooting-physics-issues" names="troubleshooting\ physics\ issues 物理问题的故障排除 doc_troubleshooting_physics_issues">
        <title>物理问题的故障排除</title>
        <paragraph>When working with a physics engine, you may encounter unexpected results.</paragraph>
        <paragraph>While many of these issues can be resolved through configuration, some of them
            are the result of engine bugs. For known issues related to the physics engine,
            see
            <reference name="open physics-related issues on GitHub" refuri="https://github.com/godotengine/godot/issues?q=is%3Aopen+is%3Aissue+label%3Atopic%3Aphysics">open physics-related issues on GitHub</reference>.
            Looking through <reference name="closed issues" refuri="https://github.com/godotengine/godot/issues?q=+is%3Aclosed+is%3Aissue+label%3Atopic%3Aphysics">closed issues</reference>
            can also help answer questions related to physics engine behavior.</paragraph>
        <section ids="objects-are-passing-through-each-other-at-high-speeds" names="objects\ are\ passing\ through\ each\ other\ at\ high\ speeds 高速运动的对象会互相穿透">
            <title>高速运动的对象会互相穿透</title>
            <paragraph>This is known as <emphasis>tunneling</emphasis>. Enabling <strong>Continuous CD</strong> in the RigidBody
                properties can sometimes resolve this issue. If this does not help, there are
                other solutions you can try:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>Make your static collision shapes thicker. For example, if you have a thin
                        floor that the player can't get below in some way, you can make the collider
                        thicker than the floor's visual representation.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Modify your fast-moving object's collision shape depending on its movement
                        speed. The faster the object moves, the larger the collision shape should
                        extend outside of the object to ensure it can collide with thin walls more
                        reliably.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Increase <strong>Physics Ticks Per Second</strong> in the advanced Project Settings. While
                        this has other benefits (such as more stable simulation and reduced input
                        lag), this increases CPU utilization and may not be viable for mobile/web
                        platforms. Multipliers of the default value of <literal>60</literal> (such as <literal>120</literal>, <literal>180</literal>
                        or <literal>240</literal>) should be preferred for a smooth appearance on most displays.</paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section ids="stacked-objects-are-unstable-and-wobbly" names="stacked\ objects\ are\ unstable\ and\ wobbly 堆叠的对象摇摆不定">
            <title>堆叠的对象摇摆不定</title>
            <paragraph>Despite seeming like a simple problem, stable RigidBody simulation with stacked
                objects is difficult to implement in a physics engine. This is caused by
                integrating forces going against each other. The more stacked objects are
                present, the stronger the forces will be against each other. This eventually
                causes the simulation to become wobbly, making the objects unable to rest on top
                of each other without moving.</paragraph>
            <paragraph>Increasing the physics simulation rate can help alleviate this issue. To do so,
                increase <strong>Physics Ticks Per Second</strong> in the advanced Project Settings. Note
                that increases CPU utilization and may not be viable for mobile/web platforms.
                Multipliers of the default value of <literal>60</literal> (such as <literal>120</literal>, <literal>180</literal> or <literal>240</literal>)
                should be preferred for a smooth appearance on most displays.</paragraph>
        </section>
        <section ids="scaled-physics-bodies-or-collision-shapes-do-not-collide-correctly" names="scaled\ physics\ bodies\ or\ collision\ shapes\ do\ not\ collide\ correctly 缩放后的物理体或碰撞形状无法正确碰撞">
            <title>缩放后的物理体或碰撞形状无法正确碰撞</title>
            <paragraph>Godot does not currently support scaling of physics bodies or collision shapes.
                As a workaround, change the collision shape's extents instead of changing its
                scale. If you want the visual representation's scale to change as well, change
                the scale of the underlying visual representation (Sprite2D, MeshInstance3D, …)
                and change the collision shape's extents separately. Make sure the collision
                shape is not a child of the visual representation in this case.</paragraph>
            <paragraph>Since resources are shared by default, you'll have to make the collision shape
                resource unique if you don't want the change to be applied to all nodes using
                the same collision shape resource in the scene. This can be done by calling
                <literal>duplicate()</literal> in a script on the collision shape resource <emphasis>before</emphasis> changing
                its size.</paragraph>
        </section>
        <section ids="thin-objects-are-wobbly-when-resting-on-the-floor" names="thin\ objects\ are\ wobbly\ when\ resting\ on\ the\ floor">
            <title>Thin objects are wobbly when resting on the floor</title>
            <paragraph>This can be due to one of two causes:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>The floor's collision shape is too thin.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>The RigidBody's collision shape is too thin.</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>In the first case, this can be alleviated by making the floor's collision shape
                thicker. For example, if you have a thin floor that the player can't get below
                in some way, you can make the collider thicker than the floor's visual
                representation.</paragraph>
            <paragraph>In the second case, this can usually only be resolved by increasing the physics
                simulation rate (as making the shape thicker would cause a disconnect between
                the RigidBody's visual representation and its collision).</paragraph>
            <paragraph>In both cases, increasing the physics simulation rate can also help alleviate
                this issue. To do so, increase <strong>Physics Ticks Per Second</strong> in the advanced
                Project Settings. Note that this increases CPU utilization and may not be viable
                for mobile/web platforms. Multipliers of the default value of <literal>60</literal> (such as
                <literal>120</literal>, <literal>180</literal> or <literal>240</literal>) should be preferred for a smooth appearance on most
                displays.</paragraph>
        </section>
        <section ids="cylinder-collision-shapes-are-unstable" names="cylinder\ collision\ shapes\ are\ unstable 圆柱碰撞形状不稳定">
            <title>圆柱碰撞形状不稳定</title>
            <paragraph>During the transition from Bullet to GodotPhysics in Godot 4, cylinder collision
                shapes had to be reimplemented from scratch. However, cylinder collision shapes
                are one of the most difficult shapes to support, which is why many other physics
                engines don't provide any support for them. There are several known bugs with
                cylinder collision shapes currently.</paragraph>
            <paragraph>We recommend using box or capsule collision shapes for characters for now. Boxes
                generally provide the best reliability, but have the downside of making the
                character take more space diagonally. Capsule collision shapes do not have this
                downside, but their shape can make precision platforming more difficult.</paragraph>
        </section>
        <section ids="vehiclebody-simulation-is-unstable-especially-at-high-speeds" names="vehiclebody\ simulation\ is\ unstable,\ especially\ at\ high\ speeds vehiclebody\ 仿真不稳定，尤其是在速度较大的时候">
            <title>VehicleBody 仿真不稳定，尤其是在速度较大的时候</title>
            <paragraph>When a physics body moves at a high speed, it travels a large distance between
                each physics step. For instance, when using the 1 unit = 1 meter convention in
                3D, a vehicle moving at 360 km/h will travel 100 units per second. With the
                default physics simulation rate of 60 Hz, the vehicle moves by ~1.67 units each
                physics tick. This means that small objects may be ignored entirely by the
                vehicle (due to tunneling), but also that the simulation has little data to work
                with in general at such a high speed.</paragraph>
            <paragraph>Fast-moving vehicles can benefit a lot from an increased physics simulation
                rate. To do so, increase <strong>Physics Ticks Per Second</strong> in the advanced Project
                Settings. Note that this increases CPU utilization and may not be viable for
                mobile/web platforms. Multipliers of the default value of <literal>60</literal> (such as
                <literal>120</literal>, <literal>180</literal> or <literal>240</literal>) should be preferred for a smooth appearance on most
                displays.</paragraph>
        </section>
        <section ids="collision-results-in-bumps-when-an-object-moves-across-tiles" names="collision\ results\ in\ bumps\ when\ an\ object\ moves\ across\ tiles">
            <title>Collision results in bumps when an object moves across tiles</title>
            <paragraph>This is a known issue in the physics engine caused by the object bumping on a
                shape's edges, even though that edge is covered by another shape. This can occur
                in both 2D and 3D.</paragraph>
            <paragraph>The best way to work around this issue is to create a "composite" collider. This
                means that instead of individual tiles having their collision, you create a
                single collision shape representing the collision for a group of tiles.
                Typically, you should split composite colliders on a per-island basis (which
                means each group of touching tiles gets its own collider).</paragraph>
            <paragraph>Using a composite collider can also improve physics simulation performance in
                certain cases. However, since the composite collision shape is much more
                complex, this may not be a net performance win in all cases.</paragraph>
        </section>
        <section ids="framerate-drops-when-an-object-touches-another-object" names="framerate\ drops\ when\ an\ object\ touches\ another\ object">
            <title>Framerate drops when an object touches another object</title>
            <paragraph>This is likely due to one of the objects using a collision shape that is too
                complex. Convex collision shapes should use a number of shapes as low as
                possible for performance reasons. When relying on Godot's automatic generation,
                it's possible that you ended up with dozens if not hundreds of shapes created
                for a single convex shape collision resource.</paragraph>
            <paragraph>In some cases, replacing a convex collider with a couple of primitive collision
                shapes (box, sphere, or capsule) can deliver better performance.</paragraph>
            <paragraph>This issue can also occur with StaticBodies that use very detailed trimesh
                (concave) collisions. In this case, use a simplified representation of the level
                geometry as a collider. Not only this will improve physics simulation
                performance significantly, but this can also improve stability by letting you
                remove small fixtures and crevices from being considered by collision.</paragraph>
        </section>
        <section ids="physics-simulation-is-unreliable-when-far-away-from-the-world-origin" names="physics\ simulation\ is\ unreliable\ when\ far\ away\ from\ the\ world\ origin">
            <title>Physics simulation is unreliable when far away from the world origin</title>
            <paragraph>This is caused by floating-point precision errors, which become more pronounced
                as the physics simulation occurs further away from the world origin. This issue
                also affects rendering, which results in wobbly camera movement when far away
                from the world origin. See <reference internal="True" refuri="large_world_coordinates#doc-large-world-coordinates"><inline classes="std std-ref">大世界坐标</inline></reference> for more
                information.</paragraph>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
