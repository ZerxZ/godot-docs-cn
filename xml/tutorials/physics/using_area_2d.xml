<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/tutorials/physics/using_area_2d.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-using-area-2d"></target>
    <section ids="using-area2d doc-using-area-2d" names="using\ area2d 使用\ area2d doc_using_area_2d">
        <title>使用 Area2D</title>
        <section ids="introduction" names="introduction 前言">
            <title>前言</title>
            <paragraph>Godot提供了许多碰撞对象来提供碰撞检测和响应. 试图决定为你的项目使用哪一个可能会让人感到困惑. 如果你了解它们各自的工作原理以及它们的优点和缺点, 你就可以避免问题并简化开发. 在本教程中, 我们将查看 <reference internal="True" refuri="../../classes/class_area2d#class-area2d"><inline classes="std std-ref">Area2D</inline></reference> 节点, 并展示一些如何使用它的例子.</paragraph>
            <note>
                <paragraph>本文假设你熟悉 Godot 中的各种物理体，否则请先阅读 <reference internal="True" refuri="physics_introduction#doc-physics-introduction"><inline classes="std std-ref">物理介绍</inline></reference> 。</paragraph>
            </note>
        </section>
        <section ids="what-is-an-area" names="what\ is\ an\ area? 什么是区域？">
            <title>什么是区域？</title>
            <paragraph>Area2D定义了二维空间的区域. 在这个空间中, 你可以检测到其他 <reference internal="True" refuri="../../classes/class_collisionobject2d#class-collisionobject2d"><inline classes="std std-ref">CollisionObject2D</inline></reference> 节点的重叠, 进入和退出. 区域(Area)还允许覆盖本地物理属性. 我们将在下面讨论这些功能中的每一个.</paragraph>
        </section>
        <section ids="area-properties" names="area\ properties area\ 的属性">
            <title>Area 的属性</title>
            <paragraph>区域有许多属性可用于自定义它们的行为.</paragraph>
            <image candidates="{'*': 'tutorials/physics/img/area2d_properties.webp'}" uri="tutorials/physics/img/area2d_properties.webp"></image>
            <paragraph>The <literal>Gravity</literal>, <literal>Linear Damp</literal>, and <literal>Angular Damp</literal> sections
                are used to configure the area's physics override behavior.
                We'll look at how to use those in the <emphasis>Area influence</emphasis> section below.</paragraph>
            <paragraph><literal>Monitoring</literal> 和 <literal>Monitorable</literal> 用于启用和禁用该区域。</paragraph>
            <paragraph>The <literal>Audio Bus</literal> section allows you to override audio in the area, for example to
                apply an audio effect when the player moves through.</paragraph>
            <paragraph>Note that Area2D extends <reference internal="True" refuri="../../classes/class_collisionobject2d#class-collisionobject2d"><inline classes="std std-ref">CollisionObject2D</inline></reference>, so it
                also provides properties inherited from that class.
                The <literal>Collision</literal> section of <literal>CollisionObject2D</literal> is where you configure the
                area's collision layer(s) and mask(s).</paragraph>
        </section>
        <section ids="overlap-detection" names="overlap\ detection 重叠检测">
            <title>重叠检测</title>
            <paragraph>也许Area2D节点最常见的用途是用于触碰和重叠检测. 当需要知道两个物体已经触碰, 但不需要物理碰撞时, 可以使用一个区域来通知.</paragraph>
            <paragraph>例如, 要做一个硬币让玩家去捡. 硬币并不是一个实心的物体, 玩家不能站在上面, 也不能推它, 只是想让它在玩家触碰它的时候消失.</paragraph>
            <paragraph>这是硬币节点的设置:</paragraph>
            <image candidates="{'*': 'tutorials/physics/img/area2d_coin_nodes.webp'}" uri="tutorials/physics/img/area2d_coin_nodes.webp"></image>
            <paragraph>To detect the overlap, we'll connect the appropriate signal on the Area2D. Which
                signal to use depends on the player's node type. If the player is another area,
                use <literal>area_entered</literal>. However, let's assume our player is a <literal>CharacterBody2D</literal>
                (and therefore a <literal>CollisionObject2D</literal> type), so we'll connect the
                <literal>body_entered</literal> signal.</paragraph>
            <note>
                <paragraph>如果熟悉使用信号, 请参阅 <reference internal="True" refuri="../../getting_started/step_by_step/signals#doc-signals"><inline classes="std std-ref">使用信号</inline></reference> 的介绍.</paragraph>
            </note>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">extends Area2D

func _on_coin_body_entered(body):
    queue_free()</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">using Godot;

public partial class Coin : Area2D
{
    private void OnCoinBodyEntered(PhysicsBody2D body)
    {
        QueueFree();
    }
}</literal_block>
                </div>
            </container>
            <paragraph>现在我们的游戏角色可以收集硬币了！</paragraph>
            <paragraph>其他一些使用实例：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>区域对于子弹和其他弹丸物体来说是非常好用, 它可以击中并造成伤害, 但不需要其他物理效果, 如弹跳.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>用敌人周围的一个大圆圈区域设定为 "探测" 半径, 当玩家在该区域外时, 敌人就无法 "看到" 玩家.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>"安保摄像头" - 在有多个摄像头的大型关卡中, 在每个摄像头上附加区域(area), 并在玩家进入时激活它们.</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>游戏中使用 Area2D 的示例请参阅 <reference internal="True" refuri="../../getting_started/first_2d_game/index#doc-your-first-2d-game"><inline classes="std std-ref">你的第一个 2D 游戏</inline></reference>。</paragraph>
        </section>
        <section ids="area-influence" names="area\ influence 区域影响">
            <title>区域影响</title>
            <paragraph>区域节点的第二个主要用途是改变物理效果。默认情况下，区域不会这样做，但你可以用 <emphasis>空间覆盖（Space Override）</emphasis> 属性启用这个功能。当区域重叠时，它们会按照 <emphasis>优先级（Priority）</emphasis> 的顺序进行处理（优先级较高的区域会被优先处理）。覆盖有四个选项:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><emphasis>合并(Combine)</emphasis> - 该区域将其数值加到目前已计算的数值上.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><emphasis>替换(Replace)</emphasis> - 该区域替换物理属性, 低优先级区域被忽略.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><emphasis>合并-替换 (Combine-Replace)</emphasis> - 该区域将其重力/阻尼值加到目前为止计算出的所有数值上(按优先顺序), 忽略任何较低优先级的区域.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><emphasis>替换-合并 (Replace-Combine)</emphasis> - 该区域替换了目前为止计算的所有重力或阻尼, 但继续计算其余区域.</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>使用这些属性, 可以创建具有多个重叠区域的复杂行为.</paragraph>
            <paragraph>可以重写的物理属性有:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><emphasis>重力(Gravity)</emphasis> - 区域内的重力强度.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><emphasis>重力方向 (Gravity Direction)</emphasis> - 此向量不需要归一化。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><emphasis>线性阻尼 (Linear Damp)</emphasis> - 物体停止移动的速度-每秒损失的线速度.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><emphasis>角度阻尼 (Angular Damp)</emphasis> - 物体停止旋转的速度-每秒损失的角速度.</paragraph>
                </list_item>
            </bullet_list>
            <section ids="point-gravity" names="point\ gravity 重力点">
                <title>重力点</title>
                <paragraph>The <literal>Gravity Point</literal> property allows you to create an "attractor". Gravity in the
                    area will be calculated towards a point, given by the <literal>Point Center</literal> property.
                    Values are relative to the Area2D, so for example using <literal>(0, 0)</literal> will attract
                    objects to the center of the area.</paragraph>
            </section>
            <section ids="examples" names="examples 示例">
                <title>示例</title>
                <paragraph>以下所附中的示例项目包含三个区域, 它们说明了物理重写.</paragraph>
                <image candidates="{'*': 'tutorials/physics/img/area2d_override.gif'}" uri="tutorials/physics/img/area2d_override.gif"></image>
                <paragraph>You can download this project here:
                    <reference name="area_2d_starter.zip" refuri="https://github.com/godotengine/godot-docs-project-starters/releases/download/latest-4.x/area_2d_starter.zip">area_2d_starter.zip</reference><target ids="area-2d-starter-zip" names="area_2d_starter.zip" refuri="https://github.com/godotengine/godot-docs-project-starters/releases/download/latest-4.x/area_2d_starter.zip"></target></paragraph>
                <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
            </section>
        </section>
    </section>
</document>
