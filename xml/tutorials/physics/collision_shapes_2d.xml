<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/tutorials/physics/collision_shapes_2d.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-collision-shapes-2d"></target>
    <section ids="collision-shapes-2d doc-collision-shapes-2d" names="collision\ shapes\ (2d) 碰撞形状（2d） doc_collision_shapes_2d">
        <title>碰撞形状（2D）</title>
        <paragraph>本指南解释：</paragraph>
        <bullet_list bullet="-">
            <list_item>
                <paragraph>The types of collision shapes available in 2D in Godot.</paragraph>
            </list_item>
            <list_item>
                <paragraph>Using an image converted to a polygon as a collision shape.</paragraph>
            </list_item>
            <list_item>
                <paragraph>Performance considerations regarding 2D collisions.</paragraph>
            </list_item>
        </bullet_list>
        <paragraph>Godot提供多种碰撞形状, 具有不同的性能和精度权衡.</paragraph>
        <paragraph>You can define the shape of a <reference internal="True" refuri="../../classes/class_physicsbody2d#class-physicsbody2d"><inline classes="std std-ref">PhysicsBody2D</inline></reference> by adding one or more
            <reference internal="True" refuri="../../classes/class_collisionshape2d#class-collisionshape2d"><inline classes="std std-ref">CollisionShape2Ds</inline></reference> or
            <reference internal="True" refuri="../../classes/class_collisionpolygon2d#class-collisionpolygon2d"><inline classes="std std-ref">CollisionPolygon2Ds</inline></reference> as child nodes.
            Note that you must add a <reference internal="True" refuri="../../classes/class_shape2d#class-shape2d"><inline classes="std std-ref">Shape2D</inline></reference> <emphasis>resource</emphasis> to collision shape
            nodes in the Inspector dock.</paragraph>
        <note>
            <paragraph>When you add multiple collision shapes to a single PhysicsBody2D, you don't
                have to worry about them overlapping. They won't "collide" with each other.</paragraph>
        </note>
        <section ids="primitive-collision-shapes" names="primitive\ collision\ shapes 基本碰撞形状">
            <title>基本碰撞形状</title>
            <paragraph>Godot提供了以下基本碰撞形状类型:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../../classes/class_rectangleshape2d#class-rectangleshape2d"><inline classes="std std-ref">RectangleShape2D</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../../classes/class_circleshape2d#class-circleshape2d"><inline classes="std std-ref">CircleShape2D</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../../classes/class_capsuleshape2d#class-capsuleshape2d"><inline classes="std std-ref">CapsuleShape2D</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../../classes/class_segmentshape2d#class-segmentshape2d"><inline classes="std std-ref">SegmentShape2D</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../../classes/class_separationrayshape2d#class-separationrayshape2d"><inline classes="std std-ref">SeparationRayShape2D</inline></reference> (designed for characters)</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../../classes/class_worldboundaryshape2d#class-worldboundaryshape2d"><inline classes="std std-ref">WorldBoundaryShape2D</inline></reference> (infinite plane)</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>你可以使用一个或多个原始形状来表示大多数较小物体的碰撞. 然而, 对于更复杂的物体, 如大型船舶或整个水平面, 你可能需要凸形或凹形来代替. 下面会有更多的介绍.</paragraph>
            <paragraph>建议动态对象使用原始图形（如 RigidBodies 和 KinematicBodies），因为它们的行为是可靠的，通常也能提供更好的性能。</paragraph>
        </section>
        <section ids="convex-collision-shapes" names="convex\ collision\ shapes 凸型碰撞形状">
            <title>凸型碰撞形状</title>
            <warning>
                <paragraph>Godot currently doesn't offer a built-in way to create 2D convex collision
                    shapes. This section is mainly here for reference purposes.</paragraph>
            </warning>
            <paragraph><reference internal="True" refuri="../../classes/class_convexpolygonshape2d#class-convexpolygonshape2d"><inline classes="std std-ref">Convex collision shapes</inline></reference> are a compromise
                between primitive collision shapes and concave collision shapes. They can
                represent shapes of any complexity, but with an important caveat. As their name
                implies, an individual shape can only represent a <emphasis>convex</emphasis> shape. For instance,
                a pyramid is <emphasis>convex</emphasis>, but a hollow box is <emphasis>concave</emphasis>. To define a concave object
                with a single collision shape, you need to use a concave collision shape.</paragraph>
            <paragraph>根据对象的复杂程度, 可能要通过使用多个凸形而不是一个凹形碰撞形状来获得更好的性能.Godot可以使用 <emphasis>凸分解</emphasis> 来生成与空心物体大致匹配的凸形. 请注意, 在一定数量的凸形之后, 就没有了这种性能优势, 对于大而复杂的对象, 如整个关卡, 建议使用凹形代替.</paragraph>
        </section>
        <section ids="concave-or-trimesh-collision-shapes" names="concave\ or\ trimesh\ collision\ shapes 凹面或三面体碰撞形状">
            <title>凹面或三面体碰撞形状</title>
            <paragraph><reference internal="True" refuri="../../classes/class_concavepolygonshape2d#class-concavepolygonshape2d"><inline classes="std std-ref">Concave collision shapes</inline></reference>, also called trimesh
                collision shapes, can take any form, from a few triangles to thousands of
                triangles. Concave shapes are the slowest option but are also the most accurate
                in Godot. <strong>You can only use concave shapes within StaticBodies.</strong> They will not
                work with CharacterBodies or RigidBodies unless the RigidBody's mode is Static.</paragraph>
            <note>
                <paragraph>即使凹形提供了最准确的 <emphasis>碰撞</emphasis>, 但触碰信息的精度可能不如基础形状.</paragraph>
            </note>
            <paragraph>When not using TileMaps for level design, concave shapes are the best approach
                for a level's collision.</paragraph>
            <paragraph>You can configure the CollisionPolygon2D node's <emphasis>build mode</emphasis> in the inspector.
                If it is set to <strong>Solids</strong> (the default), collisions will include the polygon
                and its contained area. If it is set to <strong>Segments</strong>, collisions will only
                include the polygon edges.</paragraph>
            <paragraph>You can generate a concave collision shape from the editor by selecting a Sprite2D
                and using the <strong>Sprite2D</strong> menu at the top of the 2D viewport. The Sprite2D menu
                dropdown exposes an option called <strong>Create CollisionPolygon2D Sibling</strong>.
                Once you click it, it displays a menu with 3 settings:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><strong>Simplification:</strong> Higher values will result in a less detailed shape, which
                        improves performance at the cost of accuracy.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><strong>Shrink (Pixels):</strong> Higher values will shrink the generated collision polygon
                        relative to the sprite's edges.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><strong>Grow (Pixels):</strong> Higher values will grow the generated collision polygon
                        relative to the sprite's edges. Note that setting Grow and Shrink to equal
                        values may yield different results than leaving both of them on 0.</paragraph>
                </list_item>
            </bullet_list>
            <note>
                <paragraph>If you have an image with many small details, it's recommended to create a
                    simplified version and use it to generate the collision polygon. This
                    can result in better performance and game feel, since the player won't
                    be blocked by small, decorative details.</paragraph>
                <paragraph>To use a separate image for collision polygon generation, create another
                    Sprite2D, generate a collision polygon sibling from it then remove the Sprite2D
                    node. This way, you can exclude small details from the generated collision.</paragraph>
            </note>
        </section>
        <section ids="performance-caveats" names="performance\ caveats 性能方面的注意事项">
            <title>性能方面的注意事项</title>
            <paragraph>You aren't limited to a single collision shape per PhysicsBody. Still, we
                recommend keeping the number of shapes as low as possible to improve
                performance, especially for dynamic objects like RigidBodies and
                CharacterBodies. On top of that, avoid translating, rotating, or scaling
                CollisionShapes to benefit from the physics engine's internal optimizations.</paragraph>
            <paragraph>When using a single non-transformed collision shape in a StaticBody, the
                engine's <emphasis>broad phase</emphasis> algorithm can discard inactive PhysicsBodies. The <emphasis>narrow
                    phase</emphasis> will then only have to take into account the active bodies' shapes. If a
                StaticBody has many collision shapes, the broad phase will fail. The narrow
                phase, which is slower, must then perform a collision check against each shape.</paragraph>
            <paragraph>如果遇到性能问题，你可能需要在准确性方面进行权衡。大多数游戏都没有100%的精确碰撞。他们找到了一些具有创造性的方法来隐藏它，或者在正常的游戏中让它变得不被人注意到。</paragraph>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
