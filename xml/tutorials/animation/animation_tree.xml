<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/tutorials/animation/animation_tree.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-animation-tree"></target>
    <section ids="using-animationtree doc-animation-tree" names="using\ animationtree 使用\ animationtree doc_animation_tree">
        <title>使用 AnimationTree</title>
        <section ids="introduction" names="introduction 前言">
            <title>前言</title>
            <paragraph>通过 <reference internal="True" refuri="../../classes/class_animationplayer#class-animationplayer"><inline classes="std std-ref">AnimationPlayer</inline></reference>，Godot 拥有你在所有游戏引擎中能找到的最灵活的动画系统之一。几乎可以在任何节点或资源中对任何属性进行动画处理，以及专门的变换、贝塞尔、函数调用、音频和子动画轨道，这样的能力相当独特。</paragraph>
            <paragraph>然而, 通过 <literal>AnimationPlayer</literal> 混合这些动画的支持相对有限, 只能设置固定的交叉渐变过渡时间.</paragraph>
            <paragraph><reference internal="True" refuri="../../classes/class_animationtree#class-animationtree"><inline classes="std std-ref">AnimationTree</inline></reference> 是Godot 3.1中引入的一个新节点, 用于处理更高级的变换, 它取代了旧的 <literal>AnimationTreePlayer</literal> , 同时增加了大量的功能和灵活性.</paragraph>
        </section>
        <section ids="creating-an-animationtree" names="creating\ an\ animationtree 创建动画树">
            <title>创建动画树</title>
            <paragraph>首先, 必须明确 <literal>AnimationTree</literal> 节点不包含它自己的动画. 相反, 它使用包含在 <literal>AnimationPlayer</literal> 节点中的动画. 通过这种形式, 你可以像往常一样编辑动画(或从3D场景导入动画), 然后使用这个额外节点来控制播放.</paragraph>
            <paragraph>在3D场景中经常使用 <literal>AnimationTree</literal> . 当从3D交换格式导入场景时, 它们通常自带动画(要么是多个, 要么是在导入时从一个大的动画中拆分出来). 最后, 导入的Godot场景在 <literal>AnimationPlayer</literal> 节点中包含动画.</paragraph>
            <paragraph>很少在Godot中直接使用导入的场景(它们要么实例化, 要么来自继承), 你可以将 <literal>AnimationTree</literal> 节点放置在包含导入的新场景中. 然后, 将 <literal>AnimationTree</literal> 节点指向导入场景内创建的 <literal>AnimationPlayer</literal> 节点.</paragraph>
            <paragraph>这是在 <reference name="第三人称射击游戏演示" refuri="https://github.com/godotengine/tps-demo">第三人称射击游戏演示</reference><target ids="id1" names="第三人称射击游戏演示" refuri="https://github.com/godotengine/tps-demo"></target>, 中的设置, 参考下图:</paragraph>
            <image candidates="{'*': 'tutorials/animation/img/animtree1.png'}" uri="tutorials/animation/img/animtree1.png"></image>
            <paragraph>为玩家创建了一个以 <literal>KinematicBody</literal> 为根节点的新场景，在这个场景中，已实例化原来的 <literal>.dae</literal> (Collada)文件，并创建 <literal>AnimationTree</literal> 节点。</paragraph>
        </section>
        <section ids="creating-a-tree" names="creating\ a\ tree 创建树">
            <title>创建树</title>
            <paragraph>可以在 <literal>AnimationTree</literal> 中使用三种主要节点类型:</paragraph>
            <enumerated_list enumtype="arabic" prefix="" suffix=".">
                <list_item>
                    <paragraph>动画节点，从链接的 <literal>AnimationTree</literal> 中引用动画。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>动画根节点, 用于混合子节点.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>动画混合节点，在 <literal>AnimationNodeBlendTree</literal> 中使用，通过多个输入端口进行单图混合。</paragraph>
                </list_item>
            </enumerated_list>
            <paragraph>在 <literal>AnimationTree</literal> 中设置根节点, 如下几种类型可供选择:</paragraph>
            <image candidates="{'*': 'tutorials/animation/img/animtree2.png'}" uri="tutorials/animation/img/animtree2.png"></image>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph><literal>AnimationNodeAnimation</literal>：从列表中选择一个动画并播放它. 这是最简单的根节点, 一般不直接用作根节点.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>AnimationNodeBlendTree</literal>：包含许多<emphasis>混合</emphasis>类型的节点，如调配, 混合2, 混合3, 一对一等. 这是最常用的根节点之一.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>AnimationNodeStateMachine</literal>：将多个根节点作为图中的子节点. 每个节点作为一个 <emphasis>状态</emphasis> 使用, 并提供多个函数在状态之间进行切换.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>AnimationNodeBlendSpace2D</literal>：允许在二维混合空间中放置根节点. 在二维中控制混合位置以混合多个动画.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>AnimationNodeBlendSpace1D</literal>：以上的简化版本（一维）。</paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section ids="blend-tree" names="blend\ tree 混合树">
            <title>混合树</title>
            <paragraph><literal>AnimationNodeBlendTree</literal> 可包含用于混合的根节点和常规节点。节点从菜单添加到图中：</paragraph>
            <image candidates="{'*': 'tutorials/animation/img/animtree3.webp'}" uri="tutorials/animation/img/animtree3.webp"></image>
            <paragraph>所有混合树默认都包含一个 <literal>Output</literal>（输出）节点，为了让动画播放，必须有个东西与其相连。</paragraph>
            <paragraph>测试此功能最简单的方法是直接连接一个 <literal>Animation</literal>（动画）节点：</paragraph>
            <image candidates="{'*': 'tutorials/animation/img/animtree4.png'}" uri="tutorials/animation/img/animtree4.png"></image>
            <paragraph>这会简单地回放动画. 确保 <literal>AnimationTree</literal> 节点对实际发生的事情是激活的.</paragraph>
            <paragraph>以下是可用节点的简短描述:</paragraph>
            <section ids="blend2-blend3" names="blend2\ /\ blend3 混合2/混合3">
                <title>混合2/混合3</title>
                <paragraph>这些节点将通过用户指定输入的两个或三个混合值之间进行混合:</paragraph>
                <image candidates="{'*': 'tutorials/animation/img/animtree5.gif'}" uri="tutorials/animation/img/animtree5.gif"></image>
                <paragraph>对于更复杂的混合, 建议使用混合空间.</paragraph>
                <paragraph>混合也可以使用过滤器, 也就是说, 你可以单独控制通过混合功能的轨道. 这对于动画的层叠非常有用.</paragraph>
                <image candidates="{'*': 'tutorials/animation/img/animtree6.png'}" uri="tutorials/animation/img/animtree6.png"></image>
            </section>
            <section ids="oneshot" names="oneshot">
                <title>OneShot</title>
                <paragraph>此节点将执行子动画, 并在完成后返回. 可以用于定制淡入淡出时间, 以及过滤器.</paragraph>
                <image candidates="{'*': 'tutorials/animation/img/animtree6b.gif'}" uri="tutorials/animation/img/animtree6b.gif"></image>
                <paragraph>在设置时间和改变动画播放后，播放节点会通过将其 <literal>request</literal> 值设置为 <literal>AnimationNodeOneShot.ONE_SHOT_REQUEST_NONE</literal>/ 做到在下一个进程帧自动清除请求。</paragraph>
                <container classes="sphinx-tabs" type="tab-element">
                    <div aria-label="Tabbed content" role="tablist">
                        <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                        <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                    </div>
                    <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                        <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve"># Play child animation connected to "shot" port.
animation_tree.set("parameters/OneShot/request", AnimationNodeOneShot.ONE_SHOT_REQUEST_FIRE)
# Alternative syntax (same result as above).
animation_tree["parameters/OneShot/request"] = AnimationNodeOneShot.ONE_SHOT_REQUEST_FIRE

# Abort child animation connected to "shot" port.
animation_tree.set("parameters/OneShot/request", AnimationNodeOneShot.ONE_SHOT_REQUEST_ABORT)
# Alternative syntax (same result as above).
animation_tree["parameters/OneShot/request"] = AnimationNodeOneShot.ONE_SHOT_REQUEST_ABORT

# Get current state (read-only).
animation_tree.get("parameters/OneShot/active"))
# Alternative syntax (same result as above).
animation_tree["parameters/OneShot/active"]</literal_block>
                    </div>
                    <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                        <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">// Play child animation connected to "shot" port.
animationTree.Set("parameters/OneShot/request", (int)AnimationNodeOneShot.OneShotRequest.Fire);

// Abort child animation connected to "shot" port.
animationTree.Set("parameters/OneShot/request", (int)AnimationNodeOneShot.OneShotRequest.Abort);

// Get current state (read-only).
animationTree.Get("parameters/OneShot/active");</literal_block>
                    </div>
                </container>
            </section>
            <section dupnames="时间缩放" ids="timeseek" names="timeseek">
                <title>时间缩放</title>
                <paragraph>这个节点可以用来使寻找命令发生在动画图像的任何子代上。使用这个节点类型可以从 <literal>AnimationNodeBlendTree</literal> 中的开始或某个位置播放 <literal>Animation</literal>。</paragraph>
                <paragraph>在设置时间和改变动画播放后，寻找节点通过设置其 <literal>seek_position</literal> 值为 <literal>-1.0</literal>，在下一个进程帧自动进入睡眠模式。</paragraph>
                <container classes="sphinx-tabs" type="tab-element">
                    <div aria-label="Tabbed content" role="tablist">
                        <button aria-controls="panel-1-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                        <button aria-controls="panel-1-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                    </div>
                    <div aria-labelledby="tab-1-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                        <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve"># Play child animation from the start.
animation_tree.set("parameters/TimeSeek/seek_request", 0.0)
# Alternative syntax (same result as above).
animation_tree["parameters/TimeSeek/seek_request"] = 0.0

# Play child animation from 12 second timestamp.
animation_tree.set("parameters/TimeSeek/seek_request", 12.0)
# Alternative syntax (same result as above).
animation_tree["parameters/TimeSeek/seek_request"] = 12.0</literal_block>
                    </div>
                    <div aria-labelledby="tab-1-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-1-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                        <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">// Play child animation from the start.
animationTree.Set("parameters/TimeSeek/seek_request", 0.0);

// Play child animation from 12 second timestamp.
animationTree.Set("parameters/TimeSeek/seek_request", 12.0);</literal_block>
                    </div>
                </container>
            </section>
            <section dupnames="时间缩放" ids="timescale" names="timescale">
                <title>时间缩放</title>
                <paragraph>允许通过 <title_reference>scale</title_reference> 参数缩放连接到 <title_reference>in</title_reference> 输入的动画速度（或使其反转）。 将 <title_reference>scale</title_reference> 设置为0会暂停动画。</paragraph>
            </section>
            <section ids="transition" names="transition 转换">
                <title>转换</title>
                <paragraph>非常简单的状态机（当你不想使用 <literal>StateMachine</literal> 节点时）。动画可以连接到输出，过渡时间可以指定。在设置请求和更改动画播放后，过渡节点会通过将其 <literal>transition_request</literal> 值设置为空字符串 (<literal>""</literal>)，在下一个进程帧自动清除请求。</paragraph>
                <container classes="sphinx-tabs" type="tab-element">
                    <div aria-label="Tabbed content" role="tablist">
                        <button aria-controls="panel-2-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                        <button aria-controls="panel-2-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                    </div>
                    <div aria-labelledby="tab-2-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                        <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve"># Play child animation connected to "state_2" port.
animation_tree.set("parameters/Transition/transition_request", "state_2")
# Alternative syntax (same result as above).
animation_tree["parameters/Transition/transition_request"] = "state_2"

# Get current state name (read-only).
animation_tree.get("parameters/Transition/current_state")
# Alternative syntax (same result as above).
animation_tree["parameters/Transition/current_state"]

# Get current state index (read-only).
animation_tree.get("parameters/Transition/current_index"))
# Alternative syntax (same result as above).
animation_tree["parameters/Transition/current_index"]</literal_block>
                    </div>
                    <div aria-labelledby="tab-2-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-2-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                        <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">// Play child animation connected to "state_2" port.
animationTree.Set("parameters/Transition/transition_request", "state_2");

// Get current state name (read-only).
animationTree.Get("parameters/Transition/current_state");

// Get current state index (read-only).
animationTree.Get("parameters/Transition/current_index");</literal_block>
                    </div>
                </container>
            </section>
            <section ids="blendspace2d" names="blendspace2d 二维混合空间">
                <title>二维混合空间</title>
                <paragraph><literal>BlendSpace2D</literal> 是一个在二维空间进行高级混合的节点. 将点添加到一个二维空间, 然后可以控制位置来确定混合:</paragraph>
                <image candidates="{'*': 'tutorials/animation/img/animtree7.gif'}" uri="tutorials/animation/img/animtree7.gif"></image>
                <paragraph>可以控制X和Y的范围(为方便起见, 还可以标记它们). 默认情况下, 可以在任何位置放置点(只需右键单击坐标系统或使用 <emphasis>添加点</emphasis> 按钮)将自动生成德洛内三角形.</paragraph>
                <image candidates="{'*': 'tutorials/animation/img/animtree8.gif'}" uri="tutorials/animation/img/animtree8.gif"></image>
                <paragraph>也可以通过禁用 <emphasis>自动三角形</emphasis> 选项来手动绘制三角形, 虽然基本上没必要这么做:</paragraph>
                <image candidates="{'*': 'tutorials/animation/img/animtree9.png'}" uri="tutorials/animation/img/animtree9.png"></image>
                <paragraph>最后, 可能会更改混合模式. 默认情况下, 混合是通过在最近的三角形内插点来实现的. 当处理二维动画(逐帧)时, 你可能希望切换到 <emphasis>离散</emphasis> 模式. 此外, 如果你想在离散动画之间切换时保持当前播放位置, 请使用 <emphasis>进位</emphasis> 模式. 此模式可在 <emphasis>混合</emphasis> 菜单中更改:</paragraph>
                <image candidates="{'*': 'tutorials/animation/img/animtree10.png'}" uri="tutorials/animation/img/animtree10.png"></image>
            </section>
            <section ids="blendspace1d" names="blendspace1d 一维混合空间">
                <title>一维混合空间</title>
                <paragraph>这类似于二维混合空间, 但在一维空间中(所以不需要三角形).</paragraph>
            </section>
            <section ids="statemachine" names="statemachine 状态机">
                <title>状态机</title>
                <paragraph>这个节点是一个状态机，根节点都是状态。根节点可以创建并通过线路连接。状态通过<emphasis>转换</emphasis>连接，它们是具有特殊性质的连接。转换是单向的，但是可以用两个来达到双向连接。</paragraph>
                <image candidates="{'*': 'tutorials/animation/img/animtree11.gif'}" uri="tutorials/animation/img/animtree11.gif"></image>
                <paragraph>有多种类型的转换：</paragraph>
                <image candidates="{'*': 'tutorials/animation/img/animtree12.png'}" uri="tutorials/animation/img/animtree12.png"></image>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph><emphasis>Immediate</emphasis>（立即）：将立即切换到下一个状态。当前状态将结束，并与新状态的开头相混合。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><emphasis>Sync</emphasis>（同步）：立即切换到下一个状态，但会将新状态快进并到旧状态的播放位置。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><emphasis>At End</emphasis>（末尾）：将等待当前状态播放结束，然后切换到下一个状态动画的开头。</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>过渡也有一些属性。单击任何过渡，它就会显示在“检查器”面板中：</paragraph>
                <image candidates="{'*': 'tutorials/animation/img/animtree13.png'}" uri="tutorials/animation/img/animtree13.png"></image>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph><emphasis>Switch Mode</emphasis>（切换模式）为过渡类型（见上文），可以在此处创建后修改。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><emphasis>Auto Advance</emphasis>（自动前进）当达到此状态时将自动开启转换。最适合 <emphasis>At End</emphasis> 切换模式。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><emphasis>Advance Condition</emphasis>（前进条件）会在条件成立时打开自动前进。这是一个可以用变量名填充的自定义文本字段。可以从代码中修改变量（稍后将对此进行详细介绍）。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><emphasis>Xfade Time</emphasis>（叠化时间）是在这个状态和下一个状态之间交叉渐变的时间。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><emphasis>Priority</emphasis>（优先级）与代码中的 <literal>travel()</literal> 函数一起使用（后述）。当从一个状态到另一个状态时，会优先使用优先级较低的过渡。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><emphasis>Disabled</emphasis>（禁用）允许禁用此转换（它不会在行程或自动前进期间使用）。</paragraph>
                    </list_item>
                </bullet_list>
            </section>
        </section>
        <section ids="for-better-blending" names="for\ better\ blending 为了更好的混合">
            <title>为了更好的混合</title>
            <paragraph>在 Godot 4.0+ 中，为了使混合结果具有确定性（结果可复现且始终一致），混合属性值必须具有特定的初始值。例如，在要混合两个动画的情况下，如果一个动画具有属性轨道而另一个动画没有，则计算混合动画时，要好像后一个动画（即本来没有属性轨道的那个）具有初始值的属性轨道一样去处理。</paragraph>
            <paragraph>当使用 Skeleton3D 骨骼的 Position/Rotation/Scale 3D 轨道时，初始值为 Bone Rest（骨骼放松姿势）。对于其他属性而言，初始值是 <literal>0</literal> ，并且如果轨道出现在 <literal>RESET</literal> 动画中，那么则使用它第一个关键帧的值。</paragraph>
            <paragraph>例如，下面的 AnimationPlayer 有两个动画，但其中一个缺少 Position 的属性轨道。</paragraph>
            <image candidates="{'*': 'tutorials/animation/img/blending1.webp'}" uri="tutorials/animation/img/blending1.webp"></image>
            <paragraph>这意味着缺少该 Position 的动画会将这些 Position 视为 <literal>Vector2(0, 0)</literal> 。</paragraph>
            <image candidates="{'*': 'tutorials/animation/img/blending2.webp'}" uri="tutorials/animation/img/blending2.webp"></image>
            <paragraph>可以通过将 Position 的 Property 轨道作为初始值添加到 <literal>RESET</literal> 动画中来解决这个问题。</paragraph>
            <image candidates="{'*': 'tutorials/animation/img/blending3.webp'}" uri="tutorials/animation/img/blending3.webp"></image>
            <image candidates="{'*': 'tutorials/animation/img/blending4.webp'}" uri="tutorials/animation/img/blending4.webp"></image>
            <note>
                <paragraph>请注意， <literal>RESET</literal> 动画的存在是为了在最初加载对象时定义默认姿势。它被假定只有一帧，并且不应使用时间轴进行播放。</paragraph>
            </note>
            <paragraph>另请记住，将“插值类型”设置为“线性角”或“三次角”的“Rotation 3D 轨道”和用于 2D 旋转的“属性”轨道，将阻止从初始值旋转超过 180 度的操作作为混合动画。</paragraph>
            <paragraph>这种限制对于 Skeleton3D 非常有用，可以防止骨骼在混合动画时穿透身体。因此，Skeleton3D 的 Bone Rest （骨骼放松姿势）值应尽可能接近可移动范围的中点。 <strong>这意味着人形模型最好以 T-pose 导入</strong> 。</paragraph>
            <image candidates="{'*': 'tutorials/animation/img/blending5.webp'}" uri="tutorials/animation/img/blending5.webp"></image>
            <paragraph>你可以看到，优先考虑从 Bone Rest 出发的最短旋转路径，而不是动画之间的最短旋转路径。</paragraph>
            <paragraph>如果需要通过混合动画将 Skeleton3D 本身旋转 180 度以上，则可以使用 Root Motion。</paragraph>
        </section>
        <section ids="root-motion" names="root\ motion 根骨骼运动">
            <title>根骨骼运动</title>
            <paragraph>处理 3D 动画时，一种流行的技术是动画师利用根骨骼为其余部分骨骼制作运动动画。这样处于动画角色的脚步就能够与下方的地板相匹配，并且还能够实现过场动画中与物体的精确交互。</paragraph>
            <paragraph>在 Godot 中回放动画时，可以将这根骨骼选作<emphasis>根运动轨道</emphasis>。这会在视觉上取消这根骨骼的变换（在原地播放动画）。</paragraph>
            <image candidates="{'*': 'tutorials/animation/img/animtree14.png'}" uri="tutorials/animation/img/animtree14.png"></image>
            <paragraph>这样做以后，可以通过 <reference internal="True" refuri="../../classes/class_animationtree#class-animationtree"><inline classes="std std-ref">AnimationTree</inline></reference> API 获取实际的变换：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-3-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-3-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-3-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-3-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-3-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-3-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve"># Get the motion delta.
animation_tree.get_root_motion_position()
animation_tree.get_root_motion_rotation()
animation_tree.get_root_motion_scale()

# Get the actual blended value of the animation.
animation_tree.get_root_motion_position_accumulator()
animation_tree.get_root_motion_rotation_accumulator()
animation_tree.get_root_motion_scale_accumulator()</literal_block>
                </div>
                <div aria-labelledby="tab-3-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-3-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">// Get the motion delta.
animationTree.GetRootMotionPosition();
animationTree.GetRootMotionRotation();
animationTree.GetRootMotionScale();

// Get the actual blended value of the animation.
animationTree.GetRootMotionPositionAccumulator();
animationTree.GetRootMotionRotationAccumulator();
animationTree.GetRootMotionScaleAccumulator();</literal_block>
                </div>
            </container>
            <paragraph>可以将这些值提供给 <reference internal="True" refuri="../../classes/class_characterbody3d#class-characterbody3d-method-move-and-slide"><inline classes="std std-ref">CharacterBody3D.move_and_slide</inline></reference> 等函数，用来控制角色的移动。</paragraph>
            <paragraph>还有一个名为 <literal>RootMotionView</literal> 的工具节点，可以放置在场景中充当角色和动画的自定义地板（这个节点默认在游戏期间禁用）。</paragraph>
            <image candidates="{'*': 'tutorials/animation/img/animtree15.gif'}" uri="tutorials/animation/img/animtree15.gif"></image>
        </section>
        <section ids="controlling-from-code" names="controlling\ from\ code 使用代码控制">
            <title>使用代码控制</title>
            <paragraph>创建树和预览之后，就只剩下一个问题：“这些东西怎么使用代码来控制？”。</paragraph>
            <paragraph>要注意动画节点就是资源，因此他们会在所有使用他们的实例之间共享。直接修改节点中的值，将会影响到场景中所有使用这个 <literal>AnimationTree</literal> 的实例。通常是不希望这样的，不过也有一些不错的用法，比如你可以复制粘贴你的动画树的一部分，或者在不同的动画树中复用具有复杂布局的节点（例如状态机和混合树）。</paragraph>
            <paragraph>实际的动画数据包含在 <literal>AnimationTree</literal> 节点中, 并通过属性访问. 检查 <literal>AnimationTree</literal> 节点的 "参数" 部分, 查看所有可以实时修改的参数:</paragraph>
            <image candidates="{'*': 'tutorials/animation/img/animtree16.png'}" uri="tutorials/animation/img/animtree16.png"></image>
            <paragraph>这很方便, 因为它可以通过 <literal>AnimationPlayer</literal> 获得动画效果, 甚至是 <literal>AnimationTree</literal> 本身, 允许实现非常复杂的动画逻辑.</paragraph>
            <paragraph>想要通过代码修改这些值, 必须获得该属性的路径. 这是很容易做到的, 把鼠标悬停在任何参数:</paragraph>
            <image candidates="{'*': 'tutorials/animation/img/animtree17.png'}" uri="tutorials/animation/img/animtree17.png"></image>
            <paragraph>允许设置或读取它们:</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-4-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-4-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-4-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-4-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-4-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-4-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">animation_tree.set("parameters/eye_blend/blend_amount", 1.0)
# Simpler alternative form:
animation_tree["parameters/eye_blend/blend_amount"] = 1.0</literal_block>
                </div>
                <div aria-labelledby="tab-4-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-4-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">animationTree.Set("parameters/eye_blend/blend_amount", 1.0);</literal_block>
                </div>
            </container>
        </section>
        <section ids="state-machine-travel" names="state\ machine\ travel 状态机行程">
            <title>状态机行程</title>
            <paragraph>Godot 的 <literal>StateMachine</literal> 实现提供了很多不错的功能，其中之一就是“行程”（Travel）的能力。可以向图发出指令，让其从当前状态转到另一个状态，所有的中间状态都会被访问到。这是通过 A* 算法实现的。如果当前状态和目的状态之间不存在任何可达的过渡路径集，图就会立即传送到目的状态。</paragraph>
            <paragraph>要使用行程能力, 你应该首先从 <literal>AnimationTree</literal> 节点中检索 <reference internal="True" refuri="../../classes/class_animationnodestatemachineplayback#class-animationnodestatemachineplayback"><inline classes="std std-ref">AnimationNodeStateMachinePlayback</inline></reference> 对象(其被导出为一个属性).</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-5-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-5-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-5-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-5-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-5-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-5-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var state_machine = animation_tree["parameters/playback"]</literal_block>
                </div>
                <div aria-labelledby="tab-5-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-5-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">AnimationNodeStateMachinePlayback stateMachine = (AnimationNodeStateMachinePlayback)animationTree.Get("parameters/playback");</literal_block>
                </div>
            </container>
            <paragraph>一旦检索到, 可以调用它提供的许多函数之一:</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-6-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-6-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-6-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-6-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-6-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-6-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">state_machine.travel("SomeState")</literal_block>
                </div>
                <div aria-labelledby="tab-6-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-6-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">stateMachine.Travel("SomeState");</literal_block>
                </div>
            </container>
            <paragraph>状态机必须正在运行才能使用行程能力。确保调用 <literal>start()</literal> 或选择一个节点以<strong>在加载时自动播放</strong>。</paragraph>
            <image candidates="{'*': 'tutorials/animation/img/animtree18.png'}" uri="tutorials/animation/img/animtree18.png"></image>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
