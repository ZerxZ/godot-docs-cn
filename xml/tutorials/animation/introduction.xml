<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/tutorials/animation/introduction.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-introduction-animation"></target>
    <section ids="introduction-to-the-animation-features doc-introduction-animation" names="introduction\ to\ the\ animation\ features 动画功能介绍 doc_introduction_animation">
        <title>动画功能介绍</title>
        <paragraph><reference internal="True" refuri="../../classes/class_animationplayer#class-animationplayer"><inline classes="std std-ref">AnimationPlayer</inline></reference> 节点允许你创建从简单到复杂的任何动画。</paragraph>
        <paragraph>在本指南中，你将学会：</paragraph>
        <bullet_list bullet="-">
            <list_item>
                <paragraph>使用动画面板</paragraph>
            </list_item>
            <list_item>
                <paragraph>使任何节点的任何属性变成动画</paragraph>
            </list_item>
            <list_item>
                <paragraph>创建简单的动画</paragraph>
            </list_item>
        </bullet_list>
        <paragraph>在 Godot 中，你可以对“检查器”中可用的任何内容设置动画，例如 Node 的变换、精灵、UI 元素、粒子、可见性、材质的颜色等等。你还可以修改脚本变量的值、甚至调用任何函数。</paragraph>
        <section ids="create-an-animationplayer-node" names="create\ an\ animationplayer\ node 创建\ animationplayer\ 节点">
            <title>创建 AnimationPlayer 节点</title>
            <paragraph>要使用动画工具, 我们首先必须创建一个 <reference internal="True" refuri="../../classes/class_animationplayer#class-animationplayer"><inline classes="std std-ref">AnimationPlayer</inline></reference> 节点.</paragraph>
            <paragraph>AnimationPlayer节点类型是动画的数据容器。一个AnimationPlayer节点可以保存多个动画，这些动画可以自动相互过渡。</paragraph>
            <figure ids="id1">
                <image alt="AnimationPlayer节点" candidates="{'*': 'tutorials/animation/img/animation_create_animationplayer.webp'}" uri="tutorials/animation/img/animation_create_animationplayer.webp"></image>
                <caption>AnimationPlayer节点</caption>
            </figure>
            <paragraph>创建 AnimationPlayer 节点后，单击它以打开视口底部的动画面板。</paragraph>
            <figure ids="id2">
                <image alt="动画面板位置" candidates="{'*': 'tutorials/animation/img/animation_animation_panel.webp'}" uri="tutorials/animation/img/animation_animation_panel.webp"></image>
                <caption>动画面板位置</caption>
            </figure>
            <paragraph>动画面板由四部分组成：</paragraph>
            <figure ids="id3">
                <image alt="动画面板" candidates="{'*': 'tutorials/animation/img/animation_animation_panel_overview.webp'}" uri="tutorials/animation/img/animation_animation_panel_overview.webp"></image>
                <caption>动画面板</caption>
            </figure>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>动画控件(即添加, 加载, 保存和删除动画)</paragraph>
                </list_item>
                <list_item>
                    <paragraph>轨道列表</paragraph>
                </list_item>
                <list_item>
                    <paragraph>带有关键帧的时间轴</paragraph>
                </list_item>
                <list_item>
                    <paragraph>时间轴和轨道控件，例如，你可以在其中缩放时间轴和编辑轨道。</paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section ids="computer-animation-relies-on-keyframes" names="computer\ animation\ relies\ on\ keyframes 计算机动画依赖于关键帧">
            <title>计算机动画依赖于关键帧</title>
            <paragraph>关键帧定义属性在某个时间点的值。</paragraph>
            <paragraph>菱形代表时间轴中的关键帧。两个关键帧之间的线表示该值未更改。</paragraph>
            <figure ids="id4">
                <image alt="Godot中的关键帧" candidates="{'*': 'tutorials/animation/img/animation_keyframes.png'}" uri="tutorials/animation/img/animation_keyframes.png"></image>
                <caption>Godot中的关键帧</caption>
            </figure>
            <paragraph>你设置节点属性的值并为其创建动画关键帧。当动画运行时，引擎将在关键帧之间插入值，使它们随着时间的推移逐渐变化。</paragraph>
            <figure ids="id5">
                <image alt="只需两个关键帧就可以获得一个平滑运动" candidates="{'*': 'tutorials/animation/img/animation_illustration.png'}" uri="tutorials/animation/img/animation_illustration.png"></image>
                <caption>只需两个关键帧就可以获得一个平滑运动</caption>
            </figure>
            <paragraph>时间轴定义动画需要多长时间。你可以在不同的点插入关键帧，并更改其时间。</paragraph>
            <figure ids="id6">
                <image alt="动画面板中的时间轴" candidates="{'*': 'tutorials/animation/img/animation_timeline.png'}" uri="tutorials/animation/img/animation_timeline.png"></image>
                <caption>动画面板中的时间轴</caption>
            </figure>
            <paragraph>动画面板中的每一行都是引用节点的普通或变换属性的动画轨道。每个轨道存储节点的路径及其受影响的属性。例如，图中的位置轨迹指的是 Sprite2D 节点的 <literal>position</literal> 属性。</paragraph>
            <figure ids="id7">
                <image alt="普通动画轨道的示例" candidates="{'*': 'tutorials/animation/img/animation_normal_track.png'}" uri="tutorials/animation/img/animation_normal_track.png"></image>
                <caption>普通动画轨道的示例</caption>
            </figure>
            <tip>
                <paragraph>如果你的动画属性错误，你可以随时通过双击轨道并输入新路径来编辑轨道的路径。使用 “从头开始播放” 按钮|从头开始播放|（或按键盘上的 <literal classes="kbd">Shift + D</literal> ）播放动画，可以立即看到变化.</paragraph>
            </tip>
        </section>
        <section ids="tutorial-creating-a-simple-animation" names="tutorial:\ creating\ a\ simple\ animation 教程：创建简单的动画">
            <title>教程：创建简单的动画</title>
            <section ids="scene-setup" names="scene\ setup 场景设置">
                <title>场景设置</title>
                <paragraph>在本教程中，我们将创建一个 AnimationPlayer 节点，并将精灵（Sprite）节点作为其子节点。我们会让这个精灵在屏幕上的两点之间进行移动。</paragraph>
                <figure ids="id8">
                    <image alt="我们的场景设置" candidates="{'*': 'tutorials/animation/img/animation_animation_player_tree.png'}" uri="tutorials/animation/img/animation_animation_player_tree.png"></image>
                    <caption>我们的场景设置</caption>
                </figure>
                <warning>
                    <paragraph>AnimationPlayer 继承自 Node 而不是 Node2D 或者 Node3D。因为层级中间出现了普通的 Node 节点，所以它的子节点不会继承父节点的变换。</paragraph>
                    <paragraph>所以，不建议把具有 2D 或者 3D 变换的节点设置成 AnimationPlayer 节点的子节点。</paragraph>
                </warning>
                <paragraph>精灵拥有图像纹理。在本教程中，选择 Sprite2D 节点，在检查器中单击 Texture ，然后单击“加载”。精灵的纹理选择为默认的 Godot 图标。</paragraph>
            </section>
            <section ids="adding-an-animation" names="adding\ an\ animation 添加动画">
                <title>添加动画</title>
                <paragraph>选中 AnimationPlayer 节点，然后点击动画编辑器中的“动画”按钮。从列表中选择“新建”（ <image alt="添加动画" candidates="{'*': 'tutorials/animation/img/animation_add.png'}" uri="tutorials/animation/img/animation_add.png"></image> ）来添加一个新的动画，并在对话框中为该动画输入名称。</paragraph>
                <figure ids="id9">
                    <image alt="添加新动画" candidates="{'*': 'tutorials/animation/img/animation_create_new_animation.webp'}" uri="tutorials/animation/img/animation_create_new_animation.webp"></image>
                    <caption>添加新动画</caption>
                </figure>
            </section>
            <section ids="manage-an-animation-libraries" names="manage\ an\ animation\ libraries 管理动画库">
                <title>管理动画库</title>
                <paragraph>出于可复用性，动画被注册在动画库资源的列表中。如果你将动画添加到 AnimationPlayer 而不指定任何特定设置，则该动画将默认注册到 AnimationPlayer 具有的 [Global] 动画库中。</paragraph>
                <figure ids="id10">
                    <image alt="管理动画" candidates="{'*': 'tutorials/animation/img/animation_library.webp'}" uri="tutorials/animation/img/animation_library.webp"></image>
                    <caption>管理动画</caption>
                </figure>
                <paragraph>如果有多个动画库并且你尝试添加动画，则会出现一个包含选项的对话框。</paragraph>
                <figure ids="id11">
                    <image alt="添加带有库选项的新动画" candidates="{'*': 'tutorials/animation/img/animation_library_dialog.webp'}" uri="tutorials/animation/img/animation_library_dialog.webp"></image>
                    <caption>添加带有库选项的新动画</caption>
                </figure>
            </section>
            <section ids="adding-a-track" names="adding\ a\ track 添加轨道">
                <title>添加轨道</title>
                <paragraph>要为我们的精灵添加一个新的轨道，请选择它并在工具栏中查看：</paragraph>
                <figure ids="id12">
                    <image alt="方便按钮" candidates="{'*': 'tutorials/animation/img/animation_convenience_buttons.png'}" uri="tutorials/animation/img/animation_convenience_buttons.png"></image>
                    <caption>方便按钮</caption>
                </figure>
                <paragraph>这些开关和按钮允许你为所选节点的位置、旋转和缩放添加关键帧。由于我们仅对精灵的位置进行动画处理，因此请确保仅选择位置开关。所选开关为蓝色。</paragraph>
                <paragraph>单击钥匙按钮（插入关键帧）创建第一个关键帧。由于我们还没有为 Position 属性设置轨道，Godot 将主动为我们创建它。点击 <strong>创建</strong> 。</paragraph>
                <paragraph>Godot 将创建一个新轨道，并在时间轴的开头插入我们的第一个关键帧：</paragraph>
                <figure ids="id13">
                    <image alt="精灵轨道" candidates="{'*': 'tutorials/animation/img/animation_track.webp'}" uri="tutorials/animation/img/animation_track.webp"></image>
                    <caption>精灵轨道</caption>
                </figure>
            </section>
            <section ids="the-second-keyframe" names="the\ second\ keyframe 第二个关键帧">
                <title>第二个关键帧</title>
                <paragraph>我们需要设置我们的精灵的最终目的地，以及它到达那里需要多长时间。</paragraph>
                <paragraph>假设我们希望在点之间移动需要两秒钟。默认情况下，动画设置为仅持续一秒，因此请在动画面板时间轴标题右侧的控件中将动画长度更改为 2。</paragraph>
                <figure ids="id14">
                    <image alt="动画长度" candidates="{'*': 'tutorials/animation/img/animation_set_length.png'}" uri="tutorials/animation/img/animation_set_length.png"></image>
                    <caption>动画长度</caption>
                </figure>
                <paragraph>现在，将精灵向右移动到其最终位置。可以使用工具栏中的 <emphasis>移动工具</emphasis> 或在 <emphasis>检查器</emphasis> 中设置* Position* 的 X 值。</paragraph>
                <paragraph>点击动画面板 2 秒附近的时间轴标题，然后单击工具栏中的钥匙按钮以创建第二个关键帧。</paragraph>
            </section>
            <section ids="run-the-animation" names="run\ the\ animation 运行动画">
                <title>运行动画</title>
                <paragraph>点击“从头开始播放”（<image alt="从头开始播放" candidates="{'*': 'tutorials/animation/img/animation_play_from_beginning.png'}" uri="tutorials/animation/img/animation_play_from_beginning.png"></image>）按钮。</paragraph>
                <paragraph>好极了！ 我们的动画运行:</paragraph>
                <figure ids="id15">
                    <image alt="动画" candidates="{'*': 'tutorials/animation/img/animation_simple.gif'}" uri="tutorials/animation/img/animation_simple.gif"></image>
                    <caption>动画</caption>
                </figure>
            </section>
            <section ids="back-and-forth" names="back\ and\ forth 来来回回">
                <title>来来回回</title>
                <paragraph>Godot 有一个我们可以在动画中使用的有趣的功能。当设置了动画循环但动画末尾没有指定关键帧时，第一个关键帧也是最后一个关键帧。</paragraph>
                <paragraph>这意味着我们现在可以将动画长度延长到四秒，Godot 还将计算从最后一个关键帧到第一个关键帧的帧，来回移动我们的精灵。</paragraph>
                <figure ids="id16">
                    <image alt="动画循环" candidates="{'*': 'tutorials/animation/img/animation_loop.png'}" uri="tutorials/animation/img/animation_loop.png"></image>
                    <caption>动画循环</caption>
                </figure>
                <paragraph>你可以通过更改轨道的循环模式来更改此行为。这将在下一章中介绍。</paragraph>
            </section>
            <section ids="track-settings" names="track\ settings 轨道设置">
                <title>轨道设置</title>
                <paragraph>每条轨道最后都有一个设置面板，可以在其中设置更新模式、轨道插值和循环模式。</paragraph>
                <figure ids="id17">
                    <image alt="轨道设置" candidates="{'*': 'tutorials/animation/img/animation_track_settings.webp'}" uri="tutorials/animation/img/animation_track_settings.webp"></image>
                    <caption>轨道设置</caption>
                </figure>
                <paragraph>轨道的更新模式告诉 Godot 何时更新属性值。这可以是：</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><strong>连续：</strong>每帧都更新属性</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><strong>离散：</strong>仅在位于关键帧时更新属性</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><strong>捕获：</strong>如果第一个关键帧的时间大于 <literal>0.0</literal>，就会记录该属性的当前值，并将其与第一个动画帧混合。例如，利用“捕获”模式，你可以将处于任意位置的节点移动到特定的位置。</paragraph>
                    </list_item>
                </bullet_list>
                <figure ids="id18">
                    <image alt="轨道模式" candidates="{'*': 'tutorials/animation/img/animation_track_rate.webp'}" uri="tutorials/animation/img/animation_track_rate.webp"></image>
                    <caption>轨道模式</caption>
                </figure>
                <paragraph>在普通动画中，你通常使用“连续”。其他类型可用于编排复杂动画。</paragraph>
                <paragraph>轨迹插值告诉 Godot 如何计算关键帧之间的帧值，支持的插值模式有：</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>临近：设置为最接近的关键帧的值</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>线性：使用线性函数计算两个关键帧之间的值</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>三次方：使用三次函数计算两个关键帧之间的值</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>线性角（仅出现在旋转属性中）：具有最短路径旋转的线性模式</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>三次角（仅出现在旋转属性中）：具有最短路径旋转的立方模式</paragraph>
                    </list_item>
                </bullet_list>
                <figure ids="id19">
                    <image alt="轨道插值" candidates="{'*': 'tutorials/animation/img/animation_track_interpolation.webp'}" uri="tutorials/animation/img/animation_track_interpolation.webp"></image>
                    <caption>轨道插值</caption>
                </figure>
                <paragraph>利用三次插值，动画在关键帧处的速度较慢，而在关键帧之间的速度较快，从而使动作更加自然。立体插值常用于角色动画。线性插值以固定的速度进行动画变化，从而产生更加机械的效果。</paragraph>
                <paragraph>Godot支持两种循环模式，如果将其设置为循环时，则会影响动画效果：</paragraph>
                <figure ids="id20">
                    <image alt="循环模式" candidates="{'*': 'tutorials/animation/img/animation_track_loop_modes.webp'}" uri="tutorials/animation/img/animation_track_loop_modes.webp"></image>
                    <caption>循环模式</caption>
                </figure>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>钳位循环插值: 选择此选项后, 动画将在此轨道的最后一个关键帧之后停止. 再次到达第一个关键帧时, 动画将重置为其值.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>包循环插值: 当选择此项时,Godot会在最后一个关键帧之后计算动画, 以再次达到第一个关键帧的值.</paragraph>
                    </list_item>
                </bullet_list>
            </section>
        </section>
        <section ids="keyframes-for-other-properties" names="keyframes\ for\ other\ properties 其他属性的关键帧">
            <title>其他属性的关键帧</title>
            <paragraph>Godot的动画系统不仅限于位置、旋转和缩放。你可以对任何属性进行动画化。</paragraph>
            <paragraph>如果你在动画面板可见时选择你的精灵，Godot 会在 <emphasis>检查器</emphasis> 中为精灵的每个属性显示一个小的关键帧按钮，点击这个按钮，Godot就会自动为当前动画添加一个轨道和关键帧。</paragraph>
            <figure ids="id21">
                <image alt="其他属性的关键帧" candidates="{'*': 'tutorials/animation/img/animation_properties_keyframe.webp'}" uri="tutorials/animation/img/animation_properties_keyframe.webp"></image>
                <caption>其他属性的关键帧</caption>
            </figure>
        </section>
        <section ids="edit-keyframes" names="edit\ keyframes 编辑关键帧">
            <title>编辑关键帧</title>
            <paragraph>你可以在动画时间轴上点击关键帧，以在*属性面板*中显示和编辑其值。</paragraph>
            <figure ids="id22">
                <image alt="关键帧编辑器编辑一个键" candidates="{'*': 'tutorials/animation/img/animation_keyframe_editor_key.webp'}" uri="tutorials/animation/img/animation_keyframe_editor_key.webp"></image>
                <caption>关键帧编辑器编辑一个键</caption>
            </figure>
            <paragraph>此外，你还可以通过点击并拖动关键帧的缓和曲线，在这里编辑关键帧的缓和值。这将告诉 Godot 在动画属性到达该关键帧时如何进行插值。</paragraph>
            <paragraph>你可以通过这种方式调整动画，直到运动“看起来正确”。</paragraph>
            <substitution_definition names="Play\ from\ beginning"><image alt="从头开始播放" candidates="{'*': 'tutorials/animation/img/animation_play_from_beginning.png'}" uri="tutorials/animation/img/animation_play_from_beginning.png"></image></substitution_definition>
            <substitution_definition names="Add\ Animation"><image alt="添加动画" candidates="{'*': 'tutorials/animation/img/animation_add.png'}" uri="tutorials/animation/img/animation_add.png"></image></substitution_definition>
        </section>
        <section ids="using-reset-tracks" names="using\ reset\ tracks 使用\ reset\ 轨道">
            <title>使用 RESET 轨道</title>
            <paragraph>你可以设置一个特殊的 <emphasis>RESET</emphasis>（重置）动画来包含“默认姿势”。这样就可以保证在保存场景并重新在编辑器中打开时，会恢复默认姿势。</paragraph>
            <paragraph>对于已存在的轨道，你可以添加一个名为“RESET”（大小写敏感）的动画，然后为每一个你希望重置的属性添加轨道。应该只在时间为 0 处存在一个关键帧，其值为每条轨道所期望的默认值。</paragraph>
            <paragraph>如果 AnimationPlayer 的 <strong>Reset On Save</strong>（保存时重置）属性为 <literal>true</literal>，场景在保存时会应用重置动画的效果（相当于寻道到 <literal>0.0</literal> 时间点的效果）。只有保存的文件会受到影响——编辑器中的属性轨道还是会保持原样。</paragraph>
            <paragraph>如果你想要在编辑器中重置轨道，请选中 AnimationPlayer 节点，打开 <strong>动画</strong> 底部面板，然后选择动画编辑器 <strong>动画</strong> 下拉菜单中的 <strong>应用重置</strong> 。</paragraph>
            <paragraph>为新建的动画添加轨道时，如果使用的是检查器中属性旁的关键帧图标，编辑器会询问是否自动添加一条 RESET 轨道。这对于使用 3.4 版本之前的 Godot 创建的轨道并不适用，因为动画重置轨道功能是在 3.4 版本中加入的。</paragraph>
            <note>
                <paragraph>RESET轨道也被用作混合的参考值。另见<reference name="更好的混合" refuri="../animation/animation_tree.html#for-better-blending">更好的混合</reference>。</paragraph>
            </note>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
