<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/tutorials/animation/cutout_animation.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-cutout-animation"></target>
    <section ids="cutout-animation doc-cutout-animation" names="cutout\ animation 剪纸动画 doc_cutout_animation">
        <title>剪纸动画</title>
        <section ids="what-is-it" names="what\ is\ it? 它是什么？">
            <title>它是什么？</title>
            <paragraph>传统意义上, <reference name="剪影动画" refuri="https://en.wikipedia.org/wiki/Cutout_animation">剪影动画</reference> 是一种 <reference name="定格动画" refuri="https://zh.wikipedia.org/zh-cn/%E5%AE%9A%E6%A0%BC%E5%8A%A8%E7%94%BB">定格动画</reference> . 在剪影动画中, 人们把纸片(或者其他的薄材料)剪成特殊的形状, 来组合成角色和物体的二维形象. 角色的身体通常是由几个部件组成的. 这些部件在动画的每一帧中形成一种组合, 之后对其摄影. 动画制作者在两次摄影之间将这些部分进行很小幅度的移动和旋转, 这样, 当这些摄影的画面以很快的速度连续依次播放时, 就可以造成这些角色和物体在连续运动的假象.</paragraph>
            <paragraph>现在可以用软件制作剪纸动画的模拟，如<reference name="《南方公园》" refuri="https://zh.wikipedia.org/zh-cn/%E5%8D%97%E6%96%B9%E5%85%AC%E5%9C%92">《南方公园》</reference>和<reference name="《杰克与梦幻岛海盗》" refuri="https://zh.wikipedia.org/zh-cn/%E5%82%91%E5%85%8B%E8%88%87%E5%A4%A2%E5%B9%BB%E5%B3%B6%E6%B5%B7%E7%9B%9C">《杰克与梦幻岛海盗》</reference>。</paragraph>
            <paragraph>在视频游戏中，这种技术也变得流行。例如<reference name="《纸片马里奥》" refuri="https://en.wikipedia.org/wiki/Super_Paper_Mario">《纸片马里奥》</reference>或 <reference name="《雷曼 起源》" refuri="https://zh.wikipedia.org/zh-cn/%E9%9B%B7%E5%B0%84%E8%B6%85%E4%BA%BA_%E8%B5%B7%E6%BA%90">《雷曼 起源》</reference>。</paragraph>
        </section>
        <section ids="cutout-animation-in-godot" names="cutout\ animation\ in\ godot godot\ 中的剪纸动画">
            <title>Godot 中的剪纸动画</title>
            <paragraph>Godot 提供了一些工具，用于剪纸动画的绑定，而且是工作流的理想选择：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><strong>动画系统与引擎完全集成</strong>：这意味着动画可以控制的不仅仅是物体的运动。纹理、精灵大小、轴心、不透明度、颜色调制等都可以进行动画和混合。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><strong>混合动画风格</strong> ：AnimatedSprite2D 允许将传统赛璐璐动画与剪纸动画一起使用。在赛璐璐动画中，不同的动画帧使用完全不同的绘图，而不是相同的片段位置不同。在其他基于剪纸的动画中，赛璐璐动画可以选择性地用于复杂的部件，例如手、脚、改变面部表情等。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><strong>自定义形状元素</strong> : 可以用 <reference internal="True" refuri="../../classes/class_polygon2d#class-polygon2d"><inline classes="std std-ref">Polygon2D</inline></reference> 创建自定义形状, 允许UV动画, 变形等.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><strong>粒子系统</strong> : 剪纸式动画配件可以与粒子系统相结合, 这对魔法效果, 喷气背包等很有用.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><strong>自定义碰撞器</strong>：在骨架的不同部位设置碰撞器和影响区域，非常适合 Boss 和格斗游戏。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><strong>动画树</strong> : 允许在几个动画之间进行复杂的组合和混合, 与3D动画的工作方式相同.</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>以及更多！</paragraph>
        </section>
        <section ids="making-of-gbot" names="making\ of\ gbot 制作\ gbot">
            <title>制作 GBot</title>
            <paragraph>在本教程中，我们将使用由 Andreas Esau 创建的 <reference name="GBot" refuri="https://www.youtube.com/watch?v=S13FrWuBMx4&amp;list=UUckpus81gNin1aV8WSffRKw">GBot</reference> 角色作为演示。</paragraph>
            <image candidates="{'*': 'tutorials/animation/img/tuto_cutout_walk.gif'}" uri="tutorials/animation/img/tuto_cutout_walk.gif"></image>
            <paragraph>在此获取你的资源：<reference name="cutout_animation_assets.zip" refuri="https://github.com/godotengine/godot-docs-project-starters/releases/download/latest-4.x/cutout_animation_assets.zip">cutout_animation_assets.zip</reference><target ids="cutout-animation-assets-zip" names="cutout_animation_assets.zip" refuri="https://github.com/godotengine/godot-docs-project-starters/releases/download/latest-4.x/cutout_animation_assets.zip"></target> 。</paragraph>
        </section>
        <section ids="setting-up-the-rig" names="setting\ up\ the\ rig 设置装配">
            <title>设置装配</title>
            <paragraph>创建一个空的Node2D作为场景的根, 我们将在它下面工作:</paragraph>
            <image candidates="{'*': 'tutorials/animation/img/tuto_cutout1.png'}" uri="tutorials/animation/img/tuto_cutout1.png"></image>
            <paragraph>模型的第一个节点是臀部。一般来说，无论是 2D 还是 3D，臀部都是骨架的根部。这使得它更容易制作动画：</paragraph>
            <image candidates="{'*': 'tutorials/animation/img/tuto_cutout2.png'}" uri="tutorials/animation/img/tuto_cutout2.png"></image>
            <paragraph>接下来将是躯干, 躯干需要是臀部的子级, 所以要创建一个子级精灵, 并加载躯干纹理, 然后适当地调整它:</paragraph>
            <image candidates="{'*': 'tutorials/animation/img/tuto_cutout3.png'}" uri="tutorials/animation/img/tuto_cutout3.png"></image>
            <paragraph>这看起来不错。让我们通过旋转躯干来看看层次结构是否能像骨架一样工作。可以按 <literal classes="kbd">E</literal> 进入旋转模式，然后用鼠标左键拖动。要退出旋转模式，请按 <literal classes="kbd">ESC</literal>。</paragraph>
            <image candidates="{'*': 'tutorials/animation/img/tutovec_torso1.gif'}" uri="tutorials/animation/img/tutovec_torso1.gif"></image>
            <paragraph>旋转轴心错误，需要调整。</paragraph>
            <paragraph><reference internal="True" refuri="../../classes/class_sprite2d#class-sprite2d"><inline classes="std std-ref">Sprite2D</inline></reference> 中间的这个小十字就是旋转轴心：</paragraph>
            <image candidates="{'*': 'tutorials/animation/img/tuto_cutout4.png'}" uri="tutorials/animation/img/tuto_cutout4.png"></image>
        </section>
        <section ids="adjusting-the-pivot" names="adjusting\ the\ pivot 调整轴心">
            <title>调整轴心</title>
            <paragraph>可以通过更改 Sprite2D 中的 <emphasis>offset</emphasis> 属性来调整轴心：</paragraph>
            <image candidates="{'*': 'tutorials/animation/img/tuto_cutout5.png'}" uri="tutorials/animation/img/tuto_cutout5.png"></image>
            <paragraph>轴心也可以进行<emphasis>可视化</emphasis>的调整。将鼠标悬停在所需的轴心点上时，按 <literal classes="kbd">V</literal> 移动所选 Sprite2D 的轴心。工具栏中还有一个工具也有类似的功能。</paragraph>
            <image candidates="{'*': 'tutorials/animation/img/tutovec_torso2.gif'}" uri="tutorials/animation/img/tutovec_torso2.gif"></image>
            <paragraph>继续添加身体部件, 从右臂开始. 确保将每个精灵放在其在层次结构中的正确位置, 其旋转和平移都是相对于其父级而言的:</paragraph>
            <image candidates="{'*': 'tutorials/animation/img/tuto_cutout6.png'}" uri="tutorials/animation/img/tuto_cutout6.png"></image>
            <paragraph>左臂有些问题. 在二维中, 子节点出现在父节点的前面:</paragraph>
            <image candidates="{'*': 'tutorials/animation/img/tuto_cutout7.png'}" uri="tutorials/animation/img/tuto_cutout7.png"></image>
            <paragraph>我们希望左臂出现在臀部和躯干的 <emphasis>后面</emphasis> . 我们可以将左臂节点在场景层次结构中移到臀部节点上面, 但这样一来, 左臂在层次结构中的位置就不对了, 这意味着它不会受到躯干移动的影响. 我们用 <literal>RemoteTransform2D</literal> 节点来解决这个问题.</paragraph>
            <note>
                <paragraph>还可以通过调整从二维节点继承的任何节点的Z属性, 来修复深度排序问题.</paragraph>
            </note>
        </section>
        <section ids="remotetransform2d-node" names="remotetransform2d\ node remotetransform2d\ 节点">
            <title>RemoteTransform2D 节点</title>
            <paragraph><reference internal="True" refuri="../../classes/class_remotetransform2d#class-remotetransform2d"><inline classes="std std-ref">RemoteTransform2D</inline></reference> 节点对层次结构中其他地方的节点进行变换. 这个节点将自己的变换, 包括它从父节点继承的任何变换, 应用到它所针对的遥控节点.</paragraph>
            <paragraph>这使我们能够修正元素的可见性顺序, 这些部分独立于在剪裁层次结构中的位置.</paragraph>
            <paragraph>创建一个 <literal>RemoteTransform2D</literal> 节点作为躯干的子节点。命名为 <literal>remote_arm_l</literal>。在第一个节点中再创建一个 RemoteTransform2D 节点并将其命名为 <literal>remote_hand_l</literal>。让这两个新节点的 <literal>Remote Path</literal> 属性分别指向 <literal>arm_l</literal> 和 <literal>hand_l</literal> 精灵：</paragraph>
            <image candidates="{'*': 'tutorials/animation/img/tuto_cutout9.png'}" uri="tutorials/animation/img/tuto_cutout9.png"></image>
            <paragraph>移动 <literal>RemoteTransform2D</literal> 节点现在可以移动精灵. 所以可以通过调整 <literal>RemoteTransform2D</literal> 变换来创建动画:</paragraph>
            <image candidates="{'*': 'tutorials/animation/img/tutovec_torso4.gif'}" uri="tutorials/animation/img/tutovec_torso4.gif"></image>
        </section>
        <section ids="completing-the-skeleton" names="completing\ the\ skeleton 完成骨架">
            <title>完成骨架</title>
            <paragraph>按照其余部分的相同步骤完成骨架。生成的场景应该类似于：</paragraph>
            <image candidates="{'*': 'tutorials/animation/img/tuto_cutout10.png'}" uri="tutorials/animation/img/tuto_cutout10.png"></image>
            <paragraph>生成的装备很容易制作动画. 通过选择节点并旋转它们, 你可以有效地为前向运动学(FK)设置动画.</paragraph>
            <paragraph>对于简单的物体和装配来说已经足够了, 但仍然有限制:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>在复杂的装配中, 在主视口中选择精灵会变得很困难. 场景树最终被替代, 用来选择部件, 这可能会比较慢.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>反向动力学（Inverse Kinematics、IK）对于手脚等肢体的运动非常有用，目前我们的绑定还无法使用。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>为了解决这些问题，我们将会使用 Godot 的骨架。</paragraph>
        </section>
        <section ids="skeletons" names="skeletons 骨架">
            <title>骨架</title>
            <paragraph>在 Godot 中，有一个在节点之间创建“骨骼”的辅助工具。骨骼连接起的节点称为骨架。</paragraph>
            <paragraph>举个例子，让我们把右臂变成一个骨架。要创建一个骨架，必须从上到下选择节点链：</paragraph>
            <image candidates="{'*': 'tutorials/animation/img/tuto_cutout11.png'}" uri="tutorials/animation/img/tuto_cutout11.png"></image>
            <paragraph>然后单击“骨架”菜单并选择 <literal>制作骨骼</literal>。</paragraph>
            <image candidates="{'*': 'tutorials/animation/img/tuto_cutout12.png'}" uri="tutorials/animation/img/tuto_cutout12.png"></image>
            <paragraph>这将增加覆盖在手臂上的骨头, 但结果可能令人惊讶.</paragraph>
            <image candidates="{'*': 'tutorials/animation/img/tuto_cutout13.png'}" uri="tutorials/animation/img/tuto_cutout13.png"></image>
            <paragraph>为什么这只手缺少一根骨骼？在 Godot 中，使用骨骼把节点和它的父节点连接起来。当前没有手节点的子节点。有了这些知识，让我们再试一次。</paragraph>
            <paragraph>第一步是创建端点节点。任何类型的节点都可以，但是 <reference internal="True" refuri="../../classes/class_marker2d#class-marker2d"><inline classes="std std-ref">Marker2D</inline></reference> 是首选，因为它在编辑器中可见。端点节点将确保最后一个骨骼具有方向。</paragraph>
            <image candidates="{'*': 'tutorials/animation/img/tuto_cutout14.png'}" uri="tutorials/animation/img/tuto_cutout14.png"></image>
            <paragraph>现在选择整个链, 从端点到手臂并创建骨骼:</paragraph>
            <image candidates="{'*': 'tutorials/animation/img/tuto_cutout15.png'}" uri="tutorials/animation/img/tuto_cutout15.png"></image>
            <paragraph>结果更像骨架了，现在可以选择手臂和前臂并设置动画。</paragraph>
            <paragraph>为所有重要的末端创建端点. 为剪纸的所有可关节部分生成骨骼, 臀部是它们之间的最终连接.</paragraph>
            <paragraph>你可能会注意到，在连接臀部和躯干时，会多出一根骨骼。Godot 用骨骼将臀部节点连接到了场景根部，我们不希望这样。要解决这个问题，选择根部和臀部节点，打开“骨架”菜单，点击 <literal>清除骨骼</literal>。</paragraph>
            <image candidates="{'*': 'tutorials/animation/img/tuto_cutout15_2.png'}" uri="tutorials/animation/img/tuto_cutout15_2.png"></image>
            <paragraph>你的骨架最后看上去应该是这样的：</paragraph>
            <image candidates="{'*': 'tutorials/animation/img/tuto_cutout16.png'}" uri="tutorials/animation/img/tuto_cutout16.png"></image>
            <paragraph>你可能已经注意到了手上的第二组端点. 这很快就会有意义.</paragraph>
            <paragraph>现在整个人物已经装配好了，下一步就是设置 IK 链。IK 链可以更自然的控制四肢。</paragraph>
        </section>
        <section ids="ik-chains" names="ik\ chains ik\ 链">
            <title>IK 链</title>
            <paragraph>IK 是反向动力学（Inverse Kinematics）的缩写，给手部、足部以及其它需绑定肢体（例如我们刚刚制作的那个）的动画带来便利。想象一下，你想要将角色的脚放在地面上的特定位置。如果没有 IK 链，脚的每次运动都需要旋转和定位其他几个骨骼（至少得涉及大腿及小腿）。这将非常复杂并导致不精确的结果。而 IK 允许我们直接移动脚，同时小腿和大腿进行自我调整。</paragraph>
            <note>
                <paragraph><strong>Godot 中的 IK 链目前仅在编辑器中可用</strong> ，而在运行时不可用。它们旨在简化设置关键帧的过程，目前对于程序动画等技术没有用处。</paragraph>
            </note>
            <paragraph>要创建 IK 链，请选择从端点到链基的骨骼链。例如，要为右腿创建一条 IK 链，选择以下：</paragraph>
            <image candidates="{'*': 'tutorials/animation/img/tuto_cutout17.png'}" uri="tutorials/animation/img/tuto_cutout17.png"></image>
            <paragraph>然后为 IK 启用此链。转到“编辑 &gt; 制作 IK 链”。</paragraph>
            <image candidates="{'*': 'tutorials/animation/img/tuto_cutout18.png'}" uri="tutorials/animation/img/tuto_cutout18.png"></image>
            <paragraph>结果，链的基部将变为<emphasis>黄色</emphasis>。</paragraph>
            <image candidates="{'*': 'tutorials/animation/img/tuto_cutout19.png'}" uri="tutorials/animation/img/tuto_cutout19.png"></image>
            <paragraph>一旦 IK 链设置完毕，抓住任何链基（例如脚部）的任意嵌套子节点并移动。当你调整其位置时，会看到链的剩余部分也随之调整。</paragraph>
            <image candidates="{'*': 'tutorials/animation/img/tutovec_torso5.gif'}" uri="tutorials/animation/img/tutovec_torso5.gif"></image>
        </section>
        <section ids="animation-tips" names="animation\ tips 动画提示">
            <title>动画提示</title>
            <paragraph>下一节将是创建剪纸动画的技巧集合。关于 Godot 中的动画系统如何工作的更多信息，请参阅 <reference internal="True" refuri="introduction#doc-introduction-animation"><inline classes="std std-ref">动画功能介绍</inline></reference>。</paragraph>
            <section ids="setting-keyframes-and-excluding-properties" names="setting\ keyframes\ and\ excluding\ properties 设置关键帧和排除属性">
                <title>设置关键帧和排除属性</title>
                <paragraph>当动画编辑器窗口打开时, 特殊的上下文元素会出现在顶部工具栏中:</paragraph>
                <image candidates="{'*': 'tutorials/animation/img/tuto_cutout20.png'}" uri="tutorials/animation/img/tuto_cutout20.png"></image>
                <paragraph>按键按钮在当前游戏开始位置为选定的对象或骨骼插入位置, 旋转和缩放关键帧.</paragraph>
                <paragraph>通过切换关键帧按钮左边的 "位置" , "旋转" 和 "缩放" 按钮, 可以修改其功能, 允许你指定将为三个属性中的哪一个创建关键帧.</paragraph>
                <paragraph>下面是一个例子, 说明如何使用其的: 假设你有一个节点, 其中已经有两个关键帧只对其缩放进行动画. 你想在同一个节点重叠添加旋转移动. 旋转运动应该在不同的时间开始和结束, 与已经设置的缩放变化不同. 在添加新关键帧时, 可以使用切换按钮, 只添加旋转信息. 这样, 你就可以避免添加不需要的缩放关键帧, 破坏现有的缩放动画.</paragraph>
            </section>
        </section>
        <section ids="creating-a-rest-pose" names="creating\ a\ rest\ pose 创建放松姿势">
            <title>创建放松姿势</title>
            <paragraph>将放松姿势视为默认姿势，当游戏中没有其他姿势处于活动状态时，应该将其设置为剪纸绑定。创造一个放松姿势如下：</paragraph>
            <paragraph>1. Make sure the rig parts are positioned in what looks like a "resting"
                arrangement.</paragraph>
            <enumerated_list enumtype="arabic" prefix="" start="2" suffix=".">
                <list_item>
                    <paragraph>创建一个新动画, 重命名为 "rest".</paragraph>
                </list_item>
                <list_item>
                    <paragraph>选择装配中的所有节点(应该可以框选).</paragraph>
                </list_item>
            </enumerated_list>
            <paragraph>4. Make sure the "loc", "rot", and "scl" toggle buttons are all active in the
                toolbar.</paragraph>
            <paragraph>5. Press the key button. Keys will be inserted for all selected parts storing
                their current arrangement. This pose can now be recalled when necessary in
                your game by playing the "rest" animation you've created.</paragraph>
            <image candidates="{'*': 'tutorials/animation/img/tuto_cutout21.png'}" uri="tutorials/animation/img/tuto_cutout21.png"></image>
        </section>
        <section ids="modifying-rotation-only" names="modifying\ rotation\ only 只修改旋转">
            <title>只修改旋转</title>
            <paragraph>当制作剪纸动画绑定时, 通常只需要改变节点的旋转. 很少使用位置和比例.</paragraph>
            <paragraph>因此, 在插入键时, 你可能会发现在大多数时间里只有 "rot" 切换键处于激活状态, 会很方便:</paragraph>
            <image candidates="{'*': 'tutorials/animation/img/tuto_cutout22.png'}" uri="tutorials/animation/img/tuto_cutout22.png"></image>
            <paragraph>这将避免为坐标和缩放创建不必要的动画轨道.</paragraph>
        </section>
        <section ids="keyframing-ik-chains" names="keyframing\ ik\ chains 关键帧\ ik\ 链">
            <title>关键帧 IK 链</title>
            <paragraph>编辑IK链时, 不需要选择整个链来添加关键帧. 选择链的端点并插入关键帧将自动为链的所有其他部分插入关键帧.</paragraph>
        </section>
        <section ids="visually-move-a-sprite-behind-its-parent" names="visually\ move\ a\ sprite\ behind\ its\ parent 视觉上移动父级后面的精灵">
            <title>视觉上移动父级后面的精灵</title>
            <paragraph>有时, 在动画过程中, 需要让节点相对于其父节点更改其可视深度. 想象一个面对镜头的角色, 他从背后拿出一个东西放在面前. 在这个动画过程中, 整个手臂和他手中的物体都需要改变相对于角色身体的视觉深度.</paragraph>
            <paragraph>为了帮助解决这个问题，在所有 Node2D 的派生节点上都有一个可制作关键帧的“Behind Parent”（在父级之后）属性。规划绑定时，请考虑它需要执行的动作，并考虑如何使用“Behind Parent”和/或 RemoteTransform2D 节点。它们提供重叠的功能。</paragraph>
            <image candidates="{'*': 'tutorials/animation/img/tuto_cutout23.png'}" uri="tutorials/animation/img/tuto_cutout23.png"></image>
        </section>
        <section ids="setting-easing-curves-for-multiple-keys" names="setting\ easing\ curves\ for\ multiple\ keys 为多个关键帧设置缓动曲线">
            <title>为多个关键帧设置缓动曲线</title>
            <paragraph>要将同一缓动曲线同时应用于多个关键帧:</paragraph>
            <enumerated_list enumtype="arabic" prefix="" suffix=".">
                <list_item>
                    <paragraph>选择相关的关键帧.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>点击动画面板右下角的铅笔图标. 这将打开过渡编辑器.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>在过渡编辑器中, 点击所需曲线进行应用.</paragraph>
                </list_item>
            </enumerated_list>
            <image candidates="{'*': 'tutorials/animation/img/tuto_cutout24.png'}" uri="tutorials/animation/img/tuto_cutout24.png"></image>
        </section>
        <section ids="d-skeletal-deform" names="2d\ skeletal\ deform 2d\ 骨架变形">
            <title>2D 骨架变形</title>
            <paragraph>骨架变形（Skeletal Deform）可以用来增强剪纸绑定，允许单个部件有组织地变形（例如，像昆虫走路时摆动的触角一样）。</paragraph>
            <paragraph>这个过程在<reference internal="True" refuri="2d_skeletons#doc-2d-skeletons"><inline classes="std std-ref">单独的教程</inline></reference>中讲述。</paragraph>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
