<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/tutorials/performance/vertex_animation/controlling_thousands_of_fish.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-controlling-thousands-of-fish"></target>
    <section ids="controlling-thousands-of-fish-with-particles doc-controlling-thousands-of-fish" names="controlling\ thousands\ of\ fish\ with\ particles 用粒子控制数千条鱼 doc_controlling_thousands_of_fish">
        <title>用粒子控制数千条鱼</title>
        <paragraph>The problem with <reference internal="True" refuri="../../../classes/class_meshinstance3d#class-meshinstance3d"><inline classes="std std-ref">MeshInstance3D</inline></reference> is that it is expensive to
            update their transform array. It is great for placing many static objects around the
            scene. But it is still difficult to move the objects around the scene.</paragraph>
        <paragraph>To make each instance move in an interesting way, we will use a
            <reference internal="True" refuri="../../../classes/class_gpuparticles3d#class-gpuparticles3d"><inline classes="std std-ref">GPUParticles3D</inline></reference> node. Particles take advantage of GPU acceleration
            by computing and setting the per-instance information in a <reference internal="True" refuri="../../../classes/class_shader#class-shader"><inline classes="std std-ref">Shader</inline></reference>.</paragraph>
        <paragraph>首先创建一个 Particles 节点。然后在“Draw Passes”下将粒子的“Draw Pass 1”设置为你的 <reference internal="True" refuri="../../../classes/class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference>。然后在“Process Material”下创建一个新的 <reference internal="True" refuri="../../../classes/class_shadermaterial#class-shadermaterial"><inline classes="std std-ref">ShaderMaterial</inline></reference>。</paragraph>
        <paragraph>将 <literal>shader_type</literal> 设置为 <literal>particles</literal>。</paragraph>
        <literal_block force="False" highlight_args="{}" language="glsl" linenos="False" xml:space="preserve">shader_type particles</literal_block>
        <paragraph>然后添加以下两个函数：</paragraph>
        <literal_block force="False" highlight_args="{}" language="glsl" linenos="False" xml:space="preserve">float rand_from_seed(in uint seed) {
  int k;
  int s = int(seed);
  if (s == 0)
    s = 305420679;
  k = s / 127773;
  s = 16807 * (s - k * 127773) - 2836 * k;
  if (s &lt; 0)
    s += 2147483647;
  seed = uint(s);
  return float(seed % uint(65536)) / 65535.0;
}

uint hash(uint x) {
  x = ((x &gt;&gt; uint(16)) ^ x) * uint(73244475);
  x = ((x &gt;&gt; uint(16)) ^ x) * uint(73244475);
  x = (x &gt;&gt; uint(16)) ^ x;
  return x;
}</literal_block>
        <paragraph>These functions come from the default <reference internal="True" refuri="../../../classes/class_particleprocessmaterial#class-particleprocessmaterial"><inline classes="std std-ref">ParticleProcessMaterial</inline></reference>.
            They are used to generate a random number from each particle's <literal>RANDOM_SEED</literal>.</paragraph>
        <paragraph>A unique thing about particle shaders is that some built-in variables are saved across frames.
            <literal>TRANSFORM</literal>, <literal>COLOR</literal>, and <literal>CUSTOM</literal> can all be accessed in the shader of the mesh, and
            also in the particle shader the next time it is run.</paragraph>
        <paragraph>Next, setup your <literal>start()</literal> function. Particles shaders contain a <literal>start()</literal> function and a
            <literal>process()</literal> function.</paragraph>
        <paragraph>The code in the <literal>start()</literal> function only runs when the particle system starts.
            The code in the <literal>process()</literal> function will always run.</paragraph>
        <paragraph>We need to generate 4 random numbers: 3 to create a random position and one for the random
            offset of the swim cycle.</paragraph>
        <paragraph>First, generate 4 seeds inside the <literal>start()</literal> function using the <literal>hash()</literal> function provided above:</paragraph>
        <literal_block force="False" highlight_args="{}" language="glsl" linenos="False" xml:space="preserve">uint alt_seed1 = hash(NUMBER + uint(1) + RANDOM_SEED);
uint alt_seed2 = hash(NUMBER + uint(27) + RANDOM_SEED);
uint alt_seed3 = hash(NUMBER + uint(43) + RANDOM_SEED);
uint alt_seed4 = hash(NUMBER + uint(111) + RANDOM_SEED);</literal_block>
        <paragraph>然后，使用这些种子生成随机数，使用 <literal>rand_from_seed</literal>：</paragraph>
        <literal_block force="False" highlight_args="{}" language="glsl" linenos="False" xml:space="preserve">CUSTOM.x = rand_from_seed(alt_seed1);
vec3 position = vec3(rand_from_seed(alt_seed2) * 2.0 - 1.0,
                     rand_from_seed(alt_seed3) * 2.0 - 1.0,
                     rand_from_seed(alt_seed4) * 2.0 - 1.0);</literal_block>
        <paragraph>最后，将 <literal>position</literal> 赋值给 <literal>TRANSFORM[3].xyz</literal>，它是保存位置信息的变换的一部分。</paragraph>
        <literal_block force="False" highlight_args="{}" language="glsl" linenos="False" xml:space="preserve">TRANSFORM[3].xyz = position * 20.0;</literal_block>
        <paragraph>Remember, all this code so far goes inside the <literal>start()</literal> function.</paragraph>
        <paragraph>网格的顶点着色器, 可以完全复用前一教程中的.</paragraph>
        <paragraph>现在每一帧你都可以单独移动每条鱼了，可以直接增加 <literal>TRANSFORM</literal> 也可以设置 <literal>VELOCITY</literal>。</paragraph>
        <paragraph>Let's transform the fish by setting their <literal>VELOCITY</literal> in the <literal>start()</literal> function.</paragraph>
        <literal_block force="False" highlight_args="{}" language="glsl" linenos="False" xml:space="preserve">VELOCITY.z = 10.0;</literal_block>
        <paragraph>这是设置 <literal>VELOCITY</literal> 的最基本方法，每个粒子（或鱼）都有相同的速度。</paragraph>
        <paragraph>只要设置 <literal>VELOCITY</literal>，你就可以让鱼自由游动。例如，尝试下面的代码。</paragraph>
        <literal_block force="False" highlight_args="{}" language="glsl" linenos="False" xml:space="preserve">VELOCITY.z = cos(TIME + CUSTOM.x * 6.28) * 4.0 + 6.0;</literal_block>
        <paragraph>这将为每条鱼在 <literal>2</literal> 和 <literal>10</literal> 之间设置不同的速度。</paragraph>
        <paragraph>You can also let each fish change its velocity over time if you set the velocity in the <literal>process()</literal>
            function.</paragraph>
        <paragraph>如果你在上一个教程中使用了 <literal>CUSTOM.y</literal>，你也可以基于 <literal>VELOCITY</literal> 来设置游泳动画的速度。直接用 <literal>CUSTOM.y</literal> 就好了。</paragraph>
        <literal_block force="False" highlight_args="{}" language="glsl" linenos="False" xml:space="preserve">CUSTOM.y = VELOCITY.z * 0.1;</literal_block>
        <paragraph>代码产生的效果如图:</paragraph>
        <image candidates="{'*': 'tutorials/performance/vertex_animation/img/scene.gif'}" uri="tutorials/performance/vertex_animation/img/scene.gif"></image>
        <paragraph>Using a ParticleProcessMaterial you can make the fish behavior as simple or complex as you like. In this
            tutorial we only set Velocity, but in your own Shaders you can also set <literal>COLOR</literal>, rotation, scale
            (through <literal>TRANSFORM</literal>). Please refer to the <reference internal="True" refuri="../../shaders/shader_reference/particle_shader#doc-particle-shader"><inline classes="std std-ref">Particles Shader Reference</inline></reference>
            for more information on particle shaders.</paragraph>
        <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
    </section>
</document>
