<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/tutorials/audio/sync_with_audio.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-sync-with-audio"></target>
    <section ids="sync-the-gameplay-with-audio-and-music doc-sync-with-audio" names="sync\ the\ gameplay\ with\ audio\ and\ music 同步游戏音频及音乐 doc_sync_with_audio">
        <title>同步游戏音频及音乐</title>
        <section ids="introduction" names="introduction 前言">
            <title>前言</title>
            <paragraph>在任何应用程序或游戏中, 声音和音乐播放都会有轻微的延迟. 对于游戏, 这种延迟往往小到可以忽略不计. 在调用任意play()函数后, 声音效果将在几毫秒后出现. 对于音乐来说这并不重要, 因为在大多数游戏中它不会产生互动.</paragraph>
            <paragraph>不过, 对于一些游戏(主要是节奏游戏), 可能会需要让玩家的操作与歌曲中发生的事情同步(通常与BPM同步). 因此, 得到一个具体播放位置的更精确的定时信息就很有用了.</paragraph>
            <paragraph>极其精准地定位播放时间是非常困难的. 因为在音频回放过程中有很多因素在起作用:</paragraph>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>音频以块(不连续)的形式混合在一起, 具体取决于所使用的音频缓冲区的大小(在项目设置中检查延迟).</paragraph>
                </list_item>
                <list_item>
                    <paragraph>混合的音频块不会立即播放.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>图形应用程序接口延迟显示两到三帧.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>当在电视上播放时, 由于图像处理可能会增加一些延迟.</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>最常见的减少延迟的方法是缩小音频缓冲区(同样是通过编辑项目设置中的延迟设置). 问题是, 当延迟很小时, 声音混合将占用大量的CPU. 这就增加了跳音的风险(由于混合回调丢失, 导致声音出现裂缝).</paragraph>
            <paragraph>这是一种常见的折衷方案, 因此Godot附带了合理的默认值. 一般这些默认值不需要更改.</paragraph>
            <paragraph>归根结底, 问题并不在于这一点点的延迟, 而是同步游戏的画面和声音. 从Godot 3.2开始, 加入了一些辅助工具, 帮助获取更精确的播放时间.</paragraph>
        </section>
        <section ids="using-the-system-clock-to-sync" names="using\ the\ system\ clock\ to\ sync 使用系统时钟同步">
            <title>使用系统时钟同步</title>
            <paragraph>如前所述, 如果你调用 <reference internal="True" refuri="../../classes/class_audiostreamplayer#class-audiostreamplayer-method-play"><inline classes="std std-ref">AudioStreamPlayer.play()</inline></reference> , 声音不会立即开始播放, 而是在音频线程处理下一个块时开始.</paragraph>
            <paragraph>这个延迟是无法避免的, 但是可以通过调用 <reference internal="True" refuri="../../classes/class_audioserver#class-audioserver-method-get-time-to-next-mix"><inline classes="std std-ref">AudioServer.get_time_to_next_mix()</inline></reference> 来估算.</paragraph>
            <paragraph>输出延迟(混音后的情况)可以通过调用 <reference internal="True" refuri="../../classes/class_audioserver#class-audioserver-method-get-output-latency"><inline classes="std std-ref">AudioServer.get_output_latency()</inline></reference> 来估算.</paragraph>
            <paragraph>把这两样加起来, 就可以几乎准确地猜到 <emphasis>_process()</emphasis> 中的音效或音乐什么时候开始在扬声器中播放:</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var time_begin
var time_delay


func _ready():
    time_begin = Time.get_ticks_usec()
    time_delay = AudioServer.get_time_to_next_mix() + AudioServer.get_output_latency()
    $Player.play()


func _process(delta):
    # Obtain from ticks.
    var time = (Time.get_ticks_usec() - time_begin) / 1000000.0
    # Compensate for latency.
    time -= time_delay
    # May be below 0 (did not begin yet).
    time = max(0, time)
    print("Time is: ", time)</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">private double _timeBegin;
private double _timeDelay;

public override void _Ready()
{
    _timeBegin = Time.GetTicksUsec();
    _timeDelay = AudioServer.GetTimeToNextMix() + AudioServer.GetOutputLatency();
    GetNode&lt;AudioStreamPlayer&gt;("Player").Play();
}

public override void _Process(float _delta)
{
    double time = (Time.GetTicksUsec() - _timeBegin) / 1000000.0d;
    time = Math.Max(0.0d, time - _timeDelay);
    GD.Print(string.Format("Time is: {0}", time));
}</literal_block>
                </div>
            </container>
            <paragraph>然而, 从长远来看, 由于声音硬件时钟从未与系统时钟完全同步, 计时信息会逐渐偏移.</paragraph>
            <paragraph>在节奏游戏中, 一首歌持续时长仅有几分钟, 这种方法就很适合(也是推荐的方法). 而对于一款播放时间更长的游戏来说, 游戏最终将失去同步, 因此需要一种不同的方法.</paragraph>
        </section>
        <section ids="using-the-sound-hardware-clock-to-sync" names="using\ the\ sound\ hardware\ clock\ to\ sync 使用声音硬件时钟同步">
            <title>使用声音硬件时钟同步</title>
            <paragraph>虽然可以使用 <reference internal="True" refuri="../../classes/class_audiostreamplayer#class-audiostreamplayer-method-get-playback-position"><inline classes="std std-ref">AudioStreamPlayer.get_playback_position()</inline></reference> 来获取歌曲的当前位置, 但实际并没有那么实用. 这个值(每逢音频回调混合一块声音时)将以块为单位递增, 导致多次调用可能返回相同的值. 除此之外, 由于前面提到的原因, 该值也将与扬声器失去同步.</paragraph>
            <paragraph>为了补偿 "chunked"(分块)输出, 有个函数能有所帮助: <reference internal="True" refuri="../../classes/class_audioserver#class-audioserver-method-get-time-since-last-mix"><inline classes="std std-ref">AudioServer.get_time_since_last_mix()</inline></reference>.</paragraph>
            <paragraph>将这个函数的返回值与 <emphasis>get_playback_position()</emphasis> 相加可以提高精度:</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-1-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-1-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-1-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var time = $Player.get_playback_position() + AudioServer.get_time_since_last_mix()</literal_block>
                </div>
                <div aria-labelledby="tab-1-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-1-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">double time = GetNode&lt;AudioStreamPlayer&gt;("Player").GetPlaybackPosition() + AudioServer.GetTimeSinceLastMix();</literal_block>
                </div>
            </container>
            <paragraph>为了提高精度, 减去延迟信息(音频从混合后到被听见花费的时间):</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-2-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-2-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-2-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var time = $Player.get_playback_position() + AudioServer.get_time_since_last_mix() - AudioServer.get_output_latency()</literal_block>
                </div>
                <div aria-labelledby="tab-2-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-2-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">double time = GetNode&lt;AudioStreamPlayer&gt;("Player").GetPlaybackPosition() + AudioServer.GetTimeSinceLastMix() - AudioServer.GetOutputLatency();</literal_block>
                </div>
            </container>
            <paragraph>由于多线程的工作方式, 结果可能会有点轻微抖动. 只需检查该值是否小于前一帧中的值(如果小于, 则将其丢弃). 这个方法也不如之前的精确, 但它适用于任何长度的歌曲, 或者将任何东西(例如音效)与音乐同步.</paragraph>
            <paragraph>下面是使用这种方法之前相同的代码:</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-3-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-3-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-3-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-3-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-3-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-3-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func _ready():
    $Player.play()


func _process(delta):
    var time = $Player.get_playback_position() + AudioServer.get_time_since_last_mix()
    # Compensate for output latency.
    time -= AudioServer.get_output_latency()
    print("Time is: ", time)</literal_block>
                </div>
                <div aria-labelledby="tab-3-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-3-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">public override void _Ready()
{
    GetNode&lt;AudioStreamPlayer&gt;("Player").Play();
}

public override void _Process(float _delta)
{
    double time = GetNode&lt;AudioStreamPlayer&gt;("Player").GetPlaybackPosition() + AudioServer.GetTimeSinceLastMix();
    // Compensate for output latency.
    time -= AudioServer.GetOutputLatency();
    GD.Print(string.Format("Time is: {0}", time));
}</literal_block>
                </div>
            </container>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
