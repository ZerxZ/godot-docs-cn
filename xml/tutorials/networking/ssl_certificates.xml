<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/tutorials/networking/ssl_certificates.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-ssl-certificates"></target>
    <section ids="ssl-tls-certificates doc-ssl-certificates" names="ssl/tls\ certificates doc_ssl_certificates">
        <title>SSL/TLS certificates</title>
        <section ids="introduction" names="introduction 前言">
            <title>前言</title>
            <paragraph>It is often desired to use <abbreviation explanation="Secure Sockets Layer">SSL</abbreviation> connections (also
                known as <abbreviation explanation="Transport Layer Security">TLS</abbreviation> connections) for communications
                to avoid "man in the middle" attacks. Godot has a connection wrapper,
                <reference internal="True" refuri="../../classes/class_streampeertls#class-streampeertls"><inline classes="std std-ref">StreamPeerTLS</inline></reference>, which can take a regular connection
                and add security around it. The <reference internal="True" refuri="../../classes/class_httpclient#class-httpclient"><inline classes="std std-ref">HTTPClient</inline></reference> and
                <reference internal="True" refuri="../../classes/class_httprequest#class-httprequest"><inline classes="std std-ref">HTTPRequest</inline></reference> classes also support HTTPS using
                this same wrapper.</paragraph>
            <paragraph>Godot includes the
                <reference name="SSL certificate bundle from Mozilla" refuri="https://github.com/godotengine/godot/blob/master/thirdparty/certs/ca-certificates.crt">SSL certificate bundle from Mozilla</reference>,
                but you can provide your own with a CRT file in the Project Settings:</paragraph>
            <figure align="center" ids="id1">
                <image alt="Setting the TLS certificate bundle override project setting" candidates="{'*': 'tutorials/networking/img/tls_certificates_project_setting.webp'}" uri="tutorials/networking/img/tls_certificates_project_setting.webp"></image>
                <caption>Setting the TLS certificate bundle override project setting</caption>
            </figure>
            <paragraph>When set, this file <emphasis>overrides</emphasis> the Mozilla certificate bundle Godot uses
                by default. This file should contain any number of public certificates in
                <reference name="PEM format" refuri="https://en.wikipedia.org/wiki/Privacy-enhanced_Electronic_Mail">PEM format</reference>.</paragraph>
            <paragraph>Remember to add <literal>*.crt</literal> as the non-resource export filter to your export
                preset, so that the exporter recognizes this when exporting your project:</paragraph>
            <figure align="center" ids="id2">
                <image alt="Adding ``*.crt`` to non-resource export filter in the export preset" candidates="{'*': 'tutorials/networking/img/tls_certificates_export_filter.webp'}" uri="tutorials/networking/img/tls_certificates_export_filter.webp"></image>
                <caption>Adding <literal>*.crt</literal> to non-resource export filter in the export preset</caption>
            </figure>
            <paragraph>获取证书有两种方法:</paragraph>
        </section>
        <section ids="acquire-a-certificate-from-a-certificate-authority" names="acquire\ a\ certificate\ from\ a\ certificate\ authority">
            <title>Acquire a certificate from a certificate authority</title>
            <paragraph>The main approach to getting a certificate is to use a certificate authority
                (CA) such as <reference name="Let's Encrypt" refuri="https://letsencrypt.org/">Let's Encrypt</reference>. This is a more
                cumbersome process than a self-signed certificate, but it's more "official" and
                ensures your identity is clearly represented. The resulting certificate is also
                trusted by applications such as web browsers, unlike a self-signed certificate
                which requires additional configuration on the client side before it's
                considered trusted.</paragraph>
            <paragraph>These certificates do not require any configuration on the client to work, since
                Godot already bundles the Mozilla certificate bundle in the editor and exported
                projects.</paragraph>
        </section>
        <section ids="generate-a-self-signed-certificate" names="generate\ a\ self-signed\ certificate">
            <title>Generate a self-signed certificate</title>
            <paragraph>For most use cases, it's recommended to go through certificate authority as the
                process is free with certificate authorities such as Let's Encrypt. However, if
                using a certificate authority is not an option, then you can generate a
                self-signed certificate and tell the client to consider your self-signed
                certificate as trusted.</paragraph>
            <paragraph>To create a self-signed certificate, generate a private and public key pair and
                add the public key (in PEM format) to the CRT file specified in the Project
                Settings.</paragraph>
            <warning>
                <paragraph>The private key should <strong>only</strong> go to your server. The client must not have
                    access to it: otherwise, the security of the certificate will be
                    compromised.</paragraph>
            </warning>
            <paragraph>OpenSSL has <reference name="some documentation" refuri="https://raw.githubusercontent.com/openssl/openssl/master/doc/HOWTO/keys.txt">some documentation</reference>
                about this. For local development purposes <strong>only</strong>, <reference name="mkcert" refuri="https://github.com/FiloSottile/mkcert">mkcert</reference> can be used as an alternative.</paragraph>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
