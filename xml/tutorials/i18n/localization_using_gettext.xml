<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/tutorials/i18n/localization_using_gettext.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-localization-using-gettext"></target>
    <section ids="localization-using-gettext doc-localization-using-gettext" names="localization\ using\ gettext 使用\ gettext\ 进行本地化 doc_localization_using_gettext">
        <title>使用 gettext 进行本地化</title>
        <paragraph>In addition to <reference internal="True" refuri="../assets_pipeline/importing_translations#doc-importing-translations"><inline classes="std std-ref">导入翻译</inline></reference> in CSV format, Godot
            also supports loading translation files written in the GNU gettext
            format (text-based <literal>.po</literal> and compiled <literal>.mo</literal> since Godot 4.0).</paragraph>
        <note>
            <paragraph>有关 gettext 的介绍，请查看 <reference name="A Quick Gettext Tutorial" refuri="https://www.labri.fr/perso/fleury/posts/programming/a-quick-gettext-tutorial.html">A Quick Gettext Tutorial</reference><target ids="a-quick-gettext-tutorial" names="a\ quick\ gettext\ tutorial" refuri="https://www.labri.fr/perso/fleury/posts/programming/a-quick-gettext-tutorial.html"></target>。它是针对 C 项目编写的，但是很多建议也适用于 Godot（除了 <literal>xgettext</literal>）。</paragraph>
        </note>
        <section ids="advantages" names="advantages 优势">
            <title>优势</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>gettext 是一种标准格式，可以使用任何文本编辑器或图形用户界面编辑器（如 <reference name="Poedit" refuri="https://poedit.net/">Poedit</reference><target ids="poedit" names="poedit" refuri="https://poedit.net/"></target>）进行编辑。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="Transifex" refuri="https://www.transifex.com/">Transifex</reference><target ids="transifex" names="transifex" refuri="https://www.transifex.com/"></target> 和 <reference name="Weblate" refuri="https://weblate.org/">Weblate</reference><target ids="weblate" names="weblate" refuri="https://weblate.org/"></target> 等翻译平台也支持 gettext，让人们可以更方便地进行本地化协作。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>与 CSV 相比，gettext 更适合 Git 这样的版本控制系统，因为每个语言环境都有自己的消息文件。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>与 CSV 文件相比，在 gettext 文件中编辑多行字符串更方便。</paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section ids="disadvantages" names="disadvantages 缺点">
            <title>缺点</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>gettext 是一种比 CSV 更复杂的格式，对于刚接触软件本地化的人来说可能更难理解。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>维护本地化文件的人员必须在其系统上安装 gettext 工具。但是，由于 Godot 支持使用基于文本的消息文件（<literal>.po</literal>），翻译人员无需安装 gettext 工具即可测试他们的工作。</paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section ids="installing-gettext-tools" names="installing\ gettext\ tools 安装\ gettext\ 工具">
            <title>安装 gettext 工具</title>
            <paragraph>需要命令行 gettext 工具来执行维护操作，如更新消息文件。因此，强烈建议你安装它们。</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><strong>Windows：</strong>从<reference name="该页面" refuri="https://mlocati.github.io/articles/gettext-iconv-windows.html">该页面</reference><target ids="id1" names="该页面" refuri="https://mlocati.github.io/articles/gettext-iconv-windows.html"></target>下载安装程序。任何体系结构和二进制类型（共享或静态）都可以；如果不确定，请选择 64 位静态安装程序。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><strong>macOS：</strong>使用 <reference name="Homebrew" refuri="https://brew.sh/">Homebrew</reference><target ids="homebrew" names="homebrew" refuri="https://brew.sh/"></target> 的 <literal>brew install gettext</literal> 命令来安装 gettext，或使用 <reference name="MacPorts" refuri="https://www.macports.org/">MacPorts</reference><target ids="macports" names="macports" refuri="https://www.macports.org/"></target> 的 <literal>sudo port install gettext</literal> 命令来安装。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><strong>Linux：</strong>在大多数发行版上，请使用发行版的包管理器安装 <literal>gettext</literal> 包。</paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section ids="creating-the-po-template" names="creating\ the\ po\ template 创建\ po\ 模板">
            <title>创建 PO 模板</title>
            <section ids="automatic-generation-using-the-editor" names="automatic\ generation\ using\ the\ editor 使用编辑器自动生成">
                <title>使用编辑器自动生成</title>
                <paragraph>Since Godot 4.0, the editor can generate a PO template automatically from
                    specified scene and GDScript files. This POT generation also supports translation
                    contexts and pluralization if used in a script, with the optional second
                    argument of <literal>tr()</literal> and the <literal>tr_n()</literal> method.</paragraph>
                <paragraph>打开项目设置的<strong>本地化 &gt; POT 生成</strong>选项卡，然后使用<strong>添加...</strong> 按钮指定项目中包含可本地化字符串的场景和脚本的路径：</paragraph>
                <figure align="center" ids="id1">
                    <image alt="在项目设置的“本地化 &gt; POT 生成”选项卡中创建 PO 模板" candidates="{'*': 'tutorials/i18n/img/localization_using_gettext_pot_generation.webp'}" uri="tutorials/i18n/img/localization_using_gettext_pot_generation.webp"></image>
                    <caption>在项目设置的<strong>本地化 &gt; POT 生成</strong>选项卡中创建 PO 模板</caption>
                </figure>
                <paragraph>After adding at least one scene or script, click <strong>Generate POT</strong> in the
                    top-right corner, then specify the path to the output file. This file can be
                    placed anywhere in the project directory, but it's recommended to keep it in a
                    subdirectory such as <literal>locale</literal>, as each locale will be defined in its own file.</paragraph>
                <paragraph>You can then move over to
                    <reference internal="True" refid="doc-localization-using-gettext-messages-file"><inline classes="std std-ref">creating a messages file from a PO template</inline></reference>.</paragraph>
                <note>
                    <paragraph>Remember to regenerate the PO template after making any changes to
                        localizable strings, or after adding new scenes or scripts. Otherwise, newly
                        added strings will not be localizable and translators won't be able to
                        update translations for outdated strings.</paragraph>
                </note>
            </section>
            <section ids="manual-creation" names="manual\ creation 手动创建">
                <title>手动创建</title>
                <paragraph>If the automatic generation approach doesn't work out for your needs, you can
                    create a PO template by hand in a text editor. This file can be placed anywhere
                    in the project directory, but it's recommended to keep it in a subdirectory, as
                    each locale will be defined in its own file.</paragraph>
                <paragraph>Create a directory named <literal>locale</literal> in the project directory. In this directory,
                    save a file named <literal>messages.pot</literal> with the following contents:</paragraph>
                <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve"># Don't remove the two lines below, they're required for gettext to work correctly.
msgid ""
msgstr ""

# Example of a regular string.
msgid "Hello world!"
msgstr ""

# Example of a string with pluralization.
msgid "There is %d apple."
msgid_plural "There are %d apples."
msgstr[0] ""
msgstr[1] ""

# Example of a string with a translation context.
msgctxt "Actions"
msgid "Close"
msgstr ""</literal_block>
                <paragraph>gettext 中的消息由 <literal>msgid</literal> 和 <literal>msgstr</literal> 对组成。<literal>msgid</literal> 为源字符串（一般为英文），<literal>msgstr</literal> 为翻译后的字符串。</paragraph>
                <warning>
                    <paragraph>PO 模板文件（<literal>.pot</literal>）中的 <literal>msgstr</literal> 值应<strong>始终</strong>为空。本地化会在生成的 <literal>.po</literal> 文件中进行。</paragraph>
                </warning>
                <target refid="doc-localization-using-gettext-messages-file"></target>
            </section>
        </section>
        <section ids="creating-a-messages-file-from-a-po-template doc-localization-using-gettext-messages-file" names="creating\ a\ messages\ file\ from\ a\ po\ template 从\ po\ 模板创建消息文件 doc_localization_using_gettext_messages_file">
            <title>从 PO 模板创建消息文件</title>
            <paragraph><literal>msginit</literal> 命令用于将 PO 模板转换为消息文件。例如，要创建法语本地化文件，请在 <literal>locale</literal> 目录中使用以下命令：</paragraph>
            <literal_block force="False" highlight_args="{}" language="shell" linenos="False" xml:space="preserve">msginit --no-translator --input=messages.pot --locale=fr</literal_block>
            <paragraph>上面的命令会在 PO 模板所在的目录下创建一个名为 <literal>fr.po</literal> 的文件。</paragraph>
            <paragraph>或者，你可以使用 Poedit 以图形方式完成此操作，或者通过将 POT 文件上传到你选择的 Web 平台。</paragraph>
        </section>
        <section ids="loading-a-messages-file-in-godot" names="loading\ a\ messages\ file\ in\ godot 在\ godot\ 中加载消息文件">
            <title>在 Godot 中加载消息文件</title>
            <paragraph>如果要将消息文件注册为项目的翻译，请打开<strong>项目设置</strong>，然后进入<strong>本地化</strong>选项卡。在<strong>翻译</strong>中单击<strong>添加...</strong>，然后在文件对话框中选择该 <literal>.po</literal> 或者 <literal>.mo</literal> 文件。区域设置将从消息文件的 <literal>"Language: &lt;code&gt;\n"</literal> 属性中推算出来。</paragraph>
            <note>
                <paragraph>关于在 Godot 中导入和测试翻译的更多信息，请参阅 <reference internal="True" refuri="internationalizing_games#doc-internationalizing-games"><inline classes="std std-ref">使游戏国际化</inline></reference>。</paragraph>
            </note>
        </section>
        <section ids="updating-message-files-to-follow-the-po-template" names="updating\ message\ files\ to\ follow\ the\ po\ template 按照\ po\ 模板更新消息文件">
            <title>按照 PO 模板更新消息文件</title>
            <paragraph>更新 PO 模板后，你必须更新消息文件以使其包含新字符串，同时删除已经在 PO 模板中不复存在的字符串。这可以使用 <literal>msgmerge</literal> 工具自动完成：</paragraph>
            <literal_block force="False" highlight_args="{}" language="shell" linenos="False" xml:space="preserve"># The order matters: specify the message file *then* the PO template!
msgmerge --update --backup=none fr.po messages.pot</literal_block>
            <paragraph>如果你想保留原始消息文件的备份，在本例中会保存为 <literal>fr.po~</literal> ，请删除 <literal>--backup=none</literal> 参数。</paragraph>
            <note>
                <paragraph>运行 <literal>msgmerge</literal> 后，如果源语言修改了某个字符串，那么在 <literal>.po</literal> 文件中就会在这个字符串之前加入“fuzzy”注释。这个注释表示的是翻译应当针对新字符串进行更新，因为现有翻译非常可能是不精确的。</paragraph>
                <paragraph>Godot <strong>不会</strong>读取带有“fuzzy”注释的字符串，需要更新翻译并移除“fuzzy”注释才行。</paragraph>
            </note>
        </section>
        <section ids="checking-the-validity-of-a-po-file-or-template" names="checking\ the\ validity\ of\ a\ po\ file\ or\ template 检查\ po\ 文件或模板的有效性">
            <title>检查 PO 文件或模板的有效性</title>
            <paragraph>可以通过运行以下命令来检查 gettext 文件的语法是否有效：</paragraph>
            <literal_block force="False" highlight_args="{}" language="shell" linenos="False" xml:space="preserve">msgfmt fr.po --check</literal_block>
            <paragraph>如果有语法错误或警告，他们将显示在控制台。否则，<literal>msgfmt</literal> 不会输出任何东西。</paragraph>
        </section>
        <section ids="using-binary-mo-files-useful-for-large-projects-only" names="using\ binary\ mo\ files\ (useful\ for\ large\ projects\ only) 使用二进制\ mo\ 文件（仅适用于大型项目）">
            <title>使用二进制 MO 文件（仅适用于大型项目）</title>
            <paragraph>大型项目会有成千上万的字符串要翻译，相比于基于文本的 PO 文件，使用（编译为）二进制的 MO 消息文件可能更加划算。二进制 MO 文件比对应的 PO 文件更小、读起来更快。</paragraph>
            <paragraph>你可以使用下面的命令生成 MO 文件：</paragraph>
            <literal_block force="False" highlight_args="{}" language="shell" linenos="False" xml:space="preserve">msgfmt fr.po --no-hash -o fr.mo</literal_block>
            <paragraph>If the PO file is valid, this command will create a <literal>fr.mo</literal> file besides
                the PO file. This MO file can then be loaded in Godot as described above.</paragraph>
            <paragraph>应该在版本控制中保留原始 PO 文件，这样以后就可以更新翻译。如果你丢失了原始的 PO 文件，希望将 MO 文件反编译为基于文本的 PO 文件，你可以这样做：</paragraph>
            <literal_block force="False" highlight_args="{}" language="shell" linenos="False" xml:space="preserve">msgunfmt fr.mo &gt; fr.po</literal_block>
            <paragraph>反编译出的文件不包含注释和模糊字符串，因为它们一开始就没有编译进 MO 文件里。</paragraph>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
