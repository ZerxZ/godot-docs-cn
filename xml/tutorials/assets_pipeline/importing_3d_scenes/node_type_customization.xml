<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/tutorials/assets_pipeline/importing_3d_scenes/node_type_customization.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-importing-3d-scenes-node-type-customization"></target>
    <section ids="node-type-customization-using-name-suffixes doc-importing-3d-scenes-node-type-customization" names="node\ type\ customization\ using\ name\ suffixes 使用名称后缀自定义节点类型 doc_importing_3d_scenes_node_type_customization">
        <title>使用名称后缀自定义节点类型</title>
        <paragraph>很多时候，编辑场景时，导出后需要完成一些常见任务：</paragraph>
        <bullet_list bullet="-">
            <list_item>
                <paragraph>向对象添加碰撞检测。</paragraph>
            </list_item>
            <list_item>
                <paragraph>将对象设置为导航网格。</paragraph>
            </list_item>
            <list_item>
                <paragraph>删除游戏引擎中未使用的节点（例如用于建模的特定光源）。</paragraph>
            </list_item>
        </bullet_list>
        <paragraph>为简化此工作流程，Godot 提供了一些后缀，可以将其添加到 3D 建模软件中的对象名称中。导入后，Godot 将检测到对象名称中的后缀并自动执行操作。</paragraph>
        <warning>
            <paragraph>下面描述的所有后缀都是<emphasis>大小写敏感</emphasis>的。</paragraph>
        </warning>
        <section ids="remove-nodes-noimp" names="remove\ nodes\ (-noimp) 删除节点（-noimp）">
            <title>删除节点（-noimp）</title>
            <paragraph>无论是什么类型的节点，具有 <literal>-noimp</literal> 后缀的对象都会在导入时被移除，不会出现在导入后的场景中。</paragraph>
            <paragraph>这相当于在高级导入设置对话框中为节点启用 <strong>跳过导入</strong> 功能。</paragraph>
        </section>
        <section ids="create-collisions-col-convcol-colonly-convcolonly" names="create\ collisions\ (-col,\ -convcol,\ -colonly,\ -convcolonly) 创建碰撞体（-col、-convcol、-colonly、-convcolonly）">
            <title>创建碰撞体（-col、-convcol、-colonly、-convcolonly）</title>
            <paragraph><literal>-col</literal> 选项只作用于网格物体. 如果该选项被检测到, 将会添加一个静态碰撞体的子节点, 用的是跟网格一样的几何体. 这会创建一个三角形网格碰撞体, 这个选项对碰撞检测来说很慢但是精确. 这个选项通常是关卡几何体需要的(但是也看看下面的 <literal>-colonly</literal> ).</paragraph>
            <paragraph><literal>-convcol</literal> 选项将创建一个 <reference internal="True" refuri="../../../classes/class_convexpolygonshape3d#class-convexpolygonshape3d"><inline classes="std std-ref">ConvexPolygonShape3D</inline></reference> 而不是 <reference internal="True" refuri="../../../classes/class_concavepolygonshape3d#class-concavepolygonshape3d"><inline classes="std std-ref">ConcavePolygonShape3D</inline></reference>。不像可以是凹型的三角形网格，凸型的形状只能精确的表示它没有任何凹型角度（金字塔是凸型，但空心盒子是凹型）。因此，凸型碰撞体通常不适用于关卡几何体。当说到一个很简单的网格时，凸型碰撞体相对三角形碰撞体有更好的性能。这个选项适用于简单的物体，或是需要大多数时精确碰撞检测的动态物体。</paragraph>
            <paragraph>然而，在这两个例子中，视觉几何体处理过于复杂或对于碰撞而言不够光滑。物理引擎会出现小故障从而不必要地降低了引擎的速度。</paragraph>
            <paragraph>为了解决这个问题，存在 <literal>-colony</literal> 修饰符。该修饰符将在导入时删除网格，并创建一个 <reference internal="True" refuri="../../../classes/class_staticbody3d#class-staticbody3d"><inline classes="std std-ref">StaticBody3D</inline></reference> 静态碰撞体。这有助于将可视网格和实际碰撞体分开。</paragraph>
            <paragraph><literal>-convcolonly</literal> 选项的工作方式类似，但会创建一个 <reference internal="True" refuri="../../../classes/class_convexpolygonshape3d#class-convexpolygonshape3d"><inline classes="std std-ref">ConvexPolygonShape3D</inline></reference>，而不是使用凸分解。</paragraph>
            <paragraph>对于 Collada 文件，选项 <literal>-colonly</literal> 也可以与 Blender 的空对象一起使用。导入时，它将创建一个 <reference internal="True" refuri="../../../classes/class_staticbody3d#class-staticbody3d"><inline classes="std std-ref">StaticBody3D</inline></reference>，并将碰撞节点作为子节点。碰撞节点将具有许多预定义的形状之一，具体取决于 Blender 的空绘制类型：</paragraph>
            <figure align="center" ids="id1">
                <image alt="在 Blender 中为 Empty 选择创建时的绘制类型" candidates="{'*': 'tutorials/assets_pipeline/importing_3d_scenes/img/importing_3d_scenes_blender_empty_draw_types.webp'}" uri="tutorials/assets_pipeline/importing_3d_scenes/img/importing_3d_scenes_blender_empty_draw_types.webp"></image>
                <caption>在 Blender 中为 Empty 选择创建时的绘制类型</caption>
            </figure>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>单箭头将创建 <reference internal="True" refuri="../../../classes/class_separationrayshape3d#class-separationrayshape3d"><inline classes="std std-ref">SeparationRayShape3D</inline></reference>。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>方块将创建 <reference internal="True" refuri="../../../classes/class_boxshape3d#class-boxshape3d"><inline classes="std std-ref">BoxShape3D</inline></reference>。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>图像将创建 <reference internal="True" refuri="../../../classes/class_worldboundaryshape3d#class-worldboundaryshape3d"><inline classes="std std-ref">WorldBoundaryShape3D</inline></reference>。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>球体（和其他未列出的类型）将创建 <reference internal="True" refuri="../../../classes/class_sphereshape3d#class-sphereshape3d"><inline classes="std std-ref">SphereShape3D</inline></reference>。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>可能的话，请<strong>试着使用少量图元碰撞形状</strong>，而不是三角形网格或凸型体。图元形状的性能和可靠性通常更好。</paragraph>
            <note>
                <paragraph>为了在 Blender 编辑器上获得更好的可见性，可以在碰撞空物体上设置“透视”选项，并通过更改 <strong>编辑 &gt; 偏好设置 &gt; 主题 &gt; 3D 视图 &gt; 空物体</strong> 选项为其设置不同的颜色。</paragraph>
                <paragraph>如果使用的是 Blender 2.79 或更早版本，请按照以下步骤操作： <strong>用户偏好设置 &gt; 主题 &gt; 3D视图 &gt; 空</strong> 。</paragraph>
            </note>
            <seealso>
                <paragraph>碰撞体全面概述请查看 <reference internal="True" refuri="../../physics/collision_shapes_3d#doc-collision-shapes-3d"><inline classes="std std-ref">碰撞形状（3D）</inline></reference>.</paragraph>
            </seealso>
        </section>
        <section ids="create-occluder-occ-occonly" names="create\ occluder\ (-occ,\ -occonly)">
            <title>Create Occluder (-occ, -occonly)</title>
            <paragraph>If a mesh is imported with the <literal>-occ</literal> suffix an <reference internal="True" refuri="../../../classes/class_occluder3d#class-occluder3d"><inline classes="std std-ref">Occluder3D</inline></reference> node
                will be created based on the geometry of the mesh, it does not replace the mesh.
                A mesh node with the <literal>-occonly</literal> suffix will be converted to an
                <reference internal="True" refuri="../../../classes/class_occluder3d#class-occluder3d"><inline classes="std std-ref">Occluder3D</inline></reference> on import.</paragraph>
        </section>
        <section ids="create-navigation-navmesh" names="create\ navigation\ (-navmesh) 创建导航（-navmesh）">
            <title>创建导航（-navmesh）</title>
            <paragraph>具有 <literal>-navmesh</literal> 后缀的网格节点, 将被转换为导航网格. 原始网格节点将在导入时被删除.</paragraph>
        </section>
        <section ids="create-a-vehiclebody-vehicle" names="create\ a\ vehiclebody\ (-vehicle) 创建\ vehiclebody（-vehicle）">
            <title>创建 VehicleBody（-vehicle）</title>
            <paragraph>具有 <literal>-vehicle</literal> 后缀的网格节点， 将作为一个 <reference internal="True" refuri="../../../classes/class_vehiclebody3d#class-vehiclebody3d"><inline classes="std std-ref">VehicleBody3D</inline></reference> 节点的子节点被导入。</paragraph>
        </section>
        <section ids="create-a-vehiclewheel-wheel" names="create\ a\ vehiclewheel\ (-wheel) 创建\ vehiclewheel（-wheel）">
            <title>创建 VehicleWheel（-wheel）</title>
            <paragraph>具有 <literal>-wheel</literal> 后缀的网格节点，将作为一个 <reference internal="True" refuri="../../../classes/class_vehiclewheel3d#class-vehiclewheel3d"><inline classes="std std-ref">VehicleWheel3D</inline></reference> 节点的子节点被导入。</paragraph>
        </section>
        <section ids="rigid-body-rigid" names="rigid\ body\ (-rigid) 刚体（-rigid）">
            <title>刚体（-rigid）</title>
            <paragraph>具有 <literal>-rigid</literal> 后缀的网格节点，将作为一个 <reference internal="True" refuri="../../../classes/class_rigidbody3d#class-rigidbody3d"><inline classes="std std-ref">RigidBody3D</inline></reference> 节点的子节点被导入。</paragraph>
        </section>
        <section ids="animation-loop-loop-cycle" names="animation\ loop\ (-loop,\ -cycle) 动画循环（-loop、-cycle）">
            <title>动画循环（-loop、-cycle）</title>
            <paragraph>源 3D 文件中以标记 <literal>loop</literal> 或 <literal>cycle</literal> 开始或结束的动画剪辑，将作为设置了循环标志的 Godot <reference internal="True" refuri="../../../classes/class_animation#class-animation"><inline classes="std std-ref">Animation</inline></reference> 导入。 <strong>这与上述其他后缀不同，不需要连字符。</strong></paragraph>
            <paragraph>在 Blender 中，这需要使用 NLA 编辑器，并用 <literal>loop</literal> 或 <literal>cycle</literal> 前缀或后缀命名该动作。</paragraph>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
