<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/tutorials/scripting/instancing_with_signals.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <meta content="信号" name="keywords">
    </meta>
    <target refid="doc-instancing-with-signals"></target>
    <section ids="instancing-with-signals doc-instancing-with-signals" names="instancing\ with\ signals 实例化与信号 doc_instancing_with_signals">
        <title>实例化与信号</title>
        <paragraph>信号提供了一种解耦游戏对象的方式, 让你避免强行强制固定节点排列. 当使用 <literal>get_parent()</literal> 时, 你会发现可能需要调用信号的一个标志, 直接引用一个节点的父节点意味着你不能轻易地将该节点移动到场景树的另一个位置. 当你在运行时实例化对象, 并且可能想把它们放在运行中的场景树的任意位置时, 这可能是个问题.</paragraph>
        <paragraph>下面我们将考虑这种情况的一个例子: 发射子弹.</paragraph>
        <section ids="shooting-example" names="shooting\ example 射击示例">
            <title>射击示例</title>
            <paragraph>考虑一个可以旋转并向鼠标射击的玩家角色. 每次点击鼠标按钮, 我们就在玩家的位置创建一个子弹的实例. 详见 <reference internal="True" refuri="../../getting_started/step_by_step/instancing#doc-instancing"><inline classes="std std-ref">创建实例</inline></reference> .</paragraph>
            <paragraph>我们用 <literal>Area2D</literal> 来表示子弹, 它以给定的速度直线运动:</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">extends Area2D

var velocity = Vector2.RIGHT

func _physics_process(delta):
    position += velocity * delta</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">using Godot;

public partial class Bullet : Area2D
{
    public Vector2 Velocity { get; set; } = Vector2.Right;

    public override void _PhysicsProcess(double delta)
    {
        Position += Velocity * (float)delta;
    }
}</literal_block>
                </div>
            </container>
            <paragraph>然而, 如果子弹作为游戏角色的子节点添加, 那么当它旋转时, 子弹将仍然保持 "附着" 在游戏角色身上:</paragraph>
            <image candidates="{'*': 'tutorials/scripting/img/signals_shoot1.gif'}" uri="tutorials/scripting/img/signals_shoot1.gif"></image>
            <paragraph>相反, 我们需要子弹独立于游戏角色的移动——一旦发射, 子弹将持续沿着直线运动, 游戏角色就不能再影响它们了. 与其作为游戏角色的子节点被添加到场景树中, 不如将子弹作为 "主" 游戏场景的子节点添加上去更有意义, 后者可能是游戏角色的父节点, 甚至可能是更高层级的树.</paragraph>
            <paragraph>你可以通过将子弹直接添加到主场景中来做到这一点:</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-1-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-1-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-1-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var bullet_instance = Bullet.instantiate()
get_parent().add_child(bullet_instance)</literal_block>
                </div>
                <div aria-labelledby="tab-1-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-1-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">Node bulletInstance = Bullet.Instantiate();
GetParent().AddChild(bulletInstance);</literal_block>
                </div>
            </container>
            <paragraph>然而, 这将导致一个不同的问题. 现在, 如果你试图独立测试你的 "Player" 场景, 它将在射击时崩溃, 因为没有父节点可以访问. 这使得独立测试你的游戏角色代码变得更加困难, 也意味着如果你决定改变你的主场景的节点结构, 游戏角色的父节点可能不再是接收子弹的适当节点.</paragraph>
            <paragraph>解决这个问题的方法是使用一个信号来 "发射" 游戏角色的子弹. 游戏角色不需要 "知道" 子弹在那之后发生了什么——任何连接到信号的节点都可以 "接收" 子弹并采取适当的行动来产生它们.</paragraph>
            <paragraph>下面是游戏角色使用信号发射子弹的代码:</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-2-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-2-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-2-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">extends Sprite2D

signal shoot(bullet, direction, location)

var Bullet = preload("res://bullet.tscn")

func _input(event):
    if event is InputEventMouseButton:
        if event.button_index == MOUSE_BUTTON_LEFT and event.pressed:
            shoot.emit(Bullet, rotation, position)

func _process(delta):
    look_at(get_global_mouse_position())</literal_block>
                </div>
                <div aria-labelledby="tab-2-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-2-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">using Godot;

public partial class Player : Sprite2D
{
    [Signal]
    public delegate void ShootEventHandler(PackedScene bullet, float direction, Vector2 location);

    private PackedScene _bullet = GD.Load&lt;PackedScene&gt;("res://Bullet.tscn");

    public override void _Input(InputEvent @event)
    {
        if (@event is InputEventMouseButton mouseButton)
        {
            if (mouseButton.ButtonIndex == MouseButton.Left &amp;&amp; mouseButton.Pressed)
            {
                EmitSignal(SignalName.Shoot, _bullet, Rotation, Position);
            }
        }
    }

    public override void _Process(double delta)
    {
        LookAt(GetGlobalMousePosition());
    }
}</literal_block>
                </div>
            </container>
            <paragraph>在主场景中，我们连接游戏角色的信号（它将出现在“节点”选项卡中）</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-3-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-3-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-3-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-3-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-3-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-3-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func _on_player_shoot(Bullet, direction, location):
    var spawned_bullet = Bullet.instantiate()
    add_child(spawned_bullet)
    spawned_bullet.rotation = direction
    spawned_bullet.position = location
    spawned_bullet.velocity = spawned_bullet.velocity.rotated(direction)</literal_block>
                </div>
                <div aria-labelledby="tab-3-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-3-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">private void OnPlayerShoot(PackedScene bullet, float direction, Vector2 location)
{
    var spawnedBullet = bullet.Instantiate&lt;Bullet&gt;();
    AddChild(spawnedBullet);
    spawnedBullet.Rotation = direction;
    spawnedBullet.Position = location;
    spawnedBullet.Velocity = spawnedBullet.Velocity.Rotated(direction);
}</literal_block>
                </div>
            </container>
            <paragraph>现在子弹将自行运行，独立于游戏角色的旋转：</paragraph>
            <image candidates="{'*': 'tutorials/scripting/img/signals_shoot2.gif'}" uri="tutorials/scripting/img/signals_shoot2.gif"></image>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
