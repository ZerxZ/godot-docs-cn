<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/tutorials/scripting/overridable_functions.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-overridable-functions"></target>
    <section ids="overridable-functions doc-overridable-functions" names="overridable\ functions 可覆盖函数 doc_overridable_functions">
        <title>可覆盖函数</title>
        <paragraph>Godot 的 Node 类提供了一些虚函数，你可以通过覆盖这些虚函数来在每帧或发生特定事件时更新节点，比如节点进入场景树时就有一个虚函数会被调用。</paragraph>
        <paragraph>本文档中会向大家展示经常会用到的那些虚函数。</paragraph>
        <seealso>
            <paragraph>这些函数在引擎内部会依赖 Godot 的底层通知系统而调用。要了解、学习相关知识，请参阅 <reference internal="True" refuri="../best_practices/godot_notifications#doc-godot-notifications"><inline classes="std std-ref">Godot 通知</inline></reference>。</paragraph>
        </seealso>
        <paragraph>除了类的构造函数之外，还有两个函数可以用来进行初始化操作及获取节点操作：<literal>_enter_tree()</literal> 和 <literal>_ready()</literal>。</paragraph>
        <paragraph>节点进入场景树时就会激活，引擎会调用其 <literal>_enter_tree()</literal> 方法，此时该节点的子节点可能还未激活，由于你可以从场景树中移除节点然后重新添加这个节点，因此在一个节点的生命周期内，这个函数可能会被调用多次。</paragraph>
        <paragraph>在大多数时候，你用的初始化函数其实都是 <literal>_ready()</literal>。这个函数只会在节点的生命周期中调用一次，且会在 <literal>_enter_tree()</literal> 执行完毕之后调用。<literal>_ready()</literal> 可以保证所有子节点都已进入场景树，因此在该节点内可以安全地调用 <literal>get_node()</literal>。</paragraph>
        <seealso>
            <paragraph>要学习更多有关节点引用的知识，请参阅 <reference internal="True" refuri="nodes_and_scene_instances#doc-nodes-and-scene-instances"><inline classes="std std-ref">节点与场景实例</inline></reference>。</paragraph>
        </seealso>
        <paragraph>另一个有关的回调函数便是 <literal>_exit_tree()</literal>，在节点退出场景树时，引擎便会调用该节点的该函数，调用时机既可以是你调用 <reference internal="True" refuri="../../classes/class_node#class-node-method-remove-child"><inline classes="std std-ref">Node.remove_child()</inline></reference> 的时时候，也可以是你释放这个节点的时候。</paragraph>
        <container classes="sphinx-tabs" type="tab-element">
            <div aria-label="Tabbed content" role="tablist">
                <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
            </div>
            <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve"># Called every time the node enters the scene tree.
func _enter_tree():
    pass

# Called when both the node and its children have entered the scene tree.
func _ready():
    pass

# Called when the node is about to leave the scene tree, after all its
# children received the _exit_tree() callback.
func _exit_tree():
    pass</literal_block>
            </div>
            <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">// Called every time the node enters the scene tree.
public override void _EnterTree()
{
    base._EnterTree();
}

// Called when both the node and its children have entered the scene tree.
public override void _Ready()
{
    base._Ready();
}

// Called when the node is about to leave the scene tree, after all its
// children.
public override void _ExitTree()
{
    base._ExitTree();
}</literal_block>
            </div>
        </container>
        <paragraph>虚函数 <literal>_process()</literal> 和 <literal>_physics_process()</literal> 可以分别用来对节点进行每帧更新和每物理帧更新。要了解更多信息，请阅读专门介绍空闲帧和物理帧的文档：<reference internal="True" refuri="idle_and_physics_processing#doc-idle-and-physics-processing"><inline classes="std std-ref">空闲处理与物理处理</inline></reference>。</paragraph>
        <container classes="sphinx-tabs" type="tab-element">
            <div aria-label="Tabbed content" role="tablist">
                <button aria-controls="panel-1-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                <button aria-controls="panel-1-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
            </div>
            <div aria-labelledby="tab-1-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve"># Called every frame.
func _process(delta):
    pass

# Called every physics frame.
func _physics_process(delta):
    pass</literal_block>
            </div>
            <div aria-labelledby="tab-1-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-1-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">public override void _Process(double delta)
{
    // Called every frame.
    base._Process(delta);
}

public override void _PhysicsProcess(double delta)
{
    // Called every physics frame.
    base._PhysicsProcess(delta);
}</literal_block>
            </div>
        </container>
        <paragraph>还有两个关键的内置节点回调函数 <reference internal="True" refuri="../../classes/class_node#class-node-private-method-unhandled-input"><inline classes="std std-ref">Node._unhandled_input()</inline></reference> 和 <reference internal="True" refuri="../../classes/class_node#class-node-private-method-input"><inline classes="std std-ref">Node._input()</inline></reference>，二者都可用来接收、处理单独的输入事件。如果按键、鼠标点击等事件没有被 <literal>_input()</literal> 回调函数或用户界面组件处理，那么<literal>_unhandled_input()</literal> 方法就会接收到该事件，游戏中的输入通常是使用后者进行处理的。<literal>_input()</literal> 回调函数可以用来在 <literal>_unhandled_input()</literal> 获取输入事件之前拦截并处理输入事件。</paragraph>
        <paragraph>要学习更多关于 Godot 中输入的内容，请参阅<reference internal="True" refuri="../inputs/index#toc-learn-features-inputs"><inline classes="std std-ref">输入章节</inline></reference>。</paragraph>
        <container classes="sphinx-tabs" type="tab-element">
            <div aria-label="Tabbed content" role="tablist">
                <button aria-controls="panel-2-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                <button aria-controls="panel-2-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
            </div>
            <div aria-labelledby="tab-2-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve"># Called once for every event.
func _unhandled_input(event):
    pass

# Called once for every event before _unhandled_input(), allowing you to
# consume some events.
func _input(event):
    pass</literal_block>
            </div>
            <div aria-labelledby="tab-2-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-2-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">// Called once for every event.
public override void _UnhandledInput(InputEvent @event)
{
    base._UnhandledInput(@event);
}

// Called once for every event before _UnhandledInput(), allowing you to
// consume some events.
public override void _Input(InputEvent @event)
{
    base._Input(@event);
}</literal_block>
            </div>
        </container>
        <paragraph>还有 <reference internal="True" refuri="../../classes/class_node#class-node-private-method-get-configuration-warnings"><inline classes="std std-ref">Node._get_configuration_warning()</inline></reference> 等更多的可覆盖函数。特定的节点类型也会提供很多的回调函数，比如 <reference internal="True" refuri="../../classes/class_canvasitem#class-canvasitem-private-method-draw"><inline classes="std std-ref">CanvasItem._draw()</inline></reference> 可以用来用程序绘图，<reference internal="True" refuri="../../classes/class_control#class-control-private-method-gui-input"><inline classes="std std-ref">Control._gui_input()</inline></reference> 可以用来处理 UI 元素上的点击和输入事件，等等。</paragraph>
        <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
    </section>
</document>
