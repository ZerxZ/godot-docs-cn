<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/tutorials/scripting/gdscript/gdscript_exports.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-gdscript-exports"></target>
    <section ids="gdscript-exported-properties doc-gdscript-exports" names="gdscript\ exported\ properties gdscript\ 导出属性 doc_gdscript_exports">
        <title>GDScript 导出属性</title>
        <paragraph>在 Godot 中，你可以导出类成员，其值会与其所附加的资源（例如<reference internal="True" refuri="../../../classes/class_packedscene#class-packedscene"><inline classes="std std-ref">场景</inline></reference>）一起保存，也可以在属性编辑器中进行编辑。导出使用 <literal>@export</literal> 注解来实现。</paragraph>
        <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@export var number: int = 5</literal_block>
        <paragraph>在上面这个例子中，数值 <literal>5</literal> 会保存起来，并在属性编辑器中显示。</paragraph>
        <paragraph>导出变量必须使用常量表达式来进行初始化，部分导出注解具有特殊类型，对变量类型不作要求（请参见下面的<emphasis>示例</emphasis>部分）。</paragraph>
        <paragraph>导出成员变量的基本好处之一，便是让这些变量在编辑器中可见可改，这样一来，美术师和游戏设计师就可以修改这些会影响程序运行方式的值。为此，Godot 提供了一种特殊的导出语法。</paragraph>
        <note>
            <paragraph>导出属性也可以用 C# 等其他语言完成。语法因语言而异。有关 C# 导出的信息，请参阅 <reference internal="True" refuri="../c_sharp/c_sharp_exports#doc-c-sharp-exports"><inline classes="std std-ref">C# 导出属性</inline></reference>。</paragraph>
        </note>
        <section ids="basic-use" names="basic\ use 基本用法">
            <title>基本用法</title>
            <paragraph>如果为导出变量赋予了常量值或常量表达式值，则可以对该变量的值进行类型推断，并使该变量在编辑器中可用。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@export var number = 5</literal_block>
            <paragraph>如果导出变量没有默认值，那么你可以为该变量添加类型限定。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@export var number: int</literal_block>
            <paragraph>可以导出资源和节点。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@export var resource: Resource
@export var node: Node</literal_block>
        </section>
        <section ids="grouping-exports" names="grouping\ exports 导出项分组">
            <title>导出项分组</title>
            <paragraph>可以使用 <reference internal="True" refuri="../../../classes/class_@gdscript#class-gdscript-annotation-export-group"><inline classes="std std-ref">@export_group</inline></reference> 注解来在检查器中对导出属性进行分组管理，在该注解后的每个导出变量均会被添加到该分组中。用一个新分组开头，或使用 <literal>@export_group("")</literal> 开头会结束之前的分组的作用范围。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@export_group("My Properties")
@export var number = 3</literal_block>
            <paragraph>该注解的第二个参数仅囊括名称以该参数开头的导出变量。</paragraph>
            <paragraph>导出项分组无法嵌套定义，需要用 <reference internal="True" refuri="../../../classes/class_@gdscript#class-gdscript-annotation-export-subgroup"><inline classes="std std-ref">@export_subgroup</inline></reference> 来在一个大的导出项分组里定义一个小分组。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@export_subgroup("Extra Properties")
@export var string = ""
@export var flag = false</literal_block>
            <paragraph>你还可以使用 <reference internal="True" refuri="../../../classes/class_@gdscript#class-gdscript-annotation-export-category"><inline classes="std std-ref">@export_category</inline></reference> 注解来更改主类别的名称，亦或在属性列表中创建其他类别。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@export_category("Main Category")
@export var number = 3
@export var string = ""

@export_category("Extra Category")
@export var flag = false</literal_block>
            <note>
                <paragraph>属性列表是根据类的继承关系组织起来的，但新建导出项类别这个操作会破坏掉这种结构，故使用时需要格外小心，创建公共项目时更应如此。</paragraph>
            </note>
        </section>
        <section ids="strings-as-paths" names="strings\ as\ paths 字符串用作文件路径">
            <title>字符串用作文件路径</title>
            <paragraph>字符串可以用作文件路径。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@export_file var f</literal_block>
            <paragraph>字符串也可以用作文件目录路径。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@export_dir var f</literal_block>
            <paragraph>字符串在用作是文件路径时，可以在提示项中提供自定义过滤器。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@export_file("*.txt") var f</literal_block>
            <paragraph>也可以使用全局文件系统中的路径，仅工具模式下的脚本可以如此使用。</paragraph>
            <paragraph>字符串还可以用作全局文件系统中某个 PNG 文件的路径。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@export_global_file("*.png") var tool_image</literal_block>
            <paragraph>字符串也能用作全局文件系统中某个目录的路径。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@export_global_dir var tool_dir</literal_block>
            <paragraph>多行文本注释会让编辑器使用大文本输入框来输入文本，而非那种小小的单行输入框。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@export_multiline var text</literal_block>
        </section>
        <section ids="limiting-editor-input-ranges" names="limiting\ editor\ input\ ranges 编辑器内限制值的输入范围">
            <title>编辑器内限制值的输入范围</title>
            <paragraph>允许 0 到 20 之间的整数。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@export_range(0, 20) var i</literal_block>
            <paragraph>允许 -10 到 20 之间的整数。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@export_range(-10, 20) var j</literal_block>
            <paragraph>允许 -10 到 20 之间的数，调整步长为 0.2 。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@export_range(-10, 20, 0.2) var k: float</literal_block>
            <paragraph>可以添加 "or_greater" 及/或 "or_less" 提示来突破（编辑器滑条的）范围限制。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@export_range(0, 100, 1, "or_greater", "or_less")</literal_block>
            <comment xml:space="preserve">TODO: Document other hint strings usable with export_range.</comment>
        </section>
        <section ids="floats-with-easing-hint" names="floats\ with\ easing\ hint 带缓动提示的浮点数">
            <title>带缓动提示的浮点数</title>
            <paragraph>在编辑器里提供 'ease()' 函数的视觉呈现。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@export_exp_easing var transition_speed</literal_block>
        </section>
        <section ids="colors" names="colors 颜色">
            <title>颜色</title>
            <paragraph>使用红、绿、蓝、Alpha 值指定普通颜色。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@export var col: Color</literal_block>
            <paragraph>使用红、绿、蓝值指定颜色（此时Alpha 始终为 1）。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@export_color_no_alpha var col: Color</literal_block>
        </section>
        <section ids="nodes" names="nodes 节点">
            <title>节点</title>
            <paragraph>从 Godot 4.0 开始，脚本中可以直接将节点作为属性导出，不必再使用 NodePath来辅助进行导出：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve"># Allows any node.
@export var node: Node

# Allows any node that inherits from BaseButton.
# Custom classes declared with `class_name` can also be used.
@export var some_button: BaseButton</literal_block>
            <paragraph>如有需要，仍可以像 Godot 3.x 中那样导出 NodePath：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@export var node_path: NodePath
var node = get_node(node_path)</literal_block>
            <paragraph>如果想要限制 NodePath 的类型，可以使用 <reference internal="True" refuri="../../../classes/class_@gdscript#class-gdscript-annotation-export-node-path"><inline classes="std std-ref">@export_node_path</inline></reference> 注解：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@export_node_path("Button", "TouchScreenButton") var some_button</literal_block>
        </section>
        <section ids="resources" names="resources 资源">
            <title>资源</title>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@export var resource: Resource</literal_block>
            <paragraph>在检查器里，可以将资源文件从文件系统面板中拖放到导出变量所对应的槽位中。</paragraph>
            <paragraph>不过，打开检查器的下拉列表可能会导致要创建的资源类列表非常之长。因此，如果在导出资源时指定了 Resource 的子类，例如：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@export var resource: AnimationNode</literal_block>
            <paragraph>那么下拉列表就会缩减限定到 AnimationNode 类资源及其子类资源上。</paragraph>
            <paragraph>必须注意：即使在在编辑器模式中未运行脚本，导出的属性仍可编辑。这一点可以与 <reference internal="True" refuri="gdscript_basics#doc-gdscript-tool-mode"><inline classes="std std-ref">使用工具模式的脚本</inline></reference> 配合使用。</paragraph>
        </section>
        <section ids="exporting-bit-flags" names="exporting\ bit\ flags 导出位标记">
            <title>导出位标记</title>
            <paragraph>用作位标记的整数可以在一个属性中存储多个 <literal>true</literal>/ <literal>false</literal> （布尔）值。通过使用 <literal>@export_flags</literal> 注解来在编辑器中设置这些位标记：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve"># Set any of the given flags from the editor.
@export_flags("Fire", "Water", "Earth", "Wind") var spell_elements = 0</literal_block>
            <paragraph>你必须为每个位标记提供一个字符串描述。在本例中， <literal>Fire</literal> 的值是 1， <literal>Water</literal> 的值是 2， <literal>Earth</literal> 的值是 4， <literal>Wind</literal> 的值是 8。通常情况下应相应地定义常量（例如 <literal>const ELEMENT_WIND = 8</literal> 等）。</paragraph>
            <paragraph>可以用逗号将每个位标记及其值分隔开来:</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@export_flags("Self:4", "Allies:8", "Foes:16") var spell_targets = 0</literal_block>
            <paragraph>只有 2 的 n 次幂的整数才能作为位标记值使用，其最小值为 1（即 2 的 0 次幂），0 即表示无任何位标记选中。你还可以添加其他位标记，并将这些位标记进行组合:</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@export_flags("Self:4", "Allies:8", "Self and Allies:12", "Foes:16")
var spell_targets = 0</literal_block>
            <paragraph>也可以为项目设置中定义的物理层、渲染层和导航层提供导出提示：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@export_flags_2d_physics var layers_2d_physics
@export_flags_2d_render var layers_2d_render
@export_flags_2d_navigation var layers_2d_navigation
@export_flags_3d_physics var layers_3d_physics
@export_flags_3d_render var layers_3d_render
@export_flags_3d_navigation var layers_3d_navigation</literal_block>
            <paragraph>使用位标记需要对位操作有一定的了解，若对此有疑问，请使用布尔变量代替位标记使用。</paragraph>
        </section>
        <section ids="exporting-enums" names="exporting\ enums 导出枚举">
            <title>导出枚举</title>
            <paragraph>成员属性也可以通过将类型限定为一个枚举来导出，导出值为该枚举的枚举常量。编辑器会在相应位置创建一个列表，将枚举项按如“物体1”、“物体2”、“其他物体”的方式来进行排列显示。导出枚举的数值会按整数类型来存储。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">enum NamedEnum {THING_1, THING_2, ANOTHER_THING = -1}
@export var x: NamedEnum</literal_block>
            <paragraph>也可以使用 <reference internal="True" refuri="../../../classes/class_@gdscript#class-gdscript-annotation-export-enum"><inline classes="std std-ref">@export_enum</inline></reference> 注解来将整数和字符串属性限制为特定的值列表。编辑器将在检查器中创建一个小工具，将以下枚举为：战士、魔术师、小偷。该值将被存储为整数，对应于所选选项的索引（即 <literal>0</literal>、<literal>1</literal>、或 <literal>2</literal>）。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@export_enum("Warrior", "Magician", "Thief") var character_class: int</literal_block>
            <paragraph>可以用逗号将每个位标记及其值分隔开来:</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@export_enum("Slow:30", "Average:60", "Very Fast:200") var character_speed: int</literal_block>
            <paragraph>如果变量类型是字符串，则枚举字符串本身就是该变量的可选数值。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@export_enum("Rebecca", "Mary", "Leah") var character_name: String</literal_block>
            <paragraph>若要设置其初始值，须显式声明其值:</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@export_enum("Rebecca", "Mary", "Leah") var character_name: String = "Rebecca"</literal_block>
        </section>
        <section ids="exporting-arrays" names="exporting\ arrays 导出数组">
            <title>导出数组</title>
            <paragraph>导出的数组可以赋予初始值，但其初始值必须是常量表达式。</paragraph>
            <paragraph>如果导出的数组指定了继承自 Resource 类型的对象，则可以从文件系统面板中一次性拖放多个文件来到检查器中来设置数组值。</paragraph>
            <paragraph>默认值**必须**是常量表达式。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@export var a = [1, 2, 3]</literal_block>
            <paragraph>导出数组也可以指定元素类型（类型名 Array 后接 [元素类型名] 即可）。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@export var ints: Array[int] = [1, 2, 3]

# Nested typed arrays such as `Array[Array[float]]` are not supported yet.
@export var two_dimensional: Array[Array] = [[1.0, 2.0], [3.0, 4.0]]</literal_block>
            <paragraph>也可以不声明初始值，这样的话，数组的初始值就默认为 <literal>null</literal> 。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@export var b: Array
@export var scenes: Array[PackedScene]</literal_block>
            <paragraph>如果导出的数组指定了从 Resource 继承的类型，则可以一次性从文件系统面板中拖放多个文件到检查器中来设置该数组的值。</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@export var textures: Array[Texture] = []
@export var scenes: Array[PackedScene] = []</literal_block>
            <paragraph>密存数组也可以使用导出，但需要构造对应的空密存数组去赋值：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@export var vector3s = PackedVector3Array()
@export var strings = PackedStringArray()</literal_block>
        </section>
        <section ids="setting-exported-variables-from-a-tool-script" names="setting\ exported\ variables\ from\ a\ tool\ script 从工具脚本中设置导出变量">
            <title>从工具脚本中设置导出变量</title>
            <paragraph>当 <reference internal="True" refuri="gdscript_basics#doc-gdscript-tool-mode"><inline classes="std std-ref">工具模式</inline></reference> 下的脚本中的一个导出变量的值改变时，该值在检查器中不会自动更新。要更新它，请在设置该导出变量的值之后调用 <reference internal="True" refuri="../../../classes/class_object#class-object-method-notify-property-list-changed"><inline classes="std std-ref">notify_property_list_changed()</inline></reference>。</paragraph>
        </section>
        <section ids="advanced-exports" names="advanced\ exports 高级导出">
            <title>高级导出</title>
            <paragraph>为了避免非必要的复杂设计，并非所有类型的导出都在语言层面上提供。下面将说明一些能用底层 API 实现的，且较为常见的导出方法。</paragraph>
            <paragraph>在进一步阅读前，你需要熟悉属性的处理方式，以及如何通过 <reference internal="True" refuri="../../../classes/class_object#class-object-private-method-set"><inline classes="std std-ref">_set()</inline></reference>、 <reference internal="True" refuri="../../../classes/class_object#class-object-private-method-get"><inline classes="std std-ref">_get()</inline></reference>、 <reference internal="True" refuri="../../../classes/class_object#class-object-private-method-get-property-list"><inline classes="std std-ref">_get_property_list()</inline></reference> 等方法进行定制的这些属性。详情可参阅 <reference internal="True" refuri="../../best_practices/godot_interfaces#doc-accessing-data-or-logic-from-object"><inline classes="std std-ref">从对象访问数据或逻辑</inline></reference>。</paragraph>
            <seealso>
                <paragraph>要在 C++ 中用上述方法绑定属性，请参阅 <reference internal="True" refuri="../../../contributing/development/core_and_modules/object_class#doc-binding-properties-using-set-get-property-list"><inline classes="std std-ref">使用 _set/_get/_get_property_list 绑定属性</inline></reference>。</paragraph>
            </seealso>
            <warning>
                <paragraph>脚本必须在 <literal>tool</literal> 模式运行，才能使上述方法在编辑器内运行。</paragraph>
            </warning>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
