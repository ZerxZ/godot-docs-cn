<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/tutorials/scripting/debug/custom_performance_monitors.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-custom-performance-monitors"></target>
    <section ids="custom-performance-monitors doc-custom-performance-monitors" names="custom\ performance\ monitors 自定义性能监视器 doc_custom_performance_monitors">
        <title>自定义性能监视器</title>
        <section ids="introduction" names="introduction 前言">
            <title>前言</title>
            <paragraph>As explained in the <reference internal="True" refuri="debugger_panel#doc-debugger-panel"><inline classes="std std-ref">调试器面板</inline></reference> documentation, Godot features a
                <strong>Debugger &gt; Monitors</strong> bottom panel that allows tracking various values with
                graphs showing their evolution over time. The data for those graphs is sourced
                from the engine's <reference internal="True" refuri="../../../classes/class_performance#class-performance"><inline classes="std std-ref">Performance</inline></reference> singleton.</paragraph>
            <paragraph>Since Godot 4.0, you can declare custom values to be displayed in the Monitors
                tab. Example use cases for custom performance monitors include:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>Displaying performance metrics that are specific to your project. For
                        instance, in a voxel game, you could create a performance monitor to track the
                        number of chunks that are loaded every second.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Displaying in-game metrics that are not strictly related to performance, but
                        are still useful to graph for debugging purposes. For instance, you could
                        track the number of enemies present in the game to make sure your spawning
                        mechanic works as intended.</paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section ids="creating-a-custom-performance-monitor" names="creating\ a\ custom\ performance\ monitor 创建自定义性能监视器">
            <title>创建自定义性能监视器</title>
            <paragraph>In this example, we'll create a custom performance monitor to track how many
                enemies are present in the currently running project.</paragraph>
            <paragraph>The main scene features a <reference internal="True" refuri="../../../classes/class_timer#class-timer"><inline classes="std std-ref">Timer</inline></reference> node with the following script attached:</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">extends Timer


func _ready():
    # The slash delimiter is used to determine the category of the monitor.
    # If there is no slash in the monitor name, a generic "Custom" category
    # will be used instead.
    Performance.add_custom_monitor("game/enemies", get_enemy_count)
    timeout.connect(_on_timeout)
    # Spawn 20 enemies per second.
    wait_time = 0.05
    start()


func _on_timeout():
    var enemy = preload("res://enemy.tscn").instantiate()
    get_parent().add_child(enemy)


# This function is called every time the performance monitor is queried
# (this occurs once per second in the editor, more if called manually).
# The function must return a number greater than or equal to 0 (int or float).
func get_enemy_count():
    return get_tree().get_nodes_in_group("enemies").size()</literal_block>
            <paragraph>The second parameter of
                <reference internal="True" refuri="../../../classes/class_performance#class-performance-method-add-custom-monitor"><inline classes="std std-ref">Performance.add_custom_monitor</inline></reference>
                is a <reference internal="True" refuri="../../../classes/class_callable#class-callable"><inline classes="std std-ref">Callable</inline></reference>.</paragraph>
            <paragraph><literal>enemy.tscn</literal> is a scene with a Node2D root node and Timer child node. The
                Node2D has the following script attached:</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">extends Node2D


func _ready():
    add_to_group("enemies")
    $Timer.timeout.connect(_on_timer_timeout)
    # Despawn enemies 2.5 seconds after they spawn.
    $Timer.wait_time = 2.5
    $Timer.start()


func _on_timer_timeout():
    queue_free()</literal_block>
            <paragraph>In this example, since we spawn 20 enemies per second, and each enemy despawns
                2.5 seconds after they spawn, we expect the number of enemies present in the
                scene to stabilize to 50. We can make sure about this by looking at the graph.</paragraph>
            <paragraph>To visualize the graph created from this custom performance monitor, run the
                project, switch to the editor while the project is running and open <strong>Debugger &gt;
                    Monitors</strong> at the bottom of the editor window. Scroll down to the newly
                available <strong>Game</strong> section and check <strong>Enemies</strong>. You should see a graph
                appearing as follows:</paragraph>
            <figure align="center" ids="id1">
                <image alt="Example editor graph from a custom performance monitor" candidates="{'*': 'tutorials/scripting/debug/img/custom_performance_monitors_graph_example.webp'}" uri="tutorials/scripting/debug/img/custom_performance_monitors_graph_example.webp"></image>
                <caption>Example editor graph from a custom performance monitor</caption>
            </figure>
            <note>
                <paragraph>The performance monitor handling code doesn't have to live in the same
                    script as the nodes themselves. You may choose to move the performance
                    monitor registration and getter function to an <reference internal="True" refuri="../singletons_autoload#doc-singletons-autoload"><inline classes="std std-ref">autoload</inline></reference> instead.</paragraph>
            </note>
        </section>
        <section ids="querying-a-performance-monitor-in-a-project" names="querying\ a\ performance\ monitor\ in\ a\ project 在项目中查询性能监视器">
            <title>在项目中查询性能监视器</title>
            <paragraph>If you wish to display the value of the performance monitor in the running
                project's window (rather than the editor), use
                <literal>Performance.get_custom_monitor("category/name")</literal> to fetch the value of the
                custom monitor. You can display the value using a <reference internal="True" refuri="../../../classes/class_label#class-label"><inline classes="std std-ref">Label</inline></reference>,
                <reference internal="True" refuri="../../../classes/class_richtextlabel#class-richtextlabel"><inline classes="std std-ref">RichTextLabel</inline></reference>, <reference internal="True" refuri="../../2d/custom_drawing_in_2d#doc-custom-drawing-in-2d"><inline classes="std std-ref">2D 中的自定义绘图</inline></reference>, <reference internal="True" refuri="../../3d/3d_text#doc-3d-text"><inline classes="std std-ref">3D 文本</inline></reference>,
                etc.</paragraph>
            <paragraph>This method can be used in exported projects as well (debug and release mode),
                which allows you to create visualizations outside the editor.</paragraph>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
