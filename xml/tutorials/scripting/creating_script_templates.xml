<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/tutorials/scripting/creating_script_templates.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-creating-script-templates"></target>
    <section ids="creating-script-templates doc-creating-script-templates" names="creating\ script\ templates 创建脚本模板 doc_creating_script_templates">
        <title>创建脚本模板</title>
        <paragraph>Godot 提供了一种在创建新脚本时使用脚本模板的方法， 在 <literal>脚本创建对话框</literal> 中可以看到：</paragraph>
        <image candidates="{'*': 'tutorials/scripting/img/script_create_dialog_templates.webp'}" uri="tutorials/scripting/img/script_create_dialog_templates.webp"></image>
        <paragraph>A set of built-in script templates are provided with the editor, but it is
            also possible to create new ones and set them by default, both per project
            and at editor scope.</paragraph>
        <paragraph>Templates are linked to a specific node type, so when you create a script
            you will only see the templates corresponding to that particular node, or
            one of its parent types.
            For example, if you are creating a script for a CharacterBody3D, you will
            only see templates defined for CharacterBody3Ds, Node3Ds or Nodes.</paragraph>
        <section ids="locating-the-templates" names="locating\ the\ templates 模板所在位置">
            <title>模板所在位置</title>
            <paragraph>有两个地方可以管理模板.</paragraph>
            <section ids="editor-defined-templates" names="editor-defined\ templates 编辑器定义的模板">
                <title>编辑器定义的模板</title>
                <paragraph>这些在任何项目中都可以全局使用. 这些模板的位置是根据操作系统而确定的:</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>Windows: <literal>%APPDATA%\Godot\script_templates\</literal></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Linux: <literal>$HOME/.config/godot/script_templates/</literal></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>macOS: <literal>$HOME/Library/Application Support/Godot/script_templates/</literal></paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>If you're getting Godot from somewhere other than the official website, such
                    as Steam, the folder might be in a different location. You can find it using
                    the Godot editor. Go to <literal>Editor &gt; Open Editor Data/Settings Folder</literal> and it
                    will open a folder in your file browser, inside that folder is the
                    <literal>script_templates</literal> folder.</paragraph>
            </section>
            <section ids="project-defined-templates" names="project-defined\ templates 项目定义的模板">
                <title>项目定义的模板</title>
                <paragraph>搜索模板的默认路径是 <literal>res://script_templates/</literal> 文件夹. 可以通过代码和编辑器在 <reference internal="True" refuri="../../classes/class_projectsettings#class-projectsettings"><inline classes="std std-ref">项目设置</inline></reference> 中配置 <literal>editor/script_templates_search_path</literal> 设置来更改路径.</paragraph>
                <paragraph>如果在项目中未找到 <literal>script_templates</literal> 文件夹, 则将其忽略.</paragraph>
            </section>
            <section ids="template-organization-and-naming" names="template\ organization\ and\ naming">
                <title>Template organization and naming</title>
                <paragraph>Both editor and project defined templates are organized in the following way:</paragraph>
                <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">template_path/node_type/file.extension</literal_block>
                <paragraph>位置:</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph><literal>template_path</literal> is one of the 2 locations discussed in the previous two sections</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>node_type</literal> is the node it will apply to (for example, <reference internal="True" refuri="../../classes/class_node#class-node"><inline classes="std std-ref">Node</inline></reference>, or <reference internal="True" refuri="../../classes/class_characterbody3d#class-characterbody3d"><inline classes="std std-ref">CharacterBody3D</inline></reference>)</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>file</literal> is the custom name you can chose for the template (for example: <literal>platformer_movement</literal> or <literal>smooth_camera</literal>)</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>extension</literal>: will indicate which language the template will apply to (it should be <literal>gd</literal> for GDScript or <literal>cs</literal> for C#)</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>例如：</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><literal>template_scripts/Node/smooth_camera.gd</literal></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>template_scripts/CharacterBody3D/platformer_movement.gd</literal></paragraph>
                    </list_item>
                </bullet_list>
            </section>
        </section>
        <section ids="default-behaviour-and-overriding-it" names="default\ behaviour\ and\ overriding\ it 默认行为与覆盖">
            <title>默认行为与覆盖</title>
            <paragraph>默认：</paragraph>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>the template's name is the same as the file name (minus the extension, prettyfied)</paragraph>
                </list_item>
                <list_item>
                    <paragraph>下面是这些选项的说明</paragraph>
                </list_item>
                <list_item>
                    <paragraph>the space indent is set to 4</paragraph>
                </list_item>
                <list_item>
                    <paragraph>在这个演示中, 所有这些选项都可以保持默认值</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>It is possible to customize this behaviour by adding meta headers at the start
                of your file, like this:</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve"># meta-name: Platformer movement
# meta-description: Predefined movement for classical platformers
# meta-default: true
# meta-space-indent: 4</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">// meta-name: Platformer movement
// meta-description: Predefined movement for classical platformers
// meta-default: true
// meta-space-indent: 4</literal_block>
                </div>
            </container>
            <paragraph>In this case, the name will be set to "Platformer movement", with the given custom description, and
                it will be set as the default template for the node in which directory it has been saved.</paragraph>
            <paragraph>This is an example of utilizing custom templates at editor and project level:</paragraph>
            <image candidates="{'*': 'tutorials/scripting/img/script_create_dialog_custom_templates.webp'}" uri="tutorials/scripting/img/script_create_dialog_custom_templates.webp"></image>
            <note>
                <paragraph>脚本模板与常规脚本文件具有相同的扩展名。脚本解析器将这些模板视为项目中的实际脚本，这可能会导致问题。为了避免这种情况，创建空的 .gdignore 文件以忽略包含它的目录。该目录在整个项目的文件系统中不可见，但模板仍可以通过外部文本编辑器进行修改。</paragraph>
            </note>
            <tip>
                <paragraph>By default, every C# file inside the project directory is included in the compilation.
                    Script templates must be manually excluded from the C# project to avoid build errors.
                    See <reference name="Exclude files from the build" refuri="https://learn.microsoft.com/en-us/visualstudio/msbuild/how-to-exclude-files-from-the-build">Exclude files from the build</reference><target ids="exclude-files-from-the-build" names="exclude\ files\ from\ the\ build" refuri="https://learn.microsoft.com/en-us/visualstudio/msbuild/how-to-exclude-files-from-the-build"></target> in the Microsoft documentation.</paragraph>
            </tip>
            <paragraph>It is possible to create editor-level templates that have the same level as a project-specific
                templates, and also that have the same name as a built-in one, all will be shown on the new script
                dialog.</paragraph>
        </section>
        <section ids="default-template" names="default\ template 默认模板">
            <title>默认模板</title>
            <paragraph>To override the default template, create a custom template at editor or project level inside a
                <literal>Node</literal> directory (or a more specific type, if only a subtype wants to be overridden) and start
                the file with the <literal>meta-default: true</literal> header.</paragraph>
            <paragraph>Only one template can be set as default at the same time for the same node type.</paragraph>
            <paragraph><literal>默认</literal> 模板总是根据每种语言动态生成，并且不能配置也不能覆盖，但是你可以使用它们作为创建其他模板的基础：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-1-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-1-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-1-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve"># meta-description: Base template for Node with default Godot cycle methods

extends _BASE_


# Called when the node enters the scene tree for the first time.
func _ready() -&gt; void:
     pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta: float) -&gt; void:
     pass</literal_block>
                </div>
                <div aria-labelledby="tab-1-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-1-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">// meta-description: Base template for Node with default Godot cycle methods

using _BINDINGS_NAMESPACE_;
using System;

public partial class _CLASS_ : _BASE_
{
    // Called when the node enters the scene tree for the first time.
    public override void _Ready()
    {
    }

    // Called every frame. 'delta' is the elapsed time since the previous frame.
    public override void _Process(double delta)
    {
    }
}</literal_block>
                </div>
            </container>
            <paragraph>The Godot editor provides a set of useful built-in node-specific templates, such as
                <literal>basic_movement</literal> for both <reference internal="True" refuri="../../classes/class_characterbody2d#class-characterbody2d"><inline classes="std std-ref">CharacterBody2D</inline></reference> and
                <reference internal="True" refuri="../../classes/class_characterbody3d#class-characterbody3d"><inline classes="std std-ref">CharacterBody3D</inline></reference> and <literal>plugin</literal> for
                <reference internal="True" refuri="../../classes/class_editorplugin#class-editorplugin"><inline classes="std std-ref">EditorPlugin</inline></reference>.</paragraph>
        </section>
        <section ids="list-of-template-placeholders" names="list\ of\ template\ placeholders 模板占位符">
            <title>模板占位符</title>
            <paragraph>下面列出当前已实现的所有模板占位符.</paragraph>
            <section ids="base-placeholders" names="base\ placeholders 基本占位符">
                <title>基本占位符</title>
                <table>
                    <tgroup cols="2">
                        <colspec colwidth="26"></colspec>
                        <colspec colwidth="52"></colspec>
                        <thead>
                            <row>
                                <entry>
                                    <paragraph>占位符</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>描述</paragraph>
                                </entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>
                                    <paragraph><literal>_BINDINGS_NAMESPACE_</literal></paragraph>
                                </entry>
                                <entry>
                                    <paragraph>The name of the Godot namespace (used in C# only).</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph><literal>_CLASS_</literal></paragraph>
                                </entry>
                                <entry>
                                    <paragraph>The name of the new class.</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph><literal>_BASE_</literal></paragraph>
                                </entry>
                                <entry>
                                    <paragraph>新建脚本的基类型.</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph><literal>_TS_</literal></paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Indentation placeholder. The exact type and number
                                        of whitespace characters used for indentation is
                                        determined by the <literal>text_editor/indent/type</literal> and
                                        <literal>text_editor/indent/size</literal> settings in the
                                        <reference internal="True" refuri="../../classes/class_editorsettings#class-editorsettings"><inline classes="std std-ref">EditorSettings</inline></reference>
                                        respectively. Can be overridden by the
                                        <literal>meta-space-indent</literal> header on the template.</paragraph>
                                </entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
            </section>
            <section ids="type-placeholders" names="type\ placeholders 类型占位符">
                <title>类型占位符</title>
                <paragraph>There used to be, in Godot 3.x, placeholders for GDScript type hints that
                    would get replaced whenever a template was used to create a new script, such as:
                    <literal>%INT_TYPE%</literal>, <literal>%STRING_TYPE%</literal>, <literal>%FLOAT_TYPE%</literal> or <literal>%VOID_RETURN%</literal>.</paragraph>
                <paragraph>The placeholders no longer work for Godot 4.x, but if the setting
                    <literal>text_editor/completion/add_type_hints</literal> from
                    <reference internal="True" refuri="../../classes/class_editorsettings#class-editorsettings"><inline classes="std std-ref">EditorSettings</inline></reference> is disabled, type hints
                    for parameters and return types will be automatically removed for a few
                    base types:</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph><literal>int</literal></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>String</literal></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>Array[String]</literal></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>float</literal></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>void</literal></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>:=</literal> will be transformed into <literal>=</literal></paragraph>
                    </list_item>
                </bullet_list>
                <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
            </section>
        </section>
    </section>
</document>
