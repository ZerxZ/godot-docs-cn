<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/tutorials/scripting/scene_unique_nodes.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-scene-unique-nodes"></target>
    <section ids="scene-unique-nodes doc-scene-unique-nodes" names="scene\ unique\ nodes 场景唯一节点 doc_scene_unique_nodes">
        <title>场景唯一节点</title>
        <section ids="introduction" names="introduction 前言">
            <title>前言</title>
            <paragraph>在脚本中使用 <literal>get_node()</literal> 来引用节点在某些情况下可能比较脆弱。如果你把 UI 场景里的某个按钮移到了别的面板里，那么这个按钮的节点路径就会发生改变，而如果脚本中正好使用了写死的节点路径来调用 <literal>get_node()</literal>，那这样一来这个脚本就无法再找到这个按钮了。</paragraph>
            <paragraph>类似这种情况，可以将节点设为场景唯一节点，这样该节点的路径发生变化时就不必再更新脚本了。</paragraph>
        </section>
        <section ids="creation-and-usage" names="creation\ and\ usage 创建与使用">
            <title>创建与使用</title>
            <paragraph>在场景树面板中，右键单击节点并在上下文菜单中选择<strong>作为唯一名称访问</strong>。</paragraph>
            <image candidates="{'*': 'tutorials/scripting/img/unique_name.webp'}" uri="tutorials/scripting/img/unique_name.webp"></image>
            <paragraph>勾选后，场景树中该节点的名称旁边就会显示一个百分号（<strong>%</strong>）：</paragraph>
            <image candidates="{'*': 'tutorials/scripting/img/percent.webp'}" uri="tutorials/scripting/img/percent.webp"></image>
            <paragraph>现在你就可以在脚本中使用这个节点了。例如先打一个 % 符号，在后面跟上节点的名称，这样就可以使用 <literal>get_node()</literal> 方法来引用这个节点：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">get_node("%RedButton").text = "Hello"
%RedButton.text = "Hello" # Shorter syntax</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">GetNode&lt;Button&gt;("%RedButton").Text = "Hello";</literal_block>
                </div>
            </container>
        </section>
        <section ids="same-scene-limitation" names="same-scene\ limitation 同场景限制">
            <title>同场景限制</title>
            <paragraph>场景唯一节点只能获取同一场景中的节点。我们可以举些例子来演示一下，比如这个示例场景是在 <strong>Player</strong> 场景中实例化了一个 <strong>Sword</strong> 场景：</paragraph>
            <image candidates="{'*': 'tutorials/scripting/img/unique_name_scene_instance_example.webp'}" uri="tutorials/scripting/img/unique_name_scene_instance_example.webp"></image>
            <paragraph>以下是在 <strong>Player</strong> 脚本中调用 <literal>get_node()</literal> 的结果：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><literal>get_node("%Eyes")</literal> 会返回 <strong>Eyes</strong> 节点。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>get_node("%Hilt")</literal> 会返回 <literal>null</literal>。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>以下是在 <strong>Sword</strong> 脚本中调用 <literal>get_node()</literal> 的结果：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><literal>get_node("%Eyes")</literal> 会返回 <literal>null</literal>。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>get_node("%Hilt")</literal> 会返回 <strong>Hilt</strong> 节点。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果脚本能够获取到另一个场景中的节点，那么就可以调用该节点的 <literal>get_node()</literal> 来获取该节点所在场景中的场景唯一节点。你也可以在节点路径中做类似的操作，从而避免多次调用 <literal>get_node()</literal>。以下两种方法均可从 <strong>Player</strong> 脚本中利用场景唯一节点来获取 <strong>Hilt</strong> 节点：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><literal>get_node("Hand/Sword").get_node("%Hilt")</literal> 会返回 <strong>Hilt</strong> 节点。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>get_node("Hand/Sword/%Hilt")</literal> 也会返回 <strong>Hilt</strong> 节点。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>场景唯一名称不止可以用在节点路径的末尾，也可以用在路径的中间来实现跳转。例如 <strong>Player</strong> 场景中的 <strong>Sword</strong> 节点就是一个场景唯一节点，因此可以这样写：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><literal>get_node("%Sword/%Hilt")</literal> 会返回 <strong>Hilt</strong> 节点。</paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section ids="alternatives" names="alternatives 替代方案">
            <title>替代方案</title>
            <paragraph>使用场景唯一节点可以很方便地在场景中进行跳转。但是有些情况下其他写法会更好一些。</paragraph>
            <paragraph>使用<reference internal="True" refuri="groups#doc-groups"><inline classes="std std-ref">分组</inline></reference>可以从任意节点定位到某个节点（或一组节点），无需考虑所处的场景。</paragraph>
            <paragraph><reference internal="True" refuri="singletons_autoload#doc-singletons-autoload"><inline classes="std std-ref">单例（自动加载）</inline></reference>是一种始终存在的节点，任何节点都可以直接访问，无需考虑所处的场景。适合需要全局共享数据或功能的时候使用。</paragraph>
            <paragraph><reference internal="True" refuri="../../classes/class_node#class-node-method-find-child"><inline classes="std std-ref">Node.find_child()</inline></reference> 可以根据名称来查找节点，无需知道完整路径。这种做法看上去和场景唯一节点类似，并且可以查找到嵌套场景里的节点，也不需要在场景编辑器里标记节点。但是这个方法相对较慢。Godot 会缓存场景唯一节点，所以获取的时候比较快，而调用 <literal>find_child()</literal> 时则需要查找每一个后代节点（子节点、孙节点等）。</paragraph>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
