<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/tutorials/scripting/scene_unique_nodes.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-scene-unique-nodes"></target>
    <section ids="scene-unique-nodes doc-scene-unique-nodes" names="scene\ unique\ nodes 场景唯一节点 doc_scene_unique_nodes">
        <title>场景唯一节点</title>
        <section ids="introduction" names="introduction 前言">
            <title>前言</title>
            <paragraph>Using <literal>get_node()</literal> to reference nodes from a script can sometimes be fragile.
                If you move a button in a UI scene from one panel to another, the button's node
                path changes, and if a script uses <literal>get_node()</literal> with a hard-coded node path,
                the script will not be able to find the button anymore.</paragraph>
            <paragraph>In situations like this, the node can be turned into a scene
                unique node to avoid having to update the script every time
                the node's path is changed.</paragraph>
        </section>
        <section ids="creation-and-usage" names="creation\ and\ usage 创建与使用">
            <title>创建与使用</title>
            <paragraph>In the Scene tree dock, right-click on a node and select
                <strong>Access as Unique Name</strong> in the context menu.</paragraph>
            <image candidates="{'*': 'tutorials/scripting/img/unique_name.webp'}" uri="tutorials/scripting/img/unique_name.webp"></image>
            <paragraph>After selecting the option, the node will now have a percent symbol (<strong>%</strong>) next
                to its name in the scene tree:</paragraph>
            <image candidates="{'*': 'tutorials/scripting/img/percent.webp'}" uri="tutorials/scripting/img/percent.webp"></image>
            <paragraph>You can now use the node in your script. For example, you can reference it with
                a <literal>get_node()</literal> method call by typing the % symbol, followed by the node's
                name:</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">get_node("%RedButton").text = "Hello"
%RedButton.text = "Hello" # Shorter syntax</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">GetNode&lt;Button&gt;("%RedButton").Text = "Hello";</literal_block>
                </div>
            </container>
        </section>
        <section ids="same-scene-limitation" names="same-scene\ limitation 同场景限制">
            <title>同场景限制</title>
            <paragraph>A scene unique node can only be retrieved by a node inside the same scene. To
                demonstrate this limitation, consider this example <strong>Player</strong> scene that
                instances a <strong>Sword</strong> scene:</paragraph>
            <image candidates="{'*': 'tutorials/scripting/img/unique_name_scene_instance_example.webp'}" uri="tutorials/scripting/img/unique_name_scene_instance_example.webp"></image>
            <paragraph>Here are the results of <literal>get_node()</literal> calls inside the <strong>Player</strong> script:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><literal>get_node("%Eyes")</literal> returns the <strong>Eyes</strong> node.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>get_node("%Hilt")</literal> returns <literal>null</literal>.</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>These are the results of <literal>get_node()</literal> calls inside the <strong>Sword</strong> script:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><literal>get_node("%Eyes")</literal> returns <literal>null</literal>.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>get_node("%Hilt")</literal> returns the <strong>Hilt</strong> node.</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>If a script has access to a node in another scene, it can call <literal>get_node()</literal> on
                that node to get scene unique nodes from that node's scene. This also works in a
                node path, which avoids multiple <literal>get_node()</literal> calls. Here are two ways to get
                the <strong>Hilt</strong> node from the <strong>Player</strong> script using scene unique nodes:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><literal>get_node("Hand/Sword").get_node("%Hilt")</literal> returns the <strong>Hilt</strong> node.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>get_node("Hand/Sword/%Hilt")</literal> also returns the <strong>Hilt</strong> node.</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>Scene unique names don't only work at the end of a node path. They can be used
                in the middle to navigate from one node to another. For example, the <strong>Sword</strong> node
                is marked as a scene unique node in the <strong>Player</strong> scene, so this is possible:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><literal>get_node("%Sword/%Hilt")</literal> returns the <strong>Hilt</strong> node.</paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section ids="alternatives" names="alternatives 替代方案">
            <title>替代方案</title>
            <paragraph>Scene unique nodes are a useful tool to navigate a scene. However, there are
                some situations where other techniques may be better.</paragraph>
            <paragraph>A <reference internal="True" refuri="groups#doc-groups"><inline classes="std std-ref">Group</inline></reference> allows locating a node (or a group of many nodes)
                from any other node, no matter what scene the two nodes are located in.</paragraph>
            <paragraph>A <reference internal="True" refuri="singletons_autoload#doc-singletons-autoload"><inline classes="std std-ref">Singleton (Autoload)</inline></reference> is an always loaded node
                that can be accessed directly by any node regardless of the scene. These are useful
                when some data or functionality is shared globally.</paragraph>
            <paragraph><reference internal="True" refuri="../../classes/class_node#class-node-method-find-child"><inline classes="std std-ref">Node.find_child()</inline></reference> finds a node by name
                without knowing its full path. This seems similar to a scene unique node, but
                this method is able to find nodes in nested scenes, and doesn't require marking
                the node in the scene editor in any way. However, this method is slow. Scene
                unique nodes are cached by Godot and are fast to retrieve, but each time the
                method is called, <literal>find_child()</literal> needs to check every descendant (every child,
                grandchild, and so on).</paragraph>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
