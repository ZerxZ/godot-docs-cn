<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/tutorials/scripting/filesystem.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-filesystem"></target>
    <section ids="file-system doc-filesystem" names="file\ system 文件系统 doc_filesystem">
        <title>文件系统</title>
        <section ids="introduction" names="introduction 前言">
            <title>前言</title>
            <paragraph>文件系统管理资源的存储方式和访问方式. 精心设计的文件系统还允许多个开发人员在协作时编辑相同的源文件和资源.Godot将所有资源作为文件存储在其文件系统中.</paragraph>
        </section>
        <section ids="implementation" names="implementation 实现">
            <title>实现</title>
            <paragraph>文件系统将资源存储在磁盘上. 从脚本到场景或PNG图像的任何内容都是引擎的资源. 如果一个资源包含引用磁盘上其他资源的属性, 则它还将包括这些资源的路径. 如果一个资源具有内置的子资源, 则该资源与所有捆绑的子资源一起保存在单个文件中. 例如, 字体资源通常与字体纹理捆绑在一起.</paragraph>
            <paragraph>The Godot file system avoids using metadata files. Existing asset managers and VCSs
                are better than anything we can implement, so Godot tries its best to play along
                with Subversion, Git, Mercurial, etc.</paragraph>
            <paragraph>文件系统内容示例:</paragraph>
            <literal_block force="False" highlight_args="{}" language="none" linenos="False" xml:space="preserve">/project.godot
/enemy/enemy.tscn
/enemy/enemy.gd
/enemy/enemysprite.png
/player/player.gd</literal_block>
        </section>
        <section ids="project-godot" names="project.godot">
            <title>project.godot</title>
            <paragraph><literal>project.godot</literal> 文件是项目描述文件, 可以始终在项目的根目录下找到. 实际上, 其位置定义了根的位置. 这是Godot打开项目时要查找的第一个文件.</paragraph>
            <paragraph>该文件使用 <literal>win.ini</literal> 格式以纯文本格式包含项目配置. 甚至一个空的 <literal>project.godot</literal> 都可以用作空项目的基本定义.</paragraph>
        </section>
        <section ids="path-delimiter" names="path\ delimiter 路径分隔符">
            <title>路径分隔符</title>
            <paragraph>Godot只支持用 <literal>/</literal> 做路径分隔符. 这样做出于可移植性的原因. 所有操作系统甚至Windows都支持此功能, 因此诸如 <literal>c:\project\project.godot</literal> 之类的路径需要键入为 <literal>C:/project/project.godot</literal> .</paragraph>
        </section>
        <section ids="resource-path" names="resource\ path 资源路径">
            <title>资源路径</title>
            <paragraph>访问资源时, 使用主机OS文件系统布局可能很麻烦且不可移植. 为了解决这个问题, 创建了特殊路径 <literal>res://</literal>.</paragraph>
            <paragraph>路径 <literal>res://</literal> 将始终指向项目根目录( <literal>project.godot</literal> 所在的位置, 因此 <literal>res://project.godot</literal> 将始终有效).</paragraph>
            <paragraph>仅当从编辑器本地运行项目时, 此文件系统才是读写的. 导出时或在其他设备(例如电话或控制台, 或从DVD运行)上运行时, 文件系统将变为只读状态, 并且将不再允许写入.</paragraph>
        </section>
        <section ids="user-path" names="user\ path 用户路径">
            <title>用户路径</title>
            <paragraph>保存游戏状态和下载内容包之类的任务仍然需要对磁盘进行写入。为此，引擎保证特殊路径 <literal>user://</literal> 始终可写。根据运行项目的操作系统的不同，该路径会被解析为不同的路径。本地路径解析在 <reference internal="True" refuri="../io/data_paths#doc-data-paths"><inline classes="std std-ref">Godot 项目中的文件路径</inline></reference> 中有更加深入的介绍。</paragraph>
        </section>
        <section ids="host-file-system" names="host\ file\ system 主机文件系统">
            <title>主机文件系统</title>
            <paragraph>另外, 也可以使用主机文件系统路径, 但是不建议将其用于已发布的产品, 因为不能保证这些路径在所有平台上都可以使用. 但是, 在Godot中编写开发工具时, 使用主机文件系统路径可能会很有用.</paragraph>
        </section>
        <section ids="drawbacks" names="drawbacks 缺点">
            <title>缺点</title>
            <paragraph>There are some drawbacks to this file system design. The first issue is that
                moving assets around (renaming them or moving them from one path to another inside
                the project) will break existing references to these assets. These references will
                have to be re-defined to point at the new asset location.</paragraph>
            <paragraph>为避免这种情况, 请在Godot中的文件系统停靠面板上, 进行所有移动, 删除和重命名操作. 切勿从Godot外部移动资源, 否则必须手动修复依赖关系(Godot会检测到此问题并帮助你修复它们, 但是为什么要走这条艰难的路线呢？).</paragraph>
            <paragraph>第二个问题是在Windows和macOS下, 文件名和路径名不区分大小写. 如果开发人员在不区分大小写的主机文件系统中工作, 将资源保存为 <literal>myfile.PNG</literal> , 然后将其引用为 <literal>myfile.png</literal> , 则该资源将在该平台上正常工作, 但在其他平台(例如Linux, Android等)上无法正常工作. 这也适用于导出的二进制文件, 该文件使用压缩包存储所有文件.</paragraph>
            <paragraph>It is recommended that your team clearly define a naming convention for files when
                working with Godot. One fool-proof convention is to only allow lowercase
                file and path names.</paragraph>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
