<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/tutorials/scripting/c_sharp/c_sharp_variant.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-c-sharp-variant"></target>
    <section ids="c-variant doc-c-sharp-variant" names="c#\ variant doc_c_sharp_variant">
        <title>C# Variant</title>
        <paragraph>对于 Variant 的详细解释，请参阅 <reference internal="True" refuri="../../../classes/class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> 文档页面。</paragraph>
        <paragraph><literal>Godot.Variant</literal> is used to represent Godot's native <reference internal="True" refuri="../../../classes/class_variant#class-variant"><inline classes="std std-ref">Variant</inline></reference> type. Any
            <reference internal="True" refid="c-sharp-variant-compatible-types"><inline classes="std std-ref">Variant-compatible type</inline></reference> can be converted from/to it.
            We recommend avoiding <literal>Godot.Variant</literal> unless it is necessary to interact with untyped engine APIs.
            Take advantage of C#'s type safety when possible.</paragraph>
        <paragraph>Converting from a Variant-compatible C# type to <literal>Godot.Variant</literal> can be done using implicit
            conversions. There are also <literal>CreateFrom</literal> method overloads and the generic <literal>Variant.From&lt;T&gt;</literal>
            methods. Only the syntax is different: the behavior is the same.</paragraph>
        <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">int x = 42;
Variant numberVariant = x;
Variant helloVariant = "Hello, World!";

Variant numberVariant2 = Variant.CreateFrom(x);
Variant numberVariant3 = Variant.From(x);</literal_block>
        <paragraph>Implicit conversions to <literal>Godot.Variant</literal> make passing variants as method arguments very convenient.
            For example, the third argument of <reference internal="True" refuri="../../../classes/class_tween#class-tween-method-tween-property"><inline classes="std std-ref">tween_property</inline></reference>
            specifying the final color of the tween is a <literal>Godot.Variant</literal>.</paragraph>
        <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">Tween tween = CreateTween();
tween.TweenProperty(GetNode("Sprite"), "modulate", Colors.Red, 1.0f);</literal_block>
        <paragraph>Converting from <literal>Godot.Variant</literal> to a C# type can be done using explicit conversions. There are
            also <literal>Variant.As{TYPE}</literal> methods and the generic <literal>Variant.As&lt;T&gt;</literal> method. All of these behave the
            same.</paragraph>
        <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">int number = (int)numberVariant;
string hello = (string)helloVariant;

int number2 = numberVariant.As&lt;int&gt;();
int number3 = numberVariant.AsInt32();</literal_block>
        <note>
            <paragraph>The <literal>Variant.As{TYPE}</literal> methods are typically named after C# types (<literal>Int32</literal>), not C# keywords
                (<literal>int</literal>).</paragraph>
        </note>
        <paragraph>If the Variant type doesn't match the conversion target type, the consequences vary depending on the
            source and target values.</paragraph>
        <bullet_list bullet="-">
            <list_item>
                <paragraph>The conversion may examine the value and return a similar but potentially unexpected value of the
                    target type. For example, the string <literal>"42a"</literal> may be converted to the integer <literal>42</literal>.</paragraph>
            </list_item>
            <list_item>
                <paragraph>The default value of the target type may be returned.</paragraph>
            </list_item>
            <list_item>
                <paragraph>An empty array may be returned.</paragraph>
            </list_item>
            <list_item>
                <paragraph>An exception may be thrown.</paragraph>
            </list_item>
        </bullet_list>
        <paragraph>Converting to the correct type avoids complicated behavior and should be preferred.</paragraph>
        <paragraph>The <literal>Variant.Obj</literal> property returns a C# <literal>object</literal> with the correct value for any variant. This
            may be useful when the type of Variant is completely unknown. However, when possible, prefer more
            specific conversions. <literal>Variant.Obj</literal> evaluates a <literal>switch</literal> on <literal>Variant.VariantType</literal> and it may
            not be necessary. Also, if the result is a value type, it is boxed.</paragraph>
        <paragraph>For example, if the potential for <literal>Variant.As&lt;MyNode&gt;()</literal> to throw an invalid cast exception isn't
            acceptable, consider using a <literal>Variant.As&lt;GodotObject&gt;() is MyNode n</literal> type pattern instead.</paragraph>
        <note>
            <paragraph>Since the Variant type in C# is a struct, it can't be null. To create a "null"
                Variant, use the <literal>default</literal> keyword or the <literal>Godot.Variant</literal> parameterless constructor.</paragraph>
        </note>
        <target refid="c-sharp-variant-compatible-types"></target>
        <section ids="variant-compatible-types c-sharp-variant-compatible-types" names="variant-compatible\ types variant\ 兼容类型 c_sharp_variant_compatible_types">
            <title>Variant 兼容类型</title>
            <paragraph>A Variant-compatible type can be converted to and from a <literal>Godot.Variant</literal>.
                These C# types are Variant-compatible:</paragraph>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>除了 <literal>decimal</literal> 、 <literal>nint</literal> 和 <literal>nuint</literal> 之外，所有的 <reference name="内置值类型" refuri="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/built-in-types-table">内置值类型</reference><target ids="id1" names="内置值类型" refuri="https://docs.microsoft.com/zh-cn/dotnet/csharp/language-reference/keywords/built-in-types-table"></target> 。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>String</literal> 。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>从 <reference internal="True" refuri="../../../classes/class_object#class-object"><inline classes="std std-ref">GodotObject</inline></reference> 派生的类。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>在 <literal>Godot.Collections</literal> 命名空间中定义的集合类型。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>Variant 类型的完整列表及其对应的 C# 类型：</paragraph>
            <table>
                <tgroup cols="2">
                    <colspec colwidth="23"></colspec>
                    <colspec colwidth="59"></colspec>
                    <thead>
                        <row>
                            <entry>
                                <paragraph>Variant.Type</paragraph>
                            </entry>
                            <entry>
                                <paragraph>C# 类型</paragraph>
                            </entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><literal>Nil</literal></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>null</literal> （不是类型）</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><literal>Bool</literal></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>bool</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><literal>Int</literal></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>long</literal> （Godot 在 Variant 中存储 64 位整数）</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><literal>Float</literal></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>double</literal> （Godot 在 Variant 中存储 64 位浮点数）</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><literal>String</literal></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>string</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><literal>Vector2</literal></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Godot.Vector2</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><literal>Vector2I</literal></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Godot.Vector2I</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><literal>Rect2</literal></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Godot.Rect2</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><literal>Rect2I</literal></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Godot.Rect2I</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><literal>Vector3</literal></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Godot.Vector3</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><literal>Vector3I</literal></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Godot.Vector3I</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><literal>Transform2D</literal></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Godot.Transform2D</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><literal>Vector4</literal></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Godot.Vector4</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><literal>Vector4I</literal></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Godot.Vector4I</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><literal>Plane</literal></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Godot.Plane</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><literal>Quaternion</literal></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Godot.Quaternion</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><literal>Aabb</literal></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Godot.Aabb</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><literal>Basis</literal></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Godot.Basis</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><literal>Transform3D</literal></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Godot.Transform3D</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><literal>Projection</literal></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Godot.Projection</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><literal>Color</literal></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Godot.Color</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><literal>StringName</literal></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Godot.StringName</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><literal>NodePath</literal></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Godot.NodePath</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><literal>Rid</literal></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Godot.Rid</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><literal>Object</literal></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Godot.GodotObject</literal> 或其他派生类型。</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><literal>Callable</literal></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Godot.Callable</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><literal>Signal</literal></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Godot.Signal</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><literal>Dictionary</literal></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Godot.Collections.Dictionary</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><literal>Array</literal></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Godot.Collections.Array</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><literal>PackedByteArray</literal></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>byte[]</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><literal>PackedInt32Array</literal></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>int[]</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><literal>PackedInt64Array</literal></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>long[]</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><literal>PackedFloat32Array</literal></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>float[]</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><literal>PackedFloat64Array</literal></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>double[]</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><literal>PackedStringArray</literal></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>string[]</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><literal>PackedVector2Array</literal></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Godot.Vector2[]</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><literal>PackedVector3Array</literal></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Godot.Vector3[]</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><literal>PackedColorArray</literal></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>Godot.Color[]</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <warning>
                <paragraph>Godot uses 64-bit integers and floats in Variant. Smaller integer and float types
                    such as <literal>int</literal>, <literal>short</literal> and <literal>float</literal> are supported since they can fit in the
                    bigger type. Be aware that when a conversion is performed, using the wrong
                    type will result in potential precision loss.</paragraph>
            </warning>
            <warning>
                <paragraph>枚举类型由于其底层类型是整数类型，因此都与 <literal>Godot.Variant</literal> 兼容。但是，隐式转换不存在，枚举类型必须在转换为/从 <literal>Godot.Variant</literal> 之前手动转换为其底层的整数类型，或者使用通用的 <literal>Variant.As&lt;T&gt;</literal> 和 <literal>Variant.From&lt;T&gt;</literal> 方法来转换它们。</paragraph>
                <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">enum MyEnum { A, B, C }

Variant variant1 = (int)MyEnum.A;
MyEnum enum1 = (MyEnum)(int)variant1;

Variant variant2 = Variant.From(MyEnum.A);
MyEnum enum2 = variant2.As&lt;MyEnum&gt;();</literal_block>
            </warning>
        </section>
        <section ids="using-variant-in-a-generic-context" names="using\ variant\ in\ a\ generic\ context 在泛型上下文中使用\ variant">
            <title>在泛型上下文中使用 Variant</title>
            <paragraph>在使用泛型时，你可能希望限制泛型 <literal>T</literal> 类型仅为 Variant 兼容类型之一。这可以通过使用 <literal>[MustBeVariant]</literal> 特性来实现。</paragraph>
            <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">public void MethodThatOnlySupportsVariants&lt;[MustBeVariant] T&gt;(T onlyVariant)
{
    // Do something with the Variant-compatible value.
}</literal_block>
            <paragraph>结合泛型 <literal>Variant.From&lt;T&gt;</literal> 可以让你从一个泛型 <literal>T</literal> 类型的实例中获取一个 <literal>Godot.Variant</literal> 的实例。然后它可以用在任何只支持 <literal>Godot.Variant</literal> 结构体的 API 中。</paragraph>
            <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">public void Method1&lt;[MustBeVariant] T&gt;(T variantCompatible)
{
    Variant variant = Variant.From(variantCompatible);
    Method2(variant);
}

public void Method2(Variant variant)
{
    // Do something with variant.
}</literal_block>
            <paragraph>为了调用一个带有泛型参数的方法，该参数用 <literal>[MustBeVariant]</literal> 特性标注，值必须是 Variant 兼容类型或者带有 <literal>[MustBeVariant]</literal> 特性标注的泛型 <literal>T</literal> 类型。</paragraph>
            <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">public class ObjectDerivedClass : GodotObject { }

public class NonObjectDerivedClass { }

public void Main&lt;[MustBeVariant] T1, T2&gt;(T1 someGeneric1, T2 someGeneric2)
{
    MyMethod(42); // Works because `int` is a Variant-compatible type.
    MyMethod(new ObjectDerivedClass()); // Works because any type that derives from `GodotObject` is a Variant-compatible type.
    MyMethod(new NonObjectDerivedClass()); // Does NOT work because the type is not Variant-compatible.
    MyMethod(someGeneric1); // Works because `T1` is annotated with the `[MustBeVariant]` attribute.
    MyMethod(someGeneric2); // Does NOT work because `T2` is NOT annotated with the `[MustBeVariant]` attribute.
}

public void MyMethod&lt;[MustBeVariant] T&gt;(T variant)
{
    // Do something with variant.
}</literal_block>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
