<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/tutorials/scripting/c_sharp/c_sharp_features.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-c-sharp-features"></target>
    <section ids="c-language-features doc-c-sharp-features" names="c#\ language\ features c#\ 语言特性 doc_c_sharp_features">
        <title>C# 语言特性</title>
        <paragraph>本页概述了C#和Godot的常用特征以及它们如何一起使用.</paragraph>
        <target refid="doc-c-sharp-features-type-conversion-and-casting"></target>
        <section ids="type-conversion-and-casting doc-c-sharp-features-type-conversion-and-casting" names="type\ conversion\ and\ casting 类型转换和强制转换 doc_c_sharp_features_type_conversion_and_casting">
            <title>类型转换和强制转换</title>
            <paragraph>C#是一种静态类型语言. 因此, 你无法执行以下操作:</paragraph>
            <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var mySprite = GetNode("MySprite");
mySprite.SetFrame(0);</literal_block>
            <paragraph><literal>GetNode()</literal> 方法返回一个 <literal>Node</literal> 实例。需要显式将其转换为所需的派生类型 <literal>Sprite2D</literal> 。</paragraph>
            <paragraph>为此, 在C#中有多种选择.</paragraph>
            <paragraph><strong>强制转换和类型检查</strong></paragraph>
            <paragraph>如果返回的节点无法转换为 Sprite2D ，则会抛出 <literal>InvalidCastException</literal> 异常。如果你确定不会发生异常，则可以直接使用而不必用 <literal>as</literal> 运算符。</paragraph>
            <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">Sprite2D mySprite = (Sprite2D)GetNode("MySprite");
mySprite.SetFrame(0);</literal_block>
            <paragraph><strong>使用AS运算符</strong></paragraph>
            <paragraph>如果节点无法转换为 Sprite2D ， <literal>as</literal> 运算符将返回 <literal>null</literal> ，因此不能作为具体的值类型。</paragraph>
            <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">Sprite2D mySprite = GetNode("MySprite") as Sprite2D;
// Only call SetFrame() if mySprite is not null
mySprite?.SetFrame(0);</literal_block>
            <paragraph><strong>使用泛型方法</strong></paragraph>
            <paragraph>还提供了泛型方法以使该类型转换透明.</paragraph>
            <paragraph><literal>GetNode &lt;T&gt;()</literal> 在返回之前强制转换节点. 如果节点无法强制转换为所需类型, 它将抛出一个 <literal>InvalidCastException</literal>.</paragraph>
            <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">Sprite2D mySprite = GetNode&lt;Sprite2D&gt;("MySprite");
mySprite.SetFrame(0);</literal_block>
            <paragraph><literal>GetNodeOrNull &lt;T&gt;()</literal> 使用 <literal>as</literal> 运算符, 如果节点无法强制转换为所需类型, 则返回 <literal>null</literal>.</paragraph>
            <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">Sprite2D mySprite = GetNodeOrNull&lt;Sprite2D&gt;("MySprite");
// Only call SetFrame() if mySprite is not null
mySprite?.SetFrame(0);</literal_block>
            <paragraph><strong>使用IS运算符进行类型检查</strong></paragraph>
            <paragraph>可以使用 <literal>is</literal> 运算符，检查节点是否可以转换为Sprite2D 。如果节点无法转换为 Sprite2D ， <literal>is</literal> 运算符将返回 <literal>false</literal> ，否则返回 <literal>true</literal> 。请注意，当 <literal>is</literal> 运算符针对 <literal>null</literal> 使用时，结果始终为 <literal>false</literal> 。</paragraph>
            <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">if (GetNode("MySprite") is Sprite2D)
{
    // Yup, it's a Sprite2D!
}

if (null is Sprite2D)
{
    // This block can never happen.
}</literal_block>
            <paragraph>如果 <literal>is</literal> 运算符返回 <literal>true</literal> ，你可以声明一个新变量来按条件存储转换的结果。</paragraph>
            <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">if (GetNode("MySprite") is Sprite2D mySprite)
{
    // The mySprite variable only exists inside this block, and it's never null.
    mySprite.SetFrame(0);
}</literal_block>
            <paragraph>对于更高级的类型检查, 你可以查看 <reference name="模式匹配" refuri="https://docs.microsoft.com/en-us/dotnet/csharp/pattern-matching">模式匹配</reference><target ids="id1" names="模式匹配" refuri="https://docs.microsoft.com/en-us/dotnet/csharp/pattern-matching"></target>.</paragraph>
        </section>
        <section ids="preprocessor-defines" names="preprocessor\ defines 预处理器符号定义">
            <title>预处理器符号定义</title>
            <paragraph>为了能够根据目标编译环境改变 C# 代码，Godot 提供了一组符号定义。</paragraph>
            <note>
                <paragraph>如果是Godot 3.2之前创建的项目, 你需要修改或重新生成你的 <title_reference>csproj</title_reference> 文件来使用这个功能(可与一个3.2+新项目中的 <literal>&lt;DefineConstants&gt;</literal> 相对比).</paragraph>
            </note>
            <section ids="examples" names="examples 示例">
                <title>示例</title>
                <paragraph>例如, 你可以根据平台更改代码:</paragraph>
                <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">    public override void _Ready()
    {
#if GODOT_SERVER
        // Don't try to load meshes or anything, this is a server!
        LaunchServer();
#elif GODOT_32 || GODOT_MOBILE || GODOT_WEB
        // Use simple objects when running on less powerful systems.
        SpawnSimpleObjects();
#else
        SpawnComplexObjects();
#endif
    }</literal_block>
                <paragraph>或者你可以检测代码所在的引擎, 这对于制作跨引擎库很有用:</paragraph>
                <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">    public void MyPlatformPrinter()
    {
#if GODOT
        GD.Print("This is Godot.");
#elif UNITY_5_3_OR_NEWER
        print("This is Unity.");
#else
        throw new NotSupportedException("Only Godot and Unity are supported.");
#endif
    }</literal_block>
                <paragraph>Or you can write scripts that target multiple Godot versions and take
                    advantage of features that are only available on some of those versions:</paragraph>
                <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">    public void UseCoolFeature()
    {
#if GODOT4_3_OR_GREATER || GODOT4_2_2_OR_GREATER
        // Use CoolFeature, that was added to Godot in 4.3 and cherry-picked into 4.2.2, here.
#else
        // Use a workaround for the absence of CoolFeature here.
#endif
    }</literal_block>
            </section>
            <section ids="full-list-of-defines" names="full\ list\ of\ defines 完整的定义列表">
                <title>完整的定义列表</title>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>所有 Godot 项目都会定义 <literal>GODOT</literal>。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>定义 <literal>TOOLS</literal> ，可在 Debug 环境（编辑器和通过编辑器运行）构建时使用。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>将 <literal>GodotFloat64</literal> 属性设置为 <literal>true</literal> 时，将定义 <literal>GODOT_REAL_T_IS_DOUBLE</literal> 。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>根据架构是 64 位还是 32 位，会定义 <literal>GODOT_64</literal> 或 <literal>GODOT_32</literal>。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>根据操作系统，会定义 <literal>GODOT_LINUXBSD</literal> 、 <literal>GODOT_WINDOWS</literal> 、 <literal>GODOT_OSX</literal> 、 <literal>GODOT_ANDROID</literal> 、 <literal>GODOT_IOS</literal> 、 <literal>GODOT_HTML5</literal> 或 <literal>GODOT_SERVER</literal> 其中之一。将来可能会更改这些名称。这些名称是根据 <reference internal="True" refuri="../../../classes/class_os#class-os"><inline classes="std std-ref">OS</inline></reference> 单例的 <literal>get_name()</literal> 方法创建的，但该方法返回的操作系统并非都能够使用 .NET 运行 Godot 。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal>GODOTX</literal>, <literal>GODOTX_Y</literal>, <literal>GODOTX_Y_Z</literal>, <literal>GODOTx_OR_GREATER</literal>,
                            <literal>GODOTX_y_OR_GREATER</literal>, and <literal>GODOTX_Y_z_OR_GREATER</literal>, where <literal>X</literal>, <literal>Y</literal>,
                            and <literal>Z</literal> are replaced by the current major, minor and patch version of Godot.
                            <literal>x</literal>, <literal>y</literal>, and <literal>z</literal> are replaced by all values from 0 to the current version number for that
                            component.</paragraph>
                        <note>
                            <paragraph>这些定义最早是在 Godot 4.0.4 和 4.1 中添加的。无论当前的 Godot 版本是什么，之前版本的定义都不存在。</paragraph>
                        </note>
                        <paragraph>例如: Godot 4.0.5 定义了 <literal>GODOT4</literal> 、 <literal>GODOT4_OR_GREATER</literal> 、 <literal>GODOT4_0</literal> 、 <literal>GODOT4_0_OR_GREATER</literal> 、 <literal>GODOT4_0_5</literal> 、 <literal>GODOT4_0_4_OR_GREATER</literal> 和 <literal>GODOT4_0_5_OR_GREATER</literal> 。 Godot 4.3.2 定义了 <literal>GODOT4</literal> 、 <literal>GODOT4_OR_GREATER</literal> 、 <literal>GODOT4_3</literal> 、 <literal>GODOT4_0_OR_GREATER</literal> 、 <literal>GODOT4_1_OR_GREATER</literal> 、 <literal>GODOT4_2_OR_GREATER</literal> 、 <literal>GODOT4_3_OR_GREATER</literal> 、 <literal>GODOT4_3_2</literal> 、 <literal>GODOT4_3_0_OR_GREATER</literal> 、 <literal>GODOT4_3_1_OR_GREATER</literal> 和 <literal>GODOT4_3_2_OR_GREATER</literal> 。</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>在 <strong>导出</strong> 时, 根据导出功能, 还可能定义以下内容:</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph><literal>GODOT_PC</literal> , <literal>GODOT_MOBILE</literal> 或 <literal>GODOT_WEB</literal> 中的一种, 取决于平台类型.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>One of <literal>GODOT_WINDOWS</literal>, <literal>GODOT_LINUXBSD</literal>, <literal>GODOT_MACOS</literal>, <literal>GODOT_ANDROID</literal>, <literal>GODOT_IOS</literal>, or <literal>GODOT_WEB</literal> depending on the platform.</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>如果想要参考一个示例项目, 可以参考该OS测试demo:<reference refuri="https://github.com/godotengine/godot-demo-projects/tree/master/misc/os_test">https://github.com/godotengine/godot-demo-projects/tree/master/misc/os_test</reference></paragraph>
                <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
            </section>
        </section>
    </section>
</document>
