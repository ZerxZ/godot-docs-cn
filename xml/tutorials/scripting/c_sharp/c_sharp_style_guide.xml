<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/tutorials/scripting/c_sharp/c_sharp_style_guide.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-c-sharp-styleguide"></target>
    <section ids="c-style-guide doc-c-sharp-styleguide" names="c#\ style\ guide c#\ 风格指南 doc_c_sharp_styleguide">
        <title>C# 风格指南</title>
        <paragraph>对于每个项目而言, 拥有定义良好且一致的编码约定非常重要,Godot也不例外.</paragraph>
        <paragraph>本页面包含一份编码风格指南，Godot 本身的开发人员和贡献者都遵循该指南。因此，它的目标读者是希望为该项目做出贡献的人员，但是由于本文中提到的约定和规范被该语言用户最广泛采用，所以我们建议你也这样做，尤其是如果你还没有这样的指南。</paragraph>
        <note>
            <paragraph>本文绝不是关于如何遵循标准编码约定或最佳实践的详尽指南。如果你不确定此处未涉及的方面，请参阅更全面的文档，例如 <reference name="C# 编码约定" refuri="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/inside-a-program/coding-conventions">C# 编码约定</reference><target ids="c" names="c#\ 编码约定" refuri="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/inside-a-program/coding-conventions"></target>或<reference name="框架设计规范" refuri="https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/naming-guidelines">框架设计规范</reference><target ids="id1" names="框架设计规范" refuri="https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/naming-guidelines"></target>。</paragraph>
        </note>
        <section ids="language-specification" names="language\ specification 语言规范">
            <title>语言规范</title>
            <paragraph>Godot当前在其引擎和示例源代码中使用 <strong>C# 7.0 版本</strong> . 因此, 在我们迁移使用较新版本之前, 必须注意避免混合仅在 C# 7.1 或更高版本中可用的语言功能.</paragraph>
            <paragraph>有关不同版本的C#功能的详细信息, 请参阅 <reference name="C #中的新功能" refuri="https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/">C #中的新功能</reference><target ids="c" names="c\ #中的新功能" refuri="https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/"></target> .</paragraph>
        </section>
        <section ids="formatting" names="formatting 格式">
            <title>格式</title>
            <section ids="general-guidelines" names="general\ guidelines 总体规范">
                <title>总体规范</title>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>使用换行符( <strong>LF</strong> )来换行, 而不是 <literal>CRLF</literal> 或 <literal>CR</literal>.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>在每个文件末尾使用一个换行符, 但 <title_reference>csproj</title_reference> 文件除外.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>使用不带 <reference name="字节顺序标记(BOM)" refuri="https://en.wikipedia.org/wiki/Byte_order_mark">字节顺序标记(BOM)</reference><target ids="bom" names="字节顺序标记(bom)" refuri="https://en.wikipedia.org/wiki/Byte_order_mark"></target> 的 <strong>UTF-8</strong> 编码.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>使用 <strong>4空格</strong> 代替制表符进行缩进(称为 "软制表符").</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>如果长度超过100个字符, 请考虑将其分成几行.</paragraph>
                    </list_item>
                </bullet_list>
            </section>
            <section ids="line-breaks-and-blank-lines" names="line\ breaks\ and\ blank\ lines 换行符和空白行">
                <title>换行符和空白行</title>
                <paragraph>对于一般缩进规则, 请遵循 <reference name="Allman 风格" refuri="https://en.wikipedia.org/wiki/Indentation_style#Allman_style">Allman 风格</reference><target ids="allman" names="allman\ 风格" refuri="https://en.wikipedia.org/wiki/Indentation_style#Allman_style"></target>, 它建议将与控制语句关联的大括号放在下一行, 缩进到同一级别:</paragraph>
                <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">// Use this style:
if (x &gt; 0)
{
    DoSomething();
}

// NOT this:
if (x &gt; 0) {
    DoSomething();
}</literal_block>
                <paragraph>但是, 你可以选择省略括号内的换行符:</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>对于简单的属性访问者.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>对于简单对象, 数组, 或集合初始化.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>对于抽象的自动属性, 索引器, 或事件声明.</paragraph>
                    </list_item>
                </bullet_list>
                <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">// You may put the brackets in a single line in following cases:
public interface MyInterface
{
    int MyProperty { get; set; }
}

public class MyClass : ParentClass
{
    public int Value
    {
        get { return 0; }
        set
        {
            ArrayValue = new [] {value};
        }
    }
}</literal_block>
                <paragraph>插入一个空行:</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>在一列 <literal>using</literal> 语句之后.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>在方法, 属性, 和内部类型声明之间.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>在每个文件的末尾.</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>字段声明和常量声明可以根据相关性编组在一起. 在这种情况下, 请考虑在编组之间插入空白行以便于阅读.</paragraph>
                <paragraph>避免插入空白行：</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>在开括号 <literal>{</literal> 之后。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>在闭合括号 <literal>}</literal> 之前。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>在注释块或单行注释之后.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>与另一个空白行相邻.</paragraph>
                    </list_item>
                </bullet_list>
                <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">using System;
using Godot;
                                          // Blank line after `using` list.
public class MyClass
{                                         // No blank line after `{`.
    public enum MyEnum
    {
        Value,
        AnotherValue                      // No blank line before `}`.
    }
                                          // Blank line around inner types.
    public const int SomeConstant = 1;
    public const int AnotherConstant = 2;

    private Vector3 _x;                  // Related constants or fields can be
    private Vector3 _y;                  // grouped together.

    private float _width;
    private float _height;

    public int MyProperty { get; set; }
                                          // Blank line around properties.
    public void MyMethod()
    {
        // Some comment.
        AnotherMethod();                  // No blank line after a comment.
    }
                                          // Blank line around methods.
    public void AnotherMethod()
    {
    }
}</literal_block>
            </section>
            <section ids="using-spaces" names="using\ spaces 使用空格">
                <title>使用空格</title>
                <paragraph>插入一个空格：</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>在二元和三元运算符的两侧。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>在左括号和 <literal>if</literal>、<literal>for</literal>、<literal>foreach</literal>、<literal>catch</literal>、<literal>while</literal>、<literal>lock</literal>、<literal>using</literal> 关键字之间。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>在单行访问器块之前和之内.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>在单行访问器块中的访问器之间.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>在不是在行尾的逗号之后.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>在 <literal>for</literal> 语句中的分号之后.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>在单行 <literal>case</literal> 语句中的冒号之后.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>在类型声明中冒号的两侧。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>在 lambda 箭头的两侧。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>在单行注释符号（<literal>//</literal>）之后，并且如果在行末使用，则在它之前。</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>不要使用空格：</paragraph>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>在类型转换括号后.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>在单行初始化括号内侧.</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>下面的示例根据上述的一些约定显示了对空格的正确使用：</paragraph>
                <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">public class MyClass&lt;A, B&gt; : Parent&lt;A, B&gt;
{
    public float MyProperty { get; set; }

    public float AnotherProperty
    {
        get { return MyProperty; }
    }

    public void MyMethod()
    {
        int[] values = {1, 2, 3, 4}; // No space within initializer brackets.
        int sum = 0;

        // Single line comment.
        for (int i = 0; i &lt; values.Length; i++)
        {
            switch (i)
            {
                case 3: return;
                default:
                    sum += i &gt; 2 ? 0 : 1;
                    break;
            }
        }

        i += (int)MyProperty; // No space after a type cast.
    }
}</literal_block>
            </section>
        </section>
        <section ids="naming-conventions" names="naming\ conventions 命名规定">
            <title>命名规定</title>
            <paragraph>对所有命名空间、类型名称、成员级别标识符（即方法、属性、常量、事件）使用 <strong>PascalCase</strong>，私有字段除外：</paragraph>
            <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">namespace ExampleProject
{
    public class PlayerCharacter
    {
        public const float DefaultSpeed = 10f;

        public float CurrentSpeed { get; set; }

        protected int HitPoints;

        private void CalculateWeaponDamage()
        {
        }
    }
}</literal_block>
            <paragraph>将 <strong>camelCase</strong> 用于所有其他标识符（即局部变量、方法参数），并使用下划线（<literal>_</literal>）作为私有字段的前缀（但不能用于方法或属性，如上所述）：</paragraph>
            <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">private Vector3 _aimingAt; // Use a `_` prefix for private fields.

private void Attack(float attackStrength)
{
    Enemy targetFound = FindTarget(_aimingAt);

    targetFound?.Hit(attackStrength);
}</literal_block>
            <paragraph>类似 <literal>UI</literal> 这种只有两个字母的首字母缩写应特殊处理，使用 PascalCase 时都应写作大写字母，否则都应写作小写字母。</paragraph>
            <paragraph>请注意，<literal>id</literal> <strong>不是</strong>首字母缩写，因此应将其视为普通标识符：</paragraph>
            <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">public string Id { get; }

public UIManager UI
{
    get { return uiManager; }
}</literal_block>
            <paragraph>通常不建议将类型名称用作标识符的前缀，例如 <literal>string strText</literal> 或 <literal>float fPower</literal>。但是，对于接口来说是个例外，实际上，接口<strong>应该</strong>在其名称前加上大写字母 <literal>I</literal>，例如 <literal>IInventoryHolder</literal> 或 <literal>IDamageable</literal>。</paragraph>
            <paragraph>最后，请考虑有意义的名称，请勿对名称进行过度缩写，以免影响可读性。</paragraph>
            <paragraph>例如，如果你想编写代码来查找附近的敌人并用武器击中它，请选择：</paragraph>
            <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">FindNearbyEnemy()?.Damage(weaponDamage);</literal_block>
            <paragraph>而不是：</paragraph>
            <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">FindNode()?.Change(wpnDmg);</literal_block>
        </section>
        <section ids="member-variables" names="member\ variables 成员变量">
            <title>成员变量</title>
            <paragraph>如果变量只在方法中使用，请勿将该变量声明为成员变量，因为难以定位在何处使用了该变量。相反，你应该将这些变量在方法内部定义为局部变量。</paragraph>
        </section>
        <section ids="local-variables" names="local\ variables 局部变量">
            <title>局部变量</title>
            <paragraph>局部变量的声明位置离首次使用该局部变量的位置越近越好，让人更容易跟上代码的思路，而不需要上翻下找该变量的声明位置。</paragraph>
        </section>
        <section ids="implicitly-typed-local-variables" names="implicitly\ typed\ local\ variables 隐式类型的局部变量">
            <title>隐式类型的局部变量</title>
            <paragraph>考虑使用隐式类型化（<literal>var</literal>）声明局部变量，但是请<strong>只在赋值右侧能够推出</strong>该类型时使用：</paragraph>
            <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">// You can use `var` for these cases:

var direction = new Vector2(1, 0);

var value = (int)speed;

var text = "Some value";

for (var i = 0; i &lt; 10; i++)
{
}

// But not for these:

var value = GetValue();

var velocity = direction * 1.5;

// It's generally a better idea to use explicit typing for numeric values, especially with
// the existence of the `real_t` alias in Godot, which can either be double or float
// depending on the build configuration.

var value = 1.5;</literal_block>
        </section>
        <section ids="other-considerations" names="other\ considerations 其他注意事项">
            <title>其他注意事项</title>
            <block_quote>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>使用显式访问修饰符。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>使用属性而不是非私有字段。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>按此顺序使用修饰符：<literal>public</literal>/<literal>protected</literal>/<literal>private</literal>/<literal>internal</literal>/<literal>virtual</literal>/<literal>override</literal>/<literal>abstract</literal>/<literal>new</literal>/<literal>static</literal>/<literal>readonly</literal>。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>避免在不必要时，为成员使用完全限定的名称或 <literal>this.</literal> 前缀。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>删除未使用的 <literal>using</literal> 语句和不必要的括号。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>考虑省略类型的默认初始值。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>考虑使用空条件运算符或类型初始化器来使代码更紧凑。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>当值可能会成为另一种不同的类型，请使用安全类型转换，否则使用直接类型转换。</paragraph>
                    </list_item>
                </bullet_list>
            </block_quote>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
