<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/tutorials/scripting/c_sharp/c_sharp_basics.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-c-sharp"></target>
    <section ids="c-basics doc-c-sharp" names="c#\ basics c#\ 基础 doc_c_sharp">
        <title>C# 基础</title>
        <section ids="introduction" names="introduction 前言">
            <title>前言</title>
            <paragraph>这个页面简单介绍了 C# 是什么，以及如何在 Godot 中使用 C#。然后，你可能想看看 <reference internal="True" refuri="c_sharp_features#doc-c-sharp-features"><inline classes="std std-ref">如何使用特定功能</inline></reference> ，阅读有关 <reference internal="True" refuri="c_sharp_differences#doc-c-sharp-differences"><inline classes="std std-ref">C# 和 GDScript API 之间的差异</inline></reference> 并（重新）访问逐步教程的 <reference internal="True" refuri="../../../getting_started/step_by_step/scripting_languages#doc-scripting"><inline classes="std std-ref">编写脚本部分</inline></reference> 。</paragraph>
            <paragraph>C# 是由 Microsoft 开发的高级编程语言。在 Godot 中，它是使用 .NET 6.0 实现的。</paragraph>
            <attention>
                <paragraph>在 Godot 4 中用 C# 编写的项目目前无法导出到 Web 平台。如果要在 Web 平台上使用 C#，请考虑使用 Godot 3。 （C# 的）Android 和 iOS 平台支持从 Godot 4.2 开始提供，但仍处于实验阶段，并且 <reference internal="True" refuri="index#doc-c-sharp-platforms"><inline classes="std std-ref">存在一些限制</inline></reference> 。</paragraph>
            </attention>
            <note>
                <paragraph>这 <strong>不是</strong> 一个关于 C# 语言整体的全面教程。如果你还不熟悉其语法或功能，请参阅 <reference name="Microsoft C# 指南" refuri="https://docs.microsoft.com/en-us/dotnet/csharp/index">Microsoft C# 指南</reference><target ids="microsoft-c" names="microsoft\ c#\ 指南" refuri="https://docs.microsoft.com/en-us/dotnet/csharp/index"></target> 或在其他地方寻找合适的介绍。</paragraph>
            </note>
            <target refid="doc-c-sharp-setup"></target>
        </section>
        <section ids="prerequisites doc-c-sharp-setup" names="prerequisites 先决条件 doc_c_sharp_setup">
            <title>先决条件</title>
            <paragraph>Godot 捆绑了运行已经编译好的游戏所需的 .NET 部分，但 Godot 不包括构建和编译游戏所需的 MSBuild 和 C# 编译器等工具。这些工具包含在 .NET SDK 中，需要单独安装。</paragraph>
            <paragraph>综上所述，你必须安装了 .NET SDK <strong>和</strong>支持 .NET 的 Godot 版本。</paragraph>
            <paragraph>从 <reference name=".NET 下载页面" refuri="https://dotnet.microsoft.com/download">.NET 下载页面</reference> 下载并安装SDK的最新稳定版本。</paragraph>
            <important>
                <paragraph>如果你使用 64 位版本的 Godot，请务必安装 64 位版本的 SDK。</paragraph>
            </important>
            <paragraph>如果你正在从源代码构建 Godot，请确保按照 <reference internal="True" refuri="../../../contributing/development/compiling/compiling_with_dotnet#doc-compiling-with-dotnet"><inline classes="std std-ref">使用 .NET 编译</inline></reference> 页面中概述的步骤来启用 .NET 支持。</paragraph>
        </section>
        <section ids="configuring-an-external-editor" names="configuring\ an\ external\ editor 配置外部编辑器">
            <title>配置外部编辑器</title>
            <paragraph>Godot 内置的脚本编辑器对 C# 的支持是最小的。考虑使用外部 IDE 或编辑器，如 <reference name="Visual Studio Code" refuri="https://code.visualstudio.com/">Visual Studio Code</reference> 或 MonoDevelop。这些都为 C# 提供了自动完成、调试和其他有用的功能。要在 Godot 中选择一个外部编辑器，点击 <strong>Editor(编辑器) → Editor Settings(编辑器设置)</strong> ，向下滚动到 <strong>Dotnet(.NET)</strong> 。在 <strong>Dotnet(.NET)</strong> 下，点击 <strong>Editor(编辑器)</strong> ，然后选择你的外部编辑器。Godot 目前支持以下外部编辑器：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>Visual Studio 2022</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Visual Studio Code</paragraph>
                </list_item>
                <list_item>
                    <paragraph>MonoDevelop</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Visual Studio for Mac</paragraph>
                </list_item>
                <list_item>
                    <paragraph>JetBrains Rider</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>关于如何配置外部编辑器，请参见以下章节：</paragraph>
            <section ids="jetbrains-rider" names="jetbrains\ rider">
                <title>JetBrains Rider</title>
                <paragraph>阅读完 "预备知识" 部分，就可以下载安装 <reference name="JetBrains Rider" refuri="https://www.jetbrains.com/rider/download">JetBrains Rider</reference> 。</paragraph>
                <paragraph>在 Godot 的 <strong>Editor(编辑器) → Editor Settings(编辑器设置)</strong> 菜单中：</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>设置 <strong>Dotnet(.NET)</strong> -&gt; <strong>Editor(编辑器)</strong> -&gt; <strong>External Editor(外部编辑器)</strong> 为 <strong>JetBrains Rider</strong> 。</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>在 Rider 中：</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>设置 <strong>MSBuild version</strong> 为 <strong>.NET Core</strong> 。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>安装 <strong>Godot support</strong> 插件。</paragraph>
                    </list_item>
                </bullet_list>
            </section>
            <section ids="visual-studio-code" names="visual\ studio\ code">
                <title>Visual Studio Code</title>
                <paragraph>看完 "预备知识" 部分，就可以下载安装 <reference name="Visual Studio Code" refuri="https://code.visualstudio.com/download">Visual Studio Code</reference> （又名 VS Code）。</paragraph>
                <paragraph>在 Godot 的 <strong>Editor(编辑器) → Editor Settings(编辑器设置)</strong> 菜单中：</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>设置 <strong>Dotnet(.NET)</strong> -&gt; <strong>Editor(编辑器)</strong> -&gt; <strong>External Editor(外部编辑器)</strong> 为 <strong>Visual Studio Code</strong> 。</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>在 Visual Studio Code 中：</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>安装 <reference name="C#" refuri="https://marketplace.visualstudio.com/items?itemName=ms-dotnettools.csharp">C#</reference> 扩展。</paragraph>
                    </list_item>
                </bullet_list>
                <note>
                    <paragraph>如果你使用的是 Linux，需要安装 <reference name="Mono SDK" refuri="https://www.mono-project.com/download/stable/#download-lin">Mono SDK</reference> 才能使用 C# 工具插件。</paragraph>
                </note>
                <paragraph>为了配置一个用于调试的项目，你需要在 <literal>.vscode</literal> 文件夹中拥有一个 <literal>tasks.json</literal> 和 <literal>launch.json</literal> 文件，并进行必要的配置。一个示例配置可以在 <reference name="这里" refuri="https://github.com/godotengine/godot-csharp-vscode/issues/43#issuecomment-1258321229">这里</reference> 找到。在 <literal>launch.json</literal> 文件中，请确保相关配置中的 <literal>program</literal> 参数指向你的 Godot 可执行文件，你可以通过将它更改为可执行文件的路径或定义一个指向可执行文件的 <literal>GODOT4</literal> 环境变量来实现。现在，当你在 Visual Studio Code 中启动调试器时，你的 Godot 项目将会运行。</paragraph>
            </section>
            <section ids="visual-studio-windows-only" names="visual\ studio\ (windows\ only) visual\ studio（仅限\ windows）">
                <title>Visual Studio（仅限 Windows）</title>
                <paragraph>下载并安装最新版本的 <reference name="Visual Studio" refuri="https://visualstudio.microsoft.com/downloads/">Visual Studio</reference> 。如果你选择了正确的工作负载，Visual Studio 将包含所需的 SDK，所以你不需要手动安装 "预先告知" 部分列出的内容。</paragraph>
                <paragraph>在安装 Visual Studio 时，请选择以下工作负载：</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>.NET 桌面开发</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>在 Godot 的 <strong>Editor(编辑器) → Editor Settings(编辑器设置)</strong> 菜单中：</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>设置 <strong>Dotnet(.NET)</strong> -&gt; <strong>Editor(编辑器)</strong> -&gt; <strong>External Editor(外部编辑器)</strong> 为 <strong>Visual Studio</strong> 。</paragraph>
                    </list_item>
                </bullet_list>
                <note>
                    <paragraph>如果你看到了类似“Unable to find package Godot.NET.Sdk”的错误，你的 NuGet 配置可能有问题，需要进行修复。</paragraph>
                    <paragraph>修复 NuGet 配置文件的简单方法就是重新生成一个。在文件浏览器窗口中前往 <literal>%AppData%\NuGet</literal>。将 <literal>NuGet.Config</literal> 文件重命名或删除。重新构建 Godot 项目时，就会自动用默认值创建该文件。</paragraph>
                </note>
            </section>
        </section>
        <section ids="creating-a-c-script" names="creating\ a\ c#\ script 创建\ c#\ 脚本">
            <title>创建 C# 脚本</title>
            <paragraph>成功为 Godot 设置 C# 之后，在场景的节点的上下文菜单中选择 <strong>Attach Script (添加脚本)</strong> 时，应该看到以下选项：</paragraph>
            <image candidates="{'*': 'tutorials/scripting/c_sharp/img/attachcsharpscript.webp'}" uri="tutorials/scripting/c_sharp/img/attachcsharpscript.webp"></image>
            <paragraph>请注意，虽然在某些细节上有所差别，但在使用C#进行脚本编写时，大多数概念都是相通的。如果你是 Godot 的新手，你可能希望在这个时候查看 <reference internal="True" refuri="../../../getting_started/step_by_step/scripting_languages#doc-scripting"><inline classes="std std-ref">脚本语言</inline></reference> 上的教程。虽然在文档中缺乏详细的 C# 示例，但大多数概念可以从 GDScript 中转移过来。</paragraph>
        </section>
        <section ids="project-setup-and-workflow" names="project\ setup\ and\ workflow 项目设置和工作流程">
            <title>项目设置和工作流程</title>
            <paragraph>当你创建第一个 C# 脚本时，Godot 会为你的 Godot 项目初始化 C# 项目文件。这包括生成 C# 解决方案（ <literal>.sln</literal> ）和项目文件（ <literal>.csproj</literal> ），以及一些实用文件和文件夹（ <literal>.godot/mono</literal> ） 。除了 <literal>.godot/mono</literal> 之外，所有这些文件都很重要，应该提交到你的版本控制系统中。 <literal>.godot</literal> 文件夹下的所有内容都可以安全地添加到你的版本控制系统的忽略列表中。在排除故障时, 有时删除 <literal>.godot/mono</literal> 文件夹并让它重新生成可能有所帮助。</paragraph>
        </section>
        <section ids="example" names="example 示例">
            <title>示例</title>
            <paragraph>这是一个空白的 C# 脚本，带有一些注释，以演示其工作方式。</paragraph>
            <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">using Godot;

public partial class YourCustomClass : Node
{
    // Member variables here, example:
    private int _a = 2;
    private string _b = "textvar";

    public override void _Ready()
    {
        // Called every time the node is added to the scene.
        // Initialization here.
        GD.Print("Hello from C# to Godot :)");
    }

    public override void _Process(double delta)
    {
        // Called every frame. Delta is time since the last frame.
        // Update game logic here.
    }
}</literal_block>
            <paragraph>如你所见，在 GDScript 中的全局作用域中，像 Godot 的 <literal>print</literal> 这样的函数可以在 <literal>GD</literal> 静态类中使用，该类是 <literal>Godot</literal> 命名空间的一部分。要查看 <literal>GD</literal> 类中所有方法的完整列表，请参阅： <reference internal="True" refuri="../../../classes/class_@gdscript#class-gdscript"><inline classes="std std-ref">@GDScript</inline></reference> 和 <reference internal="True" refuri="../../../classes/class_@globalscope#class-globalscope"><inline classes="std std-ref">@GlobalScope</inline></reference> 的类参考页面。</paragraph>
            <note>
                <paragraph>请记住，你希望附加到节点上的类应与 <literal>.cs</literal> 文件的名称相同。否则，你将会遇到以下错误：</paragraph>
                <paragraph><emphasis>"Cannot find class XXX for script res://XXX.cs"</emphasis></paragraph>
            </note>
        </section>
        <section ids="general-differences-between-c-and-gdscript" names="general\ differences\ between\ c#\ and\ gdscript c#\ 和\ gdscript\ 之间的一般差异">
            <title>C# 和 GDScript 之间的一般差异</title>
            <paragraph>C# API 使用 <literal>PascalCase</literal> 而不是 GDScript/C++ 中使用的 <literal>snake_case</literal> 。 在可能的情况下，字段和 getters/setters 已转换为属性。一般来说，C# Godot API 一贯力求尽可能合理。</paragraph>
            <paragraph>有关更多信息，请参见 <reference internal="True" refuri="c_sharp_differences#doc-c-sharp-differences"><inline classes="std std-ref">C# API 与 GDScript 的差异</inline></reference> 页面。</paragraph>
            <warning>
                <paragraph>如果想在编辑器中看到新的导出变量或信号，就需要重新构建项目程序集。可以通过点击编辑器右上角的 <strong>Build</strong> 按钮手动触发这种构建。</paragraph>
                <image candidates="{'*': 'tutorials/scripting/c_sharp/img/build_dotnet.webp'}" uri="tutorials/scripting/c_sharp/img/build_dotnet.webp"></image>
                <paragraph>你还需要重新构建项目集，以应用 "工具" 脚本中的更改。</paragraph>
            </warning>
        </section>
        <section ids="current-gotchas-and-known-issues" names="current\ gotchas\ and\ known\ issues 目前的陷阱和已知问题">
            <title>目前的陷阱和已知问题</title>
            <paragraph>由于 Godot 中 C# 支持相对较新，因此存在一些发展过程中的问题和需要解决的事项。以下是在 Godot 中使用 C# 时应注意的最重要问题的列表，但如果有疑问，还可以查看官方的 <reference name=".NET 问题的跟踪" refuri="https://github.com/godotengine/godot/labels/topic%3Adotnet">.NET 问题的跟踪</reference><target ids="net" names=".net\ 问题的跟踪" refuri="https://github.com/godotengine/godot/labels/topic%3Adotnet"></target> 。</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>编写编辑器插件是可能的，但是目前相当复杂。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>热重载时，当前状态不被保存和恢复，导出变量除外。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>附加 C# 脚本需要引用一个类，该类名需要匹配其文件名。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>Get()</literal>/<literal>Set()</literal> 、 <literal>Call()</literal>/<literal>CallDeferred()</literal> 等方法，以及信号连接方法 <literal>Connect()</literal> 都依赖于 Godot 的 <literal>snake_case</literal> API 命名规范。所以， <literal>CallDeferred("AddChild")</literal> 无法调用 <literal>AddChild</literal> ，因为API需要原始 <literal>snake_case</literal> 版本的 <literal>add_child</literal> 。不过，自定义属性和方法没有此限制。建议在 <literal>PropertyName</literal> 、 <literal>MethodName</literal> 和 <literal>SignalName</literal> 中使用公开的 <literal>StringName</literal> ，以避免额外的 <literal>StringName</literal> 分配以及担心蛇形（snake_case）命名。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>截止到 Godot 4.0 版本，支持将 .NET 项目导出到桌面平台（Linux、Windows和macOS）。其他平台将在未来的 4.x 版本中获得支持。</paragraph>
        </section>
        <section ids="common-pitfalls" names="common\ pitfalls 常见陷阱">
            <title>常见陷阱</title>
            <paragraph>你可能会在尝试修改 Godot 对象中的一些值时遇到以下错误，例如在尝试改变一个 <literal>Node2D</literal> 的 X 坐标时：</paragraph>
            <literal_block force="False" highlight_args="{'hl_lines': [5]}" language="csharp" linenos="False" xml:space="preserve">public partial class MyNode2D : Node2D
{
    public override _Ready()
    {
        Position.X = 100.0f;
        // CS1612: Cannot modify the return value of 'Node2D.Position' because
        // it is not a variable.
    }
}</literal_block>
            <paragraph>这是完全正常的。C# 中的结构体（在这个例子中，是一个 <literal>Vector2</literal> ）在赋值时会被复制，意味着当你从一个属性或索引器中获取这样一个对象时，你得到的是它的一个副本，而不是它本身。修改这个副本而不重新赋值是没有任何效果的。</paragraph>
            <paragraph>解决方法很简单：获取整个结构体，修改你想要修改的值，然后重新赋值给属性。</paragraph>
            <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var newPosition = Position;
newPosition.X = 100.0f;
Position = newPosition;</literal_block>
            <paragraph>自 C# 10 起，还可以在结构体上使用 <reference name="with 表达式" refuri="https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/operators/with-expression">with 表达式</reference><target ids="with" names="with\ 表达式" refuri="https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/operators/with-expression"></target> ，让你只需一行实现相同的效果。</paragraph>
            <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">Position = Position with { X = 100.0f };</literal_block>
            <paragraph>你可以在 <reference name="C# 语言参考" refuri="https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/compiler-messages/cs1612">C# 语言参考</reference><target ids="c" names="c#\ 语言参考" refuri="https://learn.microsoft.com/zh-cn/dotnet/csharp/language-reference/compiler-messages/cs1612"></target> 中了解更多关于这个错误的信息。</paragraph>
        </section>
        <section ids="performance-of-c-in-godot" names="performance\ of\ c#\ in\ godot c#\ 在\ godot\ 中的性能">
            <title>C# 在 Godot 中的性能</title>
            <paragraph>根据一些初步的 <reference name="基准测试" refuri="https://github.com/cart/godot3-bunnymark">基准测试</reference><target ids="id1" names="基准测试" refuri="https://github.com/cart/godot3-bunnymark"></target> ，C# 在 Godot 中的性能，虽然总体在相同数量级，但在某些简单情况下大约是 GDScript 的 <strong>~4×</strong> 。C++ 仍然稍微快一些；具体情况将根据你的使用情况而变化。对于大多数常规脚本工作负载而言，GDScript 可能足够快。</paragraph>
            <paragraph>大多数基于 <literal>GodotObject</literal> 的 Godot C# 对象（例如任何像 <literal>Control</literal> 这样的 <literal>Node</literal> 或 <literal>Camera3D</literal> 这样的 <literal>Node3D</literal> ）的属性，需要使用本地（互操作）调用，因为它们与 Godot 的 C++ 核心进行通信。如果你需要在单个代码位置多次修改或读取这些属性的值，请考虑将其分配给本地变量：</paragraph>
            <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">using Godot;

public partial class YourCustomClass : Node3D
{
    private void ExpensiveReposition()
    {
        for (var i = 0; i &lt; 10; i++)
        {
            // Position is read and set 10 times which incurs native interop.
            // Furthermore the object is repositioned 10 times in 3D space which
            // takes additional time.
            Position += new Vector3(i, i);
        }
    }

    private void Reposition()
    {
        // A variable is used to avoid native interop for Position on every loop.
        var newPosition = Position;
        for (var i = 0; i &lt; 10; i++)
        {
            newPosition += new Vector3(i, i);
        }
        // Setting Position only once avoids native interop and repositioning in 3D space.
        Position = newPosition;
    }
}</literal_block>
            <paragraph>将原始数组（例如 <literal>byte[]</literal> ）或 <literal>string</literal> 传递给 Godot 的 C# API 需要进行数据封装，这在性能上相对较昂贵。</paragraph>
            <paragraph>将 <literal>string</literal> 隐式转换为 <literal>NodePath</literal> 或 <literal>StringName</literal> 会产生本地互操作和数据封装的成本，因为必须将 <literal>string</literal> 封装并传递到相应的本地构造函数。</paragraph>
        </section>
        <section ids="using-nuget-packages-in-godot" names="using\ nuget\ packages\ in\ godot 在\ godot\ 中使用\ nuget\ 包">
            <title>在 Godot 中使用 NuGet 包</title>
            <paragraph><reference name="NuGet" refuri="https://www.nuget.org/">NuGet</reference><target ids="nuget" names="nuget" refuri="https://www.nuget.org/"></target> 包可以与 Godot 一起安装和使用，就像任何 C# 项目一样。许多 IDE 都可以直接添加软件包，也可以通过在项目根目录下的 <literal>.csproj</literal> 文件中添加软件包引用来手动添加它们：</paragraph>
            <literal_block force="False" highlight_args="{'hl_lines': [2]}" language="xml" linenos="False" xml:space="preserve">    &lt;ItemGroup&gt;
        &lt;PackageReference Include="Newtonsoft.Json" Version="11.0.2" /&gt;
    &lt;/ItemGroup&gt;
    ...
&lt;/Project&gt;</literal_block>
            <paragraph>从 Godot 3.2.3 开始，Godot 在下次构建项目时自动下载并设置新添加的 NuGet 包。</paragraph>
        </section>
        <section ids="profiling-your-c-code" names="profiling\ your\ c#\ code 分析\ c#\ 代码">
            <title>分析 C# 代码</title>
            <paragraph>以下工具可用于对托管代码进行性能和内存分析：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>JetBrains Rider 配合 dotTrace/dotMemory 插件。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>独立版的 JetBrains dotTrace/dotMemory。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Visual Studio。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>使用 JetBrains tools 和 Visual Studio 可以同时对托管和非托管代码进行分析，但仅限于 Windows。</paragraph>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
