<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/tutorials/scripting/c_sharp/c_sharp_collections.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-c-sharp-collections"></target>
    <section ids="c-collections doc-c-sharp-collections" names="c#\ collections c#\ 集合 doc_c_sharp_collections">
        <title>C# 集合</title>
        <paragraph>.NET 基类库包含多种集合类型，可以用来存储和操作数据。Godot 也提供了一些集合类型，它们与引擎的其他部分紧密集成。</paragraph>
        <section ids="choose-a-collection" names="choose\ a\ collection 选择一种集合">
            <title>选择一种集合</title>
            <paragraph><reference name=".NET 集合" refuri="https://learn.microsoft.com/zh-cn/dotnet/standard/collections/">.NET 集合</reference><target ids="net" names=".net\ 集合" refuri="https://learn.microsoft.com/zh-cn/dotnet/standard/collections/"></target> 和 Godot 集合的主要区别是 .NET 集合是用 C# 实现的，而 Godot 集合是用 C++ 实现的，Godot C# API 是对它的一个封装，这是一个重要的区别，因为它意味着对 Godot 集合的每一个操作都需要进行封送（marshaling），这可能会非常耗费资源，尤其是在循环中。</paragraph>
            <paragraph>由于性能影响，仅在绝对必要时（例如与 Godot API 交互）才建议使用 Godot 集合。Godot 只能理解其自己的集合类型，因此在与引擎交互时需要使用它们。</paragraph>
            <paragraph>如果你有一组元素，不需要传递给 Godot API，使用 .NET 集合会更高效。</paragraph>
            <tip>
                <paragraph>.NET 集合和 Godot 集合之间也可以进行转换。Godot 集合包含从通用 .NET 集合接口复制元素的构造函数，而且 Godot 集合可以与 <reference name="LINQ" refuri="https://learn.microsoft.com/zh-cn/dotnet/standard/linq">LINQ</reference><target ids="linq" names="linq" refuri="https://learn.microsoft.com/zh-cn/dotnet/standard/linq"></target> <literal>ToList</literal> 、 <literal>ToArray</literal> 和 <literal>ToDictionary</literal> 方法一起使用。但要注意，这种转换需要对集合中的每个元素进行封送并将其复制到新集合中，因此可能会很耗费资源。</paragraph>
            </tip>
            <paragraph>尽管如此，Godot 集合经过优化，试图避免不必要的封送，因此如 <literal>Sort</literal> 或 <literal>Reverse</literal> 等方法通过单个交互调用实现，无需封送每个元素。要注意那些接受像 <reference name="LINQ" refuri="https://learn.microsoft.com/zh-cn/dotnet/standard/linq">LINQ</reference><target ids="linq" names="linq" refuri="https://learn.microsoft.com/zh-cn/dotnet/standard/linq"></target> 这样的集合接口的通用 API，因为每个方法都需要遍历集合，因此需要封送每个元素。尽量在可能的情况下使用 Godot 集合的实例方法。</paragraph>
            <paragraph>为了选择在不同情况下使用哪种集合类型，请考虑以下问题：</paragraph>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph>你的集合是否需要与 Godot 引擎交互？（例如：导出属性的类型，调用 Godot 方法）。</paragraph>
                    <block_quote>
                        <bullet_list bullet="*">
                            <list_item>
                                <paragraph>如果是，由于 Godot 只支持 <reference internal="True" refuri="c_sharp_variant#doc-c-sharp-variant"><inline classes="std std-ref">Variant 兼容</inline></reference> 类型，所以请使用 Godot 集合。</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>如果不是，请考虑 <reference name="选择一个合适的 .NET 集合" refuri="https://learn.microsoft.com/zh-cn/dotnet/standard/collections/selecting-a-collection-class">选择一个合适的 .NET 集合</reference><target ids="net" names="选择一个合适的\ .net\ 集合" refuri="https://learn.microsoft.com/zh-cn/dotnet/standard/collections/selecting-a-collection-class"></target> 。</paragraph>
                            </list_item>
                        </bullet_list>
                    </block_quote>
                </list_item>
                <list_item>
                    <paragraph>你是否需要一个 Godot 集合，用来表示一个列表或顺序的数据集？</paragraph>
                    <block_quote>
                        <bullet_list bullet="*">
                            <list_item>
                                <paragraph>Godot <reference internal="True" refid="doc-c-sharp-collections-array"><inline classes="std std-ref">数组</inline></reference> 与 C# 集合 <literal>List&lt;T&gt;</literal> 类似。</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>Godot <reference internal="True" refid="doc-c-sharp-collections-packedarray"><inline classes="std std-ref">紧缩数组</inline></reference> 是更高效的内存数组，在 C# 中使用一个支持 <literal>System.Array</literal> 的类型。</paragraph>
                            </list_item>
                        </bullet_list>
                    </block_quote>
                </list_item>
                <list_item>
                    <paragraph>你需一个 Godot 集合将一组键映射到一组值吗？</paragraph>
                    <block_quote>
                        <bullet_list bullet="*">
                            <list_item>
                                <paragraph>Godot <reference internal="True" refid="doc-c-sharp-collections-dictionary"><inline classes="std std-ref">字典</inline></reference> 存储键值对，并通过其关联的键轻松访问值。</paragraph>
                            </list_item>
                        </bullet_list>
                    </block_quote>
                </list_item>
            </bullet_list>
        </section>
        <section ids="godot-collections" names="godot\ collections godot\ 集合">
            <title>Godot 集合</title>
            <target refid="doc-c-sharp-collections-packedarray"></target>
            <section ids="packedarray doc-c-sharp-collections-packedarray" names="packedarray 紧缩数组 doc_c_sharp_collections_packedarray">
                <title>紧缩数组</title>
                <paragraph>Godot 中的紧缩数组以指定类型的数组形式实现，这样就能够更加紧实，每个元素都只有各自类型的大小，而不是 <literal>Variant</literal> 的大小。</paragraph>
                <paragraph>在 C# 中，紧缩数组由 <literal>System.Array</literal> 代替：</paragraph>
                <table>
                    <tgroup cols="2">
                        <colspec colwidth="22"></colspec>
                        <colspec colwidth="62"></colspec>
                        <thead>
                            <row>
                                <entry>
                                    <paragraph>GDScript</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>C#</paragraph>
                                </entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>
                                    <paragraph><literal>PackedInt32Array</literal></paragraph>
                                </entry>
                                <entry>
                                    <paragraph><literal>int[]</literal></paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph><literal>PackedInt64Array</literal></paragraph>
                                </entry>
                                <entry>
                                    <paragraph><literal>long[]</literal></paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph><literal>PackedByteArray</literal></paragraph>
                                </entry>
                                <entry>
                                    <paragraph><literal>byte[]</literal></paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph><literal>PackedFloat32Array</literal></paragraph>
                                </entry>
                                <entry>
                                    <paragraph><literal>float[]</literal></paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph><literal>PackedFloat64Array</literal></paragraph>
                                </entry>
                                <entry>
                                    <paragraph><literal>double[]</literal></paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph><literal>PackedStringArray</literal></paragraph>
                                </entry>
                                <entry>
                                    <paragraph><literal>string[]</literal></paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph><literal>PackedColorArray</literal></paragraph>
                                </entry>
                                <entry>
                                    <paragraph><literal>Color[]</literal></paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph><literal>PackedVector2Array</literal></paragraph>
                                </entry>
                                <entry>
                                    <paragraph><literal>Vector2[]</literal></paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph><literal>PackedVector3Array</literal></paragraph>
                                </entry>
                                <entry>
                                    <paragraph><literal>Vector3[]</literal></paragraph>
                                </entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
                <paragraph>其他 C# 数组在 Godot C# API 中不受支持，因为没有等效的紧缩数组。请查看 <reference internal="True" refuri="c_sharp_variant#doc-c-sharp-variant"><inline classes="std std-ref">Variant</inline></reference> 以获取所有兼容类型的列表。</paragraph>
                <target refid="doc-c-sharp-collections-array"></target>
            </section>
            <section ids="array doc-c-sharp-collections-array" names="array 数组 doc_c_sharp_collections_array">
                <title>数组</title>
                <paragraph>Godot 数组被实现为一个包含多个任意类型元素的 <literal>Variant</literal> 数组。在 C# 中，对应的类型是 <literal>Godot.Collections.Array</literal> 。</paragraph>
                <paragraph>泛型 <literal>Godot.Collections.Array&lt;T&gt;</literal> 类型允许将元素类型限制为 <reference internal="True" refuri="c_sharp_variant#doc-c-sharp-variant"><inline classes="std std-ref">Variant 兼容</inline></reference> 类型。</paragraph>
                <paragraph>一个未指定类型的 <literal>Godot.Collections.Array</literal> 可以使用 <literal>Godot.Collections.Array&lt;T&gt;(Godot.Collections.Array)</literal> 构造函数转换为一个指定类型的数组。</paragraph>
                <note>
                    <paragraph>尽管名字如此，Godot 数组与 C# 集合 <literal>List&lt;T&gt;</literal> 更相似，而不是 <literal>System.Array</literal> 。它们的大小不固定，随着集合中添加/删除元素而增长或缩小。</paragraph>
                </note>
                <paragraph>Godot Array 方法列表及其在 C# 中的对应：</paragraph>
                <table>
                    <tgroup cols="2">
                        <colspec colwidth="23"></colspec>
                        <colspec colwidth="91"></colspec>
                        <thead>
                            <row>
                                <entry>
                                    <paragraph>GDScript</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>C#</paragraph>
                                </entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>
                                    <paragraph>all</paragraph>
                                </entry>
                                <entry>
                                    <paragraph><reference name="System.Linq.Enumerable.All" refuri="https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.all">System.Linq.Enumerable.All</reference></paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>any</paragraph>
                                </entry>
                                <entry>
                                    <paragraph><reference name="System.Linq.Enumerable.Any" refuri="https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.any">System.Linq.Enumerable.Any</reference></paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>append</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Add</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>append_array</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>AddRange</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>assign</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Clear 和 AddRange</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>back</paragraph>
                                </entry>
                                <entry>
                                    <paragraph><literal>Array[^1]</literal> 或 <reference name="System.Linq.Enumerable.Last" refuri="https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.last">System.Linq.Enumerable.Last</reference> 或 <reference name="System.Linq.Enumerable.LastOrDefault" refuri="https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.lastordefault">System.Linq.Enumerable.LastOrDefault</reference></paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>bsearch</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>BinarySearch</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>bsearch_custom</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>N/A</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>clear</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Clear</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>count</paragraph>
                                </entry>
                                <entry>
                                    <paragraph><reference name="System.Linq.Enumerable.Count" refuri="https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.count">System.Linq.Enumerable.Count</reference></paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>duplicate</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Duplicate</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>erase</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Remove</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>fill</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Fill</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>filter</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>使用 <reference name="System.Linq.Enumerable.Where" refuri="https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.where">System.Linq.Enumerable.Where</reference></paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>find</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>IndexOf</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>front</paragraph>
                                </entry>
                                <entry>
                                    <paragraph><literal>Array[0]</literal> 或 <reference name="System.Linq.Enumerable.First" refuri="https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.first">System.Linq.Enumerable.First</reference> 或 <reference name="System.Linq.Enumerable.FirstOrDefault" refuri="https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.firstordefault">System.Linq.Enumerable.FirstOrDefault</reference></paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>get_typed_builtin</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>N/A</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>get_typed_class_name</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>N/A</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>get_typed_script</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>N/A</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>has</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Contains</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>hash</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>GD.Hash</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>insert</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Insert</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>is_empty</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>使用 <literal>Count == 0</literal></paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>is_read_only</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>IsReadOnly</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>is_same_typed</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>N/A</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>is_typed</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>N/A</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>make_read_only</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>MakeReadOnly</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>map</paragraph>
                                </entry>
                                <entry>
                                    <paragraph><reference name="System.Linq.Enumerable.Select" refuri="https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.select">System.Linq.Enumerable.Select</reference></paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>max</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Max</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>min</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Min</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>pick_random</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>PickRandom（请考虑用 <reference name="System.Random" refuri="https://learn.microsoft.com/en-us/dotnet/api/system.random">System.Random</reference> ）</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>pop_at</paragraph>
                                </entry>
                                <entry>
                                    <paragraph><literal>Array[i]</literal> 用 <literal>RemoveAt(i)</literal></paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>pop_back</paragraph>
                                </entry>
                                <entry>
                                    <paragraph><literal>Array[^1]</literal> 用 <literal>RemoveAt(Count - 1)</literal></paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>pop_front</paragraph>
                                </entry>
                                <entry>
                                    <paragraph><literal>Array[0]</literal> 用 <literal>RemoveAt(0)</literal></paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>push_back</paragraph>
                                </entry>
                                <entry>
                                    <paragraph><literal>Insert(Count, item)</literal></paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>push_front</paragraph>
                                </entry>
                                <entry>
                                    <paragraph><literal>Insert(0, item)</literal></paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>reduce</paragraph>
                                </entry>
                                <entry>
                                    <paragraph><reference name="System.Linq.Enumerable.Aggregate" refuri="https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.aggregate">System.Linq.Enumerable.Aggregate</reference></paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>remove_at</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>RemoveAt</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>resize</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Resize</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>reverse</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Reverse</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>rfind</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>LastIndexOf</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>shuffle</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Shuffle</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>size</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Count</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>slice</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Slice</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>sort</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Sort</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>sort_custom</paragraph>
                                </entry>
                                <entry>
                                    <paragraph><reference name="System.Linq.Enumerable.OrderBy" refuri="https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.orderby">System.Linq.Enumerable.OrderBy</reference></paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>操作符 !=</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>!RecursiveEqual</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>操作符 +</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>操作符 +</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>操作符 &lt;</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>N/A</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>操作符 &lt;=</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>N/A</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>操作符 ==</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>RecursiveEqual</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>操作符 &gt;</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>N/A</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>操作符 &gt;=</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>N/A</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>操作符 []</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Array[int] 索引器</paragraph>
                                </entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
                <target ids="system-random" names="system.random" refuri="https://learn.microsoft.com/en-us/dotnet/api/system.random"></target>
                <target ids="system-linq-enumerable-aggregate" names="system.linq.enumerable.aggregate" refuri="https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.aggregate"></target>
                <target ids="system-linq-enumerable-all" names="system.linq.enumerable.all" refuri="https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.all"></target>
                <target ids="system-linq-enumerable-any" names="system.linq.enumerable.any" refuri="https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.any"></target>
                <target ids="system-linq-enumerable-count" names="system.linq.enumerable.count" refuri="https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.count"></target>
                <target ids="system-linq-enumerable-first" names="system.linq.enumerable.first" refuri="https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.first"></target>
                <target ids="system-linq-enumerable-firstordefault" names="system.linq.enumerable.firstordefault" refuri="https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.firstordefault"></target>
                <target ids="system-linq-enumerable-last" names="system.linq.enumerable.last" refuri="https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.last"></target>
                <target ids="system-linq-enumerable-lastordefault" names="system.linq.enumerable.lastordefault" refuri="https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.lastordefault"></target>
                <target ids="system-linq-enumerable-orderby" names="system.linq.enumerable.orderby" refuri="https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.orderby"></target>
                <target ids="system-linq-enumerable-select" names="system.linq.enumerable.select" refuri="https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.select"></target>
                <target ids="system-linq-enumerable-where" names="system.linq.enumerable.where" refuri="https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.where"></target>
                <target refid="doc-c-sharp-collections-dictionary"></target>
            </section>
            <section ids="dictionary doc-c-sharp-collections-dictionary" names="dictionary 字典 doc_c_sharp_collections_dictionary">
                <title>字典</title>
                <paragraph>Godot 字典是用 <literal>Variant</literal> 类型的键和值实现的。在 C# 中，对应的类型是 <literal>Godot.Collections.Dictionary</literal> 。</paragraph>
                <paragraph>泛型 <literal>Godot.Collections.Dictionary&lt;TKey, TValue&gt;</literal> 类型允许将键和值的类型限制为 <reference internal="True" refuri="c_sharp_variant#doc-c-sharp-variant"><inline classes="std std-ref">Variant 兼容</inline></reference> 类型。</paragraph>
                <paragraph>一个无类型的 <literal>Godot.Collections.Dictionary</literal> 可以用 <literal>Godot.Collections.Dictionary&lt;TKey, TValue&gt;(Godot.Collections.Dictionary)</literal> 构造函数转换为一个有类型的字典。</paragraph>
                <tip>
                    <paragraph>如果你需要一个字典，其中键是有类型的，但值没有类型，那么使用 <literal>Variant</literal> 作为有类型字典的 <literal>TValue</literal> 泛型参数。</paragraph>
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">// The keys must be string, but the values can be any Variant-compatible type.
var dictionary = new Godot.Collections.Dictionary&lt;string, Variant&gt;();</literal_block>
                </tip>
                <paragraph>Godot Dictionary 的方法列表及其在 C# 中的对应方法：</paragraph>
                <table>
                    <tgroup cols="2">
                        <colspec colwidth="23"></colspec>
                        <colspec colwidth="62"></colspec>
                        <thead>
                            <row>
                                <entry>
                                    <paragraph>GDScript</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>C#</paragraph>
                                </entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>
                                    <paragraph>clear</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Clear</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>duplicate</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Duplicate</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>erase</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Remove</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>find_key</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>N/A</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>get</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Dictionary[Variant] 索引器 或 TryGetValue</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>has</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>ContainsKey</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>has_all</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>N/A</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>hash</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>GD.Hash</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>is_empty</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>使用 <literal>Count == 0</literal></paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>is_read_only</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>IsReadOnly</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>keys</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Keys</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>make_read_only</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>MakeReadOnly</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>merge</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Merge</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>size</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Count</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>values</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Values</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>操作符 !=</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>!RecursiveEqual</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>操作符 ==</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>RecursiveEqual</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph>操作符 []</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Dictionary[Variant] 索引器，Add 或 TryGetValue</paragraph>
                                </entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
                <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
            </section>
        </section>
    </section>
</document>
