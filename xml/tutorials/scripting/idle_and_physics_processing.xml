<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/tutorials/scripting/idle_and_physics_processing.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-idle-and-physics-processing"></target>
    <section ids="doc-idle-and-physics-processing idle-and-physics-processing" names="idle\ and\ physics\ processing 空闲处理与物理处理 doc_idle_and_physics_processing">
        <title>空闲处理与物理处理</title>
        <paragraph>游戏是通过循环来运行的，每一帧都需要先更新游戏世界的状态，然后再把它绘制到屏幕上。Godot 为 Node 类提供了两个虚方法来完成帧循环处理：<reference internal="True" refuri="../../classes/class_node#class-node-private-method-process"><inline classes="std std-ref">Node._process()</inline></reference> 和 <reference internal="True" refuri="../../classes/class_node#class-node-private-method-physics-process"><inline classes="std std-ref">Node._physics_process()</inline></reference>。如果你在脚本中定义了这两个函数的其中之一，或者两者都定义了，引擎就会自动进行调用这个（这些）虚函数。</paragraph>
        <paragraph>可以使用两种帧循环处理方式：</paragraph>
        <enumerated_list enumtype="arabic" prefix="" suffix=".">
            <list_item>
                <paragraph><strong>空闲处理</strong>（Idle processing）可以用来执行每帧更新节点的代码，执行频率会尽可能地快。</paragraph>
            </list_item>
            <list_item>
                <paragraph><strong>物理处理</strong>（Physics processing）的执行频率是固定的，默认为每秒 60 次。物理处理和游戏的实际帧率无关，可以让物理平滑执行，故一切与物理引擎相关的行为都应该用物理处理帧循环函数来进行处理，如移动可能会与环境相碰撞的实体。</paragraph>
            </list_item>
        </enumerated_list>
        <paragraph>在脚本中定义 <literal>_process()</literal> 方法就会激活空闲处理。可以通过调用 <reference internal="True" refuri="../../classes/class_node#class-node-method-set-process"><inline classes="std std-ref">Node.set_process()</inline></reference> 来对空闲处理的启用状态进行控制。</paragraph>
        <paragraph>引擎每需要绘制一帧画面，就会调用一次该方法：</paragraph>
        <container classes="sphinx-tabs" type="tab-element">
            <div aria-label="Tabbed content" role="tablist">
                <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
            </div>
            <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func _process(delta):
    # Do something...
    pass</literal_block>
            </div>
            <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">public override void _Process(double delta)
{
    // Do something...
}</literal_block>
            </div>
        </container>
        <paragraph>切记：引擎调用 <literal>_process()</literal> 的频率以应用的实际帧率为准，该实际帧率会根据时间的变化而变化，在不同设备上该实际帧率也会有所不同。</paragraph>
        <paragraph>该函数的参数 <literal>delta</literal> 表示从上一次调用 <literal>_process()</literal> 开始所经过的秒数，借助这个参数就可以进行与帧率无关的计算。例如，为移动物理做动画时，应该始终将速度值乘上 <literal>delta</literal>。</paragraph>
        <paragraph>物理处理使用的是类似的虚函数：<literal>_physics_process()</literal>，用于必须在每一次物理迭代前进行的计算，比如移动可能会与游戏世界发生碰撞的角色。前面提到过，为了实现平稳的物理交互，<literal>_physics_process()</literal> 的执行间隔是尽可能固定的，可以在“项目设置”的“Physics -&gt; Common -&gt; Physics Fps”（物理 -&gt; 常规 -&gt; 物理 FPS）中修改物理迭代之间的间隔，默认设置是每秒 60 次。</paragraph>
        <paragraph>引擎每进行一次物理计算，就会调用一次该方法：</paragraph>
        <container classes="sphinx-tabs" type="tab-element">
            <div aria-label="Tabbed content" role="tablist">
                <button aria-controls="panel-1-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                <button aria-controls="panel-1-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
            </div>
            <div aria-labelledby="tab-1-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func _physics_process(delta):
    # Do something...
    pass</literal_block>
            </div>
            <div aria-labelledby="tab-1-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-1-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">public override void _PhysicsProcess(double delta)
{
    // Do something...
}</literal_block>
            </div>
        </container>
        <paragraph><literal>_process()</literal> 函数不与物理处理同步执行，且其执行频率会受到硬件和游戏优化的影响。在单线程游戏中，会在物理迭代后执行。</paragraph>
        <paragraph>要观察 <literal>_process()</literal> 的执行，可以创建一个只有单个 Label 节点的场景，然后把下面的脚本附加给这个 Label 节点：</paragraph>
        <container classes="sphinx-tabs" type="tab-element">
            <div aria-label="Tabbed content" role="tablist">
                <button aria-controls="panel-2-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                <button aria-controls="panel-2-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
            </div>
            <div aria-labelledby="tab-2-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">extends Label

var time = 0

func _process(delta):
    time += delta
    text = str(time) # 'text' is a built-in Label property.</literal_block>
            </div>
            <div aria-labelledby="tab-2-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-2-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">using Godot;

public partial class CustomLabel : Label
{
    private double _time;

    public override void _Process(double delta)
    {
        _time += delta;
        Text = _time.ToString(); // 'Text' is a built-in Label property.
    }
}</literal_block>
            </div>
        </container>
        <paragraph>运行场景，你就会看到一个每帧都会增加的计数器。</paragraph>
        <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
    </section>
</document>
