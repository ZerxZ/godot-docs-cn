<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/tutorials/xr/openxr_passthrough.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-openxr-passthrough"></target>
    <section ids="the-openxr-passthrough doc-openxr-passthrough" names="the\ openxr\ passthrough openxr\ 穿透 doc_openxr_passthrough">
        <title>OpenXR 穿透</title>
        <paragraph>Passthrough is a technique where camera images are used to present the environment of the user as the background.
            This turns a VR headset into an AR headset, often referred to as Mixed Reality or MR.</paragraph>
        <note>
            <paragraph>As passthrough is relatively new there isn't a singular way this is implemented across platforms.
                There may be additions in the future so this is a work in progress.</paragraph>
        </note>
        <section ids="passthrough-extension" names="passthrough\ extension 穿透扩展">
            <title>穿透扩展</title>
            <paragraph>OpenXR has a vendor extension for passthrough submitted by Meta.
                Currently this extension is only supported on Quest and PICO but may be adopted by other headsets in the future.</paragraph>
            <paragraph><reference internal="True" refuri="../../classes/class_xrinterface#class-xrinterface"><inline classes="std std-ref">XRInterface</inline></reference> has entry points for passthrough so different interfaces can implement this feature.
                For <reference internal="True" refuri="../../classes/class_openxrinterface#class-openxrinterface"><inline classes="std std-ref">OpenXRInterface</inline></reference> the meta passthrough extension is implemented here.</paragraph>
            <paragraph>In code you can call <literal>is_passthrough_supported</literal> to check if this extension is available.
                If so you can simply enable passthrough by calling <literal>start_passthrough</literal>.
                You can call <literal>stop_passthrough</literal> to disable passthrough.</paragraph>
            <paragraph>You do need to make sure the background is transparent.
                You need to enable the <literal>transparent_bg</literal> property on the viewport.
                Some background environment settings will still fill the background with an opaque color,
                you can use a <literal>custom color</literal> with a color that has alpha set to 0.</paragraph>
            <paragraph>The OpenXR runtime will display the camera image as the background.</paragraph>
            <note>
                <paragraph>For privacy reasons <strong>no access</strong> is given to the camera image.</paragraph>
            </note>
            <warning>
                <paragraph>After passthrough is enabled it is possible to change settings that will break passthrough.
                    Be sure not to disable the <literal>transparent_bg</literal> setting or change the environment blend mode.
                    This will result in the camera image no longer being visible but you still incur the overhead.</paragraph>
                <paragraph>Always use <literal>stop_passthrough</literal> if you wish to turn off passthrough.</paragraph>
            </warning>
            <paragraph>Finally, for using passthrough on the Quest you must set the following export property:</paragraph>
            <image candidates="{'*': 'tutorials/xr/img/xr_export_passthrough.webp'}" uri="tutorials/xr/img/xr_export_passthrough.webp"></image>
        </section>
        <section ids="passthrough-through-ar" names="passthrough\ through\ ar">
            <title>Passthrough through AR</title>
            <paragraph>Some of the headsets recently adding OpenXR support have taken a different approach.
                They simply mimic being an AR device. The Lynx R1 is such a device but others may be doing the same.</paragraph>
            <paragraph>The following thus applies to both passthrough devices that mimic AR, and actual AR devices.</paragraph>
            <paragraph>If <literal>is_passthrough_supported</literal> returns false the next step is to call <literal>get_supported_environment_blend_modes</literal>.
                This will return a list of supported blend modes for submitting the main render image to OpenXR.</paragraph>
            <paragraph>We need to check if <literal>XR_ENV_BLEND_MODE_ALPHA_BLEND</literal> is present in this list.
                If so we can tell OpenXR to expect an image that can be alpha blended with a background.
                To do this, we simply call <literal>set_environment_blend_mode(xr_interface.XR_ENV_BLEND_MODE_ALPHA_BLEND)</literal>.</paragraph>
            <paragraph>We must also set <literal>transparent_bg</literal> to true and adjust the environment to ensure we submit the right image.</paragraph>
        </section>
        <section ids="putting-it-together" names="putting\ it\ together">
            <title>Putting it together</title>
            <paragraph>Putting the above together we can use the following code as a base:</paragraph>
            <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func enable_passthrough() -&gt; bool:
  var xr_interface: XRInterface = XRServer.primary_interface
  if xr_interface and xr_interface.is_passthrough_supported():
    if !xr_interface.start_passthrough():
      return false
  else:
    var modes = xr_interface.get_supported_environment_blend_modes()
    if xr_interface.XR_ENV_BLEND_MODE_ALPHA_BLEND in modes:
      xr_interface.set_environment_blend_mode(xr_interface.XR_ENV_BLEND_MODE_ALPHA_BLEND)
    else:
      return false

  get_viewport().transparent_bg = true
  return true</literal_block>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
