<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/tutorials/xr/basic_xr_locomotion.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-basic-xr-locomotion"></target>
    <section ids="basic-xr-locomotion doc-basic-xr-locomotion" names="basic\ xr\ locomotion 基础\ xr\ 运动 doc_basic_xr_locomotion">
        <title>基础 XR 运动</title>
        <paragraph>对于基本运动，我们将继续使用 Godot XR 工具库。该库既包含基本运动功能，也包含更高级的功能。</paragraph>
        <section ids="adding-our-player-body" names="adding\ our\ player\ body 添加玩家的身体">
            <title>添加玩家的身体</title>
            <paragraph>The first step we need to do is to add a helper node to our <reference internal="True" refuri="../../classes/class_xrorigin3d#class-xrorigin3d"><inline classes="std std-ref">XROrigin3D</inline></reference> node.
                Because XR supports roomscale tracking you can't simply add your XR setup to a <reference internal="True" refuri="../../classes/class_characterbody3d#class-characterbody3d"><inline classes="std std-ref">CharacterBody3D</inline></reference> node and expect things to work.
                You will run into trouble when the user moves around their physical space and is no longer standing in the center of their room.
                Godot XR Tools embeds the needed logic into a helper node called <literal>PlayerBody</literal>.</paragraph>
            <paragraph>Select your <reference internal="True" refuri="../../classes/class_xrorigin3d#class-xrorigin3d"><inline classes="std std-ref">XROrigin3D</inline></reference> node and click on the <literal>instantiate Child Scene</literal> button to add a child scene.
                Select <literal>addons/godot-xr-tools/player/player_body.tscn</literal> and add this node.</paragraph>
        </section>
        <section ids="adding-a-floor" names="adding\ a\ floor 添加地板">
            <title>添加地板</title>
            <paragraph>该节点控制角色在游戏中的移动，并会立即对重力做出反应。因此，为了防止玩家无限下坠，我们将在场景中快速添加一个地板。</paragraph>
            <paragraph>We start by adding a <reference internal="True" refuri="../../classes/class_staticbody3d#class-staticbody3d"><inline classes="std std-ref">StaticBody3D</inline></reference> node to our root node and we rename this to <literal>Floor</literal>.
                We add a <reference internal="True" refuri="../../classes/class_meshinstance3d#class-meshinstance3d"><inline classes="std std-ref">MeshInstance3D</inline></reference> node as a child node for our <literal>Floor</literal>.
                Then create a new <reference internal="True" refuri="../../classes/class_planemesh#class-planemesh"><inline classes="std std-ref">PlaneMesh</inline></reference> as it's mesh.
                For now we set the size of the mesh to 100 x 100 meters.
                Next we add a <reference internal="True" refuri="../../classes/class_collisionshape3d#class-collisionshape3d"><inline classes="std std-ref">CollisionShape3D</inline></reference> node as a child node for our <literal>Floor</literal>.
                Then create a <literal>BoxShape</literal> as our shape.
                We set the size of this box shape to 100 x 1 x 100 meters.
                We also need to move our collision shape down by 0.5 meters so the top of our box is flush with the floor.</paragraph>
            <paragraph>To make it easier to see that we're actually moving around our world, a white floor isn't going to do it.
                For this we add a material to our PlaneMesh and set the albedo to a grid texture we've created with <reference name="Wahooneys excellent free texture generator" refuri="https://wahooney.itch.io/texture-grid-generator">Wahooneys excellent free texture generator</reference><target ids="wahooneys-excellent-free-texture-generator" names="wahooneys\ excellent\ free\ texture\ generator" refuri="https://wahooney.itch.io/texture-grid-generator"></target>.</paragraph>
            <image candidates="{'*': 'tutorials/xr/img/godot_xr_tools_floor.webp'}" uri="tutorials/xr/img/godot_xr_tools_floor.webp"></image>
        </section>
        <section ids="direct-movement" names="direct\ movement 直接移动">
            <title>直接移动</title>
            <paragraph>我们将开始在我们的设置中添加一些基本的直接运动。这允许用户使用摇杆输入在虚拟世界中移动。</paragraph>
            <note>
                <paragraph>It is important to note that moving through the virtual world while the player is standing still in the real world, can be nausea inducing especially for players who are new to VR.
                    The default settings on our movement functions are fairly conservative.
                    We advise you to stick to these defaults but offer features in game to enable less comfortable settings for more experienced users who are used to playing VR games.</paragraph>
            </note>
            <paragraph>We want to enable this on the right hand controller.
                We do this by adding a subscene to the right hand <reference internal="True" refuri="../../classes/class_xrcontroller3d#class-xrcontroller3d"><inline classes="std std-ref">XRController3D</inline></reference> node.
                Select <literal>addons/godot-xr-tools/functions/movement_direct.tscn</literal> as the scene to add.</paragraph>
            <paragraph>This function adds forward and backwards movement to the player by using the joystick on the right hand controller.
                It has an option to also add left/right strafe but by default this is disabled.</paragraph>
            <paragraph>Instead, we are going to add the ability for the player to also turn with this joystick.
                We will add another subscene to our controller node, select <literal>addons/godot-xr-tools/functions/movement_turn.tscn</literal> for this.</paragraph>
            <paragraph>The turn system by default uses a snap turn approach.
                This means that turning happens in steps.
                This may seem jarring however it is a tried and tested method of combating motion sickness.
                You can easily switch to a mode that offers smooth turning by changing the <literal>mode</literal> property on the turn node.</paragraph>
            <paragraph>如果你在这个时间点运行你的游戏，你会发现你可以使用右手摇杆在世界中自由移动。</paragraph>
        </section>
        <section ids="teleport" names="teleport 传送">
            <title>传送</title>
            <paragraph>An alternative to direct movement that some users find more pleasant is the ability to teleport to another location within your game world.
                Godot XR Tools supports this through the teleport function and we will be adding this to our left hand controller.</paragraph>
            <paragraph>Add a new child scene to your left hand <reference internal="True" refuri="../../classes/class_xrcontroller3d#class-xrcontroller3d"><inline classes="std std-ref">XRController3D</inline></reference> node by selecting the <literal>addons/godot-xr-tools/functions/function_teleport.tscn</literal> scene.</paragraph>
            <paragraph>With this scene added the player will be able to teleport around the world by pressing the trigger on the left hand controller, pointing where they want to go, and then releasing the trigger.
                The player can also adjust the orientation by using the left hand controllers joystick.</paragraph>
            <paragraph>If you've followed all instructions correctly your scene should now look something like this:</paragraph>
            <image candidates="{'*': 'tutorials/xr/img/godot_xr_tools_basic_movement.webp'}" uri="tutorials/xr/img/godot_xr_tools_basic_movement.webp"></image>
        </section>
        <section ids="more-advanced-movement-features" names="more\ advanced\ movement\ features 更多高级移动功能">
            <title>更多高级移动功能</title>
            <paragraph>Godot XR 工具增加了更多的运动功能，如滑翔，抓钩，喷气背包，攀爬机制等。</paragraph>
            <paragraph>Most work similarly to the basic movement features we've handled so far, simply add the relevant subscene from the plugin to the controller that implements it.</paragraph>
            <paragraph>We'll look at some of these in more detail later on in this tutorial where additional setup is required (such as climbing) but for others please look at Godot XR Tools own help pages for details.</paragraph>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
