<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/tutorials/platform/android/android_plugin.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-android-plugin"></target>
    <section ids="godot-android-plugins doc-android-plugin" names="godot\ android\ plugins godot\ android\ 插件 doc_android_plugin">
        <title>Godot Android 插件</title>
        <section ids="introduction" names="introduction 前言">
            <title>前言</title>
            <paragraph>Android plugins are powerful tools to extend the capabilities of the Godot engine
                by tapping into the functionality provided by Android platforms and ecosystem.</paragraph>
            <paragraph>For example in Godot 4, Android plugins are used to support multiple Android-based
                XR platforms without encumbering the core codebase with vendor specific code or binaries.</paragraph>
        </section>
        <section ids="android-plugin" names="android\ plugin android\ 插件">
            <title>Android 插件</title>
            <paragraph>Android 插件系统的<strong>第一版（v1）</strong>是在 Godot 3 中引入的，与 Godot 4.0 和 4.1 兼容。这个版本能够让开发者使用 Java、Kotlin 和原生功能增强 Godot 引擎。</paragraph>
            <paragraph>从 Godot 4.2 开始，废弃了使用 v1 架构构建的 Android 插件。Godot 4.2 为 Android 插件引入了全新的<strong>第二版（v2）</strong>架构。</paragraph>
            <section ids="v2-architecture" names="v2\ architecture v2\ 架构">
                <title>v2 架构</title>
                <note>
                    <paragraph>Godot Android 插件使用 <reference internal="True" refuri="../../export/android_gradle_build#doc-android-gradle-build"><inline classes="std std-ref">Gradle 构建系统</inline></reference>。</paragraph>
                </note>
                <paragraph>与之前的 v1 架构一样，Android 插件仍然是基于 <reference name="Android 归档库" refuri="https://developer.android.com/studio/projects/android-library#aar-contents">Android 归档库</reference><target ids="android" names="android\ 归档库" refuri="https://developer.android.com/studio/projects/android-library#aar-contents"></target>的。</paragraph>
                <paragraph>Godot Android 插件 v2 的本质仍然是一个 Android 库，依赖于 <reference internal="True" refuri="android_library#doc-android-library"><inline classes="std std-ref">Godot Android 库</inline></reference>和自定义的 Android 库说明文件。</paragraph>
                <paragraph>这个架构能够让 Android 插件通过以下方法扩展功能：</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>Android 平台 API</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Android 库</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Kotlin 和 Java 库</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>原生库（通过 JNI）</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>GDExtension 库</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>Each plugin has an init class extending from the <reference name="GodotPlugin" refuri="https://github.com/godotengine/godot/blob/0a7f75ec7b465604b6496c8f5f1d638aed250d6d/platform/android/java/lib/src/org/godotengine/godot/plugin/GodotPlugin.java#L80">GodotPlugin</reference><target ids="godotplugin" names="godotplugin" refuri="https://github.com/godotengine/godot/blob/0a7f75ec7b465604b6496c8f5f1d638aed250d6d/platform/android/java/lib/src/org/godotengine/godot/plugin/GodotPlugin.java#L80"></target> class
                    which is provided by the <reference internal="True" refuri="android_library#doc-android-library"><inline classes="std std-ref">Godot Android library</inline></reference>.</paragraph>
                <paragraph>The <literal>GodotPlugin</literal> class provides APIs to access the running Godot instance and hook into its lifecycle. It is loaded at runtime by the Godot engine.</paragraph>
            </section>
            <section ids="v2-packaging-format" names="v2\ packaging\ format v2\ 打包格式">
                <title>v2 打包格式</title>
                <paragraph>v1 Android plugins required a custom <literal>gdap</literal> configuration file that was used by the Godot Editor to detect and load them.
                    However this approach had several drawbacks, primary ones being that it lacked flexibility and departed from the <reference name="existing Godot EditorExportPlugin format, delivery and installation flow" refuri="https://docs.godotengine.org/en/stable/tutorials/plugins/editor/installing_plugins.html">existing
                        Godot EditorExportPlugin format, delivery and installation flow</reference><target ids="existing-godot-editorexportplugin-format-delivery-and-installation-flow" names="existing\ godot\ editorexportplugin\ format,\ delivery\ and\ installation\ flow" refuri="https://docs.godotengine.org/en/stable/tutorials/plugins/editor/installing_plugins.html"></target>.</paragraph>
                <paragraph>This has been resolved for v2 Android plugins by deprecating the <literal>gdap</literal> packaging and configuration mechanism in favor of
                    the existing Godot <literal>EditorExportPlugin</literal> packaging format.
                    The <literal>EditorExportPlugin</literal> API in turn has been extended to properly support Android plugins.</paragraph>
            </section>
        </section>
        <section ids="building-a-v2-android-plugin" names="building\ a\ v2\ android\ plugin 构建\ v2\ android\ 插件">
            <title>构建 v2 Android 插件</title>
            <paragraph>A github project template <strong>is provided</strong> at <reference refuri="https://github.com/m4gr3d/Godot-Android-Plugin-Template">https://github.com/m4gr3d/Godot-Android-Plugin-Template</reference> as a <strong>quickstart for building
                    Godot Android plugins for Godot 4.2+</strong>.
                You can follow the <reference name="template README" refuri="https://github.com/m4gr3d/Godot-Android-Plugin-Template#readme">template README</reference><target ids="template-readme" names="template\ readme" refuri="https://github.com/m4gr3d/Godot-Android-Plugin-Template#readme"></target>
                to set up your own Godot Android plugin project.</paragraph>
            <paragraph>To provide further understanding, here is a break-down of the steps used to create the project template:</paragraph>
            <enumerated_list enumtype="arabic" prefix="" suffix=".">
                <list_item>
                    <paragraph>按照 <reference name="这些说明" refuri="https://developer.android.com/studio/projects/android-library">这些说明</reference><target ids="id1" names="这些说明" refuri="https://developer.android.com/studio/projects/android-library"></target> 创建一个Android库模块。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Add the Godot Android library as a dependency by updating the module's <literal>gradle</literal> <reference name="build file" refuri="https://github.com/m4gr3d/Godot-Android-Plugin-Template/blob/main/plugin/build.gradle.kts#L42">build file</reference><target ids="build-file" names="build\ file" refuri="https://github.com/m4gr3d/Godot-Android-Plugin-Template/blob/main/plugin/build.gradle.kts#L42"></target>:</paragraph>
                    <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">dependencies {
    implementation("org.godotengine:godot:4.2.0.stable")
}</literal_block>
                </list_item>
            </enumerated_list>
            <block_quote>
                <paragraph>The Godot Android library is <reference name="hosted on MavenCentral" refuri="https://central.sonatype.com/artifact/org.godotengine/godot">hosted on MavenCentral</reference><target ids="hosted-on-mavencentral" names="hosted\ on\ mavencentral" refuri="https://central.sonatype.com/artifact/org.godotengine/godot"></target>, and updated for each release.</paragraph>
            </block_quote>
            <enumerated_list enumtype="arabic" prefix="" start="3" suffix=".">
                <list_item>
                    <paragraph>Create <reference name="GodotAndroidPlugin" refuri="https://github.com/m4gr3d/Godot-Android-Plugin-Template/blob/a01286b4cb459133bf07b11dfabdfd3980268797/plugin/src/main/java/org/godotengine/plugin/android/template/GodotAndroidPlugin.kt#L10">GodotAndroidPlugin</reference><target ids="godotandroidplugin" names="godotandroidplugin" refuri="https://github.com/m4gr3d/Godot-Android-Plugin-Template/blob/a01286b4cb459133bf07b11dfabdfd3980268797/plugin/src/main/java/org/godotengine/plugin/android/template/GodotAndroidPlugin.kt#L10"></target>, an init class for the plugin extending <reference name="GodotPlugin" refuri="https://github.com/godotengine/godot/blob/0a7f75ec7b465604b6496c8f5f1d638aed250d6d/platform/android/java/lib/src/org/godotengine/godot/plugin/GodotPlugin.java#L80">GodotPlugin</reference><target dupnames="godotplugin" ids="id1" refuri="https://github.com/godotengine/godot/blob/0a7f75ec7b465604b6496c8f5f1d638aed250d6d/platform/android/java/lib/src/org/godotengine/godot/plugin/GodotPlugin.java#L80"></target>.</paragraph>
                    <block_quote>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>If the plugin exposes Kotlin or Java methods to be called from GDScript, they must be annotated with <reference name="@UsedByGodot" refuri="https://github.com/godotengine/godot/blob/0a7f75ec7b465604b6496c8f5f1d638aed250d6d/platform/android/java/lib/src/org/godotengine/godot/plugin/UsedByGodot.java#L45">@UsedByGodot</reference><target ids="usedbygodot" names="@usedbygodot" refuri="https://github.com/godotengine/godot/blob/0a7f75ec7b465604b6496c8f5f1d638aed250d6d/platform/android/java/lib/src/org/godotengine/godot/plugin/UsedByGodot.java#L45"></target>. The name called from GDScript <strong>must match the method name exactly</strong>. There is <strong>no</strong> coercing <literal>snake_case</literal> to <literal>camelCase</literal>. For example, from GDScript:</paragraph>
                                <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">if Engine.has_singleton("MyPlugin"):
    var singleton = Engine.get_singleton("MyPlugin")
    print(singleton.myPluginFunction("World"))</literal_block>
                            </list_item>
                            <list_item>
                                <paragraph>If the plugin uses <reference name="signals" refuri="https://docs.godotengine.org/en/stable/getting_started/step_by_step/signals.html">signals</reference><target ids="signals" names="signals" refuri="https://docs.godotengine.org/en/stable/getting_started/step_by_step/signals.html"></target>, the init class must return the set of signals used by overriding <reference name="GodotPlugin::getPluginSignals()" refuri="https://github.com/godotengine/godot/blob/fa3428ff25bc577d2a3433090478a6d615567056/platform/android/java/lib/src/org/godotengine/godot/plugin/GodotPlugin.java#L302">GodotPlugin::getPluginSignals()</reference><target ids="godotplugin-getpluginsignals" names="godotplugin::getpluginsignals()" refuri="https://github.com/godotengine/godot/blob/fa3428ff25bc577d2a3433090478a6d615567056/platform/android/java/lib/src/org/godotengine/godot/plugin/GodotPlugin.java#L302"></target>. To emit signals, the plugin can use the <reference name="GodotPlugin::emitSignal(...) method" refuri="https://github.com/godotengine/godot/blob/0a7f75ec7b465604b6496c8f5f1d638aed250d6d/platform/android/java/lib/src/org/godotengine/godot/plugin/GodotPlugin.java#L317">GodotPlugin::emitSignal(...) method</reference><target ids="godotplugin-emitsignal-method" names="godotplugin::emitsignal(...)\ method" refuri="https://github.com/godotengine/godot/blob/0a7f75ec7b465604b6496c8f5f1d638aed250d6d/platform/android/java/lib/src/org/godotengine/godot/plugin/GodotPlugin.java#L317"></target>.</paragraph>
                            </list_item>
                        </bullet_list>
                    </block_quote>
                </list_item>
                <list_item>
                    <paragraph>Update the plugin <literal>AndroidManifest.xml</literal> <reference name="file" refuri="https://github.com/m4gr3d/Godot-Android-Plugin-Template/blob/main/plugin/src/main/AndroidManifest.xml">file</reference><target ids="file" names="file" refuri="https://github.com/m4gr3d/Godot-Android-Plugin-Template/blob/main/plugin/src/main/AndroidManifest.xml"></target> with the following meta-data:</paragraph>
                    <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">&lt;meta-data
    android:name="org.godotengine.plugin.v2.[PluginName]"
    android:value="[plugin.init.ClassFullName]" /&gt;</literal_block>
                </list_item>
            </enumerated_list>
            <block_quote>
                <paragraph>Where:</paragraph>
                <block_quote>
                    <bullet_list bullet="-">
                        <list_item>
                            <paragraph><literal>PluginName</literal> is the name of the plugin</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><literal>plugin.init.ClassFullName</literal> is the full component name (package + class name) of the plugin init class (e.g: <literal>org.godotengine.plugin.android.template.GodotAndroidPlugin</literal>).</paragraph>
                        </list_item>
                    </bullet_list>
                </block_quote>
            </block_quote>
            <enumerated_list enumtype="arabic" prefix="" start="5" suffix=".">
                <list_item>
                    <paragraph>Create the <reference name="EditorExportPlugin configuration" refuri="https://github.com/m4gr3d/Godot-Android-Plugin-Template/tree/main/plugin/export_scripts_template">EditorExportPlugin configuration</reference><target ids="editorexportplugin-configuration" names="editorexportplugin\ configuration" refuri="https://github.com/m4gr3d/Godot-Android-Plugin-Template/tree/main/plugin/export_scripts_template"></target> to package the plugin. The steps used to create the configuration can be seen in the <reference name="Packaging a v2 Android plugin" refid="packaging-a-v2-android-plugin">Packaging a v2 Android plugin</reference> section.</paragraph>
                </list_item>
            </enumerated_list>
            <section ids="building-a-v2-android-plugin-with-gdextension-capabilities" names="building\ a\ v2\ android\ plugin\ with\ gdextension\ capabilities 构建带\ gdextension\ 能力的\ v2\ android\ 插件">
                <title>构建带 GDExtension 能力的 v2 Android 插件</title>
                <paragraph>Similar to GDNative support in v1 Android plugins, v2 Android plugins support the ability to integrate GDExtension capabilities.</paragraph>
                <paragraph>A github project template is provided at <reference refuri="https://github.com/m4gr3d/GDExtension-Android-Plugin-Template">https://github.com/m4gr3d/GDExtension-Android-Plugin-Template</reference> as a quickstart for building
                    GDExtension Android plugins for Godot 4.2+.
                    You can follow the <reference name="template's README" refuri="https://github.com/m4gr3d/GDExtension-Android-Plugin-Template#readme">template's README</reference><target ids="template-s-readme" names="template's\ readme" refuri="https://github.com/m4gr3d/GDExtension-Android-Plugin-Template#readme"></target>
                    to set up your own Godot Android plugin project.</paragraph>
            </section>
            <section ids="migrating-a-v1-android-plugin-to-v2" names="migrating\ a\ v1\ android\ plugin\ to\ v2">
                <title>Migrating a v1 Android plugin to v2</title>
                <paragraph>Use the following steps if you have a v1 Android plugin you want to migrate to v2:</paragraph>
                <enumerated_list enumtype="arabic" prefix="" suffix=".">
                    <list_item>
                        <paragraph>Update the plugin's manifest file:</paragraph>
                        <block_quote>
                            <bullet_list bullet="-">
                                <list_item>
                                    <paragraph>Change the <literal>org.godotengine.plugin.v1</literal> prefix to <literal>org.godotengine.plugin.v2</literal></paragraph>
                                </list_item>
                            </bullet_list>
                        </block_quote>
                    </list_item>
                    <list_item>
                        <paragraph>Update the Godot Android library build dependency:</paragraph>
                        <block_quote>
                            <bullet_list bullet="-">
                                <list_item>
                                    <paragraph>You can continue using the <literal>godot-lib.&lt;version&gt;.&lt;status&gt;.aar</literal> binary from <reference name="Godot's download page" refuri="https://godotengine.org/download">Godot's download page</reference><target ids="godot-s-download-page" names="godot's\ download\ page" refuri="https://godotengine.org/download"></target> if that's your preference. Make sure it's updated to the latest stable version.</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph>Or you can switch to the MavenCentral provided dependency:</paragraph>
                                    <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">dependencies {
    implementation("org.godotengine:godot:4.2.0.stable")
}</literal_block>
                                </list_item>
                            </bullet_list>
                        </block_quote>
                    </list_item>
                    <list_item>
                        <paragraph>After updating the Godot Android library dependency, sync or build the plugin and resolve any compile errors:</paragraph>
                        <block_quote>
                            <bullet_list bullet="-">
                                <list_item>
                                    <paragraph>The <literal>Godot</literal> instance provided by <literal>GodotPlugin::getGodot()</literal> no longer has access to a <literal>android.content.Context</literal> reference. Use <literal>GodotPlugin::getActivity()</literal> instead.</paragraph>
                                </list_item>
                            </bullet_list>
                        </block_quote>
                    </list_item>
                    <list_item>
                        <paragraph>Delete the <literal>gdap</literal> configuration file(s) and follow the instructions in the <reference name="Packaging a v2 Android plugin" refid="packaging-a-v2-android-plugin">Packaging a v2 Android plugin</reference> section to set up the plugin configuration.</paragraph>
                    </list_item>
                </enumerated_list>
            </section>
        </section>
        <section ids="packaging-a-v2-android-plugin" names="packaging\ a\ v2\ android\ plugin 打包\ v2\ android\ 插件">
            <title>打包 v2 Android 插件</title>
            <paragraph>如前文所述，v2 版本的 Android 插件现在是以 <literal>EditorExportPlugin</literal> 插件的形式提供给 Godot 编辑器的，所以<reference name="打包方法也大致相同" refuri="https://docs.godotengine.org/en/stable/tutorials/plugins/editor/making_plugins.html#creating-a-plugin">打包方法也大致相同</reference><target ids="id1" names="打包方法也大致相同" refuri="https://docs.godotengine.org/en/stable/tutorials/plugins/editor/making_plugins.html#creating-a-plugin"></target>。</paragraph>
            <enumerated_list enumtype="arabic" prefix="" suffix=".">
                <list_item>
                    <paragraph>在插件目录（例如 <literal>addons/&lt;插件名称&gt;/</literal>）中添加插件输出的二进制文件</paragraph>
                </list_item>
                <list_item>
                    <paragraph>在插件目录（例如 <literal>addons/&lt;插件名称&gt;/</literal>）中添加实现导出功能的<reference name="工具脚本" refuri="https://docs.godotengine.org/en/stable/tutorials/plugins/editor/making_plugins.html#the-script-file">工具脚本</reference><target ids="id1" names="工具脚本" refuri="https://docs.godotengine.org/en/stable/tutorials/plugins/editor/making_plugins.html#the-script-file"></target></paragraph>
                    <block_quote>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>创建的脚本必须是 <literal>@tool</literal> 脚本，否则无法正常工作</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>导出工具脚本的作用是对 Android 插件进行配置，并将其加入 Godot 编辑器的导出流程。这个脚本大致应该是这样的：</paragraph>
                                <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">@tool
extends EditorPlugin

# A class member to hold the editor export plugin during its lifecycle.
var export_plugin : AndroidExportPlugin

func _enter_tree():
    # Initialization of the plugin goes here.
    export_plugin = AndroidExportPlugin.new()
    add_export_plugin(export_plugin)


func _exit_tree():
    # Clean-up of the plugin goes here.
    remove_export_plugin(export_plugin)
    export_plugin = null


class AndroidExportPlugin extends EditorExportPlugin:
    # Plugin's name.
    var _plugin_name = "&lt;plugin_name&gt;"

    # Specifies which platform is supported by the plugin.
    func _supports_platform(platform):
        if platform is EditorExportPlatformAndroid:
            return true
        return false

    # Return the paths of the plugin's AAR binaries relative to the 'addons' directory.
    func _get_android_libraries(platform, debug):
        if debug:
            return PackedStringArray(["&lt;paths_to_debug_android_plugin_aar_binaries&gt;"])
        else:
            return PackedStringArray(["&lt;paths_to_release_android_plugin_aar_binaries&gt;"])

    # Return the plugin's name.
    func _get_name():
        return _plugin_name</literal_block>
                            </list_item>
                            <list_item>
                                <paragraph>这个工具脚本中最常用的 <reference name="EditorExportPlugin API" refuri="https://docs.godotengine.org/en/stable/classes/class_editorexportplugin.html">EditorExportPlugin API</reference><target ids="editorexportplugin-api" names="editorexportplugin\ api" refuri="https://docs.godotengine.org/en/stable/classes/class_editorexportplugin.html"></target> 如下：</paragraph>
                                <block_quote>
                                    <bullet_list bullet="-">
                                        <list_item>
                                            <paragraph><reference name="_supports_platform" refuri="https://docs.godotengine.org/en/latest/classes/class_editorexportplugin.html#class-editorexportplugin-method-supports-platform">_supports_platform</reference><target ids="supports-platform" names="_supports_platform" refuri="https://docs.godotengine.org/en/latest/classes/class_editorexportplugin.html#class-editorexportplugin-method-supports-platform"></target>: returns <literal>true</literal> if the plugin supports the given platform. For Android plugins, this must return <literal>true</literal> when <literal>platform</literal> is <reference name="EditorExportPlatformAndroid" refuri="https://docs.godotengine.org/en/stable/classes/class_editorexportplatformandroid.html">EditorExportPlatformAndroid</reference><target ids="editorexportplatformandroid" names="editorexportplatformandroid" refuri="https://docs.godotengine.org/en/stable/classes/class_editorexportplatformandroid.html"></target></paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><reference name="_get_android_libraries" refuri="https://docs.godotengine.org/en/latest/classes/class_editorexportplugin.html#class-editorexportplugin-method-get-android-libraries">_get_android_libraries</reference><target ids="get-android-libraries" names="_get_android_libraries" refuri="https://docs.godotengine.org/en/latest/classes/class_editorexportplugin.html#class-editorexportplugin-method-get-android-libraries"></target>: retrieve the local paths of the Android libraries binaries (AAR files) provided by the plugin</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><reference name="_get_android_dependencies" refuri="https://docs.godotengine.org/en/latest/classes/class_editorexportplugin.html#class-editorexportplugin-method-get-android-dependencies">_get_android_dependencies</reference><target ids="get-android-dependencies" names="_get_android_dependencies" refuri="https://docs.godotengine.org/en/latest/classes/class_editorexportplugin.html#class-editorexportplugin-method-get-android-dependencies"></target>: retrieve the set of Android maven dependencies (e.g: <title_reference>org.godot.example:my-plugin:0.0.0</title_reference>) provided by the plugin</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><reference name="_get_android_dependencies_maven_repos" refuri="https://docs.godotengine.org/en/latest/classes/class_editorexportplugin.html#class-editorexportplugin-method-get-android-dependencies-maven-repos">_get_android_dependencies_maven_repos</reference><target ids="get-android-dependencies-maven-repos" names="_get_android_dependencies_maven_repos" refuri="https://docs.godotengine.org/en/latest/classes/class_editorexportplugin.html#class-editorexportplugin-method-get-android-dependencies-maven-repos"></target>: retrieve the urls of the maven repos for the android dependencies provided by <literal>_get_android_dependencies</literal></paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><reference name="_get_android_manifest_activity_element_contents" refuri="https://docs.godotengine.org/en/latest/classes/class_editorexportplugin.html#class-editorexportplugin-method-get-android-manifest-activity-element-contents">_get_android_manifest_activity_element_contents</reference><target ids="get-android-manifest-activity-element-contents" names="_get_android_manifest_activity_element_contents" refuri="https://docs.godotengine.org/en/latest/classes/class_editorexportplugin.html#class-editorexportplugin-method-get-android-manifest-activity-element-contents"></target>: update the contents of the <title_reference>&lt;activity&gt;</title_reference> element in the generated Android manifest</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><reference name="_get_android_manifest_application_element_contents" refuri="https://docs.godotengine.org/en/latest/classes/class_editorexportplugin.html#class-editorexportplugin-method-get-android-manifest-application-element-contents">_get_android_manifest_application_element_contents</reference><target ids="get-android-manifest-application-element-contents" names="_get_android_manifest_application_element_contents" refuri="https://docs.godotengine.org/en/latest/classes/class_editorexportplugin.html#class-editorexportplugin-method-get-android-manifest-application-element-contents"></target>: update the contents of the <title_reference>&lt;application&gt;</title_reference> element in the generated Android manifest</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><reference name="_get_android_manifest_element_contents" refuri="https://docs.godotengine.org/en/latest/classes/class_editorexportplugin.html#class-editorexportplugin-method-get-android-manifest-element-contents">_get_android_manifest_element_contents</reference><target ids="get-android-manifest-element-contents" names="_get_android_manifest_element_contents" refuri="https://docs.godotengine.org/en/latest/classes/class_editorexportplugin.html#class-editorexportplugin-method-get-android-manifest-element-contents"></target>: update the contents of the <title_reference>&lt;manifest&gt;</title_reference> element in the generated Android manifest</paragraph>
                                        </list_item>
                                    </bullet_list>
                                    <paragraph>The <literal>_get_android_manifest_*</literal> methods allow the plugin to automatically provide changes
                                        to the app's manifest which are preserved when the Godot Editor is updated, resolving a long standing issue with v1 Android plugins.</paragraph>
                                </block_quote>
                            </list_item>
                        </bullet_list>
                    </block_quote>
                </list_item>
                <list_item>
                    <paragraph>Create a <literal>plugin.cfg</literal>. This is an INI file with metadata about your plugin:</paragraph>
                    <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">[plugin]

name="&lt;plugin_name&gt;"
description="&lt;plugin_description&gt;"
author="&lt;plugin_author&gt;"
version="&lt;plugin_version&gt;"
script="&lt;relative_path_to_the_export_tool_script&gt;"</literal_block>
                </list_item>
            </enumerated_list>
            <paragraph>For reference, here is the <reference name="folder structure for the Godot Android plugin project template" refuri="https://github.com/m4gr3d/Godot-Android-Plugin-Template/tree/main/plugin/export_scripts_template">folder structure for the Godot Android plugin project template</reference><target ids="folder-structure-for-the-godot-android-plugin-project-template" names="folder\ structure\ for\ the\ godot\ android\ plugin\ project\ template" refuri="https://github.com/m4gr3d/Godot-Android-Plugin-Template/tree/main/plugin/export_scripts_template"></target>.
                At build time, the contents of the <literal>export_scripts_template</literal> directory as well as the generated plugin binaries are copied to the <literal>addons/&lt;plugin_name&gt;</literal> directory:</paragraph>
            <literal_block force="False" highlight_args="{}" language="none" linenos="False" xml:space="preserve">export_scripts_template/
|
+--export_plugin.gd         # export plugin tool script
|
+--plugin.cfg               # plugin INI file</literal_block>
            <section ids="packaging-a-v2-android-plugin-with-gdextension-capabilities" names="packaging\ a\ v2\ android\ plugin\ with\ gdextension\ capabilities">
                <title>Packaging a v2 Android plugin with GDExtension capabilities</title>
                <paragraph>For GDExtension, we follow the same steps as for <reference name="Packaging a v2 Android plugin" refid="packaging-a-v2-android-plugin">Packaging a v2 Android plugin</reference> and add the <reference name="GDExtension config file" refuri="https://docs.godotengine.org/en/stable/tutorials/scripting/gdextension/gdextension_cpp_example.html#using-the-gdextension-module">GDExtension config file</reference><target ids="gdextension-config-file" names="gdextension\ config\ file" refuri="https://docs.godotengine.org/en/stable/tutorials/scripting/gdextension/gdextension_cpp_example.html#using-the-gdextension-module"></target> in
                    the same location as <literal>plugin.cfg</literal>.</paragraph>
                <paragraph>For reference, here is the <reference name="folder structure for the GDExtension Android plugin project template" refuri="https://github.com/m4gr3d/GDExtension-Android-Plugin-Template/tree/main/plugin/export_scripts_template">folder structure for the GDExtension Android plugin project template</reference><target ids="folder-structure-for-the-gdextension-android-plugin-project-template" names="folder\ structure\ for\ the\ gdextension\ android\ plugin\ project\ template" refuri="https://github.com/m4gr3d/GDExtension-Android-Plugin-Template/tree/main/plugin/export_scripts_template"></target>.
                    At build time, the contents of the <literal>export_scripts_template</literal> directory as well as the generated plugin binaries are copied to the <literal>addons/&lt;plugin_name&gt;</literal> directory:</paragraph>
                <literal_block force="False" highlight_args="{}" language="none" linenos="False" xml:space="preserve">export_scripts_template/
|
+--export_plugin.gd         # export plugin tool script
|
+--plugin.cfg               # plugin INI file
|
+--plugin.gdextension       # GDExtension config file</literal_block>
                <paragraph>Here is what the <literal>plugin.gdextension</literal> config file should look like:</paragraph>
                <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">[configuration]

entry_symbol = "plugin_library_init"
compatibility_minimum = "4.2"
android_aar_plugin = true

[libraries]

android.debug.arm64 = "res://addons/GDExtensionAndroidPluginTemplate/bin/debug/arm64-v8a/libGDExtensionAndroidPluginTemplate.so"
android.release.arm64 = "res://addons/GDExtensionAndroidPluginTemplate/bin/release/arm64-v8a/libGDExtensionAndroidPluginTemplate.so"
...</literal_block>
                <paragraph>Of note is the <literal>android_aar_plugin</literal> field that specifies this GDExtension module is provided as part of a v2 Android plugin.
                    During the export process, this will indicate to the Godot Editor that the GDExtension native shared libraries are exported by the Android plugin AAR binaries.</paragraph>
                <paragraph>For GDExtension Android plugins, the plugin init class must override <reference name="GodotPlugin::getPluginGDExtensionLibrariesPaths()" refuri="https://github.com/godotengine/godot/blob/0a7f75ec7b465604b6496c8f5f1d638aed250d6d/platform/android/java/lib/src/org/godotengine/godot/plugin/GodotPlugin.java#L277">GodotPlugin::getPluginGDExtensionLibrariesPaths()</reference><target ids="godotplugin-getplugingdextensionlibrariespaths" names="godotplugin::getplugingdextensionlibrariespaths()" refuri="https://github.com/godotengine/godot/blob/0a7f75ec7b465604b6496c8f5f1d638aed250d6d/platform/android/java/lib/src/org/godotengine/godot/plugin/GodotPlugin.java#L277"></target>,
                    and return the paths to the bundled GDExtension libraries config files (<literal>*.gdextension</literal>).</paragraph>
                <paragraph>The paths must be relative to the Android library's <literal>assets</literal> directory.
                    At runtime, the plugin will provide these paths to the Godot engine which will use them to load and initialize the bundled GDExtension libraries.</paragraph>
            </section>
        </section>
        <section ids="using-a-v2-android-plugin" names="using\ a\ v2\ android\ plugin 使用\ v2\ android\ 插件">
            <title>使用 v2 Android 插件</title>
            <note>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>要求 Godot 4.2 或更高版本</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>v2 Android plugin requires the use of the <reference name="Gradle build process" refuri="https://docs.godotengine.org/en/stable/classes/class_editorexportplatformandroid.html#class-editorexportplatformandroid-property-gradle-build-use-gradle-build">Gradle build process</reference><target ids="gradle-build-process" names="gradle\ build\ process" refuri="https://docs.godotengine.org/en/stable/classes/class_editorexportplatformandroid.html#class-editorexportplatformandroid-property-gradle-build-use-gradle-build"></target>.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>The provided github project templates include demo Godot projects for quick testing.</paragraph>
                    </list_item>
                </bullet_list>
            </note>
            <enumerated_list enumtype="arabic" prefix="" suffix=".">
                <list_item>
                    <paragraph>Copy the plugin's output directory (<literal>addons/&lt;plugin_name&gt;</literal>) to the target Godot project's directory</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Open the project in the Godot Editor; the Editor should detect the plugin</paragraph>
                </list_item>
                <list_item>
                    <paragraph>导航到 <literal>项目</literal> -&gt; <literal>项目设置...</literal> -&gt; <literal>插件</literal> ，并确保插件已启用</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Install the Godot Android build template by clicking on <literal>Project</literal> -&gt; <literal>Install Android Build Template...</literal></paragraph>
                </list_item>
                <list_item>
                    <paragraph>Navigate to <literal>Project</literal> -&gt; <literal>Export...</literal></paragraph>
                </list_item>
                <list_item>
                    <paragraph>In the <literal>Export</literal> window, create an <literal>Android export preset</literal></paragraph>
                </list_item>
                <list_item>
                    <paragraph>In the <literal>Android export preset</literal>, scroll to <literal>Gradle Build</literal> and set <literal>Use Gradle Build</literal> to <literal>true</literal></paragraph>
                </list_item>
                <list_item>
                    <paragraph>Update the project's scripts as needed to access the plugin's functionality. For example:</paragraph>
                    <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">if Engine.has_singleton("MyPlugin"):
        var singleton = Engine.get_singleton("MyPlugin")
        print(singleton.myPluginFunction("World"))</literal_block>
                </list_item>
                <list_item>
                    <paragraph>Connect an Android device to your machine and run the project on it</paragraph>
                </list_item>
            </enumerated_list>
            <section ids="using-a-v2-android-plugin-as-an-android-library" names="using\ a\ v2\ android\ plugin\ as\ an\ android\ library">
                <title>Using a v2 Android plugin as an Android library</title>
                <paragraph>Since they are also Android libraries, Godot v2 Android plugins can be stripped from their <literal>EditorExportPlugin</literal> packaging and provided as raw <literal>AAR</literal> binaries for use as libraries alongside the <reference internal="True" refuri="android_library#doc-android-library"><inline classes="std std-ref">Godot Android library</inline></reference> by Android apps.</paragraph>
                <paragraph>If targeting this use-case, make sure to include additional instructions for how the <literal>AAR</literal> binaries should be included (e.g: custom additions to the Android app's manifest).</paragraph>
            </section>
        </section>
        <section ids="reference-implementations" names="reference\ implementations 参考实现">
            <title>参考实现</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference name="Godot Android 插件范例" refuri="https://github.com/m4gr3d/Godot-Android-Samples/tree/master/plugins">Godot Android 插件范例</reference><target ids="godot-android" names="godot\ android\ 插件范例" refuri="https://github.com/m4gr3d/Godot-Android-Samples/tree/master/plugins"></target></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="Godot Android 插件模板" refuri="https://github.com/m4gr3d/Godot-Android-Plugin-Template">Godot Android 插件模板</reference><target ids="godot-android" names="godot\ android\ 插件模板" refuri="https://github.com/m4gr3d/Godot-Android-Plugin-Template"></target></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="GDExtension Android Plugin Template" refuri="https://github.com/m4gr3d/GDExtension-Android-Plugin-Template">GDExtension Android Plugin Template</reference><target ids="gdextension-android-plugin-template" names="gdextension\ android\ plugin\ template" refuri="https://github.com/m4gr3d/GDExtension-Android-Plugin-Template"></target></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference name="Godot OpenXR 加载程序" refuri="https://github.com/GodotVR/godot_openxr_loaders">Godot OpenXR 加载程序</reference><target ids="godot-openxr" names="godot\ openxr\ 加载程序" refuri="https://github.com/GodotVR/godot_openxr_loaders"></target></paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section ids="tips-and-guidelines" names="tips\ and\ guidelines 技巧与指南">
            <title>技巧与指南</title>
            <section ids="simplify-access-to-the-exposed-java-kotlin-apis" names="simplify\ access\ to\ the\ exposed\ java\ /\ kotlin\ apis 简化对暴露的\ java\ /\ kotlin\ api\ 的访问">
                <title>简化对暴露的 Java / Kotlin API 的访问</title>
                <paragraph>To make it easier to access the exposed Java / Kotlin APIs in the Godot Editor, it's recommended to
                    provide one (or multiple) gdscript wrapper class(es) for your plugin users to interface with.</paragraph>
                <paragraph>例如：</paragraph>
                <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">class_name PluginInterface extends Object

## Interface used to access the functionality provided by this plugin.

var _plugin_name = "GDExtensionAndroidPluginTemplate"
var _plugin_singleton

func _init():
    if Engine.has_singleton(_plugin_name):
        _plugin_singleton = Engine.get_singleton(_plugin_name)
    else:
        printerr("Initialization error: unable to access the java logic")

## Print a 'Hello World' message to the logcat.
func helloWorld():
    if _plugin_singleton:
        _plugin_singleton.helloWorld()
    else:
        printerr("Initialization error")</literal_block>
            </section>
            <section ids="support-using-the-gdextension-functionality-in-the-godot-editor" names="support\ using\ the\ gdextension\ functionality\ in\ the\ godot\ editor">
                <title>Support using the GDExtension functionality in the Godot Editor</title>
                <paragraph>If planning to use the GDExtension functionality in the Godot Editor, it is recommended that the
                    GDExtension's native binaries are compiled not just for Android, but also for the OS onto which
                    developers / users intend to run the Godot Editor. Not doing so may prevent developers /
                    users from writing code that accesses the plugin from within the Godot Editor.</paragraph>
                <paragraph>This may involve creating dummy plugins for the host OS just so the API is published to the
                    editor. You can use the [godot-cpp-template](<reference refuri="https://github.com/godotengine/godot-cpp-template">https://github.com/godotengine/godot-cpp-template</reference>)
                    github template for reference on how to do so.</paragraph>
            </section>
            <section ids="godot-crashes-upon-load" names="godot\ crashes\ upon\ load godot\ 在加载时崩溃">
                <title>Godot 在加载时崩溃</title>
                <paragraph>检查 <literal>adb logcat</literal> 是否存在可能的问题，然后：</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>检查插件暴露的方法是否使用了下列 Java 类型：<literal>void</literal>、<literal>boolean</literal>、<literal>int</literal>、<literal>float</literal>、<literal>java.lang.String</literal>、<literal>org.godotengine.godot.Dictionary</literal>、<literal>int[]</literal>、<literal>byte[]</literal>、<literal>float[]</literal>、<literal>java.lang.String[]</literal> 。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>暂时不支持更复杂的数据类型.</paragraph>
                    </list_item>
                </bullet_list>
                <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
            </section>
        </section>
    </section>
</document>
