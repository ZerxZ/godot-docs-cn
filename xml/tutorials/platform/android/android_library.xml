<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/tutorials/platform/android/android_library.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-android-library"></target>
    <section ids="godot-android-library doc-android-library" names="godot\ android\ library godot\ android\ 库 doc_android_library">
        <title>Godot Android 库</title>
        <paragraph>The Godot Engine for Android platforms is designed to be used as an <reference name="Android library" refuri="https://developer.android.com/studio/projects/android-library">Android library</reference><target ids="android-library" names="android\ library" refuri="https://developer.android.com/studio/projects/android-library"></target>.
            This architecture enables several key features on Android platforms:</paragraph>
        <bullet_list bullet="-">
            <list_item>
                <paragraph>Ability to integrate the Gradle build system within the Godot Editor, which provides the ability to leverage more components from the Android ecosystem such as libraries and tools</paragraph>
            </list_item>
            <list_item>
                <paragraph>Ability to make the engine portable and embeddable:</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>Key in enabling the port of the Godot Editor to Android and mobile XR devices</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Key in allowing the integration and reuse of Godot's capabilities within existing codebase</paragraph>
                    </list_item>
                </bullet_list>
            </list_item>
        </bullet_list>
        <paragraph>Below we describe some of the use-cases and scenarios this architecture enables.</paragraph>
        <section ids="using-the-godot-android-library" names="using\ the\ godot\ android\ library 使用\ godot\ android\ 库">
            <title>使用 Godot Android 库</title>
            <paragraph>The Godot Android library is packaged as an AAR archive file and hosted on <reference name="MavenCentral" refuri="https://central.sonatype.com/artifact/org.godotengine/godot">MavenCentral</reference><target ids="mavencentral" names="mavencentral" refuri="https://central.sonatype.com/artifact/org.godotengine/godot"></target> along with <reference name="its documentation" refuri="https://javadoc.io/doc/org.godotengine/godot/latest/index.html">its documentation</reference><target ids="its-documentation" names="its\ documentation" refuri="https://javadoc.io/doc/org.godotengine/godot/latest/index.html"></target>.</paragraph>
            <paragraph>It provides access to Godot APIs and capabilities on Android platforms for the following non-exhaustive use-cases.</paragraph>
        </section>
        <section ids="godot-android-plugins" names="godot\ android\ plugins godot\ android\ 插件">
            <title>Godot Android 插件</title>
            <paragraph>Android plugins are powerful tools to extend the capabilities of the Godot Engine
                by tapping into the functionality provided by Android platforms and ecosystem.</paragraph>
            <paragraph>An Android plugin is an Android library with a dependency on the Godot Android library
                which the plugin uses to integrate into the engine's lifecycle and to access Godot APIs,
                granting it powerful capabilities such as GDExtension support which allows to update / mod the engine behavior as needed.</paragraph>
            <paragraph>详情见 <reference internal="True" refuri="android_plugin#doc-android-plugin"><inline classes="std std-ref">Godot Android 插件</inline></reference>。</paragraph>
        </section>
        <section ids="embedding-godot-in-existing-android-projects" names="embedding\ godot\ in\ existing\ android\ projects 将\ godot\ 嵌入到已有\ android\ 项目中">
            <title>将 Godot 嵌入到已有 Android 项目中</title>
            <paragraph>The Godot Engine can be embedded within existing Android applications or libraries,
                allowing developers to leverage mature and battle-tested code and libraries better suited to a specific task.</paragraph>
            <paragraph>The hosting component is responsible for driving the engine lifecycle via Godot's Android APIs.
                These APIs can also be used to provide bidirectional communication between the host and the embedded
                Godot instance allowing for greater control over the desired experience.</paragraph>
            <paragraph>We showcase how this is done using a sample Android app that embeds the Godot Engine as an Android view,
                and uses it to render 3D GLTF models.</paragraph>
            <paragraph>The <reference name="GLTF Viewer" refuri="https://github.com/m4gr3d/Godot-Android-Samples/tree/master/apps/gltf_viewer">GLTF Viewer</reference><target ids="gltf-viewer" names="gltf\ viewer" refuri="https://github.com/m4gr3d/Godot-Android-Samples/tree/master/apps/gltf_viewer"></target> sample app uses an <reference name="Android RecyclerView component" refuri="https://developer.android.com/develop/ui/views/layout/recyclerview">Android RecyclerView component</reference><target ids="android-recyclerview-component" names="android\ recyclerview\ component" refuri="https://developer.android.com/develop/ui/views/layout/recyclerview"></target> to create
                a list of GLTF items, populated from <reference name="Kenney's Food Kit pack" refuri="https://kenney.nl/assets/food-kit">Kenney's Food Kit pack</reference><target ids="kenney-s-food-kit-pack" names="kenney's\ food\ kit\ pack" refuri="https://kenney.nl/assets/food-kit"></target>.
                When an item on the list is selected, the app's logic interacts with the embedded Godot Engine to render the selected GLTF item as a 3D model.</paragraph>
            <image candidates="{'*': 'tutorials/platform/android/img/gltf_viewer_sample_app_screenshot.webp'}" uri="tutorials/platform/android/img/gltf_viewer_sample_app_screenshot.webp"></image>
            <paragraph>The sample app source code can be found <reference name="on GitHub" refuri="https://github.com/m4gr3d/Godot-Android-Samples/tree/master/apps/gltf_viewer">on GitHub</reference><target ids="on-github" names="on\ github" refuri="https://github.com/m4gr3d/Godot-Android-Samples/tree/master/apps/gltf_viewer"></target>.
                Follow the instructions on <reference name="its README" refuri="https://github.com/m4gr3d/Godot-Android-Samples/blob/master/apps/gltf_viewer/README.md">its README</reference><target ids="its-readme" names="its\ readme" refuri="https://github.com/m4gr3d/Godot-Android-Samples/blob/master/apps/gltf_viewer/README.md"></target> to build and install it.</paragraph>
            <paragraph>Below we break-down the steps used to create the GLTF Viewer app.</paragraph>
            <warning>
                <paragraph>Currently only a single instance of the Godot Engine is supported per process.
                    You can configure the process the Android Activity runs under using the <reference name="android:process attribute" refuri="https://developer.android.com/guide/topics/manifest/activity-element#proc">android:process attribute</reference><target ids="android-process-attribute" names="android:process\ attribute" refuri="https://developer.android.com/guide/topics/manifest/activity-element#proc"></target>.</paragraph>
            </warning>
            <warning>
                <paragraph>Automatic resizing / orientation configuration events are not supported and may cause a crash.
                    You can disable those events:</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>By locking to a specific orientation using the <reference name="android:screenOrientation attribute" refuri="https://developer.android.com/guide/topics/manifest/activity-element#screen">android:screenOrientation attribute</reference><target ids="android-screenorientation-attribute" names="android:screenorientation\ attribute" refuri="https://developer.android.com/guide/topics/manifest/activity-element#screen"></target>.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>By declaring that the Activity will handle these configuration events using the <reference name="android:configChanges attribute" refuri="https://developer.android.com/guide/topics/manifest/activity-element#config">android:configChanges attribute</reference><target ids="android-configchanges-attribute" names="android:configchanges\ attribute" refuri="https://developer.android.com/guide/topics/manifest/activity-element#config"></target>.</paragraph>
                    </list_item>
                </bullet_list>
            </warning>
            <section ids="create-the-android-app" names="1.\ create\ the\ android\ app">
                <title>1. Create the Android app</title>
                <note>
                    <paragraph>The Android sample app was created using <reference name="Android Studio" refuri="https://developer.android.com/studio">Android Studio</reference><target ids="android-studio" names="android\ studio" refuri="https://developer.android.com/studio"></target>
                        and using <reference name="Gradle" refuri="https://developer.android.com/build">Gradle</reference><target ids="gradle" names="gradle" refuri="https://developer.android.com/build"></target> as the build system.</paragraph>
                    <paragraph>The Android ecosystem provides multiple tools, IDEs, build systems for creating Android apps
                        so feel free to use what you're familiar with, and update the steps below accordingly (contributions to this documentation are welcomed as well!).</paragraph>
                </note>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>Set up an Android application project. It may be a brand new empty project, or an existing project</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Add the <reference name="maven dependency for the Godot Android library" refuri="https://central.sonatype.com/artifact/org.godotengine/godot">maven dependency for the Godot Android library</reference><target ids="maven-dependency-for-the-godot-android-library" names="maven\ dependency\ for\ the\ godot\ android\ library" refuri="https://central.sonatype.com/artifact/org.godotengine/godot"></target></paragraph>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>If using <literal>gradle</literal>, add the following to the <literal>dependency</literal> section of the app's gradle build file. Make sure to update <literal>&lt;version&gt;</literal> to the latest version of the Godot Android library:</paragraph>
                            </list_item>
                        </bullet_list>
                        <literal_block force="False" highlight_args="{}" language="kotlin" linenos="False" xml:space="preserve">implementation("org.godotengine:godot:&lt;version&gt;")</literal_block>
                    </list_item>
                    <list_item>
                        <paragraph>If using <literal>gradle</literal>, include the following <literal>aaptOptions</literal> configuration under the <literal>android &gt; defaultConfig</literal> section of the app's gradle build file. Doing so allows <literal>gradle</literal> to include Godot's hidden directories when building the app binary.</paragraph>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>If your build system does not support including hidden directories, you can <reference name="configure the Godot project to not use hidden directories" refuri="https://docs.godotengine.org/en/stable/classes/class_projectsettings.html#class-projectsettings-property-application-config-use-hidden-project-data-directory">configure the Godot project to not use hidden directories</reference><target ids="configure-the-godot-project-to-not-use-hidden-directories" names="configure\ the\ godot\ project\ to\ not\ use\ hidden\ directories" refuri="https://docs.godotengine.org/en/stable/classes/class_projectsettings.html#class-projectsettings-property-application-config-use-hidden-project-data-directory"></target> by deselecting <literal>Project Settings... &gt; Application &gt; Config &gt; Use Hidden Project Data Directory</literal>.</paragraph>
                            </list_item>
                        </bullet_list>
                    </list_item>
                </bullet_list>
                <literal_block force="False" highlight_args="{}" language="groovy" linenos="False" xml:space="preserve">android {

  defaultConfig {
      // The default ignore pattern for the 'assets' directory includes hidden files and
      // directories which are used by Godot projects, so we override it with the following.
      aaptOptions {
          ignoreAssetsPattern "!.svn:!.git:!.gitignore:!.ds_store:!*.scc:&lt;dir&gt;_*:!CVS:!thumbs.db:!picasa.ini:!*~"
      }
    ...</literal_block>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>Create / update the application's Activity that will be hosting the Godot Engine instance. For the sample app, this is <reference name="MainActivity" refuri="https://github.com/m4gr3d/Godot-Android-Samples/blob/master/apps/gltf_viewer/src/main/java/fhuyakou/godot/app/android/gltfviewer/MainActivity.kt">MainActivity</reference><target ids="mainactivity" names="mainactivity" refuri="https://github.com/m4gr3d/Godot-Android-Samples/blob/master/apps/gltf_viewer/src/main/java/fhuyakou/godot/app/android/gltfviewer/MainActivity.kt"></target></paragraph>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>The host Activity should implement the <reference name="GodotHost interface" refuri="https://github.com/godotengine/godot/blob/master/platform/android/java/lib/src/org/godotengine/godot/GodotHost.java">GodotHost interface</reference><target ids="godothost-interface" names="godothost\ interface" refuri="https://github.com/godotengine/godot/blob/master/platform/android/java/lib/src/org/godotengine/godot/GodotHost.java"></target></paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>The sample app uses <reference name="Fragments" refuri="https://developer.android.com/guide/fragments">Fragments</reference><target ids="fragments" names="fragments" refuri="https://developer.android.com/guide/fragments"></target> to organize its UI, so it uses <reference name="GodotFragment" refuri="https://github.com/godotengine/godot/blob/master/platform/android/java/lib/src/org/godotengine/godot/GodotFragment.java">GodotFragment</reference><target ids="godotfragment" names="godotfragment" refuri="https://github.com/godotengine/godot/blob/master/platform/android/java/lib/src/org/godotengine/godot/GodotFragment.java"></target>, a fragment component provided by the Godot Android library to automatically host and manage the Godot Engine instance.</paragraph>
                            </list_item>
                        </bullet_list>
                        <literal_block force="False" highlight_args="{}" language="kotlin" linenos="False" xml:space="preserve">private var godotFragment: GodotFragment? = null

override fun onCreate(savedInstanceState: Bundle?) {
    super.onCreate(savedInstanceState)

    setContentView(R.layout.activity_main)

    val currentGodotFragment = supportFragmentManager.findFragmentById(R.id.godot_fragment_container)
    if (currentGodotFragment is GodotFragment) {
        godotFragment = currentGodotFragment
    } else {
        godotFragment = GodotFragment()
        supportFragmentManager.beginTransaction()
            .replace(R.id.godot_fragment_container, godotFragment!!)
            .commitNowAllowingStateLoss()
    }

    ...</literal_block>
                    </list_item>
                </bullet_list>
                <note>
                    <paragraph>The Godot Android library also provide <reference name="GodotActivity" refuri="https://github.com/godotengine/godot/blob/master/platform/android/java/lib/src/org/godotengine/godot/GodotActivity.kt">GodotActivity</reference><target ids="godotactivity" names="godotactivity" refuri="https://github.com/godotengine/godot/blob/master/platform/android/java/lib/src/org/godotengine/godot/GodotActivity.kt"></target>, an Activity component that can be extended to automatically host and manage the Godot Engine instance.</paragraph>
                    <paragraph>Alternatively, applications can directly create a <reference name="Godot" refuri="https://github.com/godotengine/godot/blob/master/platform/android/java/lib/src/org/godotengine/godot/Godot.kt">Godot</reference><target ids="godot" names="godot" refuri="https://github.com/godotengine/godot/blob/master/platform/android/java/lib/src/org/godotengine/godot/Godot.kt"></target> instance, host and manage it themselves.</paragraph>
                </note>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>Using <reference name="GodotHost#getHostPlugins(...)" refuri="https://github.com/m4gr3d/Godot-Android-Samples/blob/0e3440f357f8be5b4c63a4fe75766793199a99d0/apps/gltf_viewer/src/main/java/fhuyakou/godot/app/android/gltfviewer/MainActivity.kt#L55">GodotHost#getHostPlugins(...)</reference><target ids="godothost-gethostplugins" names="godothost#gethostplugins(...)" refuri="https://github.com/m4gr3d/Godot-Android-Samples/blob/0e3440f357f8be5b4c63a4fe75766793199a99d0/apps/gltf_viewer/src/main/java/fhuyakou/godot/app/android/gltfviewer/MainActivity.kt#L55"></target>, the sample app creates a <reference name="runtime GodotPlugin instance" refuri="https://github.com/m4gr3d/Godot-Android-Samples/blob/master/apps/gltf_viewer/src/main/java/fhuyakou/godot/app/android/gltfviewer/AppPlugin.kt">runtime GodotPlugin instance</reference><target ids="runtime-godotplugin-instance" names="runtime\ godotplugin\ instance" refuri="https://github.com/m4gr3d/Godot-Android-Samples/blob/master/apps/gltf_viewer/src/main/java/fhuyakou/godot/app/android/gltfviewer/AppPlugin.kt"></target> that's used to send <reference internal="True" refuri="../../../getting_started/step_by_step/signals#doc-signals"><inline classes="std std-ref">signals</inline></reference> to the <literal>gdscript</literal> logic</paragraph>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>The runtime <literal>GodotPlugin</literal> can also be used by <literal>gdscript</literal> logic to access JVM methods. For more information, see <reference internal="True" refuri="android_plugin#doc-android-plugin"><inline classes="std std-ref">Godot Android plugins</inline></reference>.</paragraph>
                            </list_item>
                        </bullet_list>
                    </list_item>
                    <list_item>
                        <paragraph>Add any additional logic that will be used by your application</paragraph>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>For the sample app, this includes adding the <reference name="ItemsSelectionFragment fragment" refuri="https://github.com/m4gr3d/Godot-Android-Samples/blob/master/apps/gltf_viewer/src/main/java/fhuyakou/godot/app/android/gltfviewer/ItemsSelectionFragment.kt">ItemsSelectionFragment fragment</reference><target ids="itemsselectionfragment-fragment" names="itemsselectionfragment\ fragment" refuri="https://github.com/m4gr3d/Godot-Android-Samples/blob/master/apps/gltf_viewer/src/main/java/fhuyakou/godot/app/android/gltfviewer/ItemsSelectionFragment.kt"></target> (and related classes), a fragment used to build and show the list of GLTF items</paragraph>
                            </list_item>
                        </bullet_list>
                    </list_item>
                    <list_item>
                        <paragraph>Open the <literal>AndroidManifest.xml</literal> file, and configure the orientation if needed using the <reference name="android:screenOrientation attribute" refuri="https://developer.android.com/guide/topics/manifest/activity-element#screen">android:screenOrientation attribute</reference><target dupnames="android:screenorientation\ attribute" ids="id1" refuri="https://developer.android.com/guide/topics/manifest/activity-element#screen"></target></paragraph>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>If needed, disable automatic resizing / orientation configuration changes using the <reference name="android:configChanges attribute" refuri="https://developer.android.com/guide/topics/manifest/activity-element#config">android:configChanges attribute</reference><target dupnames="android:configchanges\ attribute" ids="id2" refuri="https://developer.android.com/guide/topics/manifest/activity-element#config"></target></paragraph>
                            </list_item>
                        </bullet_list>
                    </list_item>
                </bullet_list>
                <literal_block force="False" highlight_args="{}" language="xml" linenos="False" xml:space="preserve">&lt;activity android:name=".MainActivity"
    android:screenOrientation="fullUser"
    android:configChanges="orientation|screenSize|smallestScreenSize|screenLayout"
    android:exported="true"&gt;

    ...
&lt;/activity&gt;</literal_block>
            </section>
            <section ids="create-the-godot-project" names="2.\ create\ the\ godot\ project">
                <title>2. Create the Godot project</title>
                <note>
                    <paragraph>On Android, Godot's project files are exported to the <literal>assets</literal> directory of the generated <literal>apk</literal> binary.</paragraph>
                    <paragraph>We leverage that architecture to bind our Android app and Godot project together by creating the Godot project in the Android app's <literal>assets</literal> directory.</paragraph>
                    <paragraph>Note that it's also possible to create the Godot project in a separate directory and export it as a <reference name="PCK or ZIP file" refuri="https://docs.godotengine.org/en/stable/tutorials/export/exporting_projects.html#pck-versus-zip-pack-file-formats">PCK or ZIP file</reference><target ids="pck-or-zip-file" names="pck\ or\ zip\ file" refuri="https://docs.godotengine.org/en/stable/tutorials/export/exporting_projects.html#pck-versus-zip-pack-file-formats"></target>
                        to the Android app's <literal>assets</literal> directory.
                        Using this approach requires passing the <literal>--main-pack &lt;pck_or_zip_filepath_relative_to_assets_dir&gt;</literal> argument to the hosted Godot Engine instance using <reference name="GodotHost#getCommandLine()" refuri="https://github.com/godotengine/godot/blob/6916349697a4339216469e9bf5899b983d78db07/platform/android/java/lib/src/org/godotengine/godot/GodotHost.java#L45">GodotHost#getCommandLine()</reference><target ids="godothost-getcommandline" names="godothost#getcommandline()" refuri="https://github.com/godotengine/godot/blob/6916349697a4339216469e9bf5899b983d78db07/platform/android/java/lib/src/org/godotengine/godot/GodotHost.java#L45"></target>.</paragraph>
                    <paragraph>The instructions below and the sample app follow the first approach of creating the Godot project in the Android app's <literal>assets</literal> directory.</paragraph>
                </note>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>As mentioned in the <strong>note</strong> above, open the Godot Editor and create a Godot project directly (no subfolder) in the <literal>assets</literal> directory of the Android application project</paragraph>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>See the sample app's <reference name="Godot project" refuri="https://github.com/m4gr3d/Godot-Android-Samples/tree/master/apps/gltf_viewer/src/main/assets">Godot project</reference><target ids="godot-project" names="godot\ project" refuri="https://github.com/m4gr3d/Godot-Android-Samples/tree/master/apps/gltf_viewer/src/main/assets"></target> for reference</paragraph>
                            </list_item>
                        </bullet_list>
                    </list_item>
                    <list_item>
                        <paragraph>Configure the Godot project as desired</paragraph>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>Make sure the <reference name="orientation" refuri="https://docs.godotengine.org/en/stable/classes/class_projectsettings.html#class-projectsettings-property-display-window-handheld-orientation">orientation</reference><target ids="orientation" names="orientation" refuri="https://docs.godotengine.org/en/stable/classes/class_projectsettings.html#class-projectsettings-property-display-window-handheld-orientation"></target> set for the Godot project matches the one set in the Android app's manifest</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>For Android, make sure <reference name="textures/vram_compression/import_etc2_astc" refuri="https://docs.godotengine.org/en/stable/classes/class_projectsettings.html#class-projectsettings-property-rendering-textures-vram-compression-import-etc2-astc">textures/vram_compression/import_etc2_astc</reference><target ids="textures-vram-compression-import-etc2-astc" names="textures/vram_compression/import_etc2_astc" refuri="https://docs.godotengine.org/en/stable/classes/class_projectsettings.html#class-projectsettings-property-rendering-textures-vram-compression-import-etc2-astc"></target> is set to <title_reference>true</title_reference></paragraph>
                            </list_item>
                        </bullet_list>
                    </list_item>
                    <list_item>
                        <paragraph>Update the Godot project script logic as needed</paragraph>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>For the sample app, the <reference name="script logic" refuri="https://github.com/m4gr3d/Godot-Android-Samples/blob/master/apps/gltf_viewer/src/main/assets/main.gd">script logic</reference><target ids="script-logic" names="script\ logic" refuri="https://github.com/m4gr3d/Godot-Android-Samples/blob/master/apps/gltf_viewer/src/main/assets/main.gd"></target> queries for the runtime <literal>GodotPlugin</literal> instance and uses it to register for signals fired by the app logic</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>The app logic fires a signal every time an item is selected in the list. The signal contains the filepath of the GLTF model, which is used by the <literal>gdscript</literal> logic to render the model.</paragraph>
                            </list_item>
                        </bullet_list>
                        <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">extends Node3D

# Reference to the gltf model that's currently being shown.
var current_gltf_node: Node3D = null

func _ready():
  # Default asset to load when the app starts
  _load_gltf("res://gltfs/food_kit/turkey.glb")

  var appPlugin = Engine.get_singleton("AppPlugin")
  if appPlugin:
    print("App plugin is available")

    # Signal fired from the app logic to update the gltf model being shown
    appPlugin.connect("show_gltf", _load_gltf)
  else:
    print("App plugin is not available")


# Load the gltf model specified by the given path
func _load_gltf(gltf_path: String):
  if current_gltf_node != null:
    remove_child(current_gltf_node)

  current_gltf_node = load(gltf_path).instantiate()

  add_child(current_gltf_node)</literal_block>
                    </list_item>
                </bullet_list>
            </section>
            <section ids="build-and-run-the-app" names="3.\ build\ and\ run\ the\ app">
                <title>3. Build and run the app</title>
                <paragraph>Once you complete configuration of your Godot project, build and run the Android app.
                    If set up correctly, the host Activity will initialize the embedded Godot Engine on startup.
                    The Godot Engine will check the <literal>assets</literal> directory for project files to load (unless configured to look for a <literal>main pack</literal>), and will proceed to run the project.</paragraph>
                <paragraph>While the app is running on device, you can check <reference name="Android logcat" refuri="https://developer.android.com/studio/debug/logcat">Android logcat</reference><target ids="android-logcat" names="android\ logcat" refuri="https://developer.android.com/studio/debug/logcat"></target> to investigate any errors or crashes.</paragraph>
                <paragraph>For reference, check the <reference name="build and install instructions" refuri="https://github.com/m4gr3d/Godot-Android-Samples/blob/master/apps/gltf_viewer/README.md">build and install instructions</reference><target ids="build-and-install-instructions" names="build\ and\ install\ instructions" refuri="https://github.com/m4gr3d/Godot-Android-Samples/blob/master/apps/gltf_viewer/README.md"></target> for the GLTF Viewer sample app.</paragraph>
                <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
            </section>
        </section>
    </section>
</document>
