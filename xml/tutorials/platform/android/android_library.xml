<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/tutorials/platform/android/android_library.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-android-library"></target>
    <section ids="godot-android-library doc-android-library" names="godot\ android\ library godot\ android\ 库 doc_android_library">
        <title>Godot Android 库</title>
        <paragraph>适用于 Android 平台的 Godot 引擎旨在作为 <reference name="Android 库" refuri="https://developer.android.com/studio/projects/android-library">Android 库</reference><target ids="android" names="android\ 库" refuri="https://developer.android.com/studio/projects/android-library"></target> 使用。该架构可在 Android 平台上实现多项关键功能：</paragraph>
        <bullet_list bullet="-">
            <list_item>
                <paragraph>能够将 Gradle 构建系统整合进 Godot 编辑器，从而提供了利用 Android 生态系统中更多组件的能力，比如库和工具</paragraph>
            </list_item>
            <list_item>
                <paragraph>能够使引擎具有便携性和可嵌入性:</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>在使 Godot 编辑器能够移植到 Android 和移动 XR 设备中发挥关键作用</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>在现有代码库中集成和重复使用 Godot 功能发挥关键作用</paragraph>
                    </list_item>
                </bullet_list>
            </list_item>
        </bullet_list>
        <paragraph>下面我们描述了该架构支持的一些用例和场景。</paragraph>
        <section ids="using-the-godot-android-library" names="using\ the\ godot\ android\ library 使用\ godot\ android\ 库">
            <title>使用 Godot Android 库</title>
            <paragraph>Godot Android 库以 AAR 归档文件的形式打包，连同其 <reference name="文档" refuri="https://javadoc.io/doc/org.godotengine/godot/latest/index.html">文档</reference><target ids="id1" names="文档" refuri="https://javadoc.io/doc/org.godotengine/godot/latest/index.html"></target> 寄存在 <reference name="MavenCentral" refuri="https://central.sonatype.com/artifact/org.godotengine/godot">MavenCentral</reference><target ids="mavencentral" names="mavencentral" refuri="https://central.sonatype.com/artifact/org.godotengine/godot"></target> 上。</paragraph>
            <paragraph>它提供了在 Android 平台上访问 Godot 应用程序接口和功能的途径，适用于以下不完全用例。</paragraph>
        </section>
        <section ids="godot-android-plugins" names="godot\ android\ plugins godot\ android\ 插件">
            <title>Godot Android 插件</title>
            <paragraph>Android 插件是一种强大的工具，可利用 Android 平台和生态系统提供的功能来扩展 Godot 引擎的功能。</paragraph>
            <paragraph>Android 插件是一个依赖于 Godot Android 库的 Android 库，插件使用该库集成到引擎的生命周期中，并访问 Godot API，从而赋予其强大的功能，例如 GDExtension 支持，允许根据需要更新/修改引擎行为。</paragraph>
            <paragraph>详情见 <reference internal="True" refuri="android_plugin#doc-android-plugin"><inline classes="std std-ref">Godot Android 插件</inline></reference>。</paragraph>
        </section>
        <section ids="embedding-godot-in-existing-android-projects" names="embedding\ godot\ in\ existing\ android\ projects 将\ godot\ 嵌入到已有\ android\ 项目中">
            <title>将 Godot 嵌入到已有 Android 项目中</title>
            <paragraph>Godot 引擎可以嵌入现有的 Android 应用程序或库中，使开发人员能够利用成熟且经过考验的代码和库，更适合特定任务。</paragraph>
            <paragraph>托管组件负责通过 Godot 的 Android API 来驱动引擎的生命周期。这些 API 还可用于在主机和嵌入式 Godot 实例之间提供双向通信，从而更好地控制所需的体验。</paragraph>
            <paragraph>我们展示了如何使用示例 Android 应用程序来完成此操作，该应用程序将 Godot 引擎嵌入为 Android 视图，并使用它来渲染 3D GLTF 模型。</paragraph>
            <paragraph><reference name="GLTF Viewer" refuri="https://github.com/m4gr3d/Godot-Android-Samples/tree/master/apps/gltf_viewer">GLTF Viewer</reference><target ids="gltf-viewer" names="gltf\ viewer" refuri="https://github.com/m4gr3d/Godot-Android-Samples/tree/master/apps/gltf_viewer"></target> 示例应用程序使用 <reference name="Android RecyclerView 组件" refuri="https://developer.android.com/develop/ui/views/layout/recyclerview">Android RecyclerView 组件</reference><target ids="android-recyclerview" names="android\ recyclerview\ 组件" refuri="https://developer.android.com/develop/ui/views/layout/recyclerview"></target> 来创建 GLTF 项目列表，该列表由 <problematic ids="id4" refid="id3">`Kenney's Food Kit pack&lt;https://kenney.nl/assets/food-kit&gt;`_</problematic> 填充 。当选择列表中的项目时，应用程序的逻辑与嵌入式 Godot 引擎交互，将选定的 GLTF 项目渲染为 3D 模型。</paragraph>
            <image candidates="{'*': 'tutorials/platform/android/img/gltf_viewer_sample_app_screenshot.webp'}" uri="tutorials/platform/android/img/gltf_viewer_sample_app_screenshot.webp"></image>
            <paragraph>示例应用程序源代码可以在 <reference name="GitHub" refuri="https://github.com/m4gr3d/Godot-Android-Samples/tree/master/apps/gltf_viewer">GitHub</reference><target ids="github" names="github" refuri="https://github.com/m4gr3d/Godot-Android-Samples/tree/master/apps/gltf_viewer"></target> 上找到。按照其 <reference name="README" refuri="https://github.com/m4gr3d/Godot-Android-Samples/blob/master/apps/gltf_viewer/README.md">README</reference><target ids="readme" names="readme" refuri="https://github.com/m4gr3d/Godot-Android-Samples/blob/master/apps/gltf_viewer/README.md"></target> 上的说明来进行构建和安装。</paragraph>
            <paragraph>下面我们详细介绍了创建 GLTF 查看器应用程序的步骤。</paragraph>
            <warning>
                <paragraph>目前，每个进程仅支持单个 Godot 引擎实例。你可以使用 <problematic ids="id6" refid="id5">`android:process 属性&lt;https://developer.android.com/guide/topics/manifest/activity-element#proc&gt;`_</problematic> 来配置 Android Activity 运行的进程。</paragraph>
            </warning>
            <warning>
                <paragraph>不支持自动调整大小/方向配置事件，这些事件可能会导致系统崩溃。你可以禁用这些事件：</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>通过使用 <reference name="android:screenOrientation 属性" refuri="https://developer.android.com/guide/topics/manifest/activity-element#screen">android:screenOrientation 属性</reference><target ids="android-screenorientation" names="android:screenorientation\ 属性" refuri="https://developer.android.com/guide/topics/manifest/activity-element#screen"></target> 来锁定到特定方向。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>通过声明 Activity 将使用 <reference name="android:configChanges 属性" refuri="https://developer.android.com/guide/topics/manifest/activity-element#config">android:configChanges 属性</reference><target ids="android-configchanges" names="android:configchanges\ 属性" refuri="https://developer.android.com/guide/topics/manifest/activity-element#config"></target> 来处理这些配置事件。</paragraph>
                    </list_item>
                </bullet_list>
            </warning>
            <section ids="create-the-android-app" names="1.\ create\ the\ android\ app">
                <title>1. 创建 Android 应用</title>
                <note>
                    <paragraph>The Android sample app was created using <reference name="Android Studio" refuri="https://developer.android.com/studio">Android Studio</reference><target ids="android-studio" names="android\ studio" refuri="https://developer.android.com/studio"></target>
                        and using <reference name="Gradle" refuri="https://developer.android.com/build">Gradle</reference><target ids="gradle" names="gradle" refuri="https://developer.android.com/build"></target> as the build system.</paragraph>
                    <paragraph>The Android ecosystem provides multiple tools, IDEs, build systems for creating Android apps
                        so feel free to use what you're familiar with, and update the steps below accordingly (contributions to this documentation are welcomed as well!).</paragraph>
                </note>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>Set up an Android application project. It may be a brand new empty project, or an existing project</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Add the <reference name="maven dependency for the Godot Android library" refuri="https://central.sonatype.com/artifact/org.godotengine/godot">maven dependency for the Godot Android library</reference><target ids="maven-dependency-for-the-godot-android-library" names="maven\ dependency\ for\ the\ godot\ android\ library" refuri="https://central.sonatype.com/artifact/org.godotengine/godot"></target></paragraph>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>If using <literal>gradle</literal>, add the following to the <literal>dependency</literal> section of the app's gradle build file. Make sure to update <literal>&lt;version&gt;</literal> to the latest version of the Godot Android library:</paragraph>
                            </list_item>
                        </bullet_list>
                        <literal_block force="False" highlight_args="{}" language="kotlin" linenos="False" xml:space="preserve">implementation("org.godotengine:godot:&lt;version&gt;")</literal_block>
                    </list_item>
                    <list_item>
                        <paragraph>If using <literal>gradle</literal>, include the following <literal>aaptOptions</literal> configuration under the <literal>android &gt; defaultConfig</literal> section of the app's gradle build file. Doing so allows <literal>gradle</literal> to include Godot's hidden directories when building the app binary.</paragraph>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>If your build system does not support including hidden directories, you can <reference name="configure the Godot project to not use hidden directories" refuri="https://docs.godotengine.org/en/stable/classes/class_projectsettings.html#class-projectsettings-property-application-config-use-hidden-project-data-directory">configure the Godot project to not use hidden directories</reference><target ids="configure-the-godot-project-to-not-use-hidden-directories" names="configure\ the\ godot\ project\ to\ not\ use\ hidden\ directories" refuri="https://docs.godotengine.org/en/stable/classes/class_projectsettings.html#class-projectsettings-property-application-config-use-hidden-project-data-directory"></target> by deselecting <literal>Project Settings... &gt; Application &gt; Config &gt; Use Hidden Project Data Directory</literal>.</paragraph>
                            </list_item>
                        </bullet_list>
                    </list_item>
                </bullet_list>
                <literal_block force="False" highlight_args="{}" language="groovy" linenos="False" xml:space="preserve">android {

  defaultConfig {
      // The default ignore pattern for the 'assets' directory includes hidden files and
      // directories which are used by Godot projects, so we override it with the following.
      aaptOptions {
          ignoreAssetsPattern "!.svn:!.git:!.gitignore:!.ds_store:!*.scc:&lt;dir&gt;_*:!CVS:!thumbs.db:!picasa.ini:!*~"
      }
    ...</literal_block>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>Create / update the application's Activity that will be hosting the Godot Engine instance. For the sample app, this is <reference name="MainActivity" refuri="https://github.com/m4gr3d/Godot-Android-Samples/blob/master/apps/gltf_viewer/src/main/java/fhuyakou/godot/app/android/gltfviewer/MainActivity.kt">MainActivity</reference><target ids="mainactivity" names="mainactivity" refuri="https://github.com/m4gr3d/Godot-Android-Samples/blob/master/apps/gltf_viewer/src/main/java/fhuyakou/godot/app/android/gltfviewer/MainActivity.kt"></target></paragraph>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>The host Activity should implement the <reference name="GodotHost interface" refuri="https://github.com/godotengine/godot/blob/master/platform/android/java/lib/src/org/godotengine/godot/GodotHost.java">GodotHost interface</reference><target ids="godothost-interface" names="godothost\ interface" refuri="https://github.com/godotengine/godot/blob/master/platform/android/java/lib/src/org/godotengine/godot/GodotHost.java"></target></paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>The sample app uses <reference name="Fragments" refuri="https://developer.android.com/guide/fragments">Fragments</reference><target ids="fragments" names="fragments" refuri="https://developer.android.com/guide/fragments"></target> to organize its UI, so it uses <reference name="GodotFragment" refuri="https://github.com/godotengine/godot/blob/master/platform/android/java/lib/src/org/godotengine/godot/GodotFragment.java">GodotFragment</reference><target ids="godotfragment" names="godotfragment" refuri="https://github.com/godotengine/godot/blob/master/platform/android/java/lib/src/org/godotengine/godot/GodotFragment.java"></target>, a fragment component provided by the Godot Android library to automatically host and manage the Godot Engine instance.</paragraph>
                            </list_item>
                        </bullet_list>
                        <literal_block force="False" highlight_args="{}" language="kotlin" linenos="False" xml:space="preserve">private var godotFragment: GodotFragment? = null

override fun onCreate(savedInstanceState: Bundle?) {
    super.onCreate(savedInstanceState)

    setContentView(R.layout.activity_main)

    val currentGodotFragment = supportFragmentManager.findFragmentById(R.id.godot_fragment_container)
    if (currentGodotFragment is GodotFragment) {
        godotFragment = currentGodotFragment
    } else {
        godotFragment = GodotFragment()
        supportFragmentManager.beginTransaction()
            .replace(R.id.godot_fragment_container, godotFragment!!)
            .commitNowAllowingStateLoss()
    }

    ...</literal_block>
                    </list_item>
                </bullet_list>
                <note>
                    <paragraph>The Godot Android library also provide <reference name="GodotActivity" refuri="https://github.com/godotengine/godot/blob/master/platform/android/java/lib/src/org/godotengine/godot/GodotActivity.kt">GodotActivity</reference><target ids="godotactivity" names="godotactivity" refuri="https://github.com/godotengine/godot/blob/master/platform/android/java/lib/src/org/godotengine/godot/GodotActivity.kt"></target>, an Activity component that can be extended to automatically host and manage the Godot Engine instance.</paragraph>
                    <paragraph>Alternatively, applications can directly create a <reference name="Godot" refuri="https://github.com/godotengine/godot/blob/master/platform/android/java/lib/src/org/godotengine/godot/Godot.kt">Godot</reference><target ids="godot" names="godot" refuri="https://github.com/godotengine/godot/blob/master/platform/android/java/lib/src/org/godotengine/godot/Godot.kt"></target> instance, host and manage it themselves.</paragraph>
                </note>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>Using <reference name="GodotHost#getHostPlugins(...)" refuri="https://github.com/m4gr3d/Godot-Android-Samples/blob/0e3440f357f8be5b4c63a4fe75766793199a99d0/apps/gltf_viewer/src/main/java/fhuyakou/godot/app/android/gltfviewer/MainActivity.kt#L55">GodotHost#getHostPlugins(...)</reference><target ids="godothost-gethostplugins" names="godothost#gethostplugins(...)" refuri="https://github.com/m4gr3d/Godot-Android-Samples/blob/0e3440f357f8be5b4c63a4fe75766793199a99d0/apps/gltf_viewer/src/main/java/fhuyakou/godot/app/android/gltfviewer/MainActivity.kt#L55"></target>, the sample app creates a <reference name="runtime GodotPlugin instance" refuri="https://github.com/m4gr3d/Godot-Android-Samples/blob/master/apps/gltf_viewer/src/main/java/fhuyakou/godot/app/android/gltfviewer/AppPlugin.kt">runtime GodotPlugin instance</reference><target ids="runtime-godotplugin-instance" names="runtime\ godotplugin\ instance" refuri="https://github.com/m4gr3d/Godot-Android-Samples/blob/master/apps/gltf_viewer/src/main/java/fhuyakou/godot/app/android/gltfviewer/AppPlugin.kt"></target> that's used to send <reference internal="True" refuri="../../../getting_started/step_by_step/signals#doc-signals"><inline classes="std std-ref">signals</inline></reference> to the <literal>gdscript</literal> logic</paragraph>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>The runtime <literal>GodotPlugin</literal> can also be used by <literal>gdscript</literal> logic to access JVM methods. For more information, see <reference internal="True" refuri="android_plugin#doc-android-plugin"><inline classes="std std-ref">Godot Android plugins</inline></reference>.</paragraph>
                            </list_item>
                        </bullet_list>
                    </list_item>
                    <list_item>
                        <paragraph>Add any additional logic that will be used by your application</paragraph>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>For the sample app, this includes adding the <reference name="ItemsSelectionFragment fragment" refuri="https://github.com/m4gr3d/Godot-Android-Samples/blob/master/apps/gltf_viewer/src/main/java/fhuyakou/godot/app/android/gltfviewer/ItemsSelectionFragment.kt">ItemsSelectionFragment fragment</reference><target ids="itemsselectionfragment-fragment" names="itemsselectionfragment\ fragment" refuri="https://github.com/m4gr3d/Godot-Android-Samples/blob/master/apps/gltf_viewer/src/main/java/fhuyakou/godot/app/android/gltfviewer/ItemsSelectionFragment.kt"></target> (and related classes), a fragment used to build and show the list of GLTF items</paragraph>
                            </list_item>
                        </bullet_list>
                    </list_item>
                    <list_item>
                        <paragraph>Open the <literal>AndroidManifest.xml</literal> file, and configure the orientation if needed using the <reference name="android:screenOrientation attribute" refuri="https://developer.android.com/guide/topics/manifest/activity-element#screen">android:screenOrientation attribute</reference><target dupnames="android:screenorientation\ attribute" ids="id1" refuri="https://developer.android.com/guide/topics/manifest/activity-element#screen"></target></paragraph>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>If needed, disable automatic resizing / orientation configuration changes using the <reference name="android:configChanges attribute" refuri="https://developer.android.com/guide/topics/manifest/activity-element#config">android:configChanges attribute</reference><target dupnames="android:configchanges\ attribute" ids="id2" refuri="https://developer.android.com/guide/topics/manifest/activity-element#config"></target></paragraph>
                            </list_item>
                        </bullet_list>
                    </list_item>
                </bullet_list>
                <literal_block force="False" highlight_args="{}" language="xml" linenos="False" xml:space="preserve">&lt;activity android:name=".MainActivity"
    android:screenOrientation="fullUser"
    android:configChanges="orientation|screenSize|smallestScreenSize|screenLayout"
    android:exported="true"&gt;

    ...
&lt;/activity&gt;</literal_block>
            </section>
            <section ids="create-the-godot-project" names="2.\ create\ the\ godot\ project">
                <title>2. Create the Godot project</title>
                <note>
                    <paragraph>On Android, Godot's project files are exported to the <literal>assets</literal> directory of the generated <literal>apk</literal> binary.</paragraph>
                    <paragraph>We leverage that architecture to bind our Android app and Godot project together by creating the Godot project in the Android app's <literal>assets</literal> directory.</paragraph>
                    <paragraph>Note that it's also possible to create the Godot project in a separate directory and export it as a <reference name="PCK or ZIP file" refuri="https://docs.godotengine.org/en/stable/tutorials/export/exporting_projects.html#pck-versus-zip-pack-file-formats">PCK or ZIP file</reference><target ids="pck-or-zip-file" names="pck\ or\ zip\ file" refuri="https://docs.godotengine.org/en/stable/tutorials/export/exporting_projects.html#pck-versus-zip-pack-file-formats"></target>
                        to the Android app's <literal>assets</literal> directory.
                        Using this approach requires passing the <literal>--main-pack &lt;pck_or_zip_filepath_relative_to_assets_dir&gt;</literal> argument to the hosted Godot Engine instance using <reference name="GodotHost#getCommandLine()" refuri="https://github.com/godotengine/godot/blob/6916349697a4339216469e9bf5899b983d78db07/platform/android/java/lib/src/org/godotengine/godot/GodotHost.java#L45">GodotHost#getCommandLine()</reference><target ids="godothost-getcommandline" names="godothost#getcommandline()" refuri="https://github.com/godotengine/godot/blob/6916349697a4339216469e9bf5899b983d78db07/platform/android/java/lib/src/org/godotengine/godot/GodotHost.java#L45"></target>.</paragraph>
                    <paragraph>The instructions below and the sample app follow the first approach of creating the Godot project in the Android app's <literal>assets</literal> directory.</paragraph>
                </note>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>As mentioned in the <strong>note</strong> above, open the Godot Editor and create a Godot project directly (no subfolder) in the <literal>assets</literal> directory of the Android application project</paragraph>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>See the sample app's <reference name="Godot project" refuri="https://github.com/m4gr3d/Godot-Android-Samples/tree/master/apps/gltf_viewer/src/main/assets">Godot project</reference><target ids="godot-project" names="godot\ project" refuri="https://github.com/m4gr3d/Godot-Android-Samples/tree/master/apps/gltf_viewer/src/main/assets"></target> for reference</paragraph>
                            </list_item>
                        </bullet_list>
                    </list_item>
                    <list_item>
                        <paragraph>Configure the Godot project as desired</paragraph>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>Make sure the <reference name="orientation" refuri="https://docs.godotengine.org/en/stable/classes/class_projectsettings.html#class-projectsettings-property-display-window-handheld-orientation">orientation</reference><target ids="orientation" names="orientation" refuri="https://docs.godotengine.org/en/stable/classes/class_projectsettings.html#class-projectsettings-property-display-window-handheld-orientation"></target> set for the Godot project matches the one set in the Android app's manifest</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>For Android, make sure <reference name="textures/vram_compression/import_etc2_astc" refuri="https://docs.godotengine.org/en/stable/classes/class_projectsettings.html#class-projectsettings-property-rendering-textures-vram-compression-import-etc2-astc">textures/vram_compression/import_etc2_astc</reference><target ids="textures-vram-compression-import-etc2-astc" names="textures/vram_compression/import_etc2_astc" refuri="https://docs.godotengine.org/en/stable/classes/class_projectsettings.html#class-projectsettings-property-rendering-textures-vram-compression-import-etc2-astc"></target> is set to <title_reference>true</title_reference></paragraph>
                            </list_item>
                        </bullet_list>
                    </list_item>
                    <list_item>
                        <paragraph>Update the Godot project script logic as needed</paragraph>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>For the sample app, the <reference name="script logic" refuri="https://github.com/m4gr3d/Godot-Android-Samples/blob/master/apps/gltf_viewer/src/main/assets/main.gd">script logic</reference><target ids="script-logic" names="script\ logic" refuri="https://github.com/m4gr3d/Godot-Android-Samples/blob/master/apps/gltf_viewer/src/main/assets/main.gd"></target> queries for the runtime <literal>GodotPlugin</literal> instance and uses it to register for signals fired by the app logic</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>The app logic fires a signal every time an item is selected in the list. The signal contains the filepath of the GLTF model, which is used by the <literal>gdscript</literal> logic to render the model.</paragraph>
                            </list_item>
                        </bullet_list>
                        <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">extends Node3D

# Reference to the gltf model that's currently being shown.
var current_gltf_node: Node3D = null

func _ready():
  # Default asset to load when the app starts
  _load_gltf("res://gltfs/food_kit/turkey.glb")

  var appPlugin = Engine.get_singleton("AppPlugin")
  if appPlugin:
    print("App plugin is available")

    # Signal fired from the app logic to update the gltf model being shown
    appPlugin.connect("show_gltf", _load_gltf)
  else:
    print("App plugin is not available")


# Load the gltf model specified by the given path
func _load_gltf(gltf_path: String):
  if current_gltf_node != null:
    remove_child(current_gltf_node)

  current_gltf_node = load(gltf_path).instantiate()

  add_child(current_gltf_node)</literal_block>
                    </list_item>
                </bullet_list>
            </section>
            <section ids="build-and-run-the-app" names="3.\ build\ and\ run\ the\ app">
                <title>3. Build and run the app</title>
                <paragraph>Once you complete configuration of your Godot project, build and run the Android app.
                    If set up correctly, the host Activity will initialize the embedded Godot Engine on startup.
                    The Godot Engine will check the <literal>assets</literal> directory for project files to load (unless configured to look for a <literal>main pack</literal>), and will proceed to run the project.</paragraph>
                <paragraph>While the app is running on device, you can check <reference name="Android logcat" refuri="https://developer.android.com/studio/debug/logcat">Android logcat</reference><target ids="android-logcat" names="android\ logcat" refuri="https://developer.android.com/studio/debug/logcat"></target> to investigate any errors or crashes.</paragraph>
                <paragraph>For reference, check the <reference name="build and install instructions" refuri="https://github.com/m4gr3d/Godot-Android-Samples/blob/master/apps/gltf_viewer/README.md">build and install instructions</reference><target ids="build-and-install-instructions" names="build\ and\ install\ instructions" refuri="https://github.com/m4gr3d/Godot-Android-Samples/blob/master/apps/gltf_viewer/README.md"></target> for the GLTF Viewer sample app.</paragraph>
                <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
            </section>
        </section>
    </section>
</document>
