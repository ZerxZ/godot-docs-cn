<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/tutorials/platform/web/javascript_bridge.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-web-javascript-bridge"></target>
    <section ids="the-javascriptbridge-singleton doc-web-javascript-bridge" names="the\ javascriptbridge\ singleton doc_web_javascript_bridge">
        <title>The JavaScriptBridge Singleton</title>
        <paragraph>In web builds, the <reference internal="True" refuri="../../../classes/class_javascriptbridge#class-javascriptbridge"><inline classes="std std-ref">JavaScriptBridge</inline></reference> singleton
            allows interaction with JavaScript and web browsers, and can be used to implement some
            functionalities unique to the web platform.</paragraph>
        <section ids="interacting-with-javascript" names="interacting\ with\ javascript">
            <title>Interacting with JavaScript</title>
            <paragraph>Sometimes, when exporting Godot for the Web, it might be necessary to interface
                with external JavaScript code like third-party SDKs, libraries, or
                simply to access browser features that are not directly exposed by Godot.</paragraph>
            <paragraph>The <literal>JavaScriptBridge</literal> singleton provides methods to wrap a native JavaScript object into
                a Godot <reference internal="True" refuri="../../../classes/class_javascriptobject#class-javascriptobject"><inline classes="std std-ref">JavaScriptObject</inline></reference> that tries to feel
                natural in the context of Godot scripting (e.g. GDScript and C#).</paragraph>
            <paragraph>The <reference internal="True" refuri="../../../classes/class_javascriptbridge#class-javascriptbridge-method-get-interface"><inline classes="std std-ref">JavaScriptBridge.get_interface()</inline></reference>
                method retrieves an object in the global scope.</paragraph>
            <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">extends Node

func _ready():
    # Retrieve the `window.console` object.
    var console = JavaScriptBridge.get_interface("console")
    # Call the `window.console.log()` method.
    console.log("test")</literal_block>
            <paragraph>The <reference internal="True" refuri="../../../classes/class_javascriptbridge#class-javascriptbridge-method-create-object"><inline classes="std std-ref">JavaScriptBridge.create_object()</inline></reference>
                creates a new object via the JavaScript <literal>new</literal> constructor.</paragraph>
            <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">extends Node

func _ready():
    # Call the JavaScript `new` operator on the `window.Array` object.
    # Passing 10 as argument to the constructor:
    # JS: `new Array(10);`
    var arr = JavaScriptBridge.create_object("Array", 10)
    # Set the first element of the JavaScript array to the number 42.
    arr[0] = 42
    # Call the `pop` function on the JavaScript array.
    arr.pop()
    # Print the value of the `length` property of the array (9 after the pop).
    print(arr.length)</literal_block>
            <paragraph>As you can see, by wrapping JavaScript objects into <literal>JavaScriptObject</literal> you can
                interact with them like they were native Godot objects, calling their methods,
                and retrieving (or even setting) their properties.</paragraph>
            <paragraph>Base types (int, floats, strings, booleans) are automatically converted (floats
                might lose precision when converted from Godot to JavaScript). Anything else
                (i.e. objects, arrays, functions) are seen as <literal>JavaScriptObjects</literal> themselves.</paragraph>
        </section>
        <section ids="callbacks" names="callbacks">
            <title>Callbacks</title>
            <paragraph>Calling JavaScript code from Godot is nice, but sometimes you need to call a
                Godot function from JavaScript instead.</paragraph>
            <paragraph>This case is a bit more complicated. JavaScript relies on garbage collection,
                while Godot uses reference counting for memory management. This means you have
                to explicitly create callbacks (which are returned as <literal>JavaScriptObjects</literal>
                themselves) and you have to keep their reference.</paragraph>
            <paragraph>Arguments passed by JavaScript to the callback will be passed as a single Godot
                <literal>Array</literal>.</paragraph>
            <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">extends Node

# Here we create a reference to the `_my_callback` function (below).
# This reference will be kept until the node is freed.
var _callback_ref = JavaScriptBridge.create_callback(_my_callback)

func _ready():
    # Get the JavaScript `window` object.
    var window = JavaScriptBridge.get_interface("window")
    # Set the `window.onbeforeunload` DOM event listener.
    window.onbeforeunload = _callback_ref

func _my_callback(args):
    # Get the first argument (the DOM event in our case).
    var js_event = args[0]
    # Call preventDefault and set the `returnValue` property of the DOM event.
    js_event.preventDefault()
    js_event.returnValue = ''</literal_block>
            <paragraph>Here is another example that asks the user for the <reference name="Notification permission" refuri="https://developer.mozilla.org/en-US/docs/Web/API/Notifications_API">Notification permission</reference>
                and waits asynchronously to deliver a notification if the permission is
                granted:</paragraph>
            <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">extends Node

# Here we create a reference to the `_on_permissions` function (below).
# This reference will be kept until the node is freed.
var _permission_callback = JavaScriptBridge.create_callback(_on_permissions)

func _ready():
    # NOTE: This is done in `_ready` for simplicity, but SHOULD BE done in response
    # to user input instead (e.g. during `_input`, or `button_pressed` event, etc.),
    # otherwise it might not work.

    # Get the `window.Notification` JavaScript object.
    var notification = JavaScriptBridge.get_interface("Notification")
    # Call the `window.Notification.requestPermission` method which returns a JavaScript
    # Promise, and bind our callback to it.
    notification.requestPermission().then(_permission_callback)

func _on_permissions(args):
    # The first argument of this callback is the string "granted" if the permission is granted.
    var permission = args[0]
    if permission == "granted":
        print("Permission granted, sending notification.")
        # Create the notification: `new Notification("Hi there!")`
        JavaScriptBridge.create_object("Notification", "Hi there!")
    else:
        print("No notification permission.")</literal_block>
        </section>
        <section ids="can-i-use-my-favorite-library" names="can\ i\ use\ my\ favorite\ library?">
            <title>Can I use my favorite library?</title>
            <paragraph>You most likely can. First, you have to
                include your library in the page. You can simply customize the
                <reference internal="True" refuri="../../export/exporting_for_web#doc-javascript-export-options"><inline classes="std std-ref">Head Include</inline></reference> during export (see below),
                or even <reference internal="True" refuri="customizing_html5_shell#doc-customizing-html5-shell"><inline classes="std std-ref">write your own template</inline></reference>.</paragraph>
            <paragraph>In the example below, we customize the <literal>Head Include</literal> to add an external library
                (<reference name="axios" refuri="https://axios-http.com/">axios</reference>) from a content delivery network, and a
                second <literal>&lt;script&gt;</literal> tag to define our own custom function:</paragraph>
            <literal_block force="False" highlight_args="{}" language="html" linenos="False" xml:space="preserve">&lt;!-- Axios --&gt;
&lt;script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"&gt;&lt;/script&gt;
&lt;!-- Custom function --&gt;
&lt;script&gt;
function myFunc() {
    alert("My func!");
}
&lt;/script&gt;</literal_block>
            <paragraph>We can then access both the library and the function from Godot, like we did in
                previous examples:</paragraph>
            <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">extends Node

# Here create a reference to the `_on_get` function (below).
# This reference will be kept until the node is freed.
var _callback = JavaScriptBridge.create_callback(_on_get)

func _ready():
    # Get the `window` object, where globally defined functions are.
    var window = JavaScriptBridge.get_interface("window")
    # Call the JavaScript `myFunc` function defined in the custom HTML head.
    window.myFunc()
    # Get the `axios` library (loaded from a CDN in the custom HTML head).
    var axios = JavaScriptBridge.get_interface("axios")
    # Make a GET request to the current location, and receive the callback when done.
    axios.get(window.location.toString()).then(_callback)

func _on_get(args):
    OS.alert("On Get")</literal_block>
        </section>
        <section ids="the-eval-interface" names="the\ eval\ interface">
            <title>The eval interface</title>
            <paragraph>The <literal>eval</literal> method works similarly to the JavaScript function of the same
                name. It takes a string as an argument and executes it as JavaScript code.
                This allows interacting with the browser in ways not possible with script
                languages integrated into Godot.</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func my_func():
    JavaScriptBridge.eval("alert('Calling JavaScript per GDScript!');")</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">private void MyFunc()
{
    JavaScriptBridge.Eval("alert('Calling JavaScript per C#!');")
}</literal_block>
                </div>
            </container>
            <paragraph>最后一个JavaScript语句的值转换为GDScript值，并在某些情况下由 <literal>eval()</literal> 返回:</paragraph>
            <block_quote>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>JavaScript <literal>number</literal> 会以 <reference internal="True" refuri="../../../classes/class_float#class-float"><inline classes="std std-ref">float</inline></reference> 返回</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>JavaScript <literal>boolean</literal> 会以 <reference internal="True" refuri="../../../classes/class_bool#class-bool"><inline classes="std std-ref">bool</inline></reference> 返回</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>JavaScript <literal>string</literal> 会以 <reference internal="True" refuri="../../../classes/class_string#class-string"><inline classes="std std-ref">String</inline></reference> 返回</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>JavaScript <literal>ArrayBuffer</literal>, <literal>TypedArray</literal>, and <literal>DataView</literal> are returned as <reference internal="True" refuri="../../../classes/class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference></paragraph>
                    </list_item>
                </bullet_list>
            </block_quote>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-1-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-1-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-1-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func my_func2():
    var js_return = JavaScriptBridge.eval("var myNumber = 1; myNumber + 2;")
    print(js_return) # prints '3.0'</literal_block>
                </div>
                <div aria-labelledby="tab-1-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-1-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">private void MyFunc2()
{
    var jsReturn = JavaScriptBridge.Eval("var myNumber = 1; myNumber + 2;");
    GD.Print(jsReturn); // prints '3.0'
}</literal_block>
                </div>
            </container>
            <paragraph>任何其他JavaScript值都返回为 <literal>null</literal> .</paragraph>
            <paragraph>HTML5 export templates may be <reference internal="True" refuri="../../../contributing/development/compiling/compiling_for_web#doc-compiling-for-web"><inline classes="std std-ref">built</inline></reference> without
                support for the singleton to improve security. With such templates, and on
                platforms other than HTML5, calling <literal>JavaScriptBridge.eval</literal> will also return
                <literal>null</literal>. The availability of the singleton can be checked with the
                <literal>web</literal> <reference internal="True" refuri="../../export/feature_tags#doc-feature-tags"><inline classes="std std-ref">feature tag</inline></reference>:</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-2-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-2-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-2-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func my_func3():
    if OS.has_feature('web'):
        JavaScriptBridge.eval("""
            console.log('The JavaScriptBridge singleton is available')
        """)
    else:
        print("The JavaScriptBridge singleton is NOT available")</literal_block>
                </div>
                <div aria-labelledby="tab-2-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-2-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">private void MyFunc3()
{
    if (OS.HasFeature("web"))
    {
        JavaScriptBridge.Eval("console.log('The JavaScriptBridge singleton is available')");
    }
    else
    {
        GD.Print("The JavaScriptBridge singleton is NOT available");
    }
}</literal_block>
                </div>
            </container>
            <tip>
                <paragraph>GDScript中的多行字符串由3双引号 <literal>"""</literal> 包围, 如同上文中的 <literal>my_func3()</literal> 那样, 有助于保证JavaScript代码的可读性.</paragraph>
            </tip>
            <paragraph>The <literal>eval</literal> method also accepts a second, optional Boolean argument, which
                specifies whether to execute the code in the global execution context,
                defaulting to <literal>false</literal> to prevent polluting the global namespace:</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-3-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-3-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-3-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-3-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-3-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-3-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func my_func4():
    # execute in global execution context,
    # thus adding a new JavaScript global variable `SomeGlobal`
    JavaScriptBridge.eval("var SomeGlobal = {};", true)</literal_block>
                </div>
                <div aria-labelledby="tab-3-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-3-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">private void MyFunc4()
{
    // execute in global execution context,
    // thus adding a new JavaScript global variable `SomeGlobal`
    JavaScriptBridge.Eval("var SomeGlobal = {};", true);
}</literal_block>
                </div>
            </container>
            <target refid="doc-web-downloading-files"></target>
        </section>
        <section ids="downloading-files doc-web-downloading-files" names="downloading\ files doc_web_downloading_files">
            <title>Downloading files</title>
            <paragraph>Downloading files (e.g. a save game) from the Godot Web export to the user's computer can be done by directly interacting with JavaScript, but given it is a
                very common use case, Godot exposes this functionality to scripting via
                a dedicated <reference internal="True" refuri="../../../classes/class_javascriptbridge#class-javascriptbridge-method-download-buffer"><inline classes="std std-ref">JavaScriptBridge.download_buffer()</inline></reference>
                function which lets you download any generated buffer.</paragraph>
            <paragraph>Here is a minimal example on how to use it:</paragraph>
            <paragraph>extends Node</paragraph>
            <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func _ready():
    # Asks the user download a file called "hello.txt" whose content will be the string "Hello".
    JavaScriptBridge.download_buffer("Hello".to_utf8_buffer(), "hello.txt")</literal_block>
            <paragraph>And here is a more complete example on how to download a previously saved file:</paragraph>
            <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">extends Node

# Open a file for reading and download it via the JavaScript singleton.
func _download_file(path):
    var file = FileAccess.open(path, FileAccess.READ)
    if file == null:
        push_error("Failed to load file")
        return
    # Get the file name.
    var fname = path.get_file()
    # Read the whole file to memory.
    var buffer = file.get_buffer(file.get_len())
    # Prompt the user to download the file (will have the same name as the input file).
    JavaScriptBridge.download_buffer(buffer, fname)

func _ready():
    # Create a temporary file.
    var config = ConfigFile.new()
    config.set_value("option", "one", false)
    config.save("/tmp/test.cfg")

    # Download it
    _download_file("/tmp/test.cfg")</literal_block>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
