<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/tutorials/platform/ios/ios_plugin.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-ios-plugin"></target>
    <section ids="creating-ios-plugins doc-ios-plugin" names="creating\ ios\ plugins 创建\ ios\ 插件 doc_ios_plugin">
        <title>创建 iOS 插件</title>
        <paragraph>本页说明 iOS 插件可以为你做什么、如何使用现有的插件、以及编写新插件的步骤。</paragraph>
        <paragraph>iOS 插件允许你使用第三方库，并支持 iOS 特定功能，如应用内购买、GameCenter 集成、ARKit 支持等。</paragraph>
        <section ids="loading-and-using-an-existing-plugin" names="loading\ and\ using\ an\ existing\ plugin 加载和使用现有的插件">
            <title>加载和使用现有的插件</title>
            <paragraph>一个iOS插件需要一个 <literal>.gdip</literal> 配置文件, 一个二进制文件, 它可以是 <literal>.a</literal> 静态库, 也可以是 <literal>.xcframework</literal> 包含 <literal>.a</literal> 静态库, 可能还有其他依赖关系. 要使用它, 你需要:</paragraph>
            <enumerated_list enumtype="arabic" prefix="" suffix=".">
                <list_item>
                    <paragraph>将插件的文件复制到Godot项目的 <literal>res://ios/plugins</literal> 目录中. 你也可以将文件分组在一个子目录中, 比如 <literal>res://ios/plugins/my_plugin</literal> .</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Godot编辑器自动检测并导入 <literal>res://ios/plugins</literal> 及其子目录中的 <literal>.gdip</literal> 文件.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>你可以通过进入项目-&gt;导出... -&gt;iOS, 在选项卡中, 滚动到插件部分, 找到并激活检测到的插件.</paragraph>
                </list_item>
            </enumerated_list>
            <image candidates="{'*': 'tutorials/platform/ios/img/ios_export_preset_plugins_section.png'}" uri="tutorials/platform/ios/img/ios_export_preset_plugins_section.png"></image>
            <paragraph>当插件处于活动状态时，你可以使用 <literal>Engine.get_singleton()</literal> 访问插件：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">if Engine.has_singleton("MyPlugin"):
    var singleton = Engine.get_singleton("MyPlugin")
    print(singleton.foo())</literal_block>
            <note>
                <paragraph>The plugin's files have to be in the <literal>res://ios/plugins/</literal> directory or a subdirectory, otherwise the Godot editor will not automatically detect them.</paragraph>
            </note>
        </section>
        <section ids="creating-an-ios-plugin" names="creating\ an\ ios\ plugin 创建ios插件">
            <title>创建iOS插件</title>
            <paragraph>Godot iOS插件的核心是一个iOS库( <emphasis>.a</emphasis> 档文件或 <emphasis>.xcframework</emphasis> 包含静态库), 其要求如下:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>该库必须依赖Godot引擎头文件.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>该库必须附带一个 <literal>.gdip</literal> 配置文件.</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>一个iOS插件可以拥有与Godot模块相同的功能, 但提供了更多的灵活性, 并且不需要重新构建引擎.</paragraph>
            <paragraph>下面是开始开发插件的步骤. 我们建议使用 <reference name="Xcode" refuri="https://developer.apple.com/develop/">Xcode</reference><target ids="xcode" names="xcode" refuri="https://developer.apple.com/develop/"></target> 作为你的开发环境.</paragraph>
            <seealso>
                <paragraph><reference name="Godot iOS 插件" refuri="https://github.com/godotengine/godot-ios-plugins">Godot iOS 插件</reference><target ids="godot-ios" names="godot\ ios\ 插件" refuri="https://github.com/godotengine/godot-ios-plugins"></target>。</paragraph>
                <paragraph><reference name="Godot iOS 插件模板" refuri="https://github.com/naithar/godot_ios_plugin">Godot iOS 插件模板</reference><target ids="godot-ios" names="godot\ ios\ 插件模板" refuri="https://github.com/naithar/godot_ios_plugin"></target> 为你提供了启动iOS插件所需的所有样板.</paragraph>
            </seealso>
            <paragraph>要构建一个iOS插件:</paragraph>
            <enumerated_list enumtype="arabic" prefix="" suffix=".">
                <list_item>
                    <paragraph>在Xcode中为你的插件创建一个Objective-C静态库.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>在 <literal>HEADER_SEARCH_PATHS</literal> 中添加Godot引擎头文件作为插件库的依赖. 你可以在 <literal>Build Settings</literal> 选项卡中找到这个设置:</paragraph>
                    <block_quote>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>从 <reference name="Godot GitHub 页面" refuri="https://github.com/godotengine/godot">Godot GitHub 页面</reference><target ids="godot-github" names="godot\ github\ 页面" refuri="https://github.com/godotengine/godot"></target>下载 Godot 引擎的源代码。</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>运行SCons来生成头文件. 通过阅读 <reference internal="True" refuri="../../../contributing/development/compiling/compiling_for_ios#doc-compiling-for-ios"><inline classes="std std-ref">为 iOS 平台编译</inline></reference> 来了解这个过程. 不需要等待编译完成就可以继续, 因为在引擎开始编译之前就会生成头文件.</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>你应该为iOS插件和iOS导出模板使用相同的头文件.</paragraph>
                            </list_item>
                        </bullet_list>
                    </block_quote>
                </list_item>
                <list_item>
                    <paragraph>在 <literal>Build Settings</literal> 选项卡的 <literal>OTHER_CFLAGS</literal> 中指定静态库的编译选项。最重要的是 <literal>-fcxx-modules</literal> 和 <literal>-fmodules</literal>，如果你需要支持调试就还有 <literal>-DDEBUG</literal>。其他选项应该和你编译 Godot 时使用的一样。例如：</paragraph>
                </list_item>
            </enumerated_list>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">-DPTRCALL_ENABLED -DDEBUG_ENABLED -DDEBUG_MEMORY_ALLOC -DDISABLE_FORCED_INLINE -DTYPED_METHOD_BIND</literal_block>
            <enumerated_list enumtype="arabic" prefix="" start="4" suffix=".">
                <list_item>
                    <paragraph>为你的插件添加所需的逻辑, 并建立你的库以生成一个 <literal>.a</literal> 文件. 你可能需要同时建立 <literal>debug</literal> 和 <literal>release</literal> 目标 <literal>.a</literal> 文件. 根据你的需要, 选择其中一个或两个. 如果你同时需要调试和发布 <literal>.a</literal> 文件, 它们的名字应该符合以下模式: <literal>[PluginName].[TargetType].a</literal> . 你也可以用SCons配置来构建静态库.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>iOS 插件系统也支持 <literal>.xcframework</literal> 文件。你可以用类似这样的命令来生成它：</paragraph>
                </list_item>
            </enumerated_list>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">xcodebuild -create-xcframework -library [DeviceLibrary].a -library [SimulatorLibrary].a -output [PluginName].xcframework</literal_block>
            <enumerated_list enumtype="arabic" prefix="" start="6" suffix=".">
                <list_item>
                    <paragraph>创建一个Godot iOS插件配置文件, 以帮助系统检测和加载你的插件:</paragraph>
                    <block_quote>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>配置文件的扩展名必须是 <literal>gdip</literal> (e.g.: <literal>MyPlugin.gdip</literal> ).</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>配置文件格式如下：</paragraph>
                                <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">[config]
name="MyPlugin"
binary="MyPlugin.a"

initialization="init_my_plugin"
deinitialization="deinit_my_plugin"

[dependencies]
linked=[]
embedded=[]
system=["Foundation.framework"]

capabilities=["arkit", "metal"]

files=["data.json"]

linker_flags=["-ObjC"]

[plist]
PlistKeyWithDefaultType="Some Info.plist key you might need"
StringPlistKey:string="String value"
IntegerPlistKey:integer=42
BooleanPlistKey:boolean=true
RawPlistKey:raw="
&lt;array&gt;
    &lt;string&gt;UIInterfaceOrientationPortrait&lt;/string&gt;
&lt;/array&gt;
"
StringPlistKeyToInput:string_input="Type something"</literal_block>
                                <paragraph><literal>config</literal> 部分和字段是必须的, 定义如下:</paragraph>
                                <block_quote>
                                    <bullet_list bullet="-">
                                        <list_item>
                                            <paragraph><strong>name</strong>：插件的名称</paragraph>
                                        </list_item>
                                        <list_item>
                                            <paragraph><strong>binary</strong> : 这应该是插件库( <literal>a</literal> 或 <literal>xcframework</literal> )文件的路径.</paragraph>
                                            <bullet_list bullet="-">
                                                <list_item>
                                                    <paragraph>文件路径可以是相对的(例如: <literal>MyPlugin.a</literal> , <literal>MyPlugin.xcframework</literal> ), 在这种情况下, 它是相对于 <literal>gdip</literal> 文件所在的目录.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph>文件路径可以是绝对的: <literal>res://some_path/MyPlugin.a</literal> 或 <literal>res://some_path/MyPlugin.xcframework</literal> .</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph>如果你需要多目标库使用, 文件名应该是 <literal>MyPlugin.a</literal> , <literal>.a</literal> 文件应该命名为 <literal>MyPlugin.release.a</literal> 和 <literal>MyPlugin.debug.a</literal> .</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph>如果你使用多目标库 <literal>xcframework</literal> , 它们在配置中的文件名应该是 <literal>MyPlugin.xcframework</literal>. <literal>.xcframework</literal> 文件应该被命名为 <literal>MyPlugin.release.xcframework</literal> 和 <literal>MyPlugin.debug.xcframework</literal> .</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </list_item>
                                    </bullet_list>
                                </block_quote>
                                <paragraph><literal>dependencies</literal> 和 <literal>plist</literal> 部分是可选的, 定义如下:</paragraph>
                                <block_quote>
                                    <bullet_list bullet="-">
                                        <list_item>
                                            <paragraph><strong>依赖</strong> :</paragraph>
                                            <bullet_list bullet="-">
                                                <list_item>
                                                    <paragraph><strong>linked(链接)</strong> : 包含iOS应用应该包含的iOS框架列表.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><strong>embedded</strong> : 嵌入包含一个iOS框架或库的列表, 这些框架或库将被链接并嵌入到最终的iOS应用程序中.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><strong>system</strong> : 包含插件所需的iOS系统框架的列表.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><strong>capabilities(功能)</strong> : 包含插件所需的iOS功能列表, 可用功能列表可以在 <reference name="Apple UIRequiredDeviceCapabilities documentation page" refuri="https://developer.apple.com/documentation/bundleresources/information_property_list/uirequireddevicecapabilities">Apple UIRequiredDeviceCapabilities documentation page</reference><target ids="apple-uirequireddevicecapabilities-documentation-page" names="apple\ uirequireddevicecapabilities\ documentation\ page" refuri="https://developer.apple.com/documentation/bundleresources/information_property_list/uirequireddevicecapabilities"></target> 找到.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><strong>files(文件)</strong> : 包含导出时应复制的文件列表. 这对数据文件或图像很有用.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><strong>linker_flags</strong> : 包含一个链接器标志的列表, 在导出插件时添加到Xcode项目中.</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </list_item>
                                        <list_item>
                                            <paragraph><strong>plist</strong>: 应该有键和值，应该存在于 <literal>Info.plist</literal> 文件中。</paragraph>
                                            <bullet_list bullet="-">
                                                <list_item>
                                                    <paragraph>每行应遵循模式: <literal>KeyName:KeyType=KeyValue</literal></paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph><literal>KeyType</literal> 支持的值是 <literal>string</literal>, <literal>integer</literal>, <literal>boolean</literal>, <literal>raw</literal>, <literal>string_input</literal></paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph>如果没有使用类型，例如: <literal>KeyName="KeyValue"</literal> ，将使用 <literal>string</literal> 类型。</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph>If <literal>raw</literal> type is used value for corresponding key will be stored in <literal>Info.plist</literal> as is.</paragraph>
                                                </list_item>
                                                <list_item>
                                                    <paragraph>如果使用 <literal>string_input</literal> 类型，你将能够在导出窗口中修改值。</paragraph>
                                                </list_item>
                                            </bullet_list>
                                        </list_item>
                                    </bullet_list>
                                </block_quote>
                            </list_item>
                        </bullet_list>
                    </block_quote>
                </list_item>
            </enumerated_list>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
