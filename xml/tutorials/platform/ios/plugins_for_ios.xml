<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/tutorials/platform/ios/plugins_for_ios.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-plugins-for-ios"></target>
    <section ids="plugins-for-ios doc-plugins-for-ios" names="plugins\ for\ ios ios\ 的插件 doc_plugins_for_ios">
        <title>iOS 的插件</title>
        <paragraph>Godot 提供了 StoreKit、GameCenter、iCloud 服务等插件。它们使用下面解释的相同异步调用模型。</paragraph>
        <paragraph>ARKit和Camera访问也作为插件提供.</paragraph>
        <paragraph>最新的更新、文档和源代码可以在Godot iOS插件库找到 <reference name="Godot iOS plugins repository" refuri="https://github.com/godotengine/godot-ios-plugins">Godot iOS plugins repository</reference><target ids="godot-ios-plugins-repository" names="godot\ ios\ plugins\ repository" refuri="https://github.com/godotengine/godot-ios-plugins"></target></paragraph>
        <section ids="accessing-plugin-singletons" names="accessing\ plugin\ singletons 访问插件单例">
            <title>访问插件单例</title>
            <paragraph>要访问插件功能, 首先需要通过调用 <title_reference>Engine.has_singleton()</title_reference> 函数来检查插件是否导出并可用, 该函数会返回一个注册的单例.</paragraph>
            <paragraph>下面是一个如何在GDScript中做到这一点的例子:</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var in_app_store
var game_center

func _ready():
    if Engine.has_singleton("InAppStore"):
        in_app_store = Engine.get_singleton("InAppStore")
    else:
        print("iOS IAP plugin is not available on this platform.")

    if Engine.has_singleton("GameCenter"):
        game_center = Engine.get_singleton("GameCenter")
    else:
        print("iOS Game Center plugin is not available on this platform.")</literal_block>
        </section>
        <section ids="asynchronous-methods" names="asynchronous\ methods 异步方法">
            <title>异步方法</title>
            <paragraph>请求异步操作时, 方法如下所示:</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">Error purchase(Variant params);</literal_block>
            <paragraph>参数通常是一个字典，包含发出请求所需的信息，并且调用将有两个阶段。首先，该方法将立即返回 Error 值。如果这个 Error 不是“OK”，则调用操作完成，可能在本地引起错误（没有网络连接、API 配置不正确等）。如果错误值是“OK”，则会生成响应事件并将其添加到“挂起事件”队列中。例如：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">func on_purchase_pressed():
    var result = in_app_store.purchase({ "product_id": "my_product" })
    if result == OK:
        animation.play("busy") # show the "waiting for response" animation
    else:
        show_error()

# put this on a 1 second timer or something
func check_events():
    while in_app_store.get_pending_event_count() &gt; 0:
        var event = in_app_store.pop_pending_event()
        if event.type == "purchase":
            if event.result == "ok":
                show_success(event.product_id)
            else:
                show_error()</literal_block>
            <paragraph>请记住，当一个调用返回 OK 时，API 将<emphasis>始终</emphasis>通过 pending_event 接口产生一个事件，即使它是一个错误，或网络超时等。你应该能够，例如，安全地阻止等待的接口来自服务器的回复。如果任何 API 不以这种方式运行，则应将其视为错误。</paragraph>
            <paragraph>挂起事件接口包含两个方法：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><literal>get_pending_event_count()</literal> 返回队列中挂起事件的数量。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>Variant pop_pending_event()</literal> 弹出队列中的第一个事件并返回它。</paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section ids="store-kit" names="store\ kit">
            <title>Store Kit</title>
            <paragraph>实现在 <reference name="Godot iOS InAppStore 插件" refuri="https://github.com/godotengine/godot-ios-plugins/blob/master/plugins/inappstore/in_app_store.mm">Godot iOS InAppStore 插件</reference><target ids="godot-ios-inappstore" names="godot\ ios\ inappstore\ 插件" refuri="https://github.com/godotengine/godot-ios-plugins/blob/master/plugins/inappstore/in_app_store.mm"></target> .</paragraph>
            <paragraph>Store Kit API 可通过 <literal>InAppStore</literal> 单例访问。它是自动初始化的。</paragraph>
            <paragraph>提供了以下方法，文档如下：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">   Error purchase(Variant params)
   Error request_product_info(Variant params)
   Error restore_purchases()
   void set_auto_finish_transaction(bool enable)
   void finish_transaction(String product_id)

and the pending events interface:

::

   int get_pending_event_count()
   Variant pop_pending_event()</literal_block>
            <section ids="purchase" names="purchase">
                <title><literal>purchase</literal></title>
                <paragraph>通过 Store Kit API 购买一个产品 ID。你需要在收到成功响应后调用 <literal>finish_transaction(product_id)</literal>，或者在调用 <literal>purchase()</literal> 之前调用 <literal>set_auto_finish_transaction(true)</literal>。这两个方法确保事务完成。</paragraph>
                <section dupnames="parameters" ids="parameters" names="参数">
                    <title>参数</title>
                    <paragraph>参数是一个字典，包含一个 <literal>product_id</literal> 字段，是你的商品的字符串 ID。例子：</paragraph>
                    <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var result = in_app_store.purchase({ "product_id": "my_product" })</literal_block>
                </section>
                <section dupnames="response\ event" ids="response-event" names="响应事件">
                    <title>响应事件</title>
                    <paragraph>响应事件将是包含以下字段的字典：</paragraph>
                    <paragraph>出错时：</paragraph>
                    <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">{
  "type": "purchase",
  "result": "error",
  "product_id": "the product ID requested",
}</literal_block>
                    <paragraph>成功时：</paragraph>
                    <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">{
  "type": "purchase",
  "result": "ok",
  "product_id": "the product ID requested",
}</literal_block>
                </section>
            </section>
            <section ids="request-product-info" names="request_product_info">
                <title><literal>request_product_info</literal></title>
                <paragraph>在产品ID列表中请求产品信息.</paragraph>
                <section dupnames="parameters" ids="id1" names="参数">
                    <title>参数</title>
                    <paragraph>参数为字典，只有一个字段 <literal>product_ids</literal>，是产品 ID 字符串的数组。例如：</paragraph>
                    <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var result = in_app_store.request_product_info({ "product_ids": ["my_product1", "my_product2"] })</literal_block>
                </section>
                <section dupnames="response\ event" ids="id2" names="响应事件">
                    <title>响应事件</title>
                    <paragraph>响应事件将是包含以下字段的字典：</paragraph>
                    <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">{
  "type": "product_info",
  "result": "ok",
  "invalid_ids": [ list of requested IDs that were invalid ],
  "ids": [ list of IDs that were valid ],
  "titles": [ list of valid product titles (corresponds with list of valid IDs) ],
  "descriptions": [ list of valid product descriptions ],
  "prices": [ list of valid product prices ],
  "localized_prices": [ list of valid product localized prices ],
}</literal_block>
                </section>
            </section>
            <section ids="restore-purchases" names="restore_purchases">
                <title><literal>restore_purchases</literal></title>
                <paragraph>恢复用户账户之前完成的购买。会为每一个之前购买过的产品 ID 创建响应事件。</paragraph>
                <section dupnames="response\ event" ids="id3" names="响应事件">
                    <title>响应事件</title>
                    <paragraph>响应事件将是包含以下字段的字典：</paragraph>
                    <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">{
  "type": "restore",
  "result": "ok",
  "product_id": "product ID of restored purchase",
}</literal_block>
                </section>
            </section>
            <section ids="set-auto-finish-transaction" names="set_auto_finish_transaction">
                <title><literal>set_auto_finish_transaction</literal></title>
                <paragraph>设为 <literal>true</literal> 时，一旦购买成功，就会自动结束购买。请在调用 <literal>purchase()</literal> 前调用本方法。</paragraph>
                <section dupnames="parameters" ids="id4" names="参数">
                    <title>参数</title>
                    <paragraph>参数为布尔值，表示购买是否应该自动结束。例如：</paragraph>
                    <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">in_app_store.set_auto_finish_transaction(true)</literal_block>
                </section>
            </section>
            <section ids="finish-transaction" names="finish_transaction">
                <title><literal>finish_transaction</literal></title>
                <paragraph>如果你不希望自动结束交易事务，请在接收到成功购买响应后调用本方法。</paragraph>
                <section dupnames="parameters" ids="id5" names="参数">
                    <title>参数</title>
                    <paragraph>参数 <literal>product_id</literal> 是一个字符串。<literal>product_id</literal> 表示需要结束购买的产品。例如：</paragraph>
                    <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">in_app_store.finish_transaction("my_product1")</literal_block>
                </section>
            </section>
        </section>
        <section ids="game-center" names="game\ center 游戏中心">
            <title>游戏中心</title>
            <paragraph>在 <reference name="Godot iOS GameCenter 插件" refuri="https://github.com/godotengine/godot-ios-plugins/blob/master/plugins/gamecenter/game_center.mm">Godot iOS GameCenter 插件</reference><target ids="godot-ios-gamecenter" names="godot\ ios\ gamecenter\ 插件" refuri="https://github.com/godotengine/godot-ios-plugins/blob/master/plugins/gamecenter/game_center.mm"></target>中实现。</paragraph>
            <paragraph>The Game Center API is available through the <literal>GameCenter</literal> singleton. It
                has the following methods:</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">Error authenticate()
bool is_authenticated()
Error post_score(Variant score)
Error award_achievement(Variant params)
void reset_achievements()
void request_achievements()
void request_achievement_descriptions()
Error show_game_center(Variant params)
Error request_identity_verification_signature()</literal_block>
            <paragraph>以及未决事件接口：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">int get_pending_event_count()
Variant pop_pending_event()</literal_block>
            <section ids="authenticate" names="authenticate">
                <title><literal>authenticate</literal></title>
                <paragraph>在游戏中心对用户进行身份验证.</paragraph>
                <section dupnames="response\ event" ids="id6" names="响应事件">
                    <title>响应事件</title>
                    <paragraph>响应事件将是包含以下字段的字典：</paragraph>
                    <paragraph>出错时：</paragraph>
                    <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">{
  "type": "authentication",
  "result": "error",
  "error_code": the value from NSError::code,
  "error_description": the value from NSError::localizedDescription,
}</literal_block>
                    <paragraph>成功时：</paragraph>
                    <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">{
  "type": "authentication",
  "result": "ok",
  "player_id": the value from GKLocalPlayer::playerID,
}</literal_block>
                </section>
            </section>
            <section ids="post-score" names="post_score">
                <title><literal>post_score</literal></title>
                <paragraph>将分数发布到游戏中心排行榜.</paragraph>
                <section dupnames="parameters" ids="id7" names="参数">
                    <title>参数</title>
                    <paragraph>参数为一个字典，有两个字段：</paragraph>
                    <bullet_list bullet="-">
                        <list_item>
                            <paragraph><literal>score</literal> 浮点数</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><literal>category</literal> 表示类别名称的字符串</paragraph>
                        </list_item>
                    </bullet_list>
                    <paragraph>示例：</paragraph>
                    <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var result = game_center.post_score({ "score": 100, "category": "my_leaderboard", })</literal_block>
                </section>
                <section dupnames="response\ event" ids="id8" names="响应事件">
                    <title>响应事件</title>
                    <paragraph>响应事件将是包含以下字段的字典：</paragraph>
                    <paragraph>出错时：</paragraph>
                    <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">{
  "type": "post_score",
  "result": "error",
  "error_code": the value from NSError::code,
  "error_description": the value from NSError::localizedDescription,
}</literal_block>
                    <paragraph>成功时：</paragraph>
                    <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">{
  "type": "post_score",
  "result": "ok",
}</literal_block>
                </section>
            </section>
            <section ids="award-achievement" names="award_achievement">
                <title><literal>award_achievement</literal></title>
                <paragraph>修改游戏中心成就的进度.</paragraph>
                <section dupnames="parameters" ids="id9" names="参数">
                    <title>参数</title>
                    <paragraph>将Dictionary作为参数, 包含3个字段:</paragraph>
                    <bullet_list bullet="-">
                        <list_item>
                            <paragraph><literal>name</literal>（字符串）成就名称</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><literal>progress</literal>（float）成就进度从 0.0 到 100.0（传递给 <literal>GKAchievement :: percentComplete</literal>）</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><literal>show_completion_banner</literal>（bool）游戏中心是否应该在屏幕顶部显示成就横幅</paragraph>
                        </list_item>
                    </bullet_list>
                    <paragraph>示例：</paragraph>
                    <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var result = award_achievement({ "name": "hard_mode_completed", "progress": 6.1 })</literal_block>
                </section>
                <section dupnames="response\ event" ids="id10" names="响应事件">
                    <title>响应事件</title>
                    <paragraph>响应事件将是包含以下字段的字典：</paragraph>
                    <paragraph>出错时：</paragraph>
                    <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">{
  "type": "award_achievement",
  "result": "error",
  "error_code": the error code taken from NSError::code,
}</literal_block>
                    <paragraph>成功时：</paragraph>
                    <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">{
  "type": "award_achievement",
  "result": "ok",
}</literal_block>
                </section>
            </section>
            <section ids="reset-achievements" names="reset_achievements">
                <title><literal>reset_achievements</literal></title>
                <paragraph>清除所有 Game Center 成就。该函数不带参数。</paragraph>
                <section dupnames="response\ event" ids="id11" names="响应事件">
                    <title>响应事件</title>
                    <paragraph>响应事件将是包含以下字段的字典：</paragraph>
                    <paragraph>出错时：</paragraph>
                    <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">{
  "type": "reset_achievements",
  "result": "error",
  "error_code": the value from NSError::code,
}</literal_block>
                    <paragraph>成功时：</paragraph>
                    <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">{
  "type": "reset_achievements",
  "result": "ok",
}</literal_block>
                </section>
            </section>
            <section ids="request-achievements" names="request_achievements">
                <title><literal>request_achievements</literal></title>
                <paragraph>请求游戏角色取得进步的所有游戏中心成就. 该函数不带参数.</paragraph>
                <section dupnames="response\ event" ids="id12" names="响应事件">
                    <title>响应事件</title>
                    <paragraph>响应事件将是包含以下字段的字典：</paragraph>
                    <paragraph>出错时：</paragraph>
                    <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">{
  "type": "achievements",
  "result": "error",
  "error_code": the value from NSError::code,
}</literal_block>
                    <paragraph>成功时：</paragraph>
                    <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">{
  "type": "achievements",
  "result": "ok",
  "names": [ list of the name of each achievement ],
  "progress": [ list of the progress made on each achievement ],
}</literal_block>
                </section>
            </section>
            <section ids="request-achievement-descriptions" names="request_achievement_descriptions">
                <title><literal>request_achievement_descriptions</literal></title>
                <paragraph>无论进度如何, 都要求描述所有现有的Game Center成就. 该函数不带参数.</paragraph>
                <section dupnames="response\ event" ids="id13" names="响应事件">
                    <title>响应事件</title>
                    <paragraph>响应事件将是包含以下字段的字典：</paragraph>
                    <paragraph>出错时：</paragraph>
                    <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">{
  "type": "achievement_descriptions",
  "result": "error",
  "error_code": the value from NSError::code,
}</literal_block>
                    <paragraph>成功时：</paragraph>
                    <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">{
  "type": "achievement_descriptions",
  "result": "ok",
  "names": [ list of the name of each achievement ],
  "titles": [ list of the title of each achievement ],
  "unachieved_descriptions": [ list of the description of each achievement when it is unachieved ],
  "achieved_descriptions": [ list of the description of each achievement when it is achieved ],
  "maximum_points": [ list of the points earned by completing each achievement ],
  "hidden": [ list of booleans indicating whether each achievement is initially visible ],
  "replayable": [ list of booleans indicating whether each achievement can be earned more than once ],
}</literal_block>
                </section>
            </section>
            <section ids="show-game-center" names="show_game_center">
                <title><literal>show_game_center</literal></title>
                <paragraph>显示内置的游戏中心叠加层, 显示排行榜, 成就和挑战.</paragraph>
                <section dupnames="parameters" ids="id14" names="参数">
                    <title>参数</title>
                    <paragraph>将Dictionary作为参数, 包含两个字段:</paragraph>
                    <bullet_list bullet="-">
                        <list_item>
                            <paragraph><literal>view</literal>（字符串）（可选）要呈现的视图的名称。接受“default”（默认）“leaderboards”（排行榜）“achievements”（成就）“challenges”（挑战）。默认为“default”。</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph><literal>leaderboard_name</literal>（字符串）（可选）要显示的排行榜的名称。仅在“view”为“leaderboards”（或“default”被配置为显示排行榜）时使用。如果未指定，Game Center 将显示聚合排行榜。</paragraph>
                        </list_item>
                    </bullet_list>
                    <paragraph>示例：</paragraph>
                    <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var result = show_game_center({ "view": "leaderboards", "leaderboard_name": "best_time_leaderboard" })
var result = show_game_center({ "view": "achievements" })</literal_block>
                </section>
                <section dupnames="response\ event" ids="id15" names="响应事件">
                    <title>响应事件</title>
                    <paragraph>响应事件将是包含以下字段的字典：</paragraph>
                    <paragraph>关闭时：</paragraph>
                    <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">{
  "type": "show_game_center",
  "result": "ok",
}</literal_block>
                    <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
                </section>
            </section>
        </section>
    </section>
</document>
