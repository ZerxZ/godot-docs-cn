<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/tutorials/2d/2d_transforms.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-viewport-and-canvas-transforms"></target>
    <section ids="viewport-and-canvas-transforms doc-viewport-and-canvas-transforms" names="viewport\ and\ canvas\ transforms 视口变换与画布变换 doc_viewport_and_canvas_transforms">
        <title>视口变换与画布变换</title>
        <section ids="introduction" names="introduction 前言">
            <title>前言</title>
            <paragraph>本文简要介绍了从本地绘制节点内容开始到这些内容绘制到屏幕上为止的 2D 变换过程，对引擎非常底层的细节进行了讨论。</paragraph>
            <paragraph>本教程的目标是介绍如何为提供给 Input 的输入事件在正确的坐标系中确定位置。</paragraph>
            <paragraph>关于所有坐标系以及 2D 变换的详尽描述见 <reference internal="True" refuri="../../contributing/development/core_and_modules/2d_coordinate_systems#doc-2d-coordinate-systems"><inline classes="std std-ref">2D 坐标系与 2D 变换</inline></reference>。</paragraph>
        </section>
        <section ids="canvas-transform" names="canvas\ transform 画布变换">
            <title>画布变换</title>
            <paragraph>正如前面教程 <reference internal="True" refuri="canvas_layers#doc-canvas-layers"><inline classes="std std-ref">画布层</inline></reference> 中提到的那样，每个 CanvasItem 节点（要记得 Node2D 和基于 Control 的节点都使用 CanvasItem 作为它们的公共根）将驻留在 <emphasis>Canvas Layer</emphasis> 中。每个 Canvas Layer 都有一个变换（平移、旋转、缩放等），可以作为 <reference internal="True" refuri="../../classes/class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference> 进行访问。</paragraph>
            <paragraph>在前面的教程中也有介绍，节点默认是在 0 层上绘制，即内置的画布。如果要把节点放在不同的层中，可以使用 <reference internal="True" refuri="../../classes/class_canvaslayer#class-canvaslayer"><inline classes="std std-ref">CanvasLayer</inline></reference> 节点。</paragraph>
        </section>
        <section ids="global-canvas-transform" names="global\ canvas\ transform 全局画布变换">
            <title>全局画布变换</title>
            <paragraph>Viewport 还具有全局画布变换（也是一个 <reference internal="True" refuri="../../classes/class_transform2d#class-transform2d"><inline classes="std std-ref">Transform2D</inline></reference>）。这是一个能够影响所有<emphasis>画布层</emphasis>的主变换。一般而言，主要用于 Godot 的 CanvasItem 编辑器。</paragraph>
        </section>
        <section ids="stretch-transform" names="stretch\ transform 拉伸变换">
            <title>拉伸变换</title>
            <paragraph>最后，Viewport 有<emphasis>拉伸变换</emphasis>，用于调整大小或拉伸屏幕。此变换在内部使用（见 <reference internal="True" refuri="../rendering/multiple_resolutions#doc-multiple-resolutions"><inline classes="std std-ref">多分辨率</inline></reference>），但也可以在每个 Viewport 上手动设置。</paragraph>
            <paragraph>输入事件会与这个变换相乘，但还缺少前面说的那些。为了方便将 InputEvent 的坐标转换到 CanvasItem 局部坐标，添加了 <reference internal="True" refuri="../../classes/class_canvasitem#class-canvasitem-method-make-input-local"><inline classes="std std-ref">CanvasItem.make_input_local()</inline></reference> 函数。</paragraph>
        </section>
        <section ids="window-transform" names="window\ transform 窗口变换">
            <title>窗口变换</title>
            <paragraph>根视口是一个 <reference internal="True" refuri="../../classes/class_window#class-window"><inline classes="std std-ref">Window</inline></reference>。为了能够像 <reference internal="True" refuri="../rendering/multiple_resolutions#doc-multiple-resolutions"><inline classes="std std-ref">多分辨率</inline></reference> 中一样将<emphasis>窗口</emphasis>的内容进行缩放和移动，每个 <reference internal="True" refuri="../../classes/class_window#class-window"><inline classes="std std-ref">Window</inline></reference> 都包含了<emphasis>窗口变换</emphasis>。例如在 <emphasis>Viewport</emphasis> 使用固定长宽比显示时，负责<emphasis>窗口</emphasis>边缘的黑框。</paragraph>
        </section>
        <section ids="transform-order" names="transform\ order 变换顺序">
            <title>变换顺序</title>
            <paragraph>要将 CanvasItem 本地坐标转换为实际屏幕坐标，必须应用以下变换链：</paragraph>
            <image candidates="{'*': 'tutorials/2d/img/viewport_transforms3.webp'}" uri="tutorials/2d/img/viewport_transforms3.webp"></image>
        </section>
        <section ids="transform-functions" names="transform\ functions 变换函数">
            <title>变换函数</title>
            <paragraph>上图显示了一些可用的变换函数。所有变换都是从右向左的，这意味着将一个变换与一个坐标相乘会得到一个更靠左的坐标系，将一个变换的 <reference internal="True" refuri="../../classes/class_transform2d#class-transform2d-method-affine-inverse"><inline classes="std std-ref">affine inverse</inline></reference> 相乘会得到一个更靠右的坐标系：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve"># Called from a CanvasItem.
canvas_pos = get_global_transform() * local_pos
local_pos = get_global_transform().affine_inverse() * canvas_pos</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">// Called from a CanvasItem.
canvasPos = GetGlobalTransform() * localPos;
localPos = GetGlobalTransform().AffineInverse() * canvasPos;</literal_block>
                </div>
            </container>
            <paragraph>那么最后, 要将CanvasItem的本地坐标转换为屏幕坐标, 只需按以下顺序相乘:</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-1-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-1-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-1-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var screen_coord = get_viewport().get_screen_transform() * get_global_transform_with_canvas() * local_pos</literal_block>
                </div>
                <div aria-labelledby="tab-1-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-1-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var screenCoord = GetViewport().GetScreenTransform() * GetGlobalTransformWithCanvas() * localPos;</literal_block>
                </div>
            </container>
            <paragraph>但请记住, 通常情况最好不要使用屏幕坐标. 推荐的方法是, 仅仅使用画布坐标( <literal>CanvasItem.get_global_transform()</literal> ), 以保证自动分辨率调整能正常工作.</paragraph>
        </section>
        <section ids="feeding-custom-input-events" names="feeding\ custom\ input\ events 提供自定义输入事件">
            <title>提供自定义输入事件</title>
            <paragraph>通常需要将自定义输入事件提供给场景树。要正确地做到这一点，必须通过以下方式完成：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-2-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-2-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-2-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var local_pos = Vector2(10, 20) # Local to Control/Node2D.
var ie = InputEventMouseButton.new()
ie.button_index = MOUSE_BUTTON_LEFT
ie.position = get_viewport().get_screen_transform() * get_global_transform_with_canvas() * local_pos
Input.parse_input_event(ie)</literal_block>
                </div>
                <div aria-labelledby="tab-2-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-2-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var localPos = new Vector2(10,20); // Local to Control/Node2D.
var ie = new InputEventMouseButton()
{
    ButtonIndex = MouseButton.Left,
    Position = GetViewport().GetScreenTransform() * GetGlobalTransformWithCanvas() * localPos,
};
Input.ParseInputEvent(ie);</literal_block>
                </div>
            </container>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
