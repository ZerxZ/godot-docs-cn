<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/tutorials/2d/particle_systems_2d.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-particle-systems-2d"></target>
    <section ids="d-particle-systems doc-particle-systems-2d" names="2d\ particle\ systems 2d\ 粒子系统 doc_particle_systems_2d">
        <title>2D 粒子系统</title>
        <section ids="intro" names="intro 简介">
            <title>简介</title>
            <paragraph>粒子系统用于模拟复杂的物理效果，例如火花、火焰、魔法粒子、烟雾、薄雾等。</paragraph>
            <paragraph>这个想法是以固定的间隔发射具有固定的寿命的 "粒子". 在其生命周期中, 每个粒子都具有相同的基本行为. 让每个粒子变得不同并提供整体更加 "有机" 外观的是与各个参数相关的 "随机性". 实质上, 创建粒子系统意味着设置基本物理参数, 然后为它们添加随机性.</paragraph>
            <section ids="particle-nodes" names="particle\ nodes 粒子节点">
                <title>粒子节点</title>
                <paragraph>Godot 为 2D 粒子提供了两个不同的节点： <reference internal="True" refuri="../../classes/class_gpuparticles2d#class-gpuparticles2d"><inline classes="std std-ref">GPUParticles2D</inline></reference> 和 <reference internal="True" refuri="../../classes/class_cpuparticles2d#class-cpuparticles2d"><inline classes="std std-ref">CPUParticles2D</inline></reference> 。 GPUParticles2D 更先进，使用 GPU 来处理粒子效果。 CPUParticles2D 是 CPU 驱动的选项，其功能与 GPUParticles2D 几乎相同，但在使用大量粒子时性能较低。 另一方面，CPUParticles2D 在低端系统或 GPU 瓶颈情况下可能表现更好。</paragraph>
                <paragraph>虽然 GPUParticles2D 是通过 <reference internal="True" refuri="../../classes/class_particleprocessmaterial#class-particleprocessmaterial"><inline classes="std std-ref">ParticleProcessMaterial</inline></reference>（还可以使用自定义着色器）进行配置的，不过匹配的选项是通过 CPUParticles2D 中的节点属性提供的（除了轨迹设置）。</paragraph>
                <paragraph>你可以通过在检查其中点击节点，选择 2D 视口，然后在视口顶部的工具栏中选择 <strong>GPUParticles2D &gt; 转换为CPUParticles2D</strong> ，将 GPUParticles2D 节点转换为 CPUParticles2D 节点。</paragraph>
                <image candidates="{'*': 'tutorials/2d/img/particles_convert.webp'}" uri="tutorials/2d/img/particles_convert.webp"></image>
                <paragraph>本教程的其余部分将使用 GPUParticles2D 节点。 首先，将 GPUParticles2D 节点添加到场景中。 创建该节点后，你会注意到仅创建了一个白点，并且场景停靠栏中的 GPUParticles2D 节点旁边有一个警告图标。 这是因为节点需要 ParticleProcessMaterial 才能发挥作用。</paragraph>
            </section>
            <section ids="particleprocessmaterial" names="particleprocessmaterial">
                <title>ParticleProcessMaterial</title>
                <paragraph>要将处理材质添加到粒子节点，请转到检查器面板中的 <literal>处理材质</literal> 。单击 <literal>材质</literal> 旁边的框，然后从下拉菜单中选择 <literal>新建 ParticleProcessMaterial</literal> 。</paragraph>
                <image candidates="{'*': 'tutorials/2d/img/particles_material.png'}" uri="tutorials/2d/img/particles_material.png"></image>
                <paragraph>你的 GPUParticles2D 节点现在应该可以向下发射白点了。</paragraph>
                <image candidates="{'*': 'tutorials/2d/img/particles1.png'}" uri="tutorials/2d/img/particles1.png"></image>
            </section>
            <section ids="texture" names="texture texture\ (纹理)">
                <title>Texture (纹理)</title>
                <paragraph>粒子系统可以使用单个纹理或动画 <emphasis>翻页</emphasis> （filpbook）。翻页是一种纹理，其中包含可以回放或在发射期间随机选择的多个动画帧。翻页相当于粒子的精灵表。</paragraph>
                <paragraph>纹理通过 <strong>Texture</strong> 属性设置：</paragraph>
                <image candidates="{'*': 'tutorials/2d/img/particles2.png'}" uri="tutorials/2d/img/particles2.png"></image>
                <target refid="doc-particle-systems-2d-using-flipbook"></target>
                <section ids="using-an-animation-flipbook doc-particle-systems-2d-using-flipbook" names="using\ an\ animation\ flipbook 使用动画翻页 doc_particle_systems_2d_using_flipbook">
                    <title>使用动画翻页</title>
                    <paragraph>粒子翻页适合再现复杂的效果，如烟雾、火焰、爆炸。它们还可以通过使每个粒子使用不同的纹理，来引入随机纹理变化。你可以在线寻找现成的粒子翻页图，或使用外部工具预渲染它们，例如`Blender &lt;<reference refuri="https://www.blender.org/">https://www.blender.org/</reference>&gt;`__ 或 <reference name="EmberGen" refuri="https://jangafx.com/software/embergen/">EmberGen</reference> 。</paragraph>
                    <figure align="center" ids="id1">
                        <image alt="使用翻页纹理的粒子系统示例" candidates="{'*': 'tutorials/2d/img/particles_flipbook_result.webp'}" uri="tutorials/2d/img/particles_flipbook_result.webp"></image>
                        <caption>使用翻页纹理的粒子系统示例</caption>
                    </figure>
                    <paragraph>相比起单个纹理，使用动画翻页需要额外的配置。出于演示目的，我们将使用这 5 列 7 行的纹理（右键单击并选择 <strong>另存为...</strong> ）：</paragraph>
                    <figure align="center" ids="id2">
                        <image alt="屏幕翻页纹理示例" candidates="{'*': 'tutorials/2d/img/particles_flipbook_example.webp'}" uri="tutorials/2d/img/particles_flipbook_example.webp" width="240"></image>
                        <caption>作者：<reference name="JoesAlotofthings" refuri="https://opengameart.org/content/alot-of-particles-indispersal-special-effect-alotofparticles30">JoesAlotofthings</reference> （CC BY 4.0）</caption>
                    </figure>
                    <paragraph>要使用动画翻页，你必须在 GPUParticles2D（或 CPUParticles2D）节点的 Material 部分中创建一个新的 CanvasItemMaterial：</paragraph>
                    <figure align="center" ids="id3">
                        <image alt="在粒子节点检查器的底部创建一个 CanvasItemMaterial" candidates="{'*': 'tutorials/2d/img/particles_flipbook_create_canvasitemmaterial.webp'}" uri="tutorials/2d/img/particles_flipbook_create_canvasitemmaterial.webp"></image>
                        <caption>在粒子节点检查器的底部创建一个 CanvasItemMaterial</caption>
                    </figure>
                    <paragraph>在这个 CanvasItemMaterial 中，启用 <strong>Particle Animation</strong> ，并将 <strong>H Frames</strong> 和 <strong>V Frames</strong> 分别设置为翻页纹理中的列数和行数：</paragraph>
                    <figure align="center" ids="id4">
                        <image alt="为示例翻页纹理配置 CanvasItemMaterial" candidates="{'*': 'tutorials/2d/img/particles_flipbook_configure_canvasitemmaterial.webp'}" uri="tutorials/2d/img/particles_flipbook_configure_canvasitemmaterial.webp"></image>
                        <caption>为示例翻页纹理配置 CanvasItemMaterial</caption>
                    </figure>
                    <paragraph>完成此操作后，ParticleProcessMaterial（对于 GPUParticles2D）或 CPUParticles2D 检查器中的 <reference internal="True" refid="doc-particle-systems-2d-animation"><inline classes="std std-ref">动画部分</inline></reference> 将生效。</paragraph>
                    <tip>
                        <paragraph>如果你的翻页纹理是黑色背景而不是透明背景，你还需要将混合模式设置为 <strong>Add</strong> 而不是 <strong>Mix</strong> 才能使它正确地显示。或者，你也可以修改纹理以使它在图像编辑器中有透明背景。在 <reference name="GIMP" refuri="https://gimp.org">GIMP</reference> 中，可以使用 <strong>Color &gt; Color to Alpha</strong> 菜单来完成此操作。</paragraph>
                    </tip>
                </section>
            </section>
        </section>
        <section ids="time-parameters" names="time\ parameters 时间参数">
            <title>时间参数</title>
            <section ids="lifetime" names="lifetime lifetime(寿命)">
                <title>Lifetime(寿命)</title>
                <paragraph>每个粒子存活的时间(以秒为单位). 生命周期结束时, 会创建一个新粒子来替换它.</paragraph>
                <paragraph>寿命:0.5</paragraph>
                <image candidates="{'*': 'tutorials/2d/img/paranim14.gif'}" uri="tutorials/2d/img/paranim14.gif"></image>
                <paragraph>寿命:4.0</paragraph>
                <image candidates="{'*': 'tutorials/2d/img/paranim15.gif'}" uri="tutorials/2d/img/paranim15.gif"></image>
            </section>
            <section ids="one-shot" names="one\ shot one\ shot\ (一次性)">
                <title>One Shot (一次性)</title>
                <paragraph>启用后，GPUParticles2D 节点将一次发射其所有粒子，之后将不再发射。</paragraph>
            </section>
            <section ids="preprocess" names="preprocess preprocess(预处理)">
                <title>Preprocess(预处理)</title>
                <paragraph>粒子系统从没有粒子被发射开始, 然后开始发射. 当加载场景如火炬, 雾等系统时可能会带来不便, 因为它会在进入场景的那一刻开始发射. 预处理用于让系统在第一次实际绘制之前处理给定的秒数.</paragraph>
            </section>
            <section ids="speed-scale" names="speed\ scale speed\ scale(速度比例)">
                <title>Speed Scale(速度比例)</title>
                <paragraph>速度比例具有默认值 <literal>1</literal> , 用于调整粒子系统的速度. 降低值会使粒子变慢, 而增加值会使粒子更快.</paragraph>
            </section>
            <section ids="explosiveness" names="explosiveness explosiveness(爆炸性)">
                <title>Explosiveness(爆炸性)</title>
                <paragraph>如果有10个寿命为 <literal>1</literal> 的粒子, 则意味着粒子将每0.1秒发射一次. 爆炸性参数改变了这一点, 并迫使粒子一起发射. 范围是:</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>0: 定期发射粒子(默认值).</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>1: 同时发射所有粒子.</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>中间的值也是允许的. 此功能对于创建爆炸或突然爆发的粒子非常有用:</paragraph>
                <image candidates="{'*': 'tutorials/2d/img/paranim18.gif'}" uri="tutorials/2d/img/paranim18.gif"></image>
            </section>
            <section ids="randomness" names="randomness randomness(随机性)">
                <title>Randomness(随机性)</title>
                <paragraph>所有物理参数都可以随机化. 随机值范围从 <literal>0</literal> 到 <literal>1</literal> . 随机化参数的公式为:</paragraph>
                <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">initial_value = param_value + param_value * randomness</literal_block>
            </section>
            <section ids="fixed-fps" names="fixed\ fps fixed\ fps(固定帧率)">
                <title>Fixed FPS(固定帧率)</title>
                <paragraph>此设置可用于将粒子系统设置为以固定的帧率渲染. 例如, 将值更改为 <literal>2</literal> 将使粒子以每秒2帧的速度渲染. 请注意, 这不会减慢粒子系统本身的速度.</paragraph>
            </section>
            <section ids="fract-delta" names="fract\ delta">
                <title>Fract Delta</title>
                <paragraph>这可用于打开或关闭Fract Delta.</paragraph>
            </section>
        </section>
        <section ids="drawing-parameters" names="drawing\ parameters 绘图参数">
            <title>绘图参数</title>
            <section ids="visibility-rect" names="visibility\ rect visibility\ rect(可见性区域)">
                <title>Visibility Rect(可见性区域)</title>
                <paragraph>可见性矩形控制粒子在屏幕上的可见性. 如果此矩形位于视口之外, 则引擎将不会在屏幕上渲染粒子.</paragraph>
                <paragraph>矩形的 <literal>W</literal> 和 <literal>H</literal> 属性分别控制其宽度和高度. <literal>X</literal> 和 <literal>Y</literal> 属性控制矩形左上角相对于粒子发射器的位置.</paragraph>
                <paragraph>可以使用 2d 视图上方的工具栏让 Godot 自动生成可见性矩形。 为此，请选择 GPUParticles2D 节点并单击 <literal>粒子 &gt; 生成可见性矩形</literal> 。 Godot 将模拟 Particles2D 节点发射粒子几秒钟，并设置矩形以适合粒子所占据的表面。</paragraph>
                <paragraph>你可以使用 <literal>Generation Time (sec)</literal> 选项控制发射持续时间. 最大值为25秒. 如果你需要更多时间让粒子移动, 你可以暂时更改Particles2D节点上的 <literal>preprocess</literal> 时间.</paragraph>
            </section>
            <section ids="local-coords" names="local\ coords local\ coords(局部坐标)">
                <title>Local Coords(局部坐标)</title>
                <paragraph>默认情况下, 此选项处于启用状态, 这意味着粒子发射的空间是相对于节点来算的. 如果移动节点, 则所有粒子会随之移动:</paragraph>
                <image candidates="{'*': 'tutorials/2d/img/paranim20.gif'}" uri="tutorials/2d/img/paranim20.gif"></image>
                <paragraph>如果禁用, 粒子将发射到全局空间, 这意味着如果移动节点, 则已发射的粒子不会受到影响:</paragraph>
                <image candidates="{'*': 'tutorials/2d/img/paranim21.gif'}" uri="tutorials/2d/img/paranim21.gif"></image>
            </section>
            <section ids="draw-order" names="draw\ order draw\ order(绘图顺序)">
                <title>Draw Order(绘图顺序)</title>
                <paragraph>这可以控制绘制单个粒子的顺序. <literal>Index</literal> 表示粒子根据它们的发射顺序被绘制(默认). <literal>Lifetime</literal> 表示它们按照剩余寿命的顺序被绘制.</paragraph>
            </section>
        </section>
        <section ids="particleprocessmaterial-settings" names="particleprocessmaterial\ settings particleprocessmaterial\ 设置">
            <title>ParticleProcessMaterial 设置</title>
            <section ids="direction" names="direction 方向">
                <title>方向</title>
                <paragraph>这是粒子发射的基础方向. 默认值是 <literal>Vector3(1,0,0)</literal> , 它使粒子向右发射. 然而, 在默认的重力设置下, 粒子会直线下降.</paragraph>
                <image candidates="{'*': 'tutorials/2d/img/direction1.png'}" uri="tutorials/2d/img/direction1.png"></image>
                <paragraph>为了让这个属性作用更明显, 你需要一个大于0的 <emphasis>初始速度(initial velocity)</emphasis> . 这里, 我们把初始速度设为40. 你会注意到粒子向右发射, 然后受重力作用下降.</paragraph>
                <image candidates="{'*': 'tutorials/2d/img/direction2.png'}" uri="tutorials/2d/img/direction2.png"></image>
            </section>
            <section ids="spread" names="spread spread(铺开角度)">
                <title>Spread(铺开角度)</title>
                <paragraph>此参数是以度为单位的角度, 它会被随机加减到基础 <literal>Direction</literal> 上. <literal>180</literal> 的铺开角度将向所有方向发射(+/- 180).</paragraph>
                <image candidates="{'*': 'tutorials/2d/img/paranim3.gif'}" uri="tutorials/2d/img/paranim3.gif"></image>
            </section>
            <section ids="flatness" names="flatness flatness(平直度)">
                <title>Flatness(平直度)</title>
                <paragraph>这个属性只对3D粒子有用.</paragraph>
            </section>
            <section ids="gravity" names="gravity gravity(重力)">
                <title>Gravity(重力)</title>
                <paragraph>应用于每个粒子上的重力.</paragraph>
                <image candidates="{'*': 'tutorials/2d/img/paranim7.gif'}" uri="tutorials/2d/img/paranim7.gif"></image>
            </section>
            <section ids="initial-velocity" names="initial\ velocity initial\ velocity(初始速度)">
                <title>Initial Velocity(初始速度)</title>
                <paragraph>初始速度是粒子发射的速度（单位为像素/秒）。以后可以通过重力或其他加速度来修改速度（后述）。</paragraph>
                <image candidates="{'*': 'tutorials/2d/img/paranim4.gif'}" uri="tutorials/2d/img/paranim4.gif"></image>
            </section>
            <section ids="angular-velocity" names="angular\ velocity angular\ velocity(角速度)">
                <title>Angular Velocity(角速度)</title>
                <paragraph>角速度是应用于粒子的初始角速度.</paragraph>
            </section>
            <section ids="spin-velocity" names="spin\ velocity spin\ velocity(旋转速度)">
                <title>Spin Velocity(旋转速度)</title>
                <paragraph>旋转速度是粒子围绕其中心转动的速度(以度/秒为单位).</paragraph>
                <image candidates="{'*': 'tutorials/2d/img/paranim5.gif'}" uri="tutorials/2d/img/paranim5.gif"></image>
            </section>
            <section ids="orbit-velocity" names="orbit\ velocity orbit\ velocity(环绕速度)">
                <title>Orbit Velocity(环绕速度)</title>
                <paragraph>环绕速度速度用于使粒子绕它们的中心转动.</paragraph>
                <image candidates="{'*': 'tutorials/2d/img/paranim6.gif'}" uri="tutorials/2d/img/paranim6.gif"></image>
            </section>
            <section ids="linear-acceleration" names="linear\ acceleration linear\ acceleration(线性加速度)">
                <title>Linear Acceleration(线性加速度)</title>
                <paragraph>应用于每个粒子的线性加速度.</paragraph>
            </section>
            <section ids="radial-acceleration" names="radial\ acceleration radial\ acceleration(径向加速度)">
                <title>Radial Acceleration(径向加速度)</title>
                <paragraph>如果此加速度为正, 则粒子会向远离发射中心加速. 如果是负的, 他们会被加速吸进去.</paragraph>
                <image candidates="{'*': 'tutorials/2d/img/paranim8.gif'}" uri="tutorials/2d/img/paranim8.gif"></image>
            </section>
            <section ids="tangential-acceleration" names="tangential\ acceleration tangential\ acceleration(切向加速度)">
                <title>Tangential Acceleration(切向加速度)</title>
                <paragraph>该加速度会使用从粒子到中心点的切向量, 结合径向加速度可以做出很酷炫的效果.</paragraph>
                <image candidates="{'*': 'tutorials/2d/img/paranim9.gif'}" uri="tutorials/2d/img/paranim9.gif"></image>
            </section>
            <section ids="damping" names="damping damping(阻尼)">
                <title>Damping(阻尼)</title>
                <paragraph>阻尼选项会对颗粒施加摩擦力, 迫使它们停止. 它特别适用于火花或爆炸, 火花或爆炸通常以高线速度开始, 然后在他们隐去时停下来.</paragraph>
                <image candidates="{'*': 'tutorials/2d/img/paranim10.gif'}" uri="tutorials/2d/img/paranim10.gif"></image>
            </section>
            <section ids="angle" names="angle angle(角度)">
                <title>Angle(角度)</title>
                <paragraph>确定粒子的初始角度(以度为单位). 该参数通常在随机化后会有用.</paragraph>
                <image candidates="{'*': 'tutorials/2d/img/paranim11.gif'}" uri="tutorials/2d/img/paranim11.gif"></image>
            </section>
            <section ids="scale" names="scale scale(大小)">
                <title>Scale(大小)</title>
                <paragraph>确定粒子的初始大小.</paragraph>
                <image candidates="{'*': 'tutorials/2d/img/paranim12.gif'}" uri="tutorials/2d/img/paranim12.gif"></image>
            </section>
            <section ids="color" names="color">
                <title>Color</title>
                <paragraph>用于改变发射出来的粒子颜色.</paragraph>
            </section>
            <section ids="hue-variation" names="hue\ variation hue\ variation（色相变化）">
                <title>Hue Variation（色相变化）</title>
                <paragraph><literal>Variation</literal> 值设置的是应用于每个粒子的初始色调变化. <literal>Variation Rand</literal> 值控制色调变化的随机性比率.</paragraph>
                <target refid="doc-particle-systems-2d-animation"></target>
            </section>
            <section ids="animation doc-particle-systems-2d-animation" names="animation 动画 doc_particle_systems_2d_animation">
                <title>动画</title>
                <note>
                    <paragraph>仅当 GPUParticles2D 或 CPUParticles2D 节点上使用的 CanvasItemMaterial 已进行 <reference internal="True" refid="doc-particle-systems-2d-using-flipbook"><inline classes="std std-ref">相应配置</inline></reference> 时，粒子翻页动画才有效。</paragraph>
                </note>
                <paragraph>如要将粒子翻页设置为线性播放，请将 <strong>Speed Min</strong> 和 <strong>Speed Max</strong> 值设置为 1：</paragraph>
                <figure align="center" ids="id5">
                    <image alt="设置粒子动画以便在粒子生命周期内播放" candidates="{'*': 'tutorials/2d/img/particles_flipbook_configure_animation_speed.webp'}" uri="tutorials/2d/img/particles_flipbook_configure_animation_speed.webp"></image>
                    <caption>设置粒子动画以便在粒子生命周期内播放</caption>
                </figure>
                <paragraph>默认情况下，循环功能是禁用的。如果粒子在其生命周期结束之前播放完毕，则粒子将继续使用翻页的最后一帧（根据翻页纹理的设计方式，这一帧可能是完全透明的）。如果启用循环，粒子的动画将循环回到第一帧并重复播放。</paragraph>
                <paragraph>根据精灵表包含的图像数量以及粒子的存活时间情况，你的动画可能看起来会并不流畅。粒子的存活时间、动画速度和精灵表中图像数量之间的关系是这样的：</paragraph>
                <note>
                    <paragraph>当动画速度为 <literal>1.0</literal> 时，动画将在粒子生命周期结束时，播放到序列中的最后一个图像。</paragraph>
                    <math_block docname="tutorials/2d/particle_systems_2d" label="True" nowrap="False" number="True" xml:space="preserve">Animation\ FPS = \frac{Number\ of\ images}{Lifetime}

</math_block>
                </note>
                <paragraph>如果你希望将粒子翻页用作每个粒子的随机粒子纹理源，请将速度值保持为 0 ，并将 <strong>Offset Max</strong> 设置为 1：</paragraph>
                <figure align="center" ids="id6">
                    <image alt="设置粒子动画以实现发射时的随机偏移" candidates="{'*': 'tutorials/2d/img/particles_flipbook_configure_animation_offset.webp'}" uri="tutorials/2d/img/particles_flipbook_configure_animation_offset.webp"></image>
                    <caption>设置粒子动画以实现发射时的随机偏移</caption>
                </figure>
                <paragraph>请注意，GPUParticles2D 节点的 <strong>Fixed FPS</strong> 也会影响动画播放。为了动画播放流畅，建议将其设置为 0，以便在每个渲染帧上模拟粒子。如果这个设置不适合你的用例，请将 <strong>Fixed FPS</strong> 设置为等于翻页动画使用的有效帧速率（请参阅上面的公式）。</paragraph>
            </section>
        </section>
        <section ids="emission-shapes" names="emission\ shapes 发射形状">
            <title>发射形状</title>
            <paragraph>ParticleProcessMaterials 允许你设置发射蒙版，它决定发射粒子的区域和方向。 这些可以从项目中的纹理生成。</paragraph>
            <paragraph>在设置了 ParticleProcessMaterial，并且选择了 GPUParticles2D 节点。 工具栏中就会出现“粒子”菜单：</paragraph>
            <image candidates="{'*': 'tutorials/2d/img/emission_shapes1.png'}" uri="tutorials/2d/img/emission_shapes1.png"></image>
            <paragraph>打开它, 选择"加载 Emission Mask(发射遮挡)":</paragraph>
            <image candidates="{'*': 'tutorials/2d/img/emission_shapes2.png'}" uri="tutorials/2d/img/emission_shapes2.png"></image>
            <paragraph>然后选择你想要用作遮挡的纹理:</paragraph>
            <image candidates="{'*': 'tutorials/2d/img/emission_shapes3.png'}" uri="tutorials/2d/img/emission_shapes3.png"></image>
            <paragraph>会出现一个具有多个设置的对话框.</paragraph>
            <section ids="emission-mask" names="emission\ mask 发射遮罩">
                <title>发射遮罩</title>
                <paragraph>纹理可以生成三种类型的发射遮挡:</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>Solid Pixels(实心像素): 粒子将从纹理的任何区域产生, 透明区域除外.</paragraph>
                    </list_item>
                </bullet_list>
                <image candidates="{'*': 'tutorials/2d/img/emission_mask_solid.gif'}" uri="tutorials/2d/img/emission_mask_solid.gif"></image>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>Border Pixels(边界像素): 粒子将从纹理的外边缘产生.</paragraph>
                    </list_item>
                </bullet_list>
                <image candidates="{'*': 'tutorials/2d/img/emission_mask_border.gif'}" uri="tutorials/2d/img/emission_mask_border.gif"></image>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>Directed Border Pixels(定向边界像素): 类似于边界像素, 在遮罩中添加额外的信息, 使粒子能够从边缘发射出去. 请注意, 想要使用它, 需要设置一个 <literal>初始速度</literal>.</paragraph>
                    </list_item>
                </bullet_list>
                <image candidates="{'*': 'tutorials/2d/img/emission_mask_directed_border.gif'}" uri="tutorials/2d/img/emission_mask_directed_border.gif"></image>
            </section>
            <section ids="emission-colors" names="emission\ colors 发射色彩">
                <title>发射色彩</title>
                <paragraph><literal>Capture from Pixel</literal> 会使粒子在其产生点处继承遮挡材质的颜色.</paragraph>
                <paragraph>在单击“确定”后，将生成遮罩并将其设置为 <literal>Emission Shape</literal> 下的 ParticleProcessMaterial：</paragraph>
                <image candidates="{'*': 'tutorials/2d/img/emission_shapes4.png'}" uri="tutorials/2d/img/emission_shapes4.png"></image>
                <paragraph>这个部分所有提到的值, "加载Emission Mask(发射遮挡)"菜单都会自动生成, 所以通常他们放着不管就可以了.</paragraph>
                <note>
                    <paragraph>不应该直接添加图像到 <literal>Point Texture</literal> 或 <literal>Color Texture</literal> 中. 应该始终使用"加载Emisson Mask(发射遮挡)"菜单.</paragraph>
                </note>
                <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
            </section>
        </section>
    </section>
</document>
