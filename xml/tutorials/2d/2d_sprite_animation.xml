<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/tutorials/2d/2d_sprite_animation.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-2d-sprite-animation"></target>
    <section ids="d-sprite-animation doc-2d-sprite-animation" names="2d\ sprite\ animation 2d\ 精灵动画 doc_2d_sprite_animation">
        <title>2D 精灵动画</title>
        <section ids="introduction" names="introduction 前言">
            <title>前言</title>
            <paragraph>在本教程中，你将学习如何使用 AnimatedSprite2D 类和 AnimationPlayer 创建 2D 动画角色。 通常，当你创建或下载动画角色时，它将以两种方式之一出现：作为单独的图像或作为包含所有动画帧的单个精灵表。 两者都可以在 Godot 中使用 AnimatedSprite2D 类进行动画处理。</paragraph>
            <paragraph>首先，我们将使用 <reference internal="True" refuri="../../classes/class_animatedsprite2d#class-animatedsprite2d"><inline classes="std std-ref">AnimatedSprite2D</inline></reference> 对单个图像集合进行动画处理。 然后我们将使用此类对精灵表进行动画处理。 最后，我们将学习另一种使用 <reference internal="True" refuri="../../classes/class_animationplayer#class-animationplayer"><inline classes="std std-ref">AnimationPlayer</inline></reference> 和 <reference internal="True" refuri="../../classes/class_sprite2d#class-sprite2d"><inline classes="std std-ref">Sprite2D</inline></reference> 的 <emphasis>Animation</emphasis> 属性来制作精灵表动画的方法。</paragraph>
            <note>
                <paragraph>以下示例的美术资产由 <reference refuri="https://opengameart.org/users/ansimuz">https://opengameart.org/users/ansimuz</reference> 和 <reference refuri="https://opengameart.org/users/tgfcoder">https://opengameart.org/users/tgfcoder</reference> 共同提供。</paragraph>
            </note>
        </section>
        <section ids="individual-images-with-animatedsprite2d" names="individual\ images\ with\ animatedsprite2d animatesprite2d\ 与若干单独的图片">
            <title>AnimateSprite2D 与若干单独的图片</title>
            <paragraph>在这个情况下, 你有一组图像, 每一个都包含你角色的动画的一帧. 对于这个例子, 我们将使用以下动画:</paragraph>
            <image candidates="{'*': 'tutorials/2d/img/2d_animation_run_preview.gif'}" uri="tutorials/2d/img/2d_animation_run_preview.gif"></image>
            <paragraph>你可以在这里下载图片：<reference name="2d_sprite_animation_assets.zip" refuri="https://github.com/godotengine/godot-docs-project-starters/releases/download/latest-4.x/2d_sprite_animation_assets.zip">2d_sprite_animation_assets.zip</reference><target ids="d-sprite-animation-assets-zip" names="2d_sprite_animation_assets.zip" refuri="https://github.com/godotengine/godot-docs-project-starters/releases/download/latest-4.x/2d_sprite_animation_assets.zip"></target></paragraph>
            <paragraph>解压缩这些图像并将它们放在项目文件夹中. 使用以下节点布置场景树:</paragraph>
            <image candidates="{'*': 'tutorials/2d/img/2d_animation_tree1.webp'}" uri="tutorials/2d/img/2d_animation_tree1.webp"></image>
            <note>
                <paragraph>根节点也可以是 <reference internal="True" refuri="../../classes/class_area2d#class-area2d"><inline classes="std std-ref">Area2D</inline></reference> 或 <reference internal="True" refuri="../../classes/class_rigidbody2d#class-rigidbody2d"><inline classes="std std-ref">RigidBody2D</inline></reference>。动画仍然会以同样的方式制作。一旦动画完成，你就可以为 CollisionShape2D 形状分配一个形状。更多信息请参见<reference internal="True" refuri="../physics/physics_introduction#doc-physics-introduction"><inline classes="std std-ref">物理介绍</inline></reference>。</paragraph>
            </note>
            <paragraph>现在选中 <literal>AnimatedSprite2D</literal> ，并在它的 <emphasis>SpriteFrames</emphasis> 属性中，选择“新建 SpriteFrames”。</paragraph>
            <image candidates="{'*': 'tutorials/2d/img/2d_animation_new_spriteframes.webp'}" uri="tutorials/2d/img/2d_animation_new_spriteframes.webp"></image>
            <paragraph>点击新的 SpriteFrames 资源，你会看到一个新的面板出现在编辑器窗口的底部：</paragraph>
            <image candidates="{'*': 'tutorials/2d/img/2d_animation_spriteframes.webp'}" uri="tutorials/2d/img/2d_animation_spriteframes.webp"></image>
            <paragraph>将这 8 张独立的图片从左边的“文件系统”面板拖放到“动画帧”面板的中间部分。在左边，将动画名称从“default”更改为“run”。</paragraph>
            <image candidates="{'*': 'tutorials/2d/img/2d_animation_spriteframes_done.webp'}" uri="tutorials/2d/img/2d_animation_spriteframes_done.webp"></image>
            <paragraph>使用 <emphasis>过滤动画(Filter Animations)</emphasis> 输入右上角的“播放(Play)”按钮预览动画。 你现在应该可以看到动画在视口中播放。 然而，它有点慢。 要解决此问题，请将 SpriteFrames 面板中的 <emphasis>Speed (FPS)</emphasis> 设置更改为 10。</paragraph>
            <paragraph>你可以通过单击“添加动画”按钮并添加其他图像来添加其他动画。</paragraph>
            <section ids="controlling-the-animation" names="controlling\ the\ animation 控制动画">
                <title>控制动画</title>
                <paragraph>动画完成后, 你可以通过代码中的 <literal>play()</literal> 和 <literal>stop()</literal> 方法控制动画. 这里有一个简单的例子, 按住右方向键播放动画, 松开后就停下.</paragraph>
                <container classes="sphinx-tabs" type="tab-element">
                    <div aria-label="Tabbed content" role="tablist">
                        <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                        <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                    </div>
                    <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                        <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">extends CharacterBody2D

@onready var _animated_sprite = $AnimatedSprite2D

func _process(_delta):
    if Input.is_action_pressed("ui_right"):
        _animated_sprite.play("run")
    else:
        _animated_sprite.stop()</literal_block>
                    </div>
                    <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                        <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">using Godot;

public partial class Character : CharacterBody2D
{
    private AnimatedSprite2D _animatedSprite;

    public override void _Ready()
    {
        _animatedSprite = GetNode&lt;AnimatedSprite&gt;("AnimatedSprite");
    }

    public override _Process(float _delta)
    {
        if (Input.IsActionPressed("ui_right"))
        {
            _animatedSprite.Play("run");
        }
        else
        {
            _animatedSprite.Stop();
        }
    }
}</literal_block>
                    </div>
                </container>
            </section>
        </section>
        <section ids="sprite-sheet-with-animatedsprite2d" names="sprite\ sheet\ with\ animatedsprite2d animatesprite2d\ 与精灵表">
            <title>AnimateSprite2D 与精灵表</title>
            <paragraph>你还可以很方便地使用 <literal>AnimatedSprite2D</literal> 把精灵表做成动画。我们会用到这张公共领域的精灵表：</paragraph>
            <image candidates="{'*': 'tutorials/2d/img/2d_animation_frog_spritesheet.png'}" uri="tutorials/2d/img/2d_animation_frog_spritesheet.png"></image>
            <paragraph>右键单击图片，选择“图片另存为”来下载图片，然后将图片复制到项目文件夹中。</paragraph>
            <paragraph>设置场景树的方法与之前使用单独图片的时候相同。选中 <literal>AnimatedSprite2D</literal> 后在 <emphasis>SpriteFrames</emphasis> 属性里选择“新建 SpriteFrames”。</paragraph>
            <paragraph>点击创建出来的 SpriteFrames 资源。底部面板出现后，这次我们选择“从精灵表中添加帧”。</paragraph>
            <image candidates="{'*': 'tutorials/2d/img/2d_animation_add_from_spritesheet.webp'}" uri="tutorials/2d/img/2d_animation_add_from_spritesheet.webp"></image>
            <paragraph>在弹出的打开文件对话框中，选择你的精灵表。</paragraph>
            <paragraph>接下来会打开一个新的窗口，里面会显示刚才的精灵表。你首先需要修改精灵表中纵向和横向的图片数量，我们的这张精灵表里横向有四张图片、纵向有两张。</paragraph>
            <image candidates="{'*': 'tutorials/2d/img/2d_animation_spritesheet_select_rows.webp'}" uri="tutorials/2d/img/2d_animation_spritesheet_select_rows.webp"></image>
            <paragraph>然后，在精灵表中选择动画中想要包含的帧。这里我们选中上面的四个，然后点击“添加 4 帧”来创建动画。</paragraph>
            <image candidates="{'*': 'tutorials/2d/img/2d_animation_spritesheet_selectframes.webp'}" uri="tutorials/2d/img/2d_animation_spritesheet_selectframes.webp"></image>
            <paragraph>现在你就可以看到在底部面板的动画列表里看到这个动画了。双击 default（默认），然后把动画的名称改成 jump（跳跃）。</paragraph>
            <image candidates="{'*': 'tutorials/2d/img/2d_animation_spritesheet_animation.webp'}" uri="tutorials/2d/img/2d_animation_spritesheet_animation.webp"></image>
            <paragraph>最后，点击 SpriteFrames 编辑器上的播放按钮，你的青蛙就能跳起来了！</paragraph>
            <image candidates="{'*': 'tutorials/2d/img/2d_animation_play_spritesheet_animation.webp'}" uri="tutorials/2d/img/2d_animation_play_spritesheet_animation.webp"></image>
        </section>
        <section ids="sprite-sheet-with-animationplayer" names="sprite\ sheet\ with\ animationplayer animationplayer\ 与精灵表">
            <title>AnimationPlayer 与精灵表</title>
            <paragraph>使用 Sprite Sheet 时制作动画的另一种方法是使用标准 <reference internal="True" refuri="../../classes/class_sprite2d#class-sprite2d"><inline classes="std std-ref">Sprite2D</inline></reference> 节点来显示纹理，然后使用 <reference internal="True" refuri="../../classes/class_animationplayer#class-animationplayer"><inline classes="std std-ref">AnimationPlayer</inline></reference> 对纹理之间的变化进行动画处理 。</paragraph>
            <paragraph>考虑一下这个包含 6 帧动画的精灵表：</paragraph>
            <image candidates="{'*': 'tutorials/2d/img/2d_animation_player-run.png'}" uri="tutorials/2d/img/2d_animation_player-run.png"></image>
            <paragraph>右键单击图片，选择“图片另存为”下载图片，然后将图片复制到项目文件夹中。</paragraph>
            <paragraph>我们的目的是, 循环着一个接一个地显示这些图像. 首先布置你的场景树:</paragraph>
            <image candidates="{'*': 'tutorials/2d/img/2d_animation_tree2.webp'}" uri="tutorials/2d/img/2d_animation_tree2.webp"></image>
            <note>
                <paragraph>根节点也可以是 <reference internal="True" refuri="../../classes/class_area2d#class-area2d"><inline classes="std std-ref">Area2D</inline></reference> 或 <reference internal="True" refuri="../../classes/class_rigidbody2d#class-rigidbody2d"><inline classes="std std-ref">RigidBody2D</inline></reference>。动画仍然会以同样的方式制作。一旦动画完成，你就可以为 CollisionShape2D 形状分配一个形状。更多信息请参见<reference internal="True" refuri="../physics/physics_introduction#doc-physics-introduction"><inline classes="std std-ref">物理介绍</inline></reference>。</paragraph>
            </note>
            <paragraph>将精灵表拖拽到 Sprite 的 <emphasis>Texture</emphasis> 属性里，你会看到整个清单显示在屏幕上。要把它分割成单独的帧，请在“检查器”中展开 <emphasis>Animation</emphasis> 部分，将 <emphasis>Hframes</emphasis> 设置为 <literal>6</literal>。<emphasis>Hframes</emphasis> 和 <emphasis>Vframes</emphasis> 是精灵表中水平和垂直帧的数量。</paragraph>
            <image candidates="{'*': 'tutorials/2d/img/2d_animation_setframes.webp'}" uri="tutorials/2d/img/2d_animation_setframes.webp"></image>
            <paragraph>现在尝试更改 <emphasis>Frame</emphasis> 属性的值。 你会看到它的范围从 <literal>0</literal> 到 <literal>5</literal> ，Sprite2D 显示的图像也会相应变化。 这是我们要设置动画的属性。</paragraph>
            <paragraph>选中 <literal>AnimationPlayer</literal> , 然后点击 "动画" 按钮, 然后点击 "新建" 按钮. 将新动画命名为 "walk". 将动画长度设置为 <literal>0.6</literal> , 点击 "Loop" 按钮, 让动画重复播放.</paragraph>
            <image candidates="{'*': 'tutorials/2d/img/2d_animation_new_animation.webp'}" uri="tutorials/2d/img/2d_animation_new_animation.webp"></image>
            <paragraph>现在选中 <literal>Sprite2D</literal> 节点，然后单击钥匙图标，添加一个新轨道。</paragraph>
            <image candidates="{'*': 'tutorials/2d/img/2d_animation_new_track.webp'}" uri="tutorials/2d/img/2d_animation_new_track.webp"></image>
            <paragraph>继续在时间轴的每一点添加帧（默认为 <literal>0.1</literal> 秒），直到你得到了从 0 到 5 的所有帧。你会看到这些帧出现在动画轨道上：</paragraph>
            <image candidates="{'*': 'tutorials/2d/img/2d_animation_full_animation.webp'}" uri="tutorials/2d/img/2d_animation_full_animation.webp"></image>
            <paragraph>按下动画上的“播放”键，看看效果如何。</paragraph>
            <image candidates="{'*': 'tutorials/2d/img/2d_animation_running.gif'}" uri="tutorials/2d/img/2d_animation_running.gif"></image>
            <section ids="controlling-an-animationplayer-animation" names="controlling\ an\ animationplayer\ animation 控制\ animationplayer\ 动画">
                <title>控制 AnimationPlayer 动画</title>
                <paragraph>与 AnimatedSprite2D 一样，你可以使用 <literal>play()</literal> 和 <literal>stop()</literal> 方法通过代码控制动画。 同样，这里是一个在按住右箭头键时播放动画的示例，并在释放该键时停止动画。</paragraph>
                <container classes="sphinx-tabs" type="tab-element">
                    <div aria-label="Tabbed content" role="tablist">
                        <button aria-controls="panel-1-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                        <button aria-controls="panel-1-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                    </div>
                    <div aria-labelledby="tab-1-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                        <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">extends CharacterBody2D

@onready var _animation_player = $AnimationPlayer

func _process(_delta):
    if Input.is_action_pressed("ui_right"):
        _animation_player.play("walk")
    else:
        _animation_player.stop()</literal_block>
                    </div>
                    <div aria-labelledby="tab-1-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-1-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                        <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">using Godot;

public partial class Character : CharacterBody2D
{
    private AnimationPlayer _animationPlayer;

    public override void _Ready()
    {
        _animationPlayer = GetNode&lt;AnimationPlayer&gt;("AnimationPlayer");
    }

    public override void _Process(float _delta)
    {
        if (Input.IsActionPressed("ui_right"))
        {
            _animationPlayer.Play("walk");
        }
        else
        {
            _animationPlayer.Stop();
        }
    }
}</literal_block>
                    </div>
                </container>
                <note>
                    <paragraph>如果同时更新一个动画和一个其他的属性（比如说，平台跳跃游戏可能会更新精灵的 <literal>h_flip</literal>/<literal>v_flip</literal> 属性然后同时开始一个转身动画“turning”），要记住 <literal>play()</literal> 不是即时生效的。它会在下次 <reference internal="True" refuri="../../classes/class_animationplayer#class-animationplayer"><inline classes="std std-ref">AnimationPlayer</inline></reference> 被处理时生效。也就是说可能要到下一帧才行，导致现在这一帧变成“问题”帧——应用了属性的变化，但动画还没有开始。如果这会造成麻烦的话，在调用 <literal>play()</literal> 后，你可以调用 <literal>advance(0)</literal> 来立即开始播放动画。</paragraph>
                </note>
            </section>
        </section>
        <section ids="summary" names="summary 总结">
            <title>总结</title>
            <paragraph>这些示例说明了可在 Godot 中用于 2D 动画的两个类。 <literal>AnimationPlayer</literal> 比 <literal>AnimatedSprite2D</literal> 稍微复杂一些，但它提供了额外的功能，因为你还可以为其他属性（如位置或比例）设置动画。 类 <literal>AnimationPlayer</literal> 也可以与 <literal>AnimatedSprite2D</literal> 一起使用。 尝试看看什么最适合你的需求。</paragraph>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
