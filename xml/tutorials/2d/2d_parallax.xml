<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/tutorials/2d/2d_parallax.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">doc_2d_parallax:</comment>
    <section ids="d-parallax" names="2d\ parallax">
        <title>2D Parallax</title>
        <section ids="introduction" names="introduction 前言">
            <title>前言</title>
            <paragraph>Parallax is an effect used to simulate depth by having textures move at different speeds relative to the camera. Godot
                provides the <reference internal="True" refuri="../../classes/class_parallax2d#class-parallax2d"><inline classes="std std-ref">Parallax2D</inline></reference> node to achieve this effect. It can still be easy to get tripped
                up though, so this page provides in-depth descriptions of some properties and how to fix some common mistakes.</paragraph>
            <note>
                <paragraph>This page only covers how to use <reference internal="True" refuri="../../classes/class_parallax2d#class-parallax2d"><inline classes="std std-ref">Parallax2D</inline></reference>. This node is still experimental, so the
                    implementation might change in future versions of Godot. However, it is still recommended to use over the
                    <reference internal="True" refuri="../../classes/class_parallaxlayer#class-parallaxlayer"><inline classes="std std-ref">ParallaxLayer</inline></reference> and <reference internal="True" refuri="../../classes/class_parallaxbackground#class-parallaxbackground"><inline classes="std std-ref">ParallaxBackground</inline></reference> nodes.</paragraph>
            </note>
        </section>
        <section ids="scroll-scale" names="scroll\ scale">
            <title>Scroll scale</title>
            <paragraph>The backbone of the parallax effect is the <reference internal="True" refuri="../../classes/class_parallax2d#class-parallax2d-property-scroll-scale"><inline classes="std std-ref">scroll_scale</inline></reference> property.
                It works as a scroll-speed multiplier, allowing layers to move at a different speed than the camera for each axis set.
                A value of 1 makes the parallax node scroll at the same speed as the camera. If you want your image to look further away
                when scrolling, use a value lower than 1, with 0 bringing it to a complete stop. If you want something to appear closer
                to the camera, use a value higher than 1, making it scroll faster.</paragraph>
            <image candidates="{'*': 'tutorials/2d/img/2d_parallax_size_viewport.webp'}" uri="tutorials/2d/img/2d_parallax_size_viewport.webp"></image>
            <paragraph>The scene above is comprised of five layers. Some good <reference internal="True" refuri="../../classes/class_parallax2d#class-parallax2d-property-scroll-scale"><inline classes="std std-ref">scroll_scale</inline></reference>
                values might be:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><literal>(0.7, 1)</literal> - Forest</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>(0.5, 1)</literal> - Hills</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>(0.3, 1)</literal> - Lower Clouds</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>(0.2, 1)</literal> - Higher Clouds</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>(0.1, 1)</literal> - Sky</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>The video below displays how these values affect scrolling while in-game:</paragraph>
            <video_node alt="A scene with five layers scrolling at different speeds" autoplay="True" controls="True" height="" klass="" loop="True" muted="True" poster="" preload="auto" sources="['tutorials/2d/video/2d_parallax_scroll_scale.webm',\ 'video/webm',\ False]" width="">
            </video_node>
        </section>
        <section ids="infinite-repeat" names="infinite\ repeat">
            <title>Infinite repeat</title>
            <paragraph><reference internal="True" refuri="../../classes/class_parallax2d#class-parallax2d"><inline classes="std std-ref">Parallax2D</inline></reference> provides a bonus effect that gives textures the illusion of repeating infinitely.
                <reference internal="True" refuri="../../classes/class_parallax2d#class-parallax2d-property-repeat-size"><inline classes="std std-ref">repeat_size</inline></reference> tells the node to snap its position forward or back when the
                camera scrolls by the set value. This effect is achieved by adding a single repeat to all the child canvas items offset
                by the value. While the camera scrolls between the image and its repeat, it invisibly snaps back giving the appearance
                of a looping image.</paragraph>
            <image candidates="{'*': 'tutorials/2d/img/2d_parallax_scroll.gif'}" uri="tutorials/2d/img/2d_parallax_scroll.gif"></image>
            <paragraph>Being a delicate effect, it's easy for unfamiliar users to make mistakes with their setup. Let's go over the "how" and
                "why" of a few common problems users encounter.</paragraph>
            <section ids="poor-sizing" names="poor\ sizing">
                <title>Poor sizing</title>
                <paragraph>The infinite repeat effect is easiest to work with when you have an image designed to repeat seamlessly and is the same
                    size or larger than your viewport <strong>before</strong> setting the <reference internal="True" refuri="../../classes/class_parallax2d#class-parallax2d-property-repeat-size"><inline classes="std std-ref">repeat_size</inline></reference>. If
                    you aren't able to obtain assets that are designed for this task, there are some other things you can do to better
                    prepare your image in regards to size.</paragraph>
                <paragraph>Here is an example of a texture that is too small for its viewport:</paragraph>
                <image candidates="{'*': 'tutorials/2d/img/2d_parallax_size_bad.webp'}" uri="tutorials/2d/img/2d_parallax_size_bad.webp"></image>
                <paragraph>We can see that the viewport size is 500x300 but the texture is 288x208. If we set the
                    <reference internal="True" refuri="../../classes/class_parallax2d#class-parallax2d-property-repeat-size"><inline classes="std std-ref">repeat_size</inline></reference> to the size of our image, the infinite repeat effect doesn't
                    scroll properly because the original texture doesn't cover the viewport. If we set the
                    <reference internal="True" refuri="../../classes/class_parallax2d#class-parallax2d-property-repeat-size"><inline classes="std std-ref">repeat_size</inline></reference> to the size of the viewport, we have a large gap. What can we
                    do?</paragraph>
                <section ids="make-the-viewport-smaller" names="make\ the\ viewport\ smaller">
                    <title>Make the viewport smaller</title>
                    <paragraph>The simplest answer is to make the viewport the same size or smaller than your textures. Click on
                        <literal>Project -&gt; Project Settings -&gt; Window</literal> and change the viewport height and width to match your background.</paragraph>
                    <image candidates="{'*': 'tutorials/2d/img/2d_parallax_size_viewport.webp'}" uri="tutorials/2d/img/2d_parallax_size_viewport.webp"></image>
                </section>
                <section ids="scale-the-parallax2d" names="scale\ the\ parallax2d">
                    <title>Scale the Parallax2D</title>
                    <paragraph>If you're not aiming for a pixel-perfect style, or don't mind a little blurriness, you may opt to scale the textures
                        larger to fit your screen. Set the <reference internal="True" refuri="../../classes/class_node2d#class-node2d-property-scale"><inline classes="std std-ref">scale</inline></reference> of the <reference internal="True" refuri="../../classes/class_parallax2d#class-parallax2d"><inline classes="std std-ref">Parallax2D</inline></reference>,
                        and all child textures scale with it.</paragraph>
                </section>
                <section ids="scale-the-child-nodes" names="scale\ the\ child\ nodes">
                    <title>Scale the child nodes</title>
                    <paragraph>Similar to scaling the <reference internal="True" refuri="../../classes/class_parallax2d#class-parallax2d"><inline classes="std std-ref">Parallax2D</inline></reference>, you can scale your <reference internal="True" refuri="../../classes/class_sprite2d#class-sprite2d"><inline classes="std std-ref">Sprite2D</inline></reference> nodes to
                        be large enough to cover the screen. Keep in mind that some settings like
                        <reference internal="True" refuri="../../classes/class_parallax2d#class-parallax2d-property-repeat-size"><inline classes="std std-ref">Parallax2D.repeat_size</inline></reference> and
                        <reference internal="True" refuri="../../classes/class_sprite2d#class-sprite2d-property-region-rect"><inline classes="std std-ref">Sprite2D.region_rect</inline></reference> do not take scaling into account, so it's necessary to
                        adjust these values based on the scale.</paragraph>
                    <image candidates="{'*': 'tutorials/2d/img/2d_parallax_size_scale.webp'}" uri="tutorials/2d/img/2d_parallax_size_scale.webp"></image>
                </section>
                <section ids="repeat-the-textures" names="repeat\ the\ textures">
                    <title>Repeat the textures</title>
                    <paragraph>You can also start off on the right foot by preparing child nodes earlier in the process. If you have a
                        <reference internal="True" refuri="../../classes/class_sprite2d#class-sprite2d"><inline classes="std std-ref">Sprite2D</inline></reference> you'd like to repeat, but is too small, you can do the following to repeat it:</paragraph>
                    <bullet_list bullet="-">
                        <list_item>
                            <paragraph>set <reference internal="True" refuri="../../classes/class_canvasitem#class-canvasitem-property-texture-repeat"><inline classes="std std-ref">texture_repeat</inline></reference> to <reference internal="True" refuri="../../classes/class_canvasitem#class-canvasitem-constant-texture-repeat-enabled"><inline classes="std std-ref">CanvasItem.TEXTURE_REPEAT_ENABLED</inline></reference></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>set <reference internal="True" refuri="../../classes/class_sprite2d#class-sprite2d-property-region-enabled"><inline classes="std std-ref">region_enabled</inline></reference> to <literal>true</literal></paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>set the <reference internal="True" refuri="../../classes/class_sprite2d#class-sprite2d-property-region-rect"><inline classes="std std-ref">region_rect</inline></reference> to a multiple of the size of your texture large enough to cover the viewport.</paragraph>
                        </list_item>
                    </bullet_list>
                    <paragraph>Below, you can see that repeating the image twice makes it large enough to cover the screen.</paragraph>
                    <image candidates="{'*': 'tutorials/2d/img/2d_parallax_size_repeat.webp'}" uri="tutorials/2d/img/2d_parallax_size_repeat.webp"></image>
                </section>
            </section>
            <section ids="poor-positioning" names="poor\ positioning">
                <title>Poor positioning</title>
                <paragraph>It's common to see users mistakenly set all of their textures to be centered at <literal>(0,0)</literal>:</paragraph>
                <image candidates="{'*': 'tutorials/2d/img/2d_parallax_single_centered.webp'}" uri="tutorials/2d/img/2d_parallax_single_centered.webp"></image>
                <paragraph>This creates problems with the infinite repeat effect and should be avoided. The "infinite repeat canvas" starts at
                    <literal>(0,0)</literal> and expands down and to the right to the size of the <reference internal="True" refuri="../../classes/class_parallax2d#class-parallax2d-property-repeat-size"><inline classes="std std-ref">repeat_size</inline></reference>
                    value.</paragraph>
                <image candidates="{'*': 'tutorials/2d/img/2d_parallax_single_expand.webp'}" uri="tutorials/2d/img/2d_parallax_single_expand.webp"></image>
                <paragraph>If the textures are centered on the <literal>(0,0)</literal> crossing, the infinite repeat canvas is only partly covered, so it
                    only partly repeats.</paragraph>
                <section ids="would-increasing-repeat-times-fix-this" names="would\ increasing\ repeat_times\ fix\ this?">
                    <title>Would increasing <literal>repeat_times</literal> fix this?</title>
                    <paragraph>Increasing <reference internal="True" refuri="../../classes/class_parallax2d#class-parallax2d-property-repeat-times"><inline classes="std std-ref">repeat_times</inline></reference> technically <emphasis>would</emphasis> work in some scenarios, but
                        is a brute force solution and not the problem it is designed to solve (we'll go over this in a bit). A better fix is to
                        understand how the repeat effect works and set up the parallax textures appropriately to begin with.</paragraph>
                    <paragraph>First, check to see if any textures are spilling over onto the negative parts of the canvas. Make sure the textures
                        used in the parallax nodes fit inside the "infinite repeat canvas" starting at <literal>(0,0)</literal>. That way, if
                        <reference internal="True" refuri="../../classes/class_parallax2d#class-parallax2d-property-repeat-size"><inline classes="std std-ref">Parallax2D.repeat_size</inline></reference> is set correctly, it should look something like
                        this, with one single loop of the image the same size or larger than the viewport:</paragraph>
                    <image candidates="{'*': 'tutorials/2d/img/2d_parallax_repeat_good_norect.webp'}" uri="tutorials/2d/img/2d_parallax_repeat_good_norect.webp"></image>
                    <paragraph>If you think of how the image scrolls across the screen, it starts by displaying what's inside the red rectangle
                        (determined by <reference internal="True" refuri="../../classes/class_parallax2d#class-parallax2d-property-repeat-size"><inline classes="std std-ref">repeat_size</inline></reference>), and when it reaches what's inside the yellow
                        rectangle it zips the image forward to give the illusion of scrolling forever.</paragraph>
                    <image candidates="{'*': 'tutorials/2d/img/2d_parallax_repeat_good.webp'}" uri="tutorials/2d/img/2d_parallax_repeat_good.webp"></image>
                    <paragraph>If you have the image positioned away from the "infinite repeat canvas", when the camera reaches the yellow rectangle,
                        half of the image is cut off before it jumps forward like in the image below:</paragraph>
                    <image candidates="{'*': 'tutorials/2d/img/2d_parallax_repeat_bad.webp'}" uri="tutorials/2d/img/2d_parallax_repeat_bad.webp"></image>
                </section>
            </section>
        </section>
        <section ids="scroll-offset" names="scroll\ offset">
            <title>Scroll offset</title>
            <paragraph>If your parallax textures are already working correctly, but you prefer it to start at a different point,
                <reference internal="True" refuri="../../classes/class_parallax2d#class-parallax2d"><inline classes="std std-ref">Parallax2D</inline></reference> comes with a <reference internal="True" refuri="../../classes/class_parallax2d#class-parallax2d-property-scroll-offset"><inline classes="std std-ref">scroll_offset</inline></reference> property
                used to offset where the infinite repeat canvas starts. As an example, if your image is 288x208, setting
                the <reference internal="True" refuri="../../classes/class_parallax2d#class-parallax2d-property-scroll-offset"><inline classes="std std-ref">scroll_offset</inline></reference> to <literal>(-144,0)</literal> or <literal>(144,0)</literal> allows it to begin
                halfway across the image.</paragraph>
        </section>
        <section ids="repeat-times" names="repeat\ times">
            <title>Repeat times</title>
            <paragraph>Ideally, following this guide, your parallax textures are large enough to cover the screen even when zoomed out.
                Until now, we have had a perfectly fitting 288x208 texture inside of a 288x208 viewport. However, problems
                occur when we zoom out by setting the <reference internal="True" refuri="../../classes/class_camera2d#class-camera2d-property-zoom"><inline classes="std std-ref">Camera2D.zoom</inline></reference> to <literal>(0.5, 0.5)</literal>:</paragraph>
            <image candidates="{'*': 'tutorials/2d/img/2d_parallax_zoom_single.webp'}" uri="tutorials/2d/img/2d_parallax_zoom_single.webp"></image>
            <paragraph>Even though everything is correctly set for the viewport at the default zoom level, zooming out makes it smaller than
                the viewport, breaking the infinite repeat effect. This is where
                <reference internal="True" refuri="../../classes/class_parallax2d#class-parallax2d-property-repeat-times"><inline classes="std std-ref">repeat_times</inline></reference> can help out. Setting a value of <literal>3</literal> (one extra
                repeat behind and in front), it is now large enough to accommodate the infinite repeat effect.</paragraph>
            <image candidates="{'*': 'tutorials/2d/img/2d_parallax_zoom_repeat_times.webp'}" uri="tutorials/2d/img/2d_parallax_zoom_repeat_times.webp"></image>
            <paragraph>If these textures were meant to be repeated vertically, we would have specified a <literal>y</literal> value for the
                <reference internal="True" refuri="../../classes/class_parallax2d#class-parallax2d-property-repeat-size"><inline classes="std std-ref">repeat_size</inline></reference>. The
                <reference internal="True" refuri="../../classes/class_parallax2d#class-parallax2d-property-repeat-times"><inline classes="std std-ref">repeat_times</inline></reference> would automatically add a repeat above and below as well.
                This is only a horizontal parallax, so it leaves an empty block above and below the image. How do we solve this? We
                need to get creative! In this example, we stretch the sky higher, and grass sprite lower. The textures now support the
                normal zoom level and zooming out to half size.</paragraph>
            <image candidates="{'*': 'tutorials/2d/img/2d_parallax_zoom_repeat_adjusted.webp'}" uri="tutorials/2d/img/2d_parallax_zoom_repeat_adjusted.webp"></image>
        </section>
        <section ids="split-screen" names="split\ screen">
            <title>Split screen</title>
            <paragraph>Most tutorials for making a split screen game in Godot begin by writing a small script to assign
                the <reference internal="True" refuri="../../classes/class_viewport#class-viewport-property-world-2d"><inline classes="std std-ref">Viewport.world_2d</inline></reference> of the first SubViewport to the second, so they have a
                shared display. Questions often pop up about how to share a parallax effect between both screens.</paragraph>
            <paragraph>The parallax effect fakes a perspective by moving the positions of different textures in relation to the camera. This is
                understandably problematic if you have multiple cameras, because your textures can't be in two places at once!</paragraph>
            <paragraph>This is still achievable by cloning the parallax nodes into the second (or third or fourth)
                <reference internal="True" refuri="../../classes/class_subviewport#class-subviewport"><inline classes="std std-ref">SubViewport</inline></reference>. Here's how it looks for a two player game:</paragraph>
            <image candidates="{'*': 'tutorials/2d/img/2d_parallax_splitscreen.webp'}" uri="tutorials/2d/img/2d_parallax_splitscreen.webp"></image>
            <paragraph>Of course, now both backgrounds show in both SubViewports. What we want is for some nodes to be visible in one viewport
                but not another. While technically possible, this is not a feature officially supported by Godot at the moment. There is
                currently a proposal to make this much simpler, so please stay tuned.</paragraph>
            <paragraph>As a workaround, you can do the following:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>Set the first SubViewport's <reference internal="True" refuri="../../classes/class_viewport#class-viewport-property-canvas-cull-mask"><inline classes="std std-ref">canvas_cull_mask</inline></reference> to only layer 1, so it displays all nodes with a <reference internal="True" refuri="../../classes/class_canvasitem#class-canvasitem-property-visibility-layer"><inline classes="std std-ref">visibility_layer</inline></reference> of layer 1.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Set the second SubViewport's <reference internal="True" refuri="../../classes/class_viewport#class-viewport-property-canvas-cull-mask"><inline classes="std std-ref">canvas_cull_mask</inline></reference> to only layer 2, so it displays all nodes with a <reference internal="True" refuri="../../classes/class_canvasitem#class-canvasitem-property-visibility-layer"><inline classes="std std-ref">visibility_layer</inline></reference> of layer 2.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Set the <reference internal="True" refuri="../../classes/class_canvasitem#class-canvasitem-property-visibility-layer"><inline classes="std std-ref">visibility_layer</inline></reference> of every node you want to display in both viewports to both layers 1 and 2.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Set the <reference internal="True" refuri="../../classes/class_canvasitem#class-canvasitem-property-visibility-layer"><inline classes="std std-ref">visibility_layer</inline></reference> of the <reference internal="True" refuri="../../classes/class_parallax2d#class-parallax2d"><inline classes="std std-ref">Parallax2D</inline></reference> node and all its descendants in the first <reference internal="True" refuri="../../classes/class_subviewport#class-subviewport"><inline classes="std std-ref">SubViewport</inline></reference> to layer 1.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Set the <reference internal="True" refuri="../../classes/class_canvasitem#class-canvasitem-property-visibility-layer"><inline classes="std std-ref">visibility_layer</inline></reference> of the <reference internal="True" refuri="../../classes/class_parallax2d#class-parallax2d"><inline classes="std std-ref">Parallax2D</inline></reference> node and all its descendants in the second <reference internal="True" refuri="../../classes/class_subviewport#class-subviewport"><inline classes="std std-ref">SubViewport</inline></reference> to layer 2.</paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section ids="previewing-in-the-editor" names="previewing\ in\ the\ editor">
            <title>Previewing in the editor</title>
            <paragraph>Prior to 4.3, the recommendation was to place every layer in their own
                <reference internal="True" refuri="../../classes/class_parallaxbackground#class-parallaxbackground"><inline classes="std std-ref">ParallaxBackground</inline></reference>, enable the
                <reference internal="True" refuri="../../classes/class_canvaslayer#class-canvaslayer-property-follow-viewport-enabled"><inline classes="std std-ref">follow_viewport_enabled</inline></reference> property, and scale the individual
                layer. This method has always been tricky to get right, but is still achievable by using a
                <reference internal="True" refuri="../../classes/class_canvaslayer#class-canvaslayer"><inline classes="std std-ref">CanvasLayer</inline></reference> instead of a <reference internal="True" refuri="../../classes/class_parallaxbackground#class-parallaxbackground"><inline classes="std std-ref">ParallaxBackground</inline></reference>.</paragraph>
            <note>
                <paragraph>Another recommendation is <reference name="KoBeWi's &quot;Parallax2D Preview&quot; addon" refuri="https://github.com/KoBeWi/Godot-Parallax2D-Preview">KoBeWi's "Parallax2D Preview" addon</reference><target ids="kobewi-s-parallax2d-preview-addon" names="kobewi's\ &quot;parallax2d\ preview&quot;\ addon" refuri="https://github.com/KoBeWi/Godot-Parallax2D-Preview"></target>.
                    It provides a few different preview modes and is very handy!</paragraph>
            </note>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
