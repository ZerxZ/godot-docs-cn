<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/tutorials/rendering/multiple_resolutions.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-multiple-resolutions"></target>
    <section ids="multiple-resolutions doc-multiple-resolutions" names="multiple\ resolutions 多分辨率 doc_multiple_resolutions">
        <title>多分辨率</title>
        <section ids="the-problem-of-multiple-resolutions" names="the\ problem\ of\ multiple\ resolutions 多分辨率问题">
            <title>多分辨率问题</title>
            <paragraph>开发人员经常会遇到麻烦, 不知道如何在他们的游戏中最好地支持多种分辨率. 对于桌面和控制台游戏, 这或多或少是简单的, 因为大多数屏幕长宽比是16:9, 分辨率是标准的720p, 1080p, 1440p, 4K,.......</paragraph>
            <paragraph>对于手机游戏来说，起初，这很容易。许多年来，iPhone 和 iPad 使用相同的分辨率。当实行 <emphasis>Retina</emphasis> 后，他们只是将像素密度提高了一倍；大多数开发商不得不以默认和双倍的分辨率提供资产。</paragraph>
            <paragraph>如今, 情况已不再如此, 因为有很多不同的屏幕尺寸, 密度和长宽比. 非传统的尺寸也越来越受欢迎, 如超宽显示屏.</paragraph>
            <paragraph>对于3D游戏来说, 没有太大的必要支持多种分辨率(从审美角度来看).3D几何图形将根据视场填充屏幕, 而不考虑长宽比. 在这种情况下, 人们可能想要支持的主要原因是为了 <emphasis>性能</emphasis> 的原因(以较低的分辨率运行以增加每秒的帧数).</paragraph>
            <paragraph>对于2D和游戏UI, 这是一个不同的问题, 因为设计需要在Photoshop, GIMP或Krita等软件中使用特定的像素尺寸来创建.</paragraph>
            <paragraph>由于布局, 长宽比, 分辨率和像素密度会有很大的变化, 因此不再可能为每个特定的屏幕设计UI. 必须使用另一种方法.</paragraph>
        </section>
        <section ids="one-size-fits-all" names="one\ size\ fits\ all 万全之策">
            <title>万全之策</title>
            <paragraph>最常见的方法是使用一个单一的 <emphasis>基础</emphasis> 分辨率, 然后将其适用于其他所有情况. 这个分辨率是大多数玩家预期的玩游戏的方式, 鉴于他们的硬件. 对于移动设备, 谷歌在网上有有用的 <reference name="统计资料" refuri="https://developer.android.com/about/dashboards">统计资料</reference> , 对于桌面设备,Steam <reference name="也有" refuri="https://store.steampowered.com/hwsurvey/">也有</reference> .</paragraph>
            <paragraph>举个例子,Steam显示最常见的 <emphasis>主要显示分辨率是</emphasis> 1920×1080, 所以明智的做法是为这个分辨率开发一个游戏, 然后期处理不同尺寸和长宽比的缩放.</paragraph>
            <paragraph>Godot 还提供了一系列通用的容器.</paragraph>
            <seealso>
                <paragraph>You can see how Godot's support for multiple resolutions works in action using the
                    <reference name="Multiple Resolutions and Aspect Ratios demo project" refuri="https://github.com/godotengine/godot-demo-projects/tree/master/gui/multiple_resolutions">Multiple Resolutions and Aspect Ratios demo project</reference>.</paragraph>
            </seealso>
        </section>
        <section ids="base-size" names="base\ size 基本大小">
            <title>基本大小</title>
            <paragraph>窗口的基本尺寸可以在项目设置中的 <strong>Display → Window</strong> 下指定.</paragraph>
            <image candidates="{'*': 'tutorials/rendering/img/screenres.webp'}" uri="tutorials/rendering/img/screenres.webp"></image>
            <paragraph>然而, 它的作用并不完全明显; 引擎将 <emphasis>不</emphasis> 尝试将显示器切换到此分辨率. 相反, 将此设置视为 "设计大小", 即你在编辑器中使用的区域的大小. 此设置直接对应于2D编辑器中蓝色矩形的大小.</paragraph>
            <paragraph>通常需要支持具有与该基本大小不同的屏幕和窗口大小的设备. Godot提供了许多方法来控制视口的大小调整和拉伸到不同的屏幕大小.</paragraph>
            <note>
                <paragraph>On this page, <emphasis>window</emphasis> refers to the screen area allotted to your game
                    by the system, while <emphasis>viewport</emphasis> refers to the root object (accessible
                    from <literal>get_tree().root</literal>) which the game controls to fill this screen area.
                    This viewport is a <reference internal="True" refuri="../../classes/class_window#class-window"><inline classes="std std-ref">Window</inline></reference> instance. Recall from the
                    <reference internal="True" refuri="viewports#doc-viewports"><inline classes="std std-ref">introduction</inline></reference> that <emphasis>all</emphasis> Window objects are viewports.</paragraph>
            </note>
            <paragraph>To configure the stretch base size at runtime from a script, use the
                <literal>get_tree().root.content_scale_size</literal> property (see
                <reference internal="True" refuri="../../classes/class_window#class-window-property-content-scale-size"><inline classes="std std-ref">Window.content_scale_size</inline></reference>).
                Changing this value can indirectly change the size of 2D elements. However, to
                provide an user-accessible scaling option, using
                <reference internal="True" refid="doc-multiple-resolutions-stretch-scale"><inline classes="std std-ref">拉伸缩放</inline></reference> is recommended as it's easier to
                adjust.</paragraph>
            <note>
                <paragraph>Godot遵循了现代多种分辨率的方法. 引擎永远不会自行改变显示器的分辨率. 虽然改变显示器的分辨率是最有效的方法, 但这也是最不可靠的方法, 因为如果游戏崩溃, 它可能会让显示器卡在一个低分辨率上. 这在macOS或Linux上很常见, 因为它们对分辨率变化的处理不如Windows.</paragraph>
                <paragraph>更改显示器的分辨率还会取消游戏开发者对过滤和纵横比拉伸的控制, 这对于确保像素游戏的正确显示画面非常重要.</paragraph>
                <paragraph>最重要的是, 更改显示器的分辨率会使游戏的Alt-Tab键切换速度变慢, 因为每次切换时显示器都必须更改分辨率.</paragraph>
            </note>
        </section>
        <section ids="resizing" names="resizing 调整大小">
            <title>调整大小</title>
            <paragraph>There are several types of devices, with several types of screens, which
                in turn have different pixel density and resolutions. Handling all of
                them can be a lot of work, so Godot tries to make the developer's life a
                little easier. The <reference internal="True" refuri="../../classes/class_viewport#class-viewport"><inline classes="std std-ref">Viewport</inline></reference>
                node has several functions to handle resizing, and the root node of the
                scene tree is always a viewport (scenes loaded are instanced as a child
                of it, and it can always be accessed by calling
                <literal>get_tree().root</literal> or <literal>get_node("/root")</literal>).</paragraph>
            <paragraph>In any case, while changing the root Viewport params is probably the
                most flexible way to deal with the problem, it can be a lot of work,
                code and guessing, so Godot provides a set of parameters in the
                project settings to handle multiple resolutions.</paragraph>
        </section>
        <section ids="stretch-settings" names="stretch\ settings 拉伸设置">
            <title>拉伸设置</title>
            <paragraph>拉伸设置位于项目设置中, 提供了几个选项:</paragraph>
            <image candidates="{'*': 'tutorials/rendering/img/stretchsettings.webp'}" uri="tutorials/rendering/img/stretchsettings.webp"></image>
            <section ids="stretch-mode" names="stretch\ mode 拉伸模式">
                <title>拉伸模式</title>
                <paragraph>The <strong>Stretch Mode</strong> setting defines how the base size is stretched to fit
                    the resolution of the window or screen. The animations below use a "base
                    size" of just 16×9 pixels to demonstrate the effect of different stretch
                    modes. A single sprite, also 16×9 pixels in size, covers the entire viewport,
                    and a diagonal <reference internal="True" refuri="../../classes/class_line2d#class-line2d"><inline classes="std std-ref">Line2D</inline></reference> is added on top of it:</paragraph>
                <image candidates="{'*': 'tutorials/rendering/img/stretch_demo_scene.png'}" uri="tutorials/rendering/img/stretch_demo_scene.png"></image>
                <comment xml:space="preserve">Animated GIFs are generated from:</comment>
                <comment xml:space="preserve">https://github.com/ttencate/godot_scaling_mode</comment>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><strong>Stretch Mode = Disabled</strong> (默认). 不发生拉伸. 场景中的一个单位对应于屏幕上的一个像素. 在这种模式下, <strong>Stretch Aspect</strong> 设置没有效果.</paragraph>
                        <image candidates="{'*': 'tutorials/rendering/img/stretch_disabled_expand.gif'}" uri="tutorials/rendering/img/stretch_disabled_expand.gif"></image>
                    </list_item>
                    <list_item>
                        <paragraph><strong>Stretch Mode = Canvas Items</strong>: In this mode, the base size specified in
                            width and height in the project settings is
                            stretched to cover the whole screen (taking the <strong>Stretch Aspect</strong>
                            setting into account). This means that everything is rendered
                            directly at the target resolution. 3D is unaffected,
                            while in 2D, there is no longer a 1:1 correspondence between sprite
                            pixels and screen pixels, which may result in scaling artifacts.</paragraph>
                        <image candidates="{'*': 'tutorials/rendering/img/stretch_2d_expand.gif'}" uri="tutorials/rendering/img/stretch_2d_expand.gif"></image>
                    </list_item>
                    <list_item>
                        <paragraph><strong>Stretch Mode = Viewport</strong> : 视口缩放意味着根 <reference internal="True" refuri="../../classes/class_viewport#class-viewport"><inline classes="std std-ref">Viewport</inline></reference> 的尺寸被精确地设置为在项目设置的 <strong>Display</strong> 部分指定的基本尺寸. 场景首先被渲染到这个视口. 最后, 这个视口被缩放以适应屏幕(考虑 <strong>Stretch Aspect</strong> 的设置).</paragraph>
                        <image candidates="{'*': 'tutorials/rendering/img/stretch_viewport_expand.gif'}" uri="tutorials/rendering/img/stretch_viewport_expand.gif"></image>
                    </list_item>
                </bullet_list>
                <paragraph>To configure the stretch mode at runtime from a script, use the
                    <literal>get_tree().root.content_scale_mode</literal> property (see
                    <reference internal="True" refuri="../../classes/class_window#class-window-property-content-scale-mode"><inline classes="std std-ref">Window.content_scale_mode</inline></reference>
                    and the <reference internal="True" refuri="../../classes/class_window#enum-window-contentscalemode"><inline classes="std std-ref">ContentScaleMode</inline></reference> enum).</paragraph>
            </section>
            <section ids="stretch-aspect" names="stretch\ aspect 拉伸比例">
                <title>拉伸比例</title>
                <paragraph>第二个设置是拉伸纵横比. 请注意, 只有在 <strong>Stretch Mode</strong> 被设置为 <strong>Disabled</strong> 以外的情况下, 这才会生效.</paragraph>
                <paragraph>在下面的动画中, 你会注意到灰色和黑色区域. 黑色区域由引擎添加, 无法绘制. 灰色区域是场景的一部分, 可以绘制. 灰色区域对应于你在2D编辑器中看到的蓝色框架外的区域.</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><strong>Stretch Aspect = Ignore</strong> : 在拉伸屏幕时忽略长宽比. 这意味着原始分辨率将被拉伸以完全填满屏幕, 即使它更宽或更窄. 这可能会导致不均匀的拉伸, 事物看起来比设计的更宽或更高.</paragraph>
                        <image candidates="{'*': 'tutorials/rendering/img/stretch_viewport_ignore.gif'}" uri="tutorials/rendering/img/stretch_viewport_ignore.gif"></image>
                    </list_item>
                    <list_item>
                        <paragraph><strong>Stretch Aspect = Keep</strong> : 在拉伸屏幕的时候保持长宽比. 这意味着无论屏幕分辨率如何, 视口都会保留原来的尺寸, 黑条会被添加到屏幕的顶部或底部("宽屏模式 ")或侧面(" 竖屏模式").</paragraph>
                        <paragraph>如果你事先知道目标设备的宽高比, 或者你不想处理不同的宽高比, 这是一个不错的选择.</paragraph>
                        <image candidates="{'*': 'tutorials/rendering/img/stretch_viewport_keep.gif'}" uri="tutorials/rendering/img/stretch_viewport_keep.gif"></image>
                    </list_item>
                    <list_item>
                        <paragraph><strong>Stretch Aspect = Keep Width</strong> : 在拉伸屏幕时保持长宽比. 如果屏幕比基本尺寸宽, 则会在左右两边添加黑条(竖屏模式). 但如果屏幕比基本分辨率高, 视口将在垂直方向上增长(更多的内容将在底部可见). 你也可以把它看作是 "垂直扩展" .</paragraph>
                        <paragraph>这通常是创建可扩展的GUI或HUD的最佳选择, 因此一些控件可以锚定到底部( <reference internal="True" refuri="../ui/size_and_anchors#doc-size-and-anchors"><inline classes="std std-ref">大小和锚点</inline></reference>).</paragraph>
                        <image candidates="{'*': 'tutorials/rendering/img/stretch_viewport_keep_width.gif'}" uri="tutorials/rendering/img/stretch_viewport_keep_width.gif"></image>
                    </list_item>
                    <list_item>
                        <paragraph><strong>Stretch Aspect = Keep Height</strong> : 在拉伸屏幕时保持长宽比. 如果屏幕比基本尺寸高, 则会在顶部和底部添加黑条(宽屏模式). 但如果屏幕比基本分辨率宽, 视口将在水平方向上增长(更多的内容将在右边可见). 你也可以把它看作是 "水平扩展" .</paragraph>
                        <paragraph>这通常是水平滚动的2D游戏的最佳选择(如跑步者或平台游戏者).</paragraph>
                        <image candidates="{'*': 'tutorials/rendering/img/stretch_viewport_keep_height.gif'}" uri="tutorials/rendering/img/stretch_viewport_keep_height.gif"></image>
                    </list_item>
                    <list_item>
                        <paragraph><strong>Stretch Aspect = Expand</strong> : 在拉伸屏幕时保持长宽比, 但既不保持基本宽度也不保持高度. 根据屏幕的长宽比, 视口将在水平方向(如果屏幕比基本尺寸宽)或垂直方向上变大(如果屏幕比原始尺寸高).</paragraph>
                        <image candidates="{'*': 'tutorials/rendering/img/stretch_viewport_expand.gif'}" uri="tutorials/rendering/img/stretch_viewport_expand.gif"></image>
                    </list_item>
                </bullet_list>
                <tip>
                    <paragraph>为了以类似的自动确定的比例系数支持纵向和横向模式，请将你的项目的基本分辨率设置为 <emphasis>方形</emphasis> （1:1长宽比）而不是矩形。例如，如果你希望以1280×720为基本分辨率进行设计，但又希望同时支持纵向和横向模式，那么在项目设置中使用720×720作为项目的基本窗口尺寸。</paragraph>
                    <paragraph>为了让用户在运行时选择自己喜欢的屏幕方向，记得将**Display &gt; Window &gt; Handheld &gt; Orientation** 设置为 <literal>sensor</literal> (传感器).</paragraph>
                </tip>
                <paragraph>To configure the stretch aspect at runtime from a script, use the
                    <literal>get_tree().root.content_scale_aspect</literal> property (see
                    <reference internal="True" refuri="../../classes/class_window#class-window-property-content-scale-aspect"><inline classes="std std-ref">Window.content_scale_aspect</inline></reference>
                    and the <reference internal="True" refuri="../../classes/class_window#enum-window-contentscaleaspect"><inline classes="std std-ref">ContentScaleAspect</inline></reference> enum).</paragraph>
                <target refid="doc-multiple-resolutions-stretch-scale"></target>
            </section>
            <section ids="stretch-scale doc-multiple-resolutions-stretch-scale" names="stretch\ scale 拉伸缩放 doc_multiple_resolutions_stretch_scale">
                <title>拉伸缩放</title>
                <paragraph>The <strong>Scale</strong> setting allows you to add an extra scaling factor on top of
                    what the <strong>Stretch</strong> options above already provide. The default value of <literal>1.0</literal>
                    means that no additional scaling occurs.</paragraph>
                <paragraph>For example, if you set <strong>Scale</strong> to <literal>2.0</literal> and leave <strong>Stretch Mode</strong> on
                    <strong>Disabled</strong>, each unit in your scene will correspond to 2×2 pixels on the
                    screen. This is a good way to provide scaling options for non-game applications.</paragraph>
                <paragraph>If <strong>Stretch Mode</strong> is set to <strong>canvas_items</strong>, 2D elements will be scaled
                    relative to the base window size, then multiplied by the <strong>Scale</strong> setting. This
                    can be exposed to players to allow them to adjust the automatically determined
                    scale to their liking, for better accessibility.</paragraph>
                <paragraph>If <strong>Stretch Mode</strong> is set to <strong>viewport</strong>, the viewport's resolution is divided
                    by <strong>Scale</strong>. This makes pixels look larger and reduces rendering resolution
                    (with a given window size), which can improve performance.</paragraph>
                <paragraph>To configure the stretch scale at runtime from a script, use the
                    <literal>get_tree().root.content_scale_factor</literal> property (see
                    <reference internal="True" refuri="../../classes/class_window#class-window-property-content-scale-factor"><inline classes="std std-ref">Window.content_scale_factor</inline></reference>).</paragraph>
                <target refid="doc-multiple-resolutions-stretch-scale-mode"></target>
            </section>
            <section ids="stretch-scale-mode doc-multiple-resolutions-stretch-scale-mode" names="stretch\ scale\ mode 拉伸缩放模式 doc_multiple_resolutions_stretch_scale_mode">
                <title>拉伸缩放模式</title>
                <paragraph>Since Godot 4.2, the <strong>Stretch Scale Mode</strong> setting allows you to constrain the
                    automatically determined scale factor (as well as the manually specified
                    <strong>Stretch Scale</strong> setting) to integer values. By default, this setting is set to
                    <literal>fractional</literal>, which allows any scale factor to be applied (including fractional
                    values such as <literal>2.5</literal>). When set to <literal>integer</literal>, the value is rounded down to
                    the nearest integer. For example, instead of using a scale factor of <literal>2.5</literal>, it
                    would be rounded down to <literal>2.0</literal>. This is useful to prevent distortion when
                    displaying pixel art.</paragraph>
                <paragraph>Compare this pixel art which is displayed with the <literal>viewport</literal> stretch mode,
                    with the stretch scale mode set to <literal>fractional</literal>:</paragraph>
                <figure align="center" ids="id1">
                    <image alt="Fractional scaling example (incorrect pixel art appearance)" candidates="{'*': 'tutorials/rendering/img/multiple_resolutions_pixel_art_fractional_scaling.webp'}" uri="tutorials/rendering/img/multiple_resolutions_pixel_art_fractional_scaling.webp"></image>
                    <caption>Checkerboard doesn't look "even". Line widths in the logo and text varies wildly.</caption>
                </figure>
                <paragraph>This pixel art is also displayed with the <literal>viewport</literal> stretch mode, but the
                    stretch scale mode is set to <literal>integer</literal> this time:</paragraph>
                <figure align="center" ids="id2">
                    <image alt="Integer scaling example (correct pixel art appearance)" candidates="{'*': 'tutorials/rendering/img/multiple_resolutions_pixel_art_integer_scaling.webp'}" uri="tutorials/rendering/img/multiple_resolutions_pixel_art_integer_scaling.webp"></image>
                    <caption>Checkerboard looks perfectly even. Line widths are consistent.</caption>
                </figure>
                <paragraph>For example, if your viewport base size is 640×360 and the window size is 1366×768:</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>When using <literal>fractional</literal>, the viewport is displayed at a resolution of
                            1366×768 (scale factor is roughly 2.133×). The entire window space is used.
                            Each pixel in the viewport corresponds to 2.133×2.133 pixels in the displayed
                            area. However, since displays can only display "whole" pixels, this will lead
                            to uneven pixel scaling which results in incorrect appearance of pixel art.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>When using <literal>integer</literal>, the viewport is displayed at a resolution of 1280×720
                            (scale factor is 2×). The remaining space is filled with black bars on all
                            four sides, so that each pixel in the viewport corresponds to 2×2 pixels in
                            the displayed area.</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>This setting is effective with any stretch mode. However, when using the
                    <literal>disabled</literal> stretch mode, it will only affect the <strong>Stretch Scale</strong> setting by
                    rounding it <emphasis>down</emphasis> to the nearest integer value. This can be used for 3D games
                    that have a pixel art UI, so that the visible area in the 3D viewport doesn't
                    reduce in size (which occurs when using <literal>canvas_items</literal> or <literal>viewport</literal> stretch
                    mode with the <literal>integer</literal> scale mode).</paragraph>
                <tip>
                    <paragraph>Games should use the <strong>Exclusive Fullscreen</strong> window mode, as opposed to
                        <strong>Fullscreen</strong> which is designed to prevent Windows from automatically
                        treating the window as if it was exclusive fullscreen.</paragraph>
                    <paragraph><strong>Fullscreen</strong> is meant to be used by GUI applications that want to use
                        per-pixel transparency without a risk of having it disabled by the OS. It
                        achieves this by leaving a 1-pixel line at the bottom of the screen. By
                        contrast, <strong>Exclusive Fullscreen</strong> uses the actual screen size and allows
                        Windows to reduce jitter and input lag for fullscreen games.</paragraph>
                    <paragraph>When using integer scaling, this is particularly important as the 1-pixel
                        height reduction from the <strong>Fullscreen</strong> mode can cause integer scaling to
                        use a smaller scale factor than expected.</paragraph>
                </tip>
            </section>
        </section>
        <section ids="common-use-case-scenarios" names="common\ use\ case\ scenarios 常见使用场景">
            <title>常见使用场景</title>
            <paragraph>如果要适配多种分辨率和纵横比，推荐使用以下设置。</paragraph>
            <section ids="desktop-game" names="desktop\ game 桌面游戏">
                <title>桌面游戏</title>
                <paragraph><strong>非像素风：</strong></paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>Set the base window width to <literal>1920</literal> and window height to <literal>1080</literal>. If you have a
                            display smaller than 1920×1080, set <strong>Window Width Override</strong> and <strong>Window Height Override</strong> to
                            lower values to make the window smaller when the project starts.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>或者如果你主要针对的是高端设备，那么就把基础窗口宽度设置为 <literal>3840</literal>、窗口高度设置为 <literal>2160</literal> 。这样你就可以提供更高分辨率的 2D 资产，用更高的内存占用和文件大小换取更清晰的画面。注意，这样做会让未做 mipmap 的纹理在低分辨率设备上具有颗粒感，请参考 <reference internal="True" refid="doc-multiple-resolutions-reducing-aliasing-on-downsampling"><inline classes="std std-ref">减少缩减取样的混叠</inline></reference> 进行操作。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Set the stretch mode to <literal>canvas_items</literal>.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>将拉伸比例（Stretch Aspect）设置为 <literal>expand</literal> （扩展）。这样可以支持多种分辨率，并且能够更好地利用较长的智能手机屏幕（例如 18:9 和 19:9 的长宽比）。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>使用 <strong>布局</strong> 菜单将 Control 节点的锚点吸附到正确的角落。</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph><strong>像素风：</strong></paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>Set the base window size to the viewport size you intend to use. Most pixel
                            art games use viewport sizes between 256×224 and 640×480. 640×360 is a good
                            baseline, as it scales to 1280×720, 1920×1080, 2560×1440, and 3840×2160 without
                            any black bars when using integer scaling. Higher viewport sizes will require
                            using higher resolution artwork, unless you intend to show more of the game
                            world at a given time.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>将拉伸模式（Stretch Mode）设置为 <literal>viewport</literal> （视图）。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>将拉伸比例（Stretch Aspect）设置为 <literal>keep</literal> （保持）可以（通过添加黑条的方式）强制使用固定的长宽比。如果你想支持不同长宽比的话，也可以把拉伸模式设置为 <literal>expand</literal> （扩展）。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>如果选用 <literal>expand</literal> 拉伸比例，使用 <strong>布局</strong> 菜单将 Control 节点的锚点吸附到正确的角落。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Set the stretch scale mode to <literal>integer</literal>. This prevents uneven pixel scaling
                            from occurring, which makes pixel art not display as intended.</paragraph>
                    </list_item>
                </bullet_list>
                <note>
                    <paragraph>The <literal>viewport</literal> stretch mode provides low-resolution rendering that is then
                        stretched to the final window size. If you are OK with sprites being able to
                        move or rotate in "sub-pixel" positions or wish to have a high resolution 3D
                        viewport, you should use the <literal>canvas_items</literal> stretch mode instead of the <literal>viewport</literal>
                        stretch mode.</paragraph>
                </note>
            </section>
            <section ids="mobile-game-in-landscape-mode" names="mobile\ game\ in\ landscape\ mode 横屏的手机游戏">
                <title>横屏的手机游戏</title>
                <paragraph>Godot 默认使用横屏模式，所以你无需在项目设置中调整显示方向。</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>将基础窗口宽度设置为 <literal>1280</literal>，窗口高度设置为 <literal>720</literal>。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>或者如果你主要针对的是高端设备，那么就把基础窗口宽度设置为 <literal>1920</literal>、窗口高度设置为 <literal>1080</literal>。这样你就可以提供更高分辨率的 2D 资产，用更高的内存占用和文件大小换取更清晰的画面。很多设备拥有更高分辨率的显示屏（1440p），但因为智能手机的屏幕比较小，所以很难看出和 1080p 的区别。注意，这样做会让未做 mipmap 的纹理在低分辨率设备上具有颗粒感，请参考 <reference internal="True" refid="doc-multiple-resolutions-reducing-aliasing-on-downsampling"><inline classes="std std-ref">减少缩减取样的混叠</inline></reference> 进行操作。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Set the stretch mode to <literal>canvas_items</literal>.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>将拉伸比例（Stretch Aspect）设置为 <literal>expand</literal> （扩展）。这样可以支持多种分辨率，并且能够更好地利用较长的智能手机屏幕（例如 18:9 和 19:9 的长宽比）。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>使用 <strong>布局</strong> 菜单将 Control 节点的锚点吸附到正确的角落。</paragraph>
                    </list_item>
                </bullet_list>
                <tip>
                    <paragraph>To better support tablets and foldable phones (which frequently feature
                        displays with aspect ratios close to 4:3), consider using a base resolution
                        that has a 4:3 aspect ratio while following the rest of the instructions
                        here. For instance, you can set the base window width to <literal>1280</literal> and the
                        base window height to <literal>960</literal>.</paragraph>
                </tip>
            </section>
            <section ids="mobile-game-in-portrait-mode" names="mobile\ game\ in\ portrait\ mode 竖屏的手机游戏">
                <title>竖屏的手机游戏</title>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>Set the base window width to <literal>720</literal> and window height to <literal>1280</literal>.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>或者如果你主要针对的是高端设备，那么就把基础窗口宽度设置为 <literal>1080</literal>、窗口高度设置为 <literal>1920</literal>。这样你就可以提供更高分辨率的 2D 资产，用更高的内存占用和文件大小换取更清晰的画面。很多设备拥有更高分辨率的显示屏（1440p），但因为智能手机的屏幕比较小，所以很难看出和 1080p 的区别。注意，这样做会让未做 mipmap 的纹理在低分辨率设备上具有颗粒感，请参考 <reference internal="True" refid="doc-multiple-resolutions-reducing-aliasing-on-downsampling"><inline classes="std std-ref">减少缩减取样的混叠</inline></reference> 进行操作。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>将 <strong>Display &gt; Window &gt; Handheld &gt; Orientation</strong> 设置为 <literal>portrait</literal> （竖屏）。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Set the stretch mode to <literal>canvas_items</literal>.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>将拉伸比例（Stretch Aspect）设置为 <literal>expand</literal> （扩展）。这样可以支持多种分辨率，并且能够更好地利用较长的智能手机屏幕（例如 18:9 和 19:9 的长宽比）。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>使用 <strong>布局</strong> 菜单将 Control 节点的锚点吸附到正确的角落。</paragraph>
                    </list_item>
                </bullet_list>
                <tip>
                    <paragraph>To better support tablets and foldable phones (which frequently feature
                        displays with aspect ratios close to 4:3), consider using a base resolution
                        that has a 3:4 aspect ratio while following the rest of the instructions
                        here. For instance, you can set the base window width to <literal>960</literal> and the
                        base window height to <literal>1280</literal>.</paragraph>
                </tip>
            </section>
            <section ids="non-game-application" names="non-game\ application 非游戏应用">
                <title>非游戏应用</title>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>将基础窗口宽高设置为你想要支持的最小窗口尺寸。这不是必须的，但是可以保证你在设计 UI 时考虑较小的窗口尺寸。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>保持拉伸模式（Stretch Mode）为默认值 <literal>disabled</literal>（禁用）。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>保持拉伸比例（Stretch Aspect）为默认值 <literal>ignore（忽略）</literal> （因为拉伸模式是 <literal>disabled</literal> ，所以这里的值不会被用到）。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>You can define a minimum window size by calling <literal>get_window().set_min_size()</literal> in a
                            script's <literal>_ready()</literal> function. This prevents the user from resizing the application
                            below a certain size, which could break the UI layout.</paragraph>
                    </list_item>
                </bullet_list>
                <note>
                    <paragraph>Godot 尚未支持手动设置 2D 缩放比例，所以无法在非游戏应用中支持 hiDPI。因此，推荐为非游戏应用禁用 <strong>Allow Hidpi</strong> 选项，操作系统会回退到低 DPI。</paragraph>
                </note>
            </section>
        </section>
        <section ids="hidpi-support" names="hidpi\ support 支持\ hidpi\ 高分辨率屏幕">
            <title>支持 hiDPI 高分辨率屏幕</title>
            <paragraph>By default, Godot projects are considered DPI-aware by the operating system.
                This is controlled by the <strong>Display &gt; Window &gt; Dpi &gt; Allow Hidpi</strong> project setting,
                which should be left enabled whenever possible. Disabling DPI awareness can break
                fullscreen behavior on Windows.</paragraph>
            <paragraph>Since Godot projects are DPI-aware, they may appear at a very small window size
                when launching on an hiDPI display (proportionally to the screen resolution).
                For a game, the most common way to work around this issue is to make them
                fullscreen by default. Alternatively, you could set the window size in an
                <reference internal="True" refuri="../scripting/singletons_autoload#doc-singletons-autoload"><inline classes="std std-ref">autoload</inline></reference>'s <literal>_ready()</literal> function according to
                the screen size.</paragraph>
            <paragraph>To ensure 2D elements don't appear too small on hiDPI displays:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>For games, use the <literal>canvas_items</literal> or <literal>viewport</literal> stretch modes so that 2D
                        elements are automatically resized according to the current window size.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>For non-game applications, use the <literal>disabled</literal> stretch mode and set the
                        stretch scale to a value corresponding to the display scale factor in an
                        <reference internal="True" refuri="../scripting/singletons_autoload#doc-singletons-autoload"><inline classes="std std-ref">autoload</inline></reference>'s <literal>_ready()</literal> function.
                        The display scale factor is set in the operating system's settings and can be queried
                        using <reference internal="True" refuri="../../classes/class_displayserver#class-displayserver-method-screen-get-scale"><inline classes="std std-ref">screen_get_scale</inline></reference>. This
                        method is currently only implemented on macOS. On other operating systems, you
                        will need to implement a method to guess the display scale factor based on the
                        screen resolution (with a setting to let the user override this if needed). This
                        is the approach currently used by the Godot editor.</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>The <strong>Allow Hidpi</strong> setting is only effective on Windows and macOS. It's ignored
                on all other platforms.</paragraph>
            <note>
                <paragraph>Godot 编辑器本身是打开了这个选项，与 DPI 相关的。但在编辑器中运行项目时，只有在项目设置里启用 <strong>Allow Hidpi</strong> 才会让项目与 DPI 相关。</paragraph>
            </note>
            <target refid="doc-multiple-resolutions-reducing-aliasing-on-downsampling"></target>
        </section>
        <section ids="reducing-aliasing-on-downsampling doc-multiple-resolutions-reducing-aliasing-on-downsampling" names="reducing\ aliasing\ on\ downsampling 减少缩减取样的混叠 doc_multiple_resolutions_reducing_aliasing_on_downsampling">
            <title>减少缩减取样的混叠</title>
            <paragraph>如果游戏的基本分辨率很高（如 3840×2160），当采样降到相当低的分辨率（如 1280×720）时，可能会出现锯齿。可以通过在加载时将所有图像缩小 2 倍来减少锯齿的出现。这可以通过在加载游戏数据之前调用下面的方法来实现。</paragraph>
            <paragraph>To resolve this, you can <reference internal="True" refuri="../assets_pipeline/importing_images#doc-importing-images-mipmaps"><inline classes="std std-ref">enable mipmaps</inline></reference> on
                all your 2D textures. However, enabling mipmaps will increase memory usage which
                can be an issue on low-end mobile devices.</paragraph>
        </section>
        <section ids="handling-aspect-ratios" names="handling\ aspect\ ratios 处理纵横比">
            <title>处理纵横比</title>
            <paragraph>一旦考虑到不同分辨率的缩放, 请确保你的 <emphasis>user interface</emphasis> 也能为不同的长宽比进行缩放. 这可以使用 <reference internal="True" refuri="../ui/size_and_anchors#doc-size-and-anchors"><inline classes="std std-ref">anchors</inline></reference> 和/或 <reference internal="True" refuri="../ui/gui_containers#doc-gui-containers"><inline classes="std std-ref">containers</inline></reference> 来完成.</paragraph>
        </section>
        <section ids="field-of-view-scaling" names="field\ of\ view\ scaling 视场角缩放">
            <title>视场角缩放</title>
            <paragraph>3D相机节点的 <strong>Keep Aspect</strong> 属性默认为 <strong>Keep Height</strong> 缩放模式(也称为 <emphasis>Hor+</emphasis> ). 在横屏模式下, 这通常是桌面游戏和手机游戏的最佳选择, 因为宽屏显示器会自动使用更宽的视野.</paragraph>
            <paragraph>然而, 如果你的3D游戏打算使用纵向模式, 那么使用 <strong>Keep Width保持宽度</strong> 称为( <emphasis>Vert-</emphasis> )可能会更有意义. 这样, 宽高比大于16:9(例如19:9)的智能手机将使用 <emphasis>更高</emphasis> 的视野, 这在这里更符合逻辑.</paragraph>
        </section>
        <section ids="scaling-2d-and-3d-elements-differently-using-viewports" names="scaling\ 2d\ and\ 3d\ elements\ differently\ using\ viewports 使用\ viewport\ 以不同的方式缩放\ 2d\ 和\ 3d\ 元素">
            <title>使用 Viewport 以不同的方式缩放 2D 和 3D 元素</title>
            <paragraph>使用多个视图窗口节点, 可以对不同的元素使用不同的比例. 例如, 你可以使用此选项以低分辨率渲染3D世界, 同时将2D元素保持在原生分辨率. 这可以显著提高性能, 同时保持HUD和其他2D元素的清晰度.</paragraph>
            <paragraph>This is done by using the root Viewport node only for 2D elements, then creating
                a Viewport node to display the 3D world and displaying it using a
                SubViewportContainer or TextureRect node. There will effectively be two viewports
                in the final project. One upside of using TextureRect over SubViewportContainer is
                that it allows enable linear filtering. This makes scaled 3D viewports look
                better in many cases.</paragraph>
            <paragraph>有关示例, 请参见 <reference name="3D 视口缩放演示" refuri="https://github.com/godotengine/godot-demo-projects/tree/master/viewport/3d_scaling">3D 视口缩放演示</reference> .</paragraph>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
