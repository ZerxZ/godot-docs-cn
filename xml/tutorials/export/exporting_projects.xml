<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/tutorials/export/exporting_projects.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-exporting-projects"></target>
    <section ids="exporting-projects doc-exporting-projects" names="exporting\ projects 导出项目 doc_exporting_projects">
        <title>导出项目</title>
        <section ids="why-export" names="why\ export? 为什么要导出？">
            <title>为什么要导出？</title>
            <paragraph>起初，Godot 没有任何导出项目的方法。开发人员需要为各个平台手动编译正确的二进制文件并打包。</paragraph>
            <paragraph>后来用它的开发人员（甚至是非程序员）多了起来，我们的公司也开始同时进行更多的项目，这就明显成了一个瓶颈。</paragraph>
            <section ids="on-pc" names="on\ pc 在\ pc\ 上">
                <title>在 PC 上</title>
                <paragraph>使用 Godot 在 PC 上分发游戏项目相当容易。将 Godot 二进制文件拖放到与 <literal>project.godot</literal> 文件相同的目录中，然后压缩项目目录即可。</paragraph>
                <paragraph>这听起来很简单, 但开发人员可能不想这样做的原因可能有几个. 第一个原因是可能不希望分发大量文件. 一些开发人员可能不喜欢好奇的用户偷看游戏的制作方式, 其他开发人员可能会发现它不雅致, 等等. 另一个原因是, 开发人员可能更喜欢特殊编译的二进制文件, 该二进制文件的大小较小, 更优化, 并且不包含编辑器和调试器之类的工具.</paragraph>
                <paragraph>最后,Godot有一个简单但有效的系统, 用于 <reference internal="True" refuri="exporting_pcks#doc-exporting-pcks"><inline classes="std std-ref">将DLC 创建为额外的包文件</inline></reference> .</paragraph>
            </section>
            <section ids="on-mobile" names="on\ mobile 在移动端">
                <title>在移动端</title>
                <paragraph>移动设备中的相同情况会更糟糕. 要在这些设备上分发项目, 需要为每个平台构建一个二进制文件, 然后将其与游戏数据一起添加到本地项目中.</paragraph>
                <paragraph>这可能很麻烦, 因为这意味着开发人员必须熟悉每个平台的SDK, 才能进行导出. 虽然总是鼓励学习每个SDK, 但在不希望的时间被迫这样做可能会令人沮丧.</paragraph>
                <paragraph>这种方法还有另一个问题：不同的设备偏好一些不同的数据格式来运行。主要的例子是纹理压缩。所有PC硬件都使用S3TC（BC）压缩，并且已经标准化了十多年，但是移动设备使用不同的格式进行纹理压缩，例如ETC1和ETC2。</paragraph>
            </section>
        </section>
        <section ids="export-menu" names="export\ menu 导出菜单">
            <title>导出菜单</title>
            <paragraph>经过多次尝试不同的导出工作流程后, 目前的工作流程已被证明是最好的. 在撰写本文时, 并不是所有平台都支持, 但受支持的平台仍在继续增长.</paragraph>
            <paragraph>要打开导出菜单, 请单击 <strong>导出</strong> 按钮:</paragraph>
            <image candidates="{'*': 'tutorials/export/img/export.png'}" uri="tutorials/export/img/export.png"></image>
            <paragraph>导出菜单将打开, 但它完全是空的. 这是因为我们需要添加导出预设.</paragraph>
            <image candidates="{'*': 'tutorials/export/img/export_dialog.png'}" uri="tutorials/export/img/export_dialog.png"></image>
            <paragraph>要创建导出预设，请点击导出菜单顶部的<strong>添加...</strong> 按钮。这将打开一个平台下拉列表，以从中选择导出预设。</paragraph>
            <image candidates="{'*': 'tutorials/export/img/export_preset.png'}" uri="tutorials/export/img/export_preset.png"></image>
            <paragraph>一般使用默认选项导出就足够了，通常无需对其进行调整。但是，许多平台都需要安装其他工具（SDK）才能导出。此外，Godot 需要安装导出模板来创建软件包。缺少某些内容时，导出菜单将发出提示，并且在解决该问题之前，用户将无法为该平台进行导出：</paragraph>
            <image candidates="{'*': 'tutorials/export/img/export_error.png'}" uri="tutorials/export/img/export_error.png"></image>
            <paragraph>那时，用户需要回到文档并按照有关如何正确设置该平台的说明进行操作。</paragraph>
            <paragraph>The buttons at the bottom of the menu allow you to export the project in a few
                different ways:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>全部导出：将项目导出为所有定义的预设的可播放版本（Godot 可执行文件和项目数据）。所有预设都必须定义**导出路径**才能正常工作。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>导出项目：将项目导出为所选预设的可播放版本（Godot 可执行文件和项目数据）。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>导出 PCK/ZIP：将项目资源导出为 PCK 或 ZIP 包。这不是一个可玩的版本，它仅导出项目数据，没有 Godot 可执行文件。</paragraph>
                </list_item>
            </bullet_list>
            <section ids="export-templates" names="export\ templates 导出模板">
                <title>导出模板</title>
                <paragraph>除了设置平台，还必须安装导出模板才能导出项目。可以从<reference name="网站的下载页面" refuri="https://www.godotengine.org/download">网站的下载页面</reference><target ids="id1" names="网站的下载页面" refuri="https://www.godotengine.org/download"></target>中获取，得到的是一个 TPZ 文件（重命名的 ZIP 存档）。</paragraph>
                <paragraph>下载完成后，就可以使用编辑器中的<strong>安装导出模板</strong>选项进行安装：</paragraph>
                <image candidates="{'*': 'tutorials/export/img/exptemp.png'}" uri="tutorials/export/img/exptemp.png"></image>
                <target refid="doc-exporting-projects-export-mode"></target>
            </section>
            <section ids="resource-options doc-exporting-projects-export-mode" names="resource\ options 资源选项 doc_exporting_projects_export_mode">
                <title>资源选项</title>
                <paragraph>导出时，Godot 会先创建一个所有要导出的文件的列表，然后再创建包。有 3 种不同的导出模式：</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>导出项目中的所有资源</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>导出选中的场景（包括依赖项）</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>导出选中的资源（包括依赖项）</paragraph>
                    </list_item>
                </bullet_list>
                <image candidates="{'*': 'tutorials/export/img/expres.png'}" uri="tutorials/export/img/expres.png"></image>
                <paragraph><strong>导出项目中的所有资源</strong>将会导出项目中的每一个资源。<strong>导出选中的场景</strong>和<strong>导出选中的资源</strong>会给你一张项目中的场景或资源的清单，你需要选取每个想导出的场景或资源。</paragraph>
                <image candidates="{'*': 'tutorials/export/img/expselected.png'}" uri="tutorials/export/img/expselected.png"></image>
                <note>
                    <paragraph>导出的项目永远不会包含名字以点开头的文件和文件夹。这是为了防止将 <literal>.git</literal> 等版本控制文件夹加入导出的 PCK 文件。</paragraph>
                </note>
                <paragraph>在资源列表之下，是两个可以设置的筛选器。第一个可以让 <literal>.txt</literal> 、 <literal>.json</literal> 、 <literal>.csv</literal> 等非资源文件与项目一起导出。第二个可以用来排除特定类型的文件，这样就不必手动一个个去取消选择了。例如 <literal>.png</literal> 文件。</paragraph>
            </section>
        </section>
        <section ids="configuration-files" names="configuration\ files 配置文件">
            <title>配置文件</title>
            <paragraph>导出配置存储在两个文件中，这两个文件都可以在项目目录中找到：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><literal>export_presets.cfg</literal> ：此文件中包含绝大多数导出配置，可以安全地提交到版本控制。这里的内容通常没有什么是你需要保密的。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><literal>.godot/export_credentials.cfg</literal> ：此文件包含被视为机密的导出选项，例如密码和加密密钥。通常 <strong>不</strong> 用版本控制或与其他人共享，除非你确切知道自己在做什么。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>由于凭证文件通常不包含在版本控制系统中，因此如果将项目克隆到新计算机，某些导出选项将会丢失。处理此问题的最简单方法是手动将文件从旧位置复制到新位置。</paragraph>
        </section>
        <section ids="exporting-from-the-command-line" names="exporting\ from\ the\ command\ line 从命令行导出">
            <title>从命令行导出</title>
            <paragraph>在生产中, 自动化构建很有用,Godot使用 <literal>--export</literal> 和 <literal>--export-debug</literal> 命令行参数来支持它. 从命令行导出仍需要导出预设来定义导出参数. 该命令的基本调用将是:</paragraph>
            <literal_block force="False" highlight_args="{}" language="shell" linenos="False" xml:space="preserve">godot --export "Windows Desktop" some_name.exe</literal_block>
            <paragraph>假设有一个名为“Windows Desktop”的预设，并且可以找到模板，它将导出为 <literal>some_name.exe</literal>（如果导出预设的名字中存在空格或特殊字符，就必须放在引号里）。输出路径是<emphasis>相对于项目的路径</emphasis>或者<emphasis>绝对路径</emphasis>；<strong>它使用的不是命令被调用时的目录</strong>。</paragraph>
            <paragraph>输出的文件扩展名应该与 Godot 导出过程所使用的相匹配：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>Windows：<literal>.exe</literal></paragraph>
                </list_item>
                <list_item>
                    <paragraph>macOS：<literal>.zip</literal>（所有平台均可导出）或 <literal>.dmg</literal>（只能<emphasis>从</emphasis> macOS 导出）。不直接支持 <literal>.app</literal> ，不过生成的 ZIP 压缩包中包含了 <literal>.app</literal> 捆绑包。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Linux：任意扩展名（没有也行）。64 位 x86 二进制文件通常使用 <literal>.x86_64</literal>。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>HTML5：<literal>.zip</literal></paragraph>
                </list_item>
                <list_item>
                    <paragraph>Android：<literal>.apk</literal></paragraph>
                </list_item>
                <list_item>
                    <paragraph>iOS：<literal>.zip</literal></paragraph>
                </list_item>
            </bullet_list>
            <paragraph>你还可以将其配置为<emphasis>仅</emphasis>导出 PCK 或 ZIP 文件，能够让多个 Godot 可执行文件执行同一个导出的主包文件。这样做时，仍然必须在命令行中指明导出预设的名称：</paragraph>
            <literal_block force="False" highlight_args="{}" language="shell" linenos="False" xml:space="preserve">godot --export-pack "Windows Desktop" some_name.pck</literal_block>
            <paragraph>将 <literal>--export</literal> 标志与 <literal>--path</literal> 标志组合起来通常很有用，这样你就不必在运行命令之前 <literal>cd</literal> 到项目文件夹中了：</paragraph>
            <literal_block force="False" highlight_args="{}" language="shell" linenos="False" xml:space="preserve">godot --path /path/to/project --export "Windows Desktop" some_name.exe</literal_block>
            <seealso>
                <paragraph>关于从命令行使用 Godot 的更多信息，请参阅 <reference internal="True" refuri="../editor/command_line_tutorial#doc-command-line-tutorial"><inline classes="std std-ref">命令行教程</inline></reference>。</paragraph>
            </seealso>
        </section>
        <section ids="pck-versus-zip-pack-file-formats" names="pck\ versus\ zip\ pack\ file\ formats pck\ 与\ zip\ 打包文件格式对比">
            <title>PCK 与 ZIP 打包文件格式对比</title>
            <paragraph>各个格式有它的优势与劣势.PCK 对大多数用例来说是默认和推荐格式, 但取决于你的需要, 你可能希望使用 ZIP.</paragraph>
            <paragraph><strong>PCK 格式：</strong></paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>未压缩的格式。文件尺寸较大，但读写较快。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>尽管有 <reference name="第三方工具" refuri="https://github.com/hhyyrylainen/GodotPckTool">第三方工具</reference> 来提取和创建PCK文件, 但使用用户操作系统上通常存在的工具是不可读和不可写的.</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><strong>ZIP 格式：</strong></paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>压缩格式。文件尺寸较小，但读写较慢。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>可以使用用户操作系统中的常见工具读取或写入. 这对简化制作mod很有用.(另请参阅 <reference internal="True" refuri="exporting_pcks#doc-exporting-pcks"><inline classes="std std-ref">导出包、补丁、Mod</inline></reference>).</paragraph>
                </list_item>
            </bullet_list>
            <warning>
                <paragraph>由于存在一个<reference name="已知错误" refuri="https://github.com/godotengine/godot/pull/42123">已知错误</reference>，当使用 ZIP 文件作为打包文件时，导出的二进制文件不会尝试自动使用它。因此，你需要创建一个<emphasis>启动脚本</emphasis>，玩家可以双击它或从终端启动项目：</paragraph>
                <literal_block force="False" language="none" linenos="False" xml:space="preserve">:: launch.bat (Windows)
@echo off
my_project.exe --main-pack my_project.zip

# launch.sh (Linux)
./my_project.x86_64 --main-pack my_project.zip</literal_block>
                <paragraph>保存启动脚本, 并将它与导出的二进制文件放在同一文件夹中. 在Linux上, 请确保使用 <literal>chmod +x launch.sh</literal> 命令给予启动脚本可执行权限.</paragraph>
            </warning>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
