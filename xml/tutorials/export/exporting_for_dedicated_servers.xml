<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/tutorials/export/exporting_for_dedicated_servers.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-exporting-for-dedicated-servers"></target>
    <section ids="exporting-for-dedicated-servers doc-exporting-for-dedicated-servers" names="exporting\ for\ dedicated\ servers 为专用服务器导出 doc_exporting_for_dedicated_servers">
        <title>为专用服务器导出</title>
        <paragraph>如果要在没有 GPU 或没有显示服务器的机器上为项目运行专用服务器，你需要在运行 Godot 的时候使用 <literal>headless</literal> 显示服务器和 <literal>Dummy</literal> <reference internal="True" refuri="../../classes/class_projectsettings#class-projectsettings-property-audio-driver-driver"><inline classes="std std-ref">音频驱动</inline></reference>。</paragraph>
        <paragraph>Since Godot 4.0, this can be done by running a Godot binary on any platform with
            the <literal>--headless</literal> command line argument, or running a project exported as
            dedicated server. You do not need to use a specialized server binary anymore,
            unlike Godot 3.x.</paragraph>
        <section ids="editor-versus-export-template" names="editor\ versus\ export\ template 编辑器与导出模板">
            <title>编辑器与导出模板</title>
            <paragraph>It is possible to use either an editor or export template (debug or release)
                binary in headless mode. Which one you should use depends on your use case:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><strong>Export template:</strong> Use this one for running dedicated servers. It does not
                        contain editor functionality, and is therefore smaller and more optimized.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><strong>Editor:</strong> This binary contains editor functionality and is intended to be
                        used for exporting projects. This binary <emphasis>can</emphasis> be used to run dedicated
                        servers, but it's not recommended as it's larger and less optimized.</paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section ids="export-approaches" names="export\ approaches 导出方法">
            <title>导出方法</title>
            <paragraph>有两种方法可以导出服务项目:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>Create a separate export preset for the platform that will host the server, then
                        export your project as usual.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Export a PCK file only, preferably for the platform that matches the platform
                        that will host the server. Place this PCK file in the same folder as an export
                        template binary, rename the binary to have the same name as the PCK (minus the
                        file extension), then run the binary.</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>Both methods should result in identical output. The rest of the page will focus
                on the first approach.</paragraph>
            <paragraph>详见 <reference internal="True" refuri="exporting_projects#doc-exporting-projects"><inline classes="std std-ref">导出项目</inline></reference> .</paragraph>
            <target refid="doc-exporting-for-dedicated-servers-exporting-project"></target>
        </section>
        <section ids="exporting-a-project-for-a-dedicated-server doc-exporting-for-dedicated-servers-exporting-project" names="exporting\ a\ project\ for\ a\ dedicated\ server 为专用服务器导出项目 doc_exporting_for_dedicated_servers_exporting_project">
            <title>为专用服务器导出项目</title>
            <paragraph>If you export a project as usual when targeting a server, you will notice that
                the PCK file is just as large as for the client. This is because it includes all
                resources, including those the server doesn't need (such as texture data).
                Additionally, headless mode won't be automatically used; the user will have to
                specify <literal>--headless</literal> to make sure no window spawns.</paragraph>
            <paragraph>Many resources such as textures can be stripped from the PCK file to greatly
                reduce its size. Godot offers a way to do this for textures and materials in a way
                that preserves references in scene or resource files (built-in or external).</paragraph>
            <paragraph>To begin doing so, make sure you have a dedicated export preset for your server,
                then select it, go to its <strong>Resources</strong> tab and change its export mode:</paragraph>
            <figure align="center" ids="id1">
                <image alt="Choosing the **Export as dedicated server** export mode in the export preset" candidates="{'*': 'tutorials/export/img/exporting_for_dedicated_servers_export_mode.webp'}" uri="tutorials/export/img/exporting_for_dedicated_servers_export_mode.webp"></image>
                <caption>Choosing the <strong>Export as dedicated server</strong> export mode in the export preset</caption>
            </figure>
            <paragraph>When this export mode is chosen, the <literal>dedicated_server</literal> feature tag is
                automatically added to the exported project.</paragraph>
            <note>
                <paragraph>If you do not wish to use this
                    export mode but still want the feature tag, you can write the name
                    <literal>dedicated_server</literal> in the <strong>Features</strong> tab of the export preset.
                    This will also force <literal>--headless</literal> when running the exported project.</paragraph>
            </note>
            <paragraph>After selecting this export mode, you will be presented with a list of resources
                in the project:</paragraph>
            <figure align="center" ids="id2">
                <image alt="Choosing resources to keep, keep with stripped visuals or remove" candidates="{'*': 'tutorials/export/img/exporting_for_dedicated_servers_export_resources.webp'}" uri="tutorials/export/img/exporting_for_dedicated_servers_export_resources.webp"></image>
                <caption>Choosing resources to keep, keep with stripped visuals or remove</caption>
            </figure>
            <paragraph>Ticking a box allows you to override options for the specified file or folder.
                Checking boxes does <strong>not</strong> affect which files are exported; this is done by the
                options selected for each checkbox instead.</paragraph>
            <paragraph>Files within a checked folder will automatically use the parent's option by
                default, which is indicated by the <strong>(Inherited)</strong> suffix for the option name
                (and the option name being grayed out). To change the option for a file whose
                option is currently inherited, you must tick the box next to it first.</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><strong>Strip Visuals:</strong> Export this resource, with visual files (textures and materials)
                        replaced by placeholder classes. Placeholder classes store the image size
                        (as it's sometimes used to position elements in a 2D scene), but nothing else.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><strong>Keep:</strong> Export this resource as usual, with visual files intact.</paragraph>
                </list_item>
                <list_item>
                    <paragraph><strong>Remove:</strong> The file is not included in the PCK. This is useful to ignore
                        scenes and resources that only the client needs. If you do so, make sure the
                        server doesn't reference these client-only scenes and resources in any way.</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>The general recommendation is to use <strong>Strip Visuals</strong> whenever possible, unless
                the server needs to access image data such as pixels' colors. For example, if
                your server generates collision data based on an image's contents, you need to
                use <strong>Keep</strong> for that particular image.</paragraph>
            <tip>
                <paragraph>To check the file structure of your exported PCK, use the <strong>Export
                        PCK/ZIP...</strong> button with a <literal>.zip</literal> file extension, then open the resulting
                    ZIP file in a file manager.</paragraph>
            </tip>
            <warning>
                <paragraph>Be careful when using the <strong>Remove</strong> mode, as scenes/resources that reference
                    a removed file will no longer be able to load successfully.</paragraph>
                <paragraph>If you wish to remove specific resources but make the scenes still be able
                    to load without them, you'll have to remove the reference in the scene file
                    and load the files to the nodes' properties using <literal>load()</literal> in a script.
                    This approach can be used to strip resources that Godot doesn't support
                    replacing with placeholders yet, such as audio.</paragraph>
                <paragraph>Removing textures is often what makes the greatest impact on the PCK size,
                    so it is recommended to stick with <strong>Strip Visuals</strong> at first.</paragraph>
            </warning>
            <paragraph>使用上面的选项后，客户端的 PCK（正常导出所有资源）是这样的：</paragraph>
            <literal_block force="False" language="none" linenos="False" xml:space="preserve">.
├── .godot
│   ├── exported
│   │   └── 133200997
│   │       └── export-78c237d4bfdb4e1d02e0b5f38ddfd8bd-scene.scn
│   ├── global_script_class_cache.cfg
│   ├── imported
│   │   ├── map_data.png-ce840618f399a990343bfc7298195a13.ctex
│   │   ├── music.ogg-fa883da45ae49695a3d022f64e60aee2.oggvorbisstr
│   │   └── sprite.png-7958af25f91bb9dbae43f35388f8e840.ctex
│   └── uid_cache.bin
├── client
│   ├── music.ogg.import
│   └── sprite.png.import
├── server
│   └── map_data.png.import
├── test
│   └── scene.gd
└── unused
│   └── development_test.gd
├── project.binary
├── scene.gd
├── scene.tscn.remap</literal_block>
            <paragraph>服务器的 PCK 文件结构是这样的：</paragraph>
            <literal_block force="False" language="none" linenos="False" xml:space="preserve">.
├── .godot
│   ├── exported
│   │   └── 3400186661
│   │       ├── export-78c237d4bfdb4e1d02e0b5f38ddfd8bd-scene.scn
│   │       ├── export-7958af25f91bb9dbae43f35388f8e840-sprite.res  # Placeholder texture
│   │       └── export-fa883da45ae49695a3d022f64e60aee2-music.res
│   ├── global_script_class_cache.cfg
│   ├── imported
│   │   └── map_data.png-ce840618f399a990343bfc7298195a13.ctex
│   └── uid_cache.bin
├── client
│   ├── music.ogg.import
│   └── sprite.png.import  # Points to placeholder texture
└── server
│   └── map_data.png.import
├── project.binary
├── scene.gd
├── scene.tscn.remap</literal_block>
        </section>
        <section ids="starting-the-dedicated-server" names="starting\ the\ dedicated\ server 启动专用服务">
            <title>启动专用服务</title>
            <paragraph>如果你的客户端和服务都是同一个 Godot 项目的一部分，你必须添加一个使用命令行参数直接启动服务的方法。这可以通过在你的主场景（或单例）的 <literal>_ready()</literal> 方法中添加以下代码片段来实现。</paragraph>
            <paragraph>If you <reference internal="True" refid="doc-exporting-for-dedicated-servers-exporting-project"><inline classes="std std-ref">exported the project</inline></reference>
                using the <strong>Export as dedicated server</strong> export mode (or have added
                <literal>dedicated_server</literal> as a custom feature tag), you can use the <literal>dedicated_server</literal>
                feature tag to detect whether a dedicated server PCK is being used:</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve"># Note: Feature tags are case-sensitive.
if OS.has_feature("dedicated_server"):
    # Run your server startup code here...
    pass</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">// Note: Feature tags are case-sensitive.
if (OS.HasFeature("dedicated_server"))
{
    // Run your server startup code here...
}</literal_block>
                </div>
            </container>
            <paragraph>If you also wish to host a server when using the built-in <literal>--headless</literal> command
                line argument, this can be done by adding the following code snippet in your
                main scene (or an autoload)'s <literal>_ready()</literal> method:</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-1-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-1-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-1-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">if DisplayServer.get_name() == "headless":
    # Run your server startup code here...
    #
    # Using this check, you can start a dedicated server by running
    # a Godot binary (editor or export template) with the `--headless`
    # command-line argument.
    pass</literal_block>
                </div>
                <div aria-labelledby="tab-1-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-1-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">using System.Linq;

if (DisplayServer.GetName() == "headless")
{
    // Run your server startup code here...
    //
    // Using this check, you can start a dedicated server by running
    // a Godot binary (editor or export template) with the `--headless`
    // command-line argument.
}</literal_block>
                </div>
            </container>
            <paragraph>If you wish to use a custom command line argument, this can be done by adding
                the following code snippet in your main scene (or an autoload)'s <literal>_ready()</literal>
                method:</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-2-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-2-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-2-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">if "--server" in OS.get_cmdline_user_args():
    # Run your server startup code here...
    #
    # Using this check, you can start a dedicated server by running
    # a Godot binary (editor or export template) with the `--server`
    # command-line argument.
    pass</literal_block>
                </div>
                <div aria-labelledby="tab-2-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-2-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">using System.Linq;

if (OS.GetCmdlineUserArgs().Contains("--server"))
{
    // Run your server startup code here...
    //
    // Using this check, you can start a dedicated server by running
    // a Godot binary (editor or export template) with the `--server`
    // command-line argument.
}</literal_block>
                </div>
            </container>
            <paragraph>It's a good idea to add at least one of the above command-line arguments to
                start a server, as it can be used to test server functionality from the command
                line without having to export the project.</paragraph>
            <paragraph>如果你的客户端和服务器是独立的Godot项目, 服务器通常应该配置成运行主场景时自启服务的方式.</paragraph>
        </section>
        <section ids="next-steps" names="next\ steps 下一步">
            <title>下一步</title>
            <paragraph>在Linux上, 为了让你的专用服务在崩溃或系统重启后重新启动, 你可以 <reference name="创建一个系统服务" refuri="https://medium.com/@benmorel/creating-a-linux-servicewith-systemd-611b5c8b91d6">创建一个系统服务</reference> . 这也可以更方便的查看服务器日志, 系统提供的日志自动轮询功能.</paragraph>
            <paragraph>如果你有容器的经验, 可以考虑将专用服务器包装在一个 <reference name="Docker" refuri="https://www.docker.com/">Docker</reference> 容器中. 这样, 在弹性配置中可以更容易地使用它(这不在本教程的范围内).</paragraph>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
