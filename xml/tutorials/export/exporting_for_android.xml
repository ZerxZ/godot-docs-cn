<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/tutorials/export/exporting_for_android.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-exporting-for-android"></target>
    <section ids="exporting-for-android doc-exporting-for-android" names="exporting\ for\ android 为\ android\ 导出 doc_exporting_for_android">
        <title>为 Android 导出</title>
        <seealso>
            <paragraph>这个页面描述的是如何将 Godot 项目导出到 Android。如果你想要找的是从源码编译编辑器或导出模板二进制文件，请阅读 <reference internal="True" refuri="../../contributing/development/compiling/compiling_for_android#doc-compiling-for-android"><inline classes="std std-ref">为 Android 平台编译</inline></reference>。</paragraph>
        </seealso>
        <paragraph>导出Android的要求比编译Android的Godot要少. 下面的步骤详细介绍了设置Android SDK和引擎所需的内容.</paragraph>
        <attention>
            <paragraph>Godot 4.2 中，使用 C# 编写的项目可以导出到 Android，但这种支持是实验性的，<reference internal="True" refuri="../scripting/c_sharp/index#doc-c-sharp-platforms"><inline classes="std std-ref">存在某些限制</inline></reference>。</paragraph>
        </attention>
        <section ids="install-openjdk-17" names="install\ openjdk\ 17 安装\ openjdk\ 17">
            <title>安装 OpenJDK 17</title>
            <paragraph>下载并安装 <reference name="OpenJDK 17" refuri="https://adoptium.net/temurin/releases/?variant=openjdk17">OpenJDK 17</reference>。</paragraph>
        </section>
        <section ids="download-the-android-sdk" names="download\ the\ android\ sdk 下载\ android\ sdk">
            <title>下载 Android SDK</title>
            <paragraph>下载并安装 Android SDK.</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>你可以使用 <reference name="Android Studio 4.1 或更高版本" refuri="https://developer.android.com/studio/">Android Studio 4.1 或更高版本</reference>来安装 Android SDK。</paragraph>
                    <bullet_list bullet="-">
                        <list_item>
                            <paragraph>运行一次，使用这些<reference name="说明" refuri="https://developer.android.com/studio/intro/update#sdk-manager">说明</reference>完成 SDK 设置。</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>确保安装了<reference name="必要的软件包" refuri="https://developer.android.com/studio/intro/update#recommended">必要的软件包</reference>。</paragraph>
                            <bullet_list bullet="-">
                                <list_item>
                                    <paragraph>Android SDK Platform-Tools 30.0.5 或更高版本</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph>Android SDK Build-Tools 版本 33.0.2</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph>Android SDK Platform 33</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph>Android SDK Command-line Tools（最新）</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph>CMake 版本 3.10.2.4988404</paragraph>
                                </list_item>
                                <list_item>
                                    <paragraph>NDK 版本 r23c（23.2.8568313）</paragraph>
                                </list_item>
                            </bullet_list>
                        </list_item>
                    </bullet_list>
                </list_item>
                <list_item>
                    <paragraph>Alternatively, you can install the Android SDK with the <title_reference>sdkmanager</title_reference> command line tool.</paragraph>
                    <bullet_list bullet="-">
                        <list_item>
                            <paragraph>Install the command line tools package using these <reference name="instructions" refuri="https://developer.android.com/tools/sdkmanager">instructions</reference>.</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>Once the command line tools are installed, run the following <title_reference>sdkmanager</title_reference> command to complete the setup process:</paragraph>
                        </list_item>
                    </bullet_list>
                </list_item>
            </bullet_list>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">sdkmanager --sdk_root=&lt;android_sdk_path&gt; "platform-tools" "build-tools;33.0.2" "platforms;android-33" "cmdline-tools;latest" "cmake;3.10.2.4988404" "ndk;23.2.8568313"</literal_block>
            <note>
                <paragraph>如果你使用的是 Linux，<strong>请勿使用发行版软件库提供的 Android SDK，因为它通常是过时的</strong>。</paragraph>
            </note>
        </section>
        <section ids="create-a-debug-keystore" names="create\ a\ debug.keystore 创建\ debug.keystore">
            <title>创建 debug.keystore</title>
            <paragraph>Android 需要调试密钥库文件，才能安装到设备并分发非发布版本 APK。如果你以前使用过 SDK 并且已经构建了项目，那么 ant 或 eclipse 可能会为你生成一个（在 Linux 和 macOS 上，你可以在 <literal>~/ .android</literal> 目录中找到它）。</paragraph>
            <paragraph>如果找不到或需要生成一个，则可以使用 JDK 中的 keytool 命令：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">keytool -keyalg RSA -genkeypair -alias androiddebugkey -keypass android -keystore debug.keystore -storepass android -dname "CN=Android Debug,O=Android,C=US" -validity 9999 -deststoretype pkcs12</literal_block>
            <paragraph>This will create a <literal>debug.keystore</literal> file in your current directory. You should move it to a memorable location such as <literal>%USERPROFILE%\.android\</literal>, because you will need its location in a later step. For more information on <literal>keytool</literal> usage, see <reference name="this Q&amp;A article" refuri="https://ask.godotengine.org/21349/jdk-android-file-missing">this Q&amp;A article</reference>.</paragraph>
            <note>
                <paragraph>It is important that the password is the same for the keystore and the key. This is a <reference name="known Android studio issue" refuri="https://developer.android.com/studio/known-issues#ki-key-keystore-warning">known Android
                        studio issue</reference> that also
                    affects Godot projects.</paragraph>
            </note>
        </section>
        <section ids="setting-it-up-in-godot" names="setting\ it\ up\ in\ godot 在\ godot\ 中进行设置">
            <title>在 Godot 中进行设置</title>
            <paragraph>进入编辑器设置屏幕。此屏幕包含计算机中用户帐户的编辑器设置（与项目无关）。</paragraph>
            <image candidates="{'*': 'tutorials/export/img/editorsettings.png'}" uri="tutorials/export/img/editorsettings.png"></image>
            <paragraph>向下滚动到 Android 设置所在的部分：</paragraph>
            <image candidates="{'*': 'tutorials/export/img/androidsdk.png'}" uri="tutorials/export/img/androidsdk.png"></image>
            <paragraph>在该屏幕中，需要设置两个路径：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><literal>Android Sdk Path</literal> 设置为Android SDK的安装位置. 例如,Windows上的 <literal>%LOCALAPPDATA%\Android\Sdk\</literal> , 或macOS上的 <literal>/Users/$USER/Library/Android/sdk/</literal> .</paragraph>
                </list_item>
                <list_item>
                    <paragraph>调试 <literal>.keystore</literal> 文件——可以在之前创建 <literal>debug.keystore</literal> 文件的文件夹中找到。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>配置完成后, 导出到Android的一切都准备好了！</paragraph>
            <note>
                <paragraph>如果你遇到 <emphasis>“Could not install to device”</emphasis> 的错误，请确认设备上未安装使用了相同Android包名（但使用不同密钥进行签名）的应用。</paragraph>
                <paragraph>如果设备上安装了 Android 包名相同但签名密钥不同的应用，你<strong>必须</strong>先在该 Android 设备询问时选择删除该应用，但后再重新导出到 Android。</paragraph>
            </note>
        </section>
        <section ids="providing-launcher-icons" names="providing\ launcher\ icons 提供启动器图标">
            <title>提供启动器图标</title>
            <paragraph>启动器图标是 Android 启动器应用把你的应用展示给用户时所用到的。Godot 只需要高分辨率图标（适用于 <literal>xxxhdpi</literal> 屏幕），会自动生成低分辨率的变体。</paragraph>
            <paragraph>Godot 需要两种类型的图标：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><strong>主图标：</strong>“经典”图标。这会在所有 Android 版本不高于 Android 8（Oreo）中使用。必须至少为 192×192 px。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><strong>自适应图标：</strong>从 Android 8 开始（含）引入了<reference name="自适应图标" refuri="https://developer.android.com/guide/practices/ui_guidelines/icon_design_adaptive">自适应图标</reference><target ids="id1" names="自适应图标" refuri="https://developer.android.com/guide/practices/ui_guidelines/icon_design_adaptive"></target>（Adaptive Icons）。应用为了有原生的样式需要包含分离的背景与前景图标。用户的启动程序会控制图标的动画和遮罩。必须至少为 432×432 px。</paragraph>
                </list_item>
            </bullet_list>
            <seealso>
                <paragraph>重要的是设计自适应图标时必须遵守一些规则。<reference name="Google Design 提供了一篇不错的文章" refuri="https://medium.com/google-design/designing-adaptive-icons-515af294c783">Google Design 提供了一篇不错的文章</reference><target ids="google-design" names="google\ design\ 提供了一篇不错的文章" refuri="https://medium.com/google-design/designing-adaptive-icons-515af294c783"></target>来帮助理解这些规则以及自适应图标的一些技巧。</paragraph>
            </seealso>
            <caution>
                <paragraph>自适应图标最重要的规则是，要把图标的重要元素放置在安全区内：那是一个居中的直径为 66dp（<literal>xxxhdpi</literal> 上为 264 像素）的圆，这样就可以避免被启动器裁剪。</paragraph>
            </caution>
            <paragraph>如果你不提供必要的图标，Godot 会根据回退链来进行替换，当前行失败时会尝试下一行：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><strong>主图标：</strong>提供的主图标 -&gt; 项目图标 -&gt; 默认 Godot 主图标。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><strong>自适应图标前景：</strong>提供的前景图标 -&gt; 提供的主图标 -&gt; 项目图标 -&gt; 默认 Godot 前景图标。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><strong>自适应图标背景：</strong>提供的背景图标 -&gt; 默认 Godot 背景图标。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>强烈建议提供所有要求的图标的指定分辨率。这样一来，你的应用程序在所有的 Android 设备和版本上都会显得非常漂亮。</paragraph>
        </section>
        <section ids="exporting-for-google-play-store" names="exporting\ for\ google\ play\ store 为\ google\ play\ 商店导出">
            <title>为 Google Play 商店导出</title>
            <paragraph>将 APK 上传到 Google 的 Play 商店，需要你使用非调试密钥库文件进行签名；这样的文件可以像这样生成：</paragraph>
            <literal_block force="False" highlight_args="{}" language="shell" linenos="False" xml:space="preserve">keytool -v -genkey -keystore mygame.keystore -alias mygame -keyalg RSA -validity 10000</literal_block>
            <paragraph>这个密钥库和密钥用于验证你的开发人员身份，请记住密码并将其保存在安全的地方！使用 Google 的 Android 开发者指南来了解有关 <reference name="APK 签名" refuri="https://developer.android.com/studio/publish/app-signing">APK 签名</reference>的更多信息。</paragraph>
            <paragraph>现在，在你的 Android 导出预设中填写以下表格：</paragraph>
            <image candidates="{'*': 'tutorials/export/img/editor-export-presets-android.png'}" uri="tutorials/export/img/editor-export-presets-android.png"></image>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><strong>发布：</strong>输入你刚刚生成的密钥库文件的路径。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><strong>发布用户：</strong>替换为密钥别名。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><strong>发布密码：</strong>密钥密码。请注意，密钥库密码和密钥密码当前必须相同。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>在导出时，不要忘记取消勾选<strong>使用调试导出</strong>。</paragraph>
            <image candidates="{'*': 'tutorials/export/img/export-with-debug-button.png'}" uri="tutorials/export/img/export-with-debug-button.png"></image>
        </section>
        <section ids="optimizing-the-apk-size" names="optimizing\ the\ apk\ size 优化\ apk\ 大小">
            <title>优化 APK 大小</title>
            <paragraph>默认情况下,APK将包含适用于ARMv7和ARMv8体系结构的本地库. 这会大大增加其大小. 要创建较小的APK, 请在项目的Android导出预设中取消选中 <strong>Armeabi-v 7a</strong> 或 <strong>Arm 64 -v 8a</strong> . 这将创建一个仅包含单个架构库的APK. 请注意, 针对ARMv7的应用程序也可以在ARMv8设备上运行, 但事实并非如此.</paragraph>
            <paragraph>自2019年8月起,Google Play要求所有应用程序都必须以64位格式提供. 这意味着你不能上传 <emphasis>仅</emphasis> 包含ARMv7库的APK. 为了解决这个问题, 你可以使用其 <reference name="多个APK 支持" refuri="https://developer.android.com/google/play/publishing/multiple-apks">多个APK 支持</reference> 将多个APK上传到Google Play. 每个APK都应针对单一架构；为ARMv7和ARMv8创建APK通常足以覆盖当今使用的大多数设备.</paragraph>
            <paragraph>你可以通过仅编译具有所需功能的Android导出模板来进一步优化大小. 有关更多信息, 请参见 <reference internal="True" refuri="../../contributing/development/compiling/optimizing_for_size#doc-optimizing-for-size"><inline classes="std std-ref">为尺寸优化构建</inline></reference>.</paragraph>
        </section>
        <section ids="environment-variables" names="environment\ variables 环境变量">
            <title>环境变量</title>
            <paragraph>你可以使用以下环境变量在编辑器外部设置导出选项。在导出过程中，这些值会覆盖你在导出菜单中设置的值。</paragraph>
            <table ids="id1">
                <title>Android 导出环境变量</title>
                <tgroup cols="2">
                    <colspec colwidth="50"></colspec>
                    <colspec colwidth="50"></colspec>
                    <thead>
                        <row>
                            <entry>
                                <paragraph>导出选项</paragraph>
                            </entry>
                            <entry>
                                <paragraph>环境变量</paragraph>
                            </entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph>加密 / 密钥</paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>GODOT_SCRIPT_ENCRYPTION_KEY</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>选项 / 密钥库 / 调试</paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>GODOT_ANDROID_KEYSTORE_DEBUG_PATH</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>选项 / 密钥库 / 调试用户</paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>GODOT_ANDROID_KEYSTORE_DEBUG_USER</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>选项 / 密钥库 / 调试密码</paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>GODOT_ANDROID_KEYSTORE_DEBUG_PASSWORD</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>选项 / 密钥库 / 发布</paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>GODOT_ANDROID_KEYSTORE_RELEASE_PATH</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>选项 / 密钥库 / 发布用户</paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>GODOT_ANDROID_KEYSTORE_RELEASE_USER</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>选项 / 密钥库 / 发布密码</paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>GODOT_ANDROID_KEYSTORE_RELEASE_PASSWORD</literal></paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
