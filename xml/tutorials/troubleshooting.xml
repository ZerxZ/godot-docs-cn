<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/tutorials/troubleshooting.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-troubleshooting"></target>
    <section ids="troubleshooting doc-troubleshooting" names="troubleshooting 故障排除 doc_troubleshooting">
        <title>故障排除</title>
        <paragraph>这个页面列出了使用 Godot 时的常见问题以及可能的解决办法。</paragraph>
        <seealso>
            <paragraph>关于 Godot 编辑器 Web 版本特定的注意事项，请参阅 <reference internal="True" refuri="editor/using_the_web_editor#doc-using-the-web-editor"><inline classes="std std-ref">使用 Web 编辑器</inline></reference>。</paragraph>
        </seealso>
        <section ids="the-editor-runs-slowly-and-uses-all-my-cpu-and-gpu-resources-making-my-computer-noisy" names="the\ editor\ runs\ slowly\ and\ uses\ all\ my\ cpu\ and\ gpu\ resources,\ making\ my\ computer\ noisy 编辑器运行缓慢，占用了我所有的\ cpu\ 和\ gpu\ 资源，使我的电脑变得嘈杂">
            <title>编辑器运行缓慢，占用了我所有的 CPU 和 GPU 资源，使我的电脑变得嘈杂</title>
            <paragraph>这是一个已知问题，尤其是在 macOS 上，因为大多数 Mac 都有 Retina 显示屏。由于 Retina 显示器的像素密度更高，因此所有内容都必须以更高的分辨率渲染。这会增加 GPU 上的负载并降低感知性能。</paragraph>
            <paragraph>有几种衡量性能和电池续航的方法, 包括:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>在 3D 模式下，单击左上角的<strong>透视</strong>按钮并启用<strong>半分辨率</strong>。现在 3D 视口就会以半分辨率渲染，速度最多可以提高到原来的 4 倍。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>打开编辑器设置并将 <strong>低处理器模式睡眠（微秒）</strong> 的值增加到 <literal>33000</literal> （30 FPS）。 该值确定要渲染的帧之间的 <emphasis>微秒</emphasis> 量。 较高的值将降低编辑器反应性，但可显著降低 CPU 和 GPU 使用率。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>如果有某个节点导致编辑器连续重新绘制（例如粒子），请将其隐藏并使用 <literal>_ready()</literal> 方法在脚本中显示它。这样，它将隐藏在编辑器中，但仍在正在运行的项目中可见。</paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section ids="the-editor-stutters-and-flickers-on-my-variable-refresh-rate-monitor-g-sync-freesync" names="the\ editor\ stutters\ and\ flickers\ on\ my\ variable\ refresh\ rate\ monitor\ (g-sync/freesync) 编辑器在我的可变刷新率显示器（g-sync/freesync）上出现卡顿和闪烁的情况">
            <title>编辑器在我的可变刷新率显示器（G-Sync/FreeSync）上出现卡顿和闪烁的情况</title>
            <paragraph>这是一个<reference name="已知问题" refuri="https://github.com/godotengine/godot/issues/38219">已知问题</reference>。 可变刷新率显示器需要不断调整其伽玛曲线，以便随着时间的推移发出一致的光量。 当刷新率变化很大时，这可能会导致图像的黑暗区域出现闪烁，这是因为 Godot 编辑器仅在必要时重绘。</paragraph>
            <paragraph>这有几种解决办法：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>在编辑器设置中启用 <strong>界面 &gt; 编辑器 &gt; 持续更新</strong>。 现在即使屏幕没有变化，编辑器也将不断渲染，这会增加功耗、造成热量和噪音的更大排放。 为了缓解这种情况，你可以在编辑器设置中将 <strong>低处理器模式睡眠（微秒）</strong> 增加到 <literal>33000</literal>（30 FPS）。 该值确定要渲染的帧之间的 <emphasis>微秒</emphasis> 量。 较高的值将降低编辑器反应性，但可显著降低 CPU 和 GPU 使用率。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>或者，在显示器或图形驱动程序中禁用可变刷新率。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>VRR闪烁这个问题在某些显示器上，可以通过你的显示器的OSD中的**VRR控制**或**微调暗区**选项来减少。这些选项可能会增加输入延迟或导致黑色失真。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>如果在使用 OLED 显示器，可以在编辑器设置中使用 <strong>Black (OLED)</strong> 预设。因为 OLED 显示器的出色的黑阶表现，这个预设将会有助于减弱 VRR 闪烁。</paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section ids="the-editor-or-project-takes-a-very-long-time-to-start" names="the\ editor\ or\ project\ takes\ a\ very\ long\ time\ to\ start 编辑器或项目花了很长时间才启动">
            <title>编辑器或项目花了很长时间才启动</title>
            <paragraph>当使用基于Vulkan的渲染器（Forward+ 或 Forward Mobile）时，第一次启动将会话费比较长的时间。这是因为着色器需要在缓存之前进行编译。更新Godot、更新显卡驱动或切换显卡后，着色器也需要重新缓存。</paragraph>
            <paragraph>如果这个问题在首次启动后依然存在，那么这是 Windows 上的一个<reference name="已知错误" refuri="https://github.com/godotengine/godot/issues/20566">已知错误</reference><target ids="id1" names="已知错误" refuri="https://github.com/godotengine/godot/issues/20566"></target>，当你连接了特定的 USB 外设时就会出现 。特别是，海盗船的 iCUE 软件似乎引起了该错误。尝试将 USB 外设的驱动程序更新为最新版本。如果错误仍然存在，则需要在打开编辑器之前断开故障外围设备的连接。然后，你可以再次连接外围设备。</paragraph>
            <paragraph>Portmaster 等防火墙软件可能会屏蔽调试端口，导致项目启动时间变长，并且无法在编辑器中使用调试功能（例如查看 <literal>print()</literal> 的输出）。变通方法是在“编辑器设置”中修改项目所使用的调试端口（<strong>网络 &gt; 调试 &gt; 远程端口</strong>）。默认值是 <literal>6007</literal>；可以尝试设成大于 <literal>1024</literal> 的值，比如 <literal>7007</literal>。</paragraph>
        </section>
        <section ids="the-godot-editor-appears-frozen-after-clicking-the-system-console" names="the\ godot\ editor\ appears\ frozen\ after\ clicking\ the\ system\ console 点击系统控制台后，godot\ 编辑器没有响应">
            <title>点击系统控制台后，Godot 编辑器没有响应</title>
            <paragraph>在启用了系统控制台的 Windows 上运行 Godot 时，你可以通过在命令窗口中单击来意外启用<emphasis>选择模式</emphasis>。Windows 的这种特定行为会暂停应用程序，以便你在系统控制台内选择文本。Godot 无法覆盖此系统特定的行为。</paragraph>
            <paragraph>要解决此问题，请选择系统控制台窗口，然后按 Enter 退出选择模式。</paragraph>
        </section>
        <section ids="the-godot-editor-s-macos-dock-icon-gets-duplicated-every-time-it-is-manually-moved" names="the\ godot\ editor's\ macos\ dock\ icon\ gets\ duplicated\ every\ time\ it\ is\ manually\ moved 手动移动godot编辑器的macos\ dock\ 图标之后，会出现多余的编辑器图标">
            <title>手动移动Godot编辑器的macOS dock 图标之后，会出现多余的编辑器图标</title>
            <paragraph>如果你打开 Godot 编辑器并手动改变 dock 图标的位置，然后重启编辑器，你会在 dock 的最右边看到一个重复的 dock 图标。</paragraph>
            <paragraph>这是由于 macOS dock 的设计限制造成的。解决这个问题的唯一已知方法是将项目管理器和编辑器合并为一个进程，这意味着项目管理器在启动编辑器时不再产生一个单独的进程。虽然使用单一进程实例会带来一些好处，但由于任务的复杂性，完成这个功能没有列入我们近期的工作计划。</paragraph>
            <paragraph>为了避免这个问题，保持 Godot 编辑器的 dock 图标在 macOS 创建的默认位置。</paragraph>
        </section>
        <section ids="some-text-such-as-no-dc-appears-in-the-top-left-corner-of-the-project-manager-and-editor-window" names='some\ text\ such\ as\ "no\ dc"\ appears\ in\ the\ top-left\ corner\ of\ the\ project\ manager\ and\ editor\ window 在项目管理器和编辑器窗口的左上角出现“no\ dc”之类的文本'>
            <title>在项目管理器和编辑器窗口的左上角出现“NO DC”之类的文本</title>
            <paragraph>这是由于 NVIDIA 显卡驱动程序注入了覆盖显示信息造成的。</paragraph>
            <paragraph>要在 Windows 上禁用此覆盖，请在 NVIDIA 控制面板中将图形驱动程序设置恢复为默认值。</paragraph>
            <paragraph>要在 Linux 上禁用此覆盖，请打开 <literal>nvidia-settings</literal>，转到 <strong>X Screen 0 &gt; OpenGL Settings</strong>，然后取消选中 <strong>Enable Graphics API Visual Indicator</strong>。</paragraph>
        </section>
        <section ids="the-editor-or-project-appears-overly-sharp-or-blurry" names="the\ editor\ or\ project\ appears\ overly\ sharp\ or\ blurry 编辑器或项目显示得过于锐利或模糊">
            <title>编辑器或项目显示得过于锐利或模糊</title>
            <figure align="center" ids="id1">
                <image alt="正确的外观（左），由于显卡驱动的锐化而导致的过度锐化的外观（右）" candidates="{'*': 'tutorials/img/troubleshooting_graphics_driver_sharpening.webp'}" uri="tutorials/img/troubleshooting_graphics_driver_sharpening.webp"></image>
                <caption>正确的外观（左），由于显卡驱动的锐化而导致的过度锐化的外观（右）</caption>
            </figure>
            <paragraph>如果编辑器或项目看起来过于锐利，这可能是由于你的图形驱动程序强制对所有 Vulkan 或 OpenGL 应用程序进行图像锐化。你可以在图形驱动程序的控制面板中禁用此行为：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><strong>NVIDIA（Windows）：</strong> 打开"开始"菜单，选择“NVIDIA 控制面板”。打开左侧的**管理 3D 设置**选项卡。在中间的列表中，滚动到**图像锐化**，并将其设置为**关闭锐化**。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><strong>AMD（Windows）：**打开开始菜单，选择**AMD 软件</strong>。点击右上角的设置 "齿轮 "图标。转到“<strong>图形</strong>”选项卡，然后禁用“<strong>Radeon 图像锐化</strong>”。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>如果编辑器或者项目看起来过于模糊，这可能是由于 <abbreviation explanation="Fast Approximate AntiAliasing">FXAA</abbreviation> 被你的显卡驱动强制应用到所有的 Vulkan 或者 OpenGL 应用程序上。</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><strong>NVIDIA（Windows）：</strong>打开开始菜单并选择<strong>NVIDIA 控制面板</strong>。打开左侧的<strong>管理 3D 设置</strong>选项卡。在中间的列表中， 滚动到<strong>平滑设置 - FXAA</strong>并将其设置为<strong>应用程序控制的</strong>。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><strong>NVIDIA（Linux）：</strong>打开应用程序菜单，选择 <strong>NVIDIA X 服务器设置</strong>。在左侧选择 <strong>Antialiasing Settings</strong>，取消对 <strong>Enable FXAA</strong> 的勾选。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><strong>AMD (Windows):</strong> 打开开始菜单并选择**AMD 软件**。单击 设置右上角的“齿轮”图标。转到**图形**选项卡， 滚动到底部并单击**高级**以展开其设置。禁用**形态抗锯齿**。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>像是 vkBasalt 这种第三方开发的供应的工具可能会强迫所有的 Vulkan 应用程序开启锐化或者 FXAA。你可能也需要检查他们的设置。</paragraph>
            <paragraph>当你变更过了显卡驱动和第三方工具中的设置后，重启 Godot 去应用这些设置。</paragraph>
            <paragraph>如果你仍然希望在其他应用程序上强制锐化或 FXAA，建议你使用显卡驱动控制面板提供的应用程序配置系统，针对每个应用程序的进行设置。</paragraph>
        </section>
        <section ids="the-editor-or-project-appears-to-have-washed-out-colors" names="the\ editor\ or\ project\ appears\ to\ have\ washed\ out\ colors 此编辑器或项目看起来颜色很淡">
            <title>此编辑器或项目看起来颜色很淡</title>
            <paragraph>在 Windows 上，这通常是由不正确的操作系统或显示器设置引起的，因为 Godot 目前不支持 <abbreviation explanation="High Dynamic Range">HDR</abbreviation> <emphasis>输出</emphasis>（即使它可能在内部以 HDR 渲染）。</paragraph>
            <paragraph>由于`大多数显示器并非被设计为在 HDR 模式下显示 SDR 内容&lt;<reference refuri="https://tftcentral.co.uk/articles/heres-why-you-should-only-enable-hdr-mode-on-your-pc-when-you-are-viewing-hdr-content">https://tftcentral.co.uk/articles/heres-why-you-should-only-enable-hdr-mode-on-your-pc-when-you-are-viewing-hdr-content</reference>&gt;`，建议在未运行应用程序时在Windows设置中禁用HDR 使用 HDR 输出。在 Windows11 上，可以通过按下 <literal classes="kbd">Windows + Alt + B</literal> （此快捷方式是 Xbox Game Bar 应用程序的一部分）。如果要自动开关HDR模式的话，你可以使用 <title_reference>AutoActions &lt;https://github.com/Codectory/AutoActions&gt;</title_reference> 。</paragraph>
            <paragraph>如果你坚持要启用 HDR 模式， 也有一些方法可以改善显示效果，确保显示器被设置为启用 <abbreviation explanation="HDR Gaming Interest Group">HGIG</abbreviation> 色调映射(而不是 <abbreviation explanation="Dynamic Tone Mapping">DTM</abbreviation> 色调映射)， 之后 <title_reference>使用 Windows HDR 校准应用&lt;https://support.microsoft.com/en-us/windows/calibrate-your-hdr-display-using-the-windows-hdr-calibration-app-f30f4809-3369-43e4-9b02-9eabebd23f19&gt;</title_reference> 。在使用HDR时，强烈建议使用Windows 11而不是Windows 10。 不过，最终结果仍然可能不如在显示器上禁用HDR。</paragraph>
            <paragraph>计划在未来版本中支持 HDR <emphasis>导出</emphasis>。</paragraph>
        </section>
        <section ids="the-editor-project-freezes-or-displays-glitched-visuals-after-resuming-the-pc-from-suspend" names="the\ editor/project\ freezes\ or\ displays\ glitched\ visuals\ after\ resuming\ the\ pc\ from\ suspend 从挂起状态恢复\ pc\ 后，编辑器/项目冻结或显示出现故障">
            <title>从挂起状态恢复 PC 后，编辑器/项目冻结或显示出现故障</title>
            <paragraph>当在 Linux 上使用 NVIDIA 的专用图形驱动程序时便会出现这个已知的问题。目前还没有明确的解决方案，因为当涉及 OpenGL 或 Vulkan 时，Linux+NVIDIA 上的挂起通常会出现问题。与 Forward+ 和 ForwardMobile 渲染方法（使用 Vulkan ）相比，兼容性渲染方法（采用 OpenGL ）通常不太容易出现挂起相关问题。</paragraph>
            <paragraph>NVIDIA驱动程序提供了一个 <emphasis>实验性</emphasis> <reference name="选项可在挂起后保护视频内存" refuri="https://wiki.archlinux.org/title/NVIDIA/Tips_and_tricks#Preserve_video_memory_after_suspend">选项可在挂起后保护视频内存</reference> 用以解决这个问题。据报道，此选项与较新的 NVIDIA 驱动程序版本配合使用效果更好。</paragraph>
            <paragraph>为了避免丢失工作内容，请在使电脑进入睡眠状态之前将场景保存在编辑器中。</paragraph>
        </section>
        <section ids="the-project-works-when-run-from-the-editor-but-fails-to-load-some-files-when-running-from-an-exported-copy" names="the\ project\ works\ when\ run\ from\ the\ editor,\ but\ fails\ to\ load\ some\ files\ when\ running\ from\ an\ exported\ copy 项目在编辑器中正常运行，但在导出后无法加载部分文件">
            <title>项目在编辑器中正常运行，但在导出后无法加载部分文件</title>
            <paragraph>这通常是在导出对话框中忘记筛选非资源文件所导致的。默认情况下，Godot只会将实际的<emphasis>资源</emphasis>包含在 PCK 文件中。一些常用的文件，例如 JSON 文件，不会被视为资源。例如，当你在导出的项目中加载 <literal>test.json</literal> 时，你需要在非资源导出过滤器中指定 <literal>*.json</literal>。详见：<reference internal="True" refuri="export/exporting_projects#doc-exporting-projects-export-mode"><inline classes="std std-ref">资源选项</inline></reference>。</paragraph>
            <paragraph>另外，请注意，导出的项目永远不会包含名字以点开头的文件和文件夹。这是为了防止将 <literal>.git</literal> 等版本控制文件夹包含在导出的 PCK 文件中。</paragraph>
            <paragraph>在 Windows 上，也可能是<reference internal="True" refuri="best_practices/project_organization#doc-project-organization-case-sensitivity"><inline classes="std std-ref">大小写敏感性</inline></reference>的问题。如果你在脚本里引用资源时所使用的大小写与文件系统中的不符，在导出项目后就会载入失败。这是因为虚拟 PCK 文件系统是大小写敏感的，而 Windows 的文件系统是大小写不敏感的。</paragraph>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
