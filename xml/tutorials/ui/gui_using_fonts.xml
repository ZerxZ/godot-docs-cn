<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/tutorials/ui/gui_using_fonts.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-gui-using-fonts"></target>
    <section ids="using-fonts doc-gui-using-fonts" names="using\ fonts 使用字体 doc_gui_using_fonts">
        <title>使用字体</title>
        <paragraph>Godot 中能够为不同的 UI 节点设置指定的字体。</paragraph>
        <paragraph>There are three different places where you can setup font usage.
            The first is the theme editor. Choose the node you want to set the
            font for and select the font tab. The second is in the inspector
            for control nodes under <strong>Theme Overrides &gt; Fonts</strong>. Lastly, in
            the inspector settings for themes under <strong>Default Font</strong>.</paragraph>
        <paragraph>If no font override is specified anywhere,
            <reference name="Open Sans" refuri="https://fonts.google.com/specimen/Open+Sans">Open Sans</reference> SemiBold
            is used as the default project font.</paragraph>
        <note>
            <paragraph>Since Godot 4.0, font sizes are no longer defined in the font itself but are
                instead defined in the node that uses the font. This is done in the
                <strong>Theme Overrides &gt; Font Sizes</strong> section of the inspector.</paragraph>
            <paragraph>This allows changing the font size without having to duplicate the font
                resource for every different font size.</paragraph>
        </note>
        <paragraph>There are 2 kinds of font files: <emphasis>dynamic</emphasis> (TTF/OTF/WOFF/WOFF2 formats) and
            <emphasis>bitmap</emphasis> (BMFont <literal>.fnt</literal> format or monospaced image). Dynamic fonts are the
            most commonly used option, as they can be resized and still look crisp at higher
            sizes. Thanks to their vector-based nature, they can also contain a lot more
            glyphs while keeping a reasonable file size compared to bitmap fonts. Dynamic
            fonts also support some advanced features that bitmap fonts cannot support, such
            as <emphasis>ligatures</emphasis> (several characters transforming into a single different design).</paragraph>
        <tip>
            <paragraph>You can find freely licensed font files on websites such as <reference name="Google Fonts" refuri="https://fonts.google.com/">Google Fonts</reference> and <reference name="Font Library" refuri="https://fontlibrary.org/">Font Library</reference>.</paragraph>
            <paragraph>Fonts are covered by copyright. Double-check the license of a font before
                using it, as not all fonts allow commercial use without purchasing a license.</paragraph>
        </tip>
        <seealso>
            <paragraph>You can see how fonts work in action using the
                <reference name="BiDI and Font Features demo project" refuri="https://github.com/godotengine/godot-demo-projects/tree/master/gui/bidi_and_font_features">BiDI and Font Features demo project</reference>.</paragraph>
        </seealso>
        <section ids="dynamic-fonts" names="dynamic\ fonts 动态字体">
            <title>动态字体</title>
            <paragraph>Godot 支持以下动态字体格式：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>TrueType 字体或合集（<literal>.ttf</literal>、<literal>.ttc</literal>）</paragraph>
                </list_item>
                <list_item>
                    <paragraph>OpenType 字体或合集（<literal>.otf</literal>、<literal>.otc</literal>）</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Web 开放字体格式 1（<literal>.woff</literal>）</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Web 开放字体格式 2（<literal>.woff2</literal>，从 Godot 3.5 开始支持）</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>While <literal>.woff</literal> and especially <literal>.woff2</literal> tend to result in smaller file sizes,
                there is no universally "better" font format. In most situations, it's
                recommended to use the font format that was shipped on the font developer's
                website.</paragraph>
        </section>
        <section ids="bitmap-fonts" names="bitmap\ fonts 位图字体">
            <title>位图字体</title>
            <paragraph>Godot supports the BMFont (<literal>.fnt</literal>) bitmap font format. This is a format created
                by the <reference name="BMFont" refuri="https://www.angelcode.com/products/bmfont/">BMFont</reference> program. Many
                BMFont-compatible programs also exist, like <reference name="BMGlyph" refuri="https://www.bmglyph.com/">BMGlyph</reference>.</paragraph>
            <paragraph>Alternatively, you can import any image to be used as a bitmap font. This is
                only supported for <strong>monospaced</strong> fonts (fonts where each character has the same
                width). To do so, select the image in the FileSystem dock, go to the
                Import dock, change its import type to <strong>Font Data (Monospace Image Font)</strong> then
                click <strong>Reimport</strong>:</paragraph>
            <figure align="center" ids="id1">
                <image alt="将导入类型修改为 Font Data (Monospace Image Font)" candidates="{'*': 'tutorials/ui/img/using_fonts_bitmap_font_from_image_import_options.webp'}" uri="tutorials/ui/img/using_fonts_bitmap_font_from_image_import_options.webp"></image>
                <caption>将导入类型修改为 <strong>Font Data (Monospace Image Font)</strong></caption>
            </figure>
            <paragraph>字体可以使用任意顺序的字符集布局，但建议使用与标准 Unicode 一致的顺序，这样导入所需的配置就会少很多。例如，下面的位图字体包含了 <reference name="ASCII" refuri="https://zh.wikipedia.org/zh-cn/ASCII">ASCII</reference> 字符，与标准 ASCII 顺序一致：</paragraph>
            <figure align="center" ids="id2">
                <image alt="位图字体示例" candidates="{'*': 'tutorials/ui/img/using_fonts_monospace_bitmap_font_example.webp'}" uri="tutorials/ui/img/using_fonts_monospace_bitmap_font_example.webp"></image>
                <caption>Credit: <reference name="LibreQuake" refuri="https://github.com/MissLav/LibreQuake/blob/master/lq1/gfx-wad/CONCHARS.png">LibreQuake</reference>
                    (scaled and cropped to exclude extended range)</caption>
            </figure>
            <paragraph>The following import options can be used to import the above font image
                successfully:</paragraph>
            <figure align="center" ids="id3">
                <image alt="上面的示例字体使用的导入选项" candidates="{'*': 'tutorials/ui/img/using_fonts_bitmap_font_from_image_example_configuration.webp'}" uri="tutorials/ui/img/using_fonts_bitmap_font_from_image_example_configuration.webp"></image>
                <caption>上面的示例字体使用的导入选项</caption>
            </figure>
            <paragraph>The <strong>Character Ranges</strong> option is an array that maps each position on the image
                (in tile coordinates, not pixels). The font atlas is traversed from left to
                right and top to bottom. Characters can be specified with decimal numbers
                (<literal>127</literal>), hexadecimal numbers (<literal>0x007f</literal>) or between <emphasis>single</emphasis> quotes
                (<literal>'~'</literal>). Ranges can be specified with a hyphen between characters.</paragraph>
            <paragraph>For instance, <literal>0-127</literal> (or <literal>0x0000-0x007f</literal>) denotes the full ASCII range.
                As another example, <literal>' '-'~'</literal> is equivalent to <literal>32-127</literal> and denotes the range
                of <emphasis>printable</emphasis> (visible) ASCII characters.</paragraph>
            <paragraph>Make sure the <strong>Character Ranges</strong> option doesn't exceed the number of
                <strong>Columns</strong> × <strong>Rows</strong> defined. Otherwise, the font will fail to import.</paragraph>
            <paragraph>If your font image contains margins not used for font glyphs (such as
                attribution information), try adjusting <strong>Image Margin</strong>. This is a margin
                applied only once around the whole image.</paragraph>
            <paragraph>If your font image contains guides (in the form of lines between glyphs) or
                if spacing between characters appears incorrect, try adjusting <strong>Character
                    Margin</strong>. This margin is applied for every imported glyph.</paragraph>
        </section>
        <section ids="loading-a-font-file" names="loading\ a\ font\ file 加载字体文件">
            <title>加载字体文件</title>
            <paragraph>To load a font file (dynamic or bitmap), use the resource dropdown's
                <strong>Quick Load</strong> or <strong>Load</strong> option next to a font property, then navigate to the
                font file in question:</paragraph>
            <figure align="center" ids="id4">
                <image candidates="{'*': 'tutorials/ui/img/using_fonts_load_font.webp'}" uri="tutorials/ui/img/using_fonts_load_font.webp"></image>
                <caption>加载字体文件</caption>
            </figure>
            <paragraph>You can also drag-and-drop a font file from the FileSystem dock to the inspector
                property that accepts a Font resource.</paragraph>
            <warning>
                <paragraph>In Godot 4.0 and later, texture filter and repeat properties are defined in
                    the location where the texture is used, rather than on the texture itself.
                    This also applies to fonts (both dynamic fonts and bitmap fonts).</paragraph>
                <paragraph>Fonts that have a pixel art appearance should have bilinear filtering disabled
                    by changing the <strong>Rendering &gt; Textures &gt; Canvas Textures &gt; Default Texture Filter</strong>
                    project setting to <strong>Nearest</strong>.</paragraph>
                <paragraph>The font size must also be an integer multiple of the design size (which
                    varies on a per-font basis), and the Control node using the font must be
                    scaled by an integer multiple as well. Otherwise, the font may look blurry.
                    Font sizes in Godot are specified in pixels (px), not points (pt). Keep this
                    in mind when comparing font sizes across different software.</paragraph>
                <paragraph>The texture filter mode can also be set on individual nodes that inherit from CanvasItem
                    by setting <reference internal="True" refuri="../../classes/class_canvasitem#class-canvasitem-property-texture-filter"><inline classes="std std-ref">CanvasItem.texture_filter</inline></reference>.</paragraph>
            </warning>
        </section>
        <section ids="font-outlines-and-shadows" names="font\ outlines\ and\ shadows 字体轮廓与阴影">
            <title>字体轮廓与阴影</title>
            <paragraph>Font outlines and shadows can be used to improve readability when the background
                color isn't known in advance. For instance, this is the case for HUD elements
                that are drawn over a 2D/3D scene.</paragraph>
            <paragraph>Font outlines are available in most nodes that derive from Control, in addition
                to <reference internal="True" refuri="../../classes/class_label3d#class-label3d"><inline classes="std std-ref">Label3D</inline></reference>.</paragraph>
            <paragraph>To enable outline for a font on a given node, configure the theme overrides
                <strong>Font Outline Color</strong> and <strong>Outline Size</strong> in the inspector. The result should
                look like this:</paragraph>
            <figure align="center" ids="id5">
                <image alt="字体轮廓示例" candidates="{'*': 'tutorials/ui/img/using_fonts_outline_example.webp'}" uri="tutorials/ui/img/using_fonts_outline_example.webp"></image>
                <caption>字体轮廓示例</caption>
            </figure>
            <note>
                <paragraph>If using a font with MSDF rendering, its <strong>MSDF Pixel Range</strong> import option
                    be set to at least <emphasis>twice</emphasis> the value of the outline size for outline
                    rendering to look correct. Otherwise, the outline may appear to be cut off
                    earlier than intended.</paragraph>
            </note>
            <paragraph>Support for font shadows is more limited: they are only available in
                <reference internal="True" refuri="../../classes/class_label#class-label"><inline classes="std std-ref">Label</inline></reference> and <reference internal="True" refuri="../../classes/class_richtextlabel#class-richtextlabel"><inline classes="std std-ref">RichTextLabel</inline></reference>. Additionally, font shadows
                always have a hard edge (but you can reduce their opacity to make them look more
                subtle). To enable font shadows on a given node, configure the <strong>Font Shadow
                    Color</strong>, <strong>Shadow Offset X</strong>, and <strong>Shadow Offset Y</strong> theme overrides in a Label
                or RichTextLabel node accordingly:</paragraph>
            <figure align="center" ids="id6">
                <image alt="Configuring font shadow in a Label node" candidates="{'*': 'tutorials/ui/img/using_fonts_shadow.webp'}" uri="tutorials/ui/img/using_fonts_shadow.webp"></image>
                <caption>Configuring font shadow in a Label node</caption>
            </figure>
            <paragraph>The result should look like this:</paragraph>
            <figure align="center" ids="id7">
                <image alt="字体阴影示例" candidates="{'*': 'tutorials/ui/img/using_fonts_shadow_example.webp'}" uri="tutorials/ui/img/using_fonts_shadow_example.webp"></image>
                <caption>字体阴影示例</caption>
            </figure>
            <tip>
                <paragraph>You can create local overrides to font display in Label nodes by creating a
                    <reference internal="True" refuri="../../classes/class_labelsettings#class-labelsettings"><inline classes="std std-ref">LabelSettings</inline></reference> resource that you reuse across Label nodes. This
                    resource takes priority over <reference internal="True" refuri="gui_skinning#doc-gui-skinning"><inline classes="std std-ref">theme properties</inline></reference>.</paragraph>
            </tip>
        </section>
        <section ids="advanced-font-features" names="advanced\ font\ features 高级字体特性">
            <title>高级字体特性</title>
            <target refid="doc-using-fonts-antialiasing"></target>
            <section ids="antialiasing doc-using-fonts-antialiasing" names="antialiasing 抗锯齿 doc_using_fonts_antialiasing">
                <title>抗锯齿</title>
                <paragraph>You can adjust how the font should be smoothed out when rendering by adjusting
                    <emphasis>antialiasing</emphasis> and <emphasis>hinting</emphasis>. These are different properties, with different use
                    cases.</paragraph>
                <paragraph>Antialiasing controls how glyph edges should be smoothed out when rasterizing
                    the font. The default antialiasing method (<strong>Grayscale</strong>) works well on every
                    display technology. However, at small sizes, grayscale antialiasing may result
                    in fonts looking blurry.</paragraph>
                <paragraph>The antialiasing sharpness can be improved by using LCD subpixel optimization,
                    which exploits the subpixel patterns of most LCD displays by offsetting the font
                    antialiasing on a per-channel basis (red/green/blue). The downside is that this
                    can introduce "fringing" on edges, especially on display technologies that don't
                    use standard RGB subpixels (such as OLED displays).</paragraph>
                <paragraph>In most games, it's recommended to stick to the default <strong>Grayscale</strong>
                    antialiasing. For non-game applications, LCD subpixel optimization is worth
                    exploring.</paragraph>
                <figure align="center" ids="id8">
                    <image alt="字体抗锯齿对比" candidates="{'*': 'tutorials/ui/img/using_fonts_antialiasing_comparison.webp'}" uri="tutorials/ui/img/using_fonts_antialiasing_comparison.webp"></image>
                    <caption>From top to bottom: Disabled, Grayscale, LCD Subpixel (RGB)</caption>
                </figure>
                <note>
                    <paragraph><reference internal="True" refid="doc-using-fonts-msdf"><inline classes="std std-ref">MSDF 渲染的字体</inline></reference>无法修改抗锯齿——这种字体始终使用灰度抗锯齿进行渲染。</paragraph>
                </note>
                <target refid="doc-using-fonts-hinting"></target>
            </section>
            <section ids="hinting doc-using-fonts-hinting" names="hinting 微调 doc_using_fonts_hinting">
                <title>微调</title>
                <paragraph>微调控制的是对字体进行栅格化的时候，字形边缘吸附到像素的程度。<strong>None</strong>看上去最平滑，字体较小时会看上去比较模糊。<strong>Light</strong>（默认值）只会在 Y 轴上对字形的边缘进行吸附，看上去会比较锐利，而 <strong>Full</strong> 则更加锐利，X 轴和 Y 轴都会进行边缘的吸附。对微调模式的选择取决于你个人的口味。</paragraph>
                <figure align="center" ids="id9">
                    <image alt="字体微调对比" candidates="{'*': 'tutorials/ui/img/using_fonts_hinting_comparison.webp'}" uri="tutorials/ui/img/using_fonts_hinting_comparison.webp"></image>
                    <caption>From top to bottom: None, Light, Full hinting</caption>
                </figure>
                <note>
                    <paragraph>If changing the hinting mode has no visible effect after clicking
                        <strong>Reimport</strong>, it's usually because the font doesn't include hinting
                        instructions. This can be resolved by looking for a version of the font file
                        that includes hinting instructions, or enabling <strong>Force Autohinter</strong> in the
                        Import dock. This will use <reference name="FreeType" refuri="https://freetype.org/">FreeType</reference>'s autohinter
                        to automatically add hinting instructions to the imported font.</paragraph>
                </note>
                <target refid="doc-using-fonts-subpixel-positioning"></target>
            </section>
            <section ids="subpixel-positioning doc-using-fonts-subpixel-positioning" names="subpixel\ positioning 次像素定位 doc_using_fonts_subpixel_positioning">
                <title>次像素定位</title>
                <paragraph>Subpixel positioning can be adjusted. This is a <reference name="FreeType" refuri="https://freetype.org/">FreeType</reference>
                    feature that allows glyphs to be rendered more closely to their intended form.
                    The default setting of <strong>Auto</strong> automatically enables subpixel positioning at
                    small sizes, but disables it at large font sizes to improve rasterization
                    performance.</paragraph>
                <paragraph>You can force the subpixel positioning mode to <strong>Disabled</strong>, <strong>One half of a
                        pixel</strong> or <strong>One quarter of a pixel</strong>. <strong>One quarter of a pixel</strong> provides the
                    best quality, at the cost of longer rasterization times.</paragraph>
                <paragraph>Changing antialiasing, hinting and subpixel positioning has the most visible
                    effect at smaller font sizes.</paragraph>
                <warning>
                    <paragraph>Fonts that have a pixel art appearance should have their subpixel positioning
                        mode set to <strong>Disabled</strong>. Otherwise, the font may appear to have uneven pixel
                        sizes.</paragraph>
                    <paragraph>This step is not required for bitmap fonts, as subpixel positioning is only
                        relevant for dynamic fonts (which are usually made of vector elements).</paragraph>
                </warning>
                <target refid="doc-using-fonts-mipmaps"></target>
            </section>
            <section ids="mipmaps doc-using-fonts-mipmaps" names="mipmaps mipmap doc_using_fonts_mipmaps">
                <title>Mipmap</title>
                <paragraph>默认情况下字体不会生成 Mipmap，这样就能够降低内存占用、加速栅格化。但这样一来，缩小后的字体就会变成一坨。<reference internal="True" refuri="../3d/3d_text#doc-3d-text"><inline classes="std std-ref">3D 文本</inline></reference> 不启用 <strong>Fixed Size</strong> 的时候尤为明显。如果在 Control 节点中使用传统的栅格化字体（非 <reference internal="True" refid="doc-using-fonts-msdf"><inline classes="std std-ref">MSDF</inline></reference> 字体）显示文本，并且该节点的缩放比 <literal>(1, 1)</literal> 要小，也会出现这种情况。</paragraph>
                <paragraph>在“文件系统”面板中选中字体后，你可以在“导入”面板中启用 <strong>Mipmap</strong>，从而改善字体缩小渲染后的外观。</paragraph>
                <paragraph>MSDF 字体也可以启用 Mipmap。在字体大小小于默认值时，这可以稍稍改善字体的渲染质量，但 MSDF 字体在放大后原本就是没有颗粒度问题的。</paragraph>
                <target refid="doc-using-fonts-msdf"></target>
            </section>
            <section ids="msdf-font-rendering doc-using-fonts-msdf" names="msdf\ font\ rendering msdf\ 字体渲染 doc_using_fonts_msdf">
                <title>MSDF 字体渲染</title>
                <paragraph>多通道带符号距离场（Multi-channel signed distance field，MSDF）字体渲染能够将字体渲染为任意大小，无需在大小发生变化时重新栅格化。</paragraph>
                <paragraph>与 Godot 默认使用的传统字体栅格化相比，MSDF 字体渲染有两个优点：</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>即便文字非常巨大，字体看上去也总是清晰的。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>首次渲染<emphasis>大字号字体</emphasis>的字符时卡顿更短，因为无须执行栅格化。</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>MSDF 字体渲染的缺点有：</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>字体渲染的基础开销较高。桌面平台上通常无法察觉，但是会影响低端移动设备。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>由于缺少微调，较小的字体没有栅格化字体清晰。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>与传统的栅格化字体相比，首次为新字形渲染<emphasis>小字号字体</emphasis>的开销可能更大。可以使用 <reference internal="True" refid="doc-using-fonts-font-prerendering"><inline classes="std std-ref">字体预渲染</inline></reference> 缓解。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>无法为 MSDF 字体启用 LCD 次像素优化。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>MSDF 模式下无法正确渲染轮廓自相交的字体。如果使用从 <reference name="Google Fonts" refuri="https://fonts.google.com">Google Fonts</reference> 等处下载到的字体时出现渲染问题，请尝试改为从作者的官方网站下载。</paragraph>
                    </list_item>
                </bullet_list>
                <figure align="center" ids="id10">
                    <image alt="Comparison of font rasterization methods" candidates="{'*': 'tutorials/ui/img/using_fonts_rasterized_vs_msdf_comparison.webp'}" uri="tutorials/ui/img/using_fonts_rasterized_vs_msdf_comparison.webp"></image>
                    <caption>Comparison of font rasterization methods.
                        From top to bottom: rasterized without oversampling, rasterized with oversampling, MSDF</caption>
                </figure>
                <paragraph>To enable MSDF rendering for a given font, select it in the FileSystem dock, go
                    to the Import dock, enable <strong>Multichannel Signed Distance Field</strong>, then click
                    <strong>Reimport</strong>:</paragraph>
                <figure align="center" ids="id11">
                    <image alt="Enabling MSDF in the font's import options" candidates="{'*': 'tutorials/ui/img/using_fonts_msdf_import_options.webp'}" uri="tutorials/ui/img/using_fonts_msdf_import_options.webp"></image>
                    <caption>Enabling MSDF in the font's import options</caption>
                </figure>
                <target refid="doc-using-fonts-emoji"></target>
            </section>
            <section ids="using-emoji doc-using-fonts-emoji" names="using\ emoji 使用\ emoji doc_using_fonts_emoji">
                <title>使用 Emoji</title>
                <paragraph>Godot 对 Emoji 字体的支持有限：</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>支持 CBDT/CBLC（内嵌 PNG）和 SVG Emoji 字体。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><strong>不支持</strong> COLR/CPAL Emoji 字体（自定义矢量格式）。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><strong>不支持</strong> EMJC 位图压缩（iOS 系统 Emoji 字体需要用到）。这意味着如果要在 iOS 上支持 Emoji，你就必须改用自定义的使用 SVG 或 PNG 位图压缩的字体。</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>For Godot to be able to display emoji, the font used (or one of its
                    <reference internal="True" refid="doc-using-fonts-font-fallbacks"><inline classes="std std-ref">fallbacks</inline></reference>) needs to include them.
                    Otherwise, emoji won't be displayed and placeholder "tofu" characters will
                    appear instead:</paragraph>
                <figure align="center" ids="id12">
                    <image alt="尝试在标签中使用 Emoji 的默认外观" candidates="{'*': 'tutorials/ui/img/using_fonts_emoji_placeholder_characters.webp'}" uri="tutorials/ui/img/using_fonts_emoji_placeholder_characters.webp"></image>
                    <caption>尝试在标签中使用 Emoji 的默认外观</caption>
                </figure>
                <paragraph>After adding a font to display emoji such as
                    <reference name="Noto Color Emoji" refuri="https://fonts.google.com/noto/specimen/Noto+Color+Emoji">Noto Color Emoji</reference>,
                    you get the expected result:</paragraph>
                <figure align="center" ids="id13">
                    <image alt="为标签添加 Emoji 字体后的正确外观" candidates="{'*': 'tutorials/ui/img/using_fonts_emoji_correct_characters.webp'}" uri="tutorials/ui/img/using_fonts_emoji_correct_characters.webp"></image>
                    <caption>为标签添加 Emoji 字体后的正确外观</caption>
                </figure>
                <paragraph>To use a regular font alongside emoji, it's recommended to specify a
                    <reference internal="True" refid="doc-using-fonts-font-fallbacks"><inline classes="std std-ref">fallback font</inline></reference> that points to the
                    emoji font in the regular font's advanced import options. If you wish to use
                    the default project font while displaying emoji, leave the <strong>Base Font</strong>
                    property in FontVariation empty while adding a font fallback pointing to the
                    emoji font:</paragraph>
                <tip>
                    <paragraph>Emoji fonts are quite large in size, so you may want to <reference internal="True" refid="doc-using-fonts-system-fonts"><inline classes="std std-ref">load a system
                                font</inline></reference> to provide emoji glyphs rather than
                        bundling it with your project. This allows providing full emoji support in
                        your project without increasing the size of its exported PCK. The downside
                        is that emoji will look different depending on the platform, and loading
                        system fonts is not supported on all platforms.</paragraph>
                    <paragraph>也可以将系统字体用作回退字体。</paragraph>
                </tip>
            </section>
            <section ids="using-icon-fonts" names="using\ icon\ fonts 使用图标字体">
                <title>使用图标字体</title>
                <paragraph>Tools like <reference name="Fontello" refuri="https://fontello.com/">Fontello</reference> can be used to generate font
                    files containing vectors imported from SVG files. This can be used to render
                    custom vector elements as part of your text, or to create extruded 3D icons
                    with <reference internal="True" refuri="../3d/3d_text#doc-3d-text"><inline classes="std std-ref">3D 文本</inline></reference> and TextMesh.</paragraph>
                <note>
                    <paragraph>Fontello currently does not support creating multicolored fonts (which Godot
                        can render). As of November 2022, support for multicolored fonts in icon
                        font generation tools remains scarce.</paragraph>
                </note>
                <paragraph>Depending on your use cases, this may lead to better results compared to using
                    the <literal>img</literal> tag in <reference internal="True" refuri="bbcode_in_richtextlabel#doc-bbcode-in-richtextlabel"><inline classes="std std-ref">RichTextLabel</inline></reference>. Unlike
                    bitmap images (including SVGs which are rasterized on import by Godot),
                    true vector data can be resized to any size without losing quality.</paragraph>
                <paragraph>After downloading the generated font file, load it in your Godot project then
                    specify it as a custom font for a Label, RichTextLabel or Label3D node. Switch
                    over to the Fontello web interface, then copy the character by selecting it then
                    pressing <literal classes="kbd">Ctrl + C</literal> (<literal classes="kbd">Cmd + C</literal> on macOS). Paste the character in the
                    <strong>Text</strong> property of your Label node. The character will appear as a placeholder
                    glyph in the inspector, but it should appear correctly in the 2D/3D viewport.</paragraph>
                <paragraph>To use an icon font alongside a traditional font in the same Control, you can
                    specify the icon font as a <reference internal="True" refid="doc-using-fonts-font-fallbacks"><inline classes="std std-ref">fallback</inline></reference>.
                    This works because icon fonts use the Unicode <emphasis>private use area</emphasis>, which is
                    reserved for use by custom fonts and doesn't contain standard glyphs by design.</paragraph>
                <note>
                    <paragraph>Several modern icon fonts such as <reference name="Font Awesome 6" refuri="https://fontawesome.com/download">Font Awesome 6</reference>
                        have a desktop variant that uses <emphasis>ligatures</emphasis> to specify icons. This allows you to
                        specify icons by entering their name directly in the <strong>Text</strong> property of any
                        node that can display fonts. Once the icon's name is fully entered as text
                        (such as <literal>house</literal>), it will be replaced by the icon.</paragraph>
                    <paragraph>While easier to use, this approach cannot be used with font fallbacks as the main
                        font's characters will take priority over the fallback font's ligatures.</paragraph>
                </note>
                <target refid="doc-using-fonts-font-fallbacks"></target>
            </section>
            <section ids="font-fallbacks doc-using-fonts-font-fallbacks" names="font\ fallbacks 字体回退 doc_using_fonts_font_fallbacks">
                <title>字体回退</title>
                <paragraph>Godot supports defining one or more fallbacks when the main font lacks a glyph
                    to be displayed. There are 2 main use cases for defining font fallbacks:</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>Use a font that only supports Latin character sets, but use another font to
                            be able to display text another character set such as Cyrillic.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Use a font to render text, and another font to render emoji or icons.</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>Open the Advanced Import Settings dialog by double-clicking the font file in the
                    FileSystem dock. You can also select the font in the FileSystem dock, go to the
                    Import dock then choose <strong>Advanced…</strong> at the bottom:</paragraph>
                <figure align="center" ids="id14">
                    <image candidates="{'*': 'tutorials/ui/img/using_fonts_advanced_import_settings.webp'}" uri="tutorials/ui/img/using_fonts_advanced_import_settings.webp"></image>
                    <caption>导入面板</caption>
                </figure>
                <paragraph>In the dialog that appears, look for <strong>Fallbacks</strong> section
                    on the sidebar on the right, click the <strong>Array[Font] (size 0)</strong> text to expand
                    the property, then click <strong>Add Element</strong>:</paragraph>
                <figure align="center" ids="id15">
                    <image candidates="{'*': 'tutorials/ui/img/using_fonts_font_fallbacks_add.webp'}" uri="tutorials/ui/img/using_fonts_font_fallbacks_add.webp"></image>
                    <caption>添加字体回退</caption>
                </figure>
                <paragraph>Click the dropdown arrow on the new element, then choose a font file using the
                    <strong>Quick Load</strong> or <strong>Load</strong> options:</paragraph>
                <figure align="center" ids="id16">
                    <image candidates="{'*': 'tutorials/ui/img/using_fonts_font_fallbacks_load.webp'}" uri="tutorials/ui/img/using_fonts_font_fallbacks_load.webp"></image>
                    <caption>加载字体回退</caption>
                </figure>
                <paragraph>It is possible to add fallback fonts while using the default project font. To do
                    so, leave the <strong>Base Font</strong> property empty while adding one or more font
                    fallbacks.</paragraph>
                <note>
                    <paragraph>Font fallbacks can also be defined on a local basis similar to
                        <reference internal="True" refid="doc-using-fonts-opentype-font-features"><inline classes="std std-ref">OpenType 字体特性</inline></reference>, but this is not covered here
                        for brevity reasons.</paragraph>
                </note>
                <target refid="doc-using-fonts-variable-fonts"></target>
            </section>
            <section ids="variable-fonts doc-using-fonts-variable-fonts" names="variable\ fonts 可变字体 doc_using_fonts_variable_fonts">
                <title>可变字体</title>
                <paragraph>Godot has full support for <reference name="variable fonts" refuri="https://variablefonts.io/">variable fonts</reference>, which
                    allow you to use a single font file to represent various font weights and styles
                    (regular, bold, italic, …). This must be supported by the font file you're using.</paragraph>
                <paragraph>To use a variable font, create a <reference internal="True" refuri="../../classes/class_fontvariation#class-fontvariation"><inline classes="std std-ref">FontVariation</inline></reference> resource in the
                    location where you intend to use the font, then load a font file within the
                    FontVariation resource:</paragraph>
                <figure align="center" ids="id17">
                    <image candidates="{'*': 'tutorials/ui/img/using_fonts_font_variation_create.webp'}" uri="tutorials/ui/img/using_fonts_font_variation_create.webp"></image>
                    <caption>创建 FontVariation 资源</caption>
                </figure>
                <figure align="center" ids="id18">
                    <image candidates="{'*': 'tutorials/ui/img/using_fonts_font_variation_load.webp'}" uri="tutorials/ui/img/using_fonts_font_variation_load.webp"></image>
                    <caption>为 FontVariation 资源加载字体文件</caption>
                </figure>
                <paragraph>Scroll down to the FontVariation's <strong>Variation</strong> section, then click the
                    <strong>Variation Coordinates</strong> text to expand the list of axes that can be adjusted:</paragraph>
                <figure align="center" ids="id19">
                    <image candidates="{'*': 'tutorials/ui/img/using_fonts_font_variation_variable_font.webp'}" uri="tutorials/ui/img/using_fonts_font_variation_variable_font.webp"></image>
                    <caption>可变轴列表</caption>
                </figure>
                <paragraph>The set of axes you can adjust depends on the font loaded. Some variable fonts
                    only support one axis of adjustment (typically <emphasis>weight</emphasis> or <emphasis>slant</emphasis>), while
                    others may support multiple axes of adjustment.</paragraph>
                <paragraph>For example, here's the <reference name="Inter V" refuri="https://rsms.me/inter/">Inter V</reference> font with a
                    <emphasis>weight</emphasis> of <literal>900</literal> and a <emphasis>slant</emphasis> of <literal>-10</literal>:</paragraph>
                <figure align="center" ids="id20">
                    <image candidates="{'*': 'tutorials/ui/img/using_fonts_font_variation_variable_font_example.webp'}" uri="tutorials/ui/img/using_fonts_font_variation_variable_font_example.webp"></image>
                    <caption>可变字体示例（Inter V）</caption>
                </figure>
                <tip>
                    <paragraph>While variable font axis names and scales aren't standardized, some common
                        conventions are usually followed by font designers. For instance, the
                        <emphasis>weight</emphasis> axis typically uses <literal>400</literal> as the "regular" font weight and
                        <literal>700</literal> as the "bold" font weight.</paragraph>
                </tip>
                <paragraph>You can save the FontVariation to a <literal>.tres</literal> resource file to reuse it in other
                    places:</paragraph>
                <figure align="center" ids="id21">
                    <image candidates="{'*': 'tutorials/ui/img/using_fonts_font_variation_save_to_file.webp'}" uri="tutorials/ui/img/using_fonts_font_variation_save_to_file.webp"></image>
                    <caption>将 FontVariation 保存为外部资源文件</caption>
                </figure>
            </section>
            <section ids="faux-bold-and-italic" names="faux\ bold\ and\ italic 假粗体和假斜体">
                <title>假粗体和假斜体</title>
                <paragraph>When writing text in bold or italic, using font variants specifically designed
                    for this looks better. Spacing between glyphs will be more consistent when using
                    a bold font, and certain glyphs' shapes may change entirely in italic variants
                    (compare "a" and <emphasis>"a"</emphasis>).</paragraph>
                <paragraph>However, real bold and italic fonts require shipping more font files, which
                    increases distribution size. A single <reference internal="True" refid="doc-using-fonts-variable-fonts"><inline classes="std std-ref">variable font</inline></reference>
                    file can also be used, but this file will be larger than a single non-variable font.
                    While file size is usually not an issue for desktop projects, it can be a concern
                    for mobile/web projects that strive to keep distribution size as low as possible.</paragraph>
                <paragraph>To allow bold and italic fonts to be displayed without having to ship additional
                    fonts (or use a variable font that is larger in size), Godot supports <emphasis>faux</emphasis>
                    bold and italic.</paragraph>
                <figure align="center" ids="id22">
                    <image alt="Faux bold/italic (top), real bold/italic (bottom). Normal font used: Open Sans SemiBold" candidates="{'*': 'tutorials/ui/img/using_fonts_faux_bold_italic_vs_real_bold_italic.webp'}" uri="tutorials/ui/img/using_fonts_faux_bold_italic_vs_real_bold_italic.webp"></image>
                    <caption>Faux bold/italic (top), real bold/italic (bottom). Normal font used: Open Sans SemiBold</caption>
                </figure>
                <paragraph>Faux bold and italic is automatically used in <reference internal="True" refuri="../../classes/class_richtextlabel#class-richtextlabel"><inline classes="std std-ref">RichTextLabel</inline></reference>'s bold
                    and italic tags if no custom fonts are provided for bold and/or italic.</paragraph>
                <paragraph>To use faux bold, create a FontVariation resource in a property where a Font
                    resource is expected. Set <strong>Variation &gt; Embolden</strong> to a positive value to make a
                    font bolder, or to a negative value to make it less bold. Recommended values are
                    between <literal>0.5</literal> and <literal>1.2</literal> depending on the font.</paragraph>
                <paragraph>Faux italic is created by skewing the text, which is done by modifying the
                    per-character transform. This is also provided in FontVariation using the
                    <strong>Variation &gt; Transform</strong> property. Setting the <literal>yx</literal> component of the
                    character transform to a positive value will italicize the text. Recommended
                    values are between <literal>0.2</literal> and <literal>0.4</literal> depending on the font.</paragraph>
            </section>
            <section ids="adjusting-font-spacing" names="adjusting\ font\ spacing 调整字体间距">
                <title>调整字体间距</title>
                <paragraph>For stylistic purposes or for better readability, you may want to adjust how a
                    font is presented in Godot.</paragraph>
                <paragraph>Create a FontVariation resource in a property where a Font resource is expected.
                    There are 4 properties available in the <strong>Variation &gt; Extra Spacing</strong> section,
                    which accept positive and negative values:</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><strong>Glyph:</strong> Additional spacing between every glyph.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><strong>Space:</strong> Additional spacing between words.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><strong>Top:</strong> Additional spacing above glyphs. This is used for multiline text,
                            but also to calculate the minimum size of controls such as <reference internal="True" refuri="../../classes/class_label#class-label"><inline classes="std std-ref">Label</inline></reference>
                            and <reference internal="True" refuri="../../classes/class_button#class-button"><inline classes="std std-ref">Button</inline></reference>.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><strong>Top:</strong> Additional spacing below glyphs. This is used for multiline text,
                            but also to calculate the minimum size of controls such as <reference internal="True" refuri="../../classes/class_label#class-label"><inline classes="std std-ref">Label</inline></reference>
                            and <reference internal="True" refuri="../../classes/class_button#class-button"><inline classes="std std-ref">Button</inline></reference>.</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>The <strong>Variation &gt; Transform</strong> property can also be adjusted to stretch
                    characters horizontally or vertically. This is specifically done by adjusting
                    the <literal>xx</literal> (horizontal scale) and <literal>yy</literal> (vertical scale) components. Remember
                    to adjust glyph spacing to account for any changes, as glyph transform doesn't
                    affect how much space each glyph takes in the text. Non-uniform scaling of this
                    kind should be used sparingly, as fonts are generally not designed to be
                    displayed with stretching.</paragraph>
                <target refid="doc-using-fonts-opentype-font-features"></target>
            </section>
            <section ids="opentype-font-features doc-using-fonts-opentype-font-features" names="opentype\ font\ features opentype\ 字体特性 doc_using_fonts_opentype_font_features">
                <title>OpenType 字体特性</title>
                <paragraph>Godot supports enabling OpenType font features, which are a standardized way to
                    define alternate characters that can be toggled without having to swap font
                    files entirely. Despite being named OpenType font features, these are also
                    supported in TrueType (<literal>.ttf</literal>) and WOFF/WOFF2 font files.</paragraph>
                <paragraph>Support for OpenType features highly depends on the font used. Some fonts don't
                    support any OpenType features, while other fonts can support dozens of
                    toggleable features.</paragraph>
                <paragraph>There are 2 ways to use OpenType font features:</paragraph>
                <paragraph><strong>Globally on a font file</strong></paragraph>
                <paragraph>Open the Advanced Import Settings dialog by double-clicking the font file in the
                    FileSystem dock. You can also select the font in the FileSystem dock, go to the
                    Import dock then choose <strong>Advanced…</strong> at the bottom:</paragraph>
                <figure align="center" ids="id23">
                    <image candidates="{'*': 'tutorials/ui/img/using_fonts_advanced_import_settings.webp'}" uri="tutorials/ui/img/using_fonts_advanced_import_settings.webp"></image>
                    <caption>导入面板</caption>
                </figure>
                <paragraph>In the dialog that appears, look for the <strong>Metadata Overrides &gt; OpenType
                        Features</strong> section on the sidebar on the right, click the
                    <strong>Features (0 of N set)</strong> text to expand the property, then click
                    <strong>Add Feature</strong>:</paragraph>
                <figure align="center" ids="id24">
                    <image candidates="{'*': 'tutorials/ui/img/using_fonts_advanced_import_settings_opentype_features.webp'}" uri="tutorials/ui/img/using_fonts_advanced_import_settings_opentype_features.webp"></image>
                    <caption>高级导入设置中的 OpenType 特性覆盖</caption>
                </figure>
                <paragraph><strong>In a specific font usage (FontVariation)</strong></paragraph>
                <paragraph>To use a font feature, create a FontVariation resource like you would do for a
                    <reference internal="True" refid="doc-using-fonts-variable-fonts"><inline classes="std std-ref">variable font</inline></reference>, then load a font file
                    within the FontVariation resource:</paragraph>
                <figure align="center" ids="id25">
                    <image candidates="{'*': 'tutorials/ui/img/using_fonts_font_variation_create.webp'}" uri="tutorials/ui/img/using_fonts_font_variation_create.webp"></image>
                    <caption>创建 FontVariation 资源</caption>
                </figure>
                <figure align="center" ids="id26">
                    <image candidates="{'*': 'tutorials/ui/img/using_fonts_font_variation_load.webp'}" uri="tutorials/ui/img/using_fonts_font_variation_load.webp"></image>
                    <caption>在 FontVariation 资源中加载字体文件</caption>
                </figure>
                <paragraph>Scroll down to the FontVariation's <strong>OpenType Features</strong> section, click the
                    <strong>Features (0 of N set)</strong> text to expand the property, then click <strong>Add Feature</strong>
                    and select the desired feature in the dropdown:</paragraph>
                <figure align="center" ids="id27">
                    <image candidates="{'*': 'tutorials/ui/img/using_fonts_font_variation_opentype_features.webp'}" uri="tutorials/ui/img/using_fonts_font_variation_opentype_features.webp"></image>
                    <caption>在 FontVariation 资源中指定 OpenType 特性</caption>
                </figure>
                <paragraph>For example, here's the <reference name="Inter" refuri="https://rsms.me/inter/">Inter</reference> font without the
                    <emphasis>Slashed Zero</emphasis> feature (top), then with the <emphasis>Slashed Zero</emphasis> OpenType feature enabled
                    (bottom):</paragraph>
                <figure align="center" ids="id28">
                    <image candidates="{'*': 'tutorials/ui/img/using_fonts_font_variation_slashed_zero.webp'}" uri="tutorials/ui/img/using_fonts_font_variation_slashed_zero.webp"></image>
                    <caption>OpenType 特性比较（Inter）</caption>
                </figure>
                <paragraph>You can disable ligatures and/or kerning for a specific font by adding OpenType
                    features, then unchecking them in the inspector:</paragraph>
                <figure align="center" ids="id29">
                    <image candidates="{'*': 'tutorials/ui/img/using_fonts_font_variation_disable_ligatures.webp'}" uri="tutorials/ui/img/using_fonts_font_variation_disable_ligatures.webp"></image>
                    <caption>禁用字体的合字和字偶距</caption>
                </figure>
                <target refid="doc-using-fonts-system-fonts"></target>
            </section>
            <section ids="system-fonts doc-using-fonts-system-fonts" names="system\ fonts 系统字体 doc_using_fonts_system_fonts">
                <title>系统字体</title>
                <warning>
                    <paragraph>只有 Windows、macOS、Linux、Android、iOS 支持加载系统字体。</paragraph>
                    <paragraph>However, loading system fonts on Android is unreliable as there is no
                        official API for doing so. Godot has to rely on parsing system configuration
                        files, which can be modified by third-party Android vendors. This may result
                        in non-functional system font loading.</paragraph>
                </warning>
                <paragraph>System fonts are a different type of resource compared to imported fonts. They
                    are never actually imported into the project, but are loaded at run-time. This
                    has 2 benefits:</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>The fonts are not included within the exported PCK file, leading to a smaller
                            file size for the exported project.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>Since fonts are not included with the exported project, this avoids licensing
                            issues that would occur if proprietary system fonts were distributed alongside
                            the project.</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>The engine automatically uses system fonts as fallback fonts, which makes it
                    possible to display CJK characters and emoji without having to load a custom
                    font. There are some restrictions that apply though, as mentioned in the
                    <reference internal="True" refid="doc-using-fonts-emoji"><inline classes="std std-ref">Using emoji</inline></reference> section.</paragraph>
                <paragraph>Create a <reference internal="True" refuri="../../classes/class_systemfont#class-systemfont"><inline classes="std std-ref">SystemFont</inline></reference> resource in the location where you desire to
                    use the system font:</paragraph>
                <figure align="center" ids="id30">
                    <image candidates="{'*': 'tutorials/ui/img/using_fonts_system_font_create.webp'}" uri="tutorials/ui/img/using_fonts_system_font_create.webp"></image>
                    <caption>Creating a SystemFont resource</caption>
                </figure>
                <figure align="center" ids="id31">
                    <image candidates="{'*': 'tutorials/ui/img/using_fonts_system_font_specify.webp'}" uri="tutorials/ui/img/using_fonts_system_font_specify.webp"></image>
                    <caption>Specifying a font name to use in a SystemFont resource</caption>
                </figure>
                <paragraph>你可以显式指定若干字体名称（例如 <literal>Arial</literal>），也可以指定字体的<emphasis>别名</emphasis>，后者会映射到系统中的“标准”默认字体：</paragraph>
                <comment xml:space="preserve">Android font information sourced from &lt;https://android.googlesource.com/platform/frameworks/base/+/master/data/fonts/fonts.xml&gt;</comment>
                <table>
                    <tgroup cols="5">
                        <colspec colwidth="16"></colspec>
                        <colspec colwidth="17"></colspec>
                        <colspec colwidth="16"></colspec>
                        <colspec colwidth="25"></colspec>
                        <colspec colwidth="25"></colspec>
                        <thead>
                            <row>
                                <entry>
                                    <paragraph>字体别名</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Windows</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>macOS/iOS</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Linux</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Android</paragraph>
                                </entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>
                                    <paragraph><literal>sans-serif</literal></paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Arial</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Helvetica</paragraph>
                                </entry>
                                <entry>
                                    <paragraph><emphasis>由 fontconfig 处理</emphasis></paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Roboto / Noto Sans</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph><literal>serif</literal></paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Times New Roman</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Times</paragraph>
                                </entry>
                                <entry>
                                    <paragraph><emphasis>由 fontconfig 处理</emphasis></paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Noto Serif</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph><literal>monospace</literal></paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Courier New</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Courier</paragraph>
                                </entry>
                                <entry>
                                    <paragraph><emphasis>由 fontconfig 处理</emphasis></paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Droid Sans Mono</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph><literal>cursive</literal></paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Comic Sans MS</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Apple Chancery</paragraph>
                                </entry>
                                <entry>
                                    <paragraph><emphasis>由 fontconfig 处理</emphasis></paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Dancing Script</paragraph>
                                </entry>
                            </row>
                            <row>
                                <entry>
                                    <paragraph><literal>fantasy</literal></paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Gabriola</paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Papyrus</paragraph>
                                </entry>
                                <entry>
                                    <paragraph><emphasis>由 fontconfig 处理</emphasis></paragraph>
                                </entry>
                                <entry>
                                    <paragraph>Droid Sans Mono</paragraph>
                                </entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
                <paragraph>On Android, Roboto is used for Latin/Cyrillic text and Noto Sans is used for
                    other languages' glyphs such as CJK. On third-party Android distributions, the
                    exact font selection may differ.</paragraph>
                <paragraph>If specifying more than one font, the first font that is found on the system
                    will be used (from top to bottom). Font names and aliases are case-insensitive
                    on all platforms.</paragraph>
                <paragraph>Like for font variations, you can save the SystemFont arrangement to a resource
                    file to reuse it in other places.</paragraph>
                <paragraph>Remember that different system fonts have different metrics, which means that
                    text that can fit within a rectangle on one platform may not be doing so on
                    another platform. Always reserve some additional space during development so
                    that labels can extend further if needed.</paragraph>
                <note>
                    <paragraph>Unlike Windows and macOS/iOS, the set of default fonts shipped on Linux
                        depends on the distribution. This means that on different Linux
                        distributions, different fonts may be displayed for a given system font name
                        or alias.</paragraph>
                </note>
                <paragraph>It is also possible to load fonts at runtime even if they aren't installed on the system.
                    See <reference internal="True" refuri="../io/runtime_file_loading_and_saving#doc-runtime-file-loading-and-saving-fonts"><inline classes="std std-ref">Runtime loading and saving</inline></reference>
                    for details.</paragraph>
                <target refid="doc-using-fonts-font-prerendering"></target>
            </section>
            <section ids="font-prerendering doc-using-fonts-font-prerendering" names="font\ prerendering 字体预渲染 doc_using_fonts_font_prerendering">
                <title>字体预渲染</title>
                <paragraph>使用传统的栅格字体时，Godot 会针对不同字体的不同尺寸进行字形的缓存。这样做能够减轻卡顿，但卡顿仍然会在项目的运行过程中首次显示某个字形时发生。如果使用的是较大的字体大小，或者是在移动设备上运行，就会尤为明显。</paragraph>
                <paragraph>使用 MSDF 字体时，只需要执行一次特殊的带符号距离场纹理栅格化。这样就可以单纯针对字体进行缓存，无需考虑字体大小。不过 MSDF 字体的首次渲染相对于中等大小的传统栅格字体要慢。</paragraph>
                <paragraph>为了避免与字体渲染相关的卡顿问题，可以对特定的字形进行<emphasis>预渲染</emphasis>。可以针对所有需要使用的字形进行预渲染（得到最优的效果），也可以只针对游戏中可能出现的常见字形进行预渲染（降低文件尺寸）。没有预渲染的字形会照常进行即时栅格化。</paragraph>
                <note>
                    <paragraph>无论是传统字体还是 MSDF 字体，栅格化都是在 CPU 上进行的。也就是说 GPU 的性能并不会影响字体栅格化的耗时。</paragraph>
                </note>
                <paragraph>Open the Advanced Import Settings dialog by double-clicking the font file in the
                    FileSystem dock. You can also select the font in the FileSystem dock, go to the
                    Import dock then choose <strong>Advanced…</strong> at the bottom:</paragraph>
                <figure align="center" ids="id32">
                    <image candidates="{'*': 'tutorials/ui/img/using_fonts_advanced_import_settings.webp'}" uri="tutorials/ui/img/using_fonts_advanced_import_settings.webp"></image>
                    <caption>导入面板</caption>
                </figure>
                <paragraph>前往“高级导入设置”对话框的<strong>预渲染配置</strong>选项卡，单击“加号”添加配置：</paragraph>
                <figure align="center" ids="id33">
                    <image alt="在“高级导入设置”对话框中添加新的预渲染配置" candidates="{'*': 'tutorials/ui/img/using_fonts_advanced_import_settings_prerender_new_configuration.webp'}" uri="tutorials/ui/img/using_fonts_advanced_import_settings_prerender_new_configuration.webp"></image>
                    <caption>在“高级导入设置”对话框中添加新的预渲染配置</caption>
                </figure>
                <paragraph>添加配置后，请单击对应的名称，确保选中该配置。双击名称可以重命名该配置。</paragraph>
                <paragraph>在配置中添加字形的方法有两种。两种方法可以同时使用，效果会累积：</paragraph>
                <paragraph><strong>使用翻译中的文本</strong></paragraph>
                <paragraph>对于大多数项目而言，使用这个方法最方便，因为可以从语言翻译中自动提取文本。缺点是只有项目支持<reference internal="True" refuri="../i18n/internationalizing_games#doc-internationalizing-games"><inline classes="std std-ref">国际化</inline></reference>时才能使用。否则请使用下面“使用自定义文本”的方法。</paragraph>
                <paragraph>After adding translations to the Project Settings, use the
                    <strong>Glyphs from the Translations</strong> tab to check translations by double-clicking them,
                    then click <strong>Shape All Strings in the Translations and Add Glyphs</strong> at the bottom:</paragraph>
                <figure align="center" ids="id34">
                    <image alt="Enabling prerendering in the Advanced Import Settings dialog with the Glyphs from the Translations tab" candidates="{'*': 'tutorials/ui/img/using_fonts_advanced_import_settings_prerender_translation.webp'}" uri="tutorials/ui/img/using_fonts_advanced_import_settings_prerender_translation.webp"></image>
                    <caption>Enabling prerendering in the Advanced Import Settings dialog with the <strong>Glyphs from the Translations</strong> tab</caption>
                </figure>
                <note>
                    <paragraph>The list of prerendered glyphs is not automatically updated when
                        translations are updated, so you need to repeat this process if your
                        translations have changed significantly.</paragraph>
                </note>
                <paragraph><strong>使用自定义文本</strong></paragraph>
                <paragraph>While it requires manually specifying text that will appear in the game, this is
                    the most efficient approach for games which don't feature user text input. This
                    approach is worth exploring for mobile games to reduce the file size of the
                    distributed app.</paragraph>
                <paragraph>To use existing text as a baseline for prerendering, go to the <strong>Glyphs from the
                        Text</strong> sub-tab of the Advanced Import Settings dialog, enter text in the window
                    on the right, then click <strong>Shape Text and Add Glyphs</strong> at the bottom of the
                    dialog:</paragraph>
                <figure align="center" ids="id35">
                    <image alt="Enabling prerendering in the Advanced Import Settings dialog, Glyphs from the Text tab" candidates="{'*': 'tutorials/ui/img/using_fonts_advanced_import_settings_prerender_text.webp'}" uri="tutorials/ui/img/using_fonts_advanced_import_settings_prerender_text.webp"></image>
                    <caption>Enabling prerendering in the Advanced Import Settings dialog with the <strong>Glyphs from the Text</strong> tab</caption>
                </figure>
                <tip>
                    <paragraph>If your project supports <reference internal="True" refuri="../i18n/internationalizing_games#doc-internationalizing-games"><inline classes="std std-ref">internationalization</inline></reference>,
                        you can paste the contents of your CSV or PO files in the above box to quickly
                        prerender all possible characters that may be rendered during gameplay
                        (excluding user-provided or non-translatable strings).</paragraph>
                </tip>
                <paragraph><strong>通过启用字符集</strong></paragraph>
                <paragraph>The second method requires less configuration and fewer updates if your game's
                    text changes, and is more suited to text-heavy games or multiplayer games with
                    chat. On the other hand, it may cause glyphs that never show up in the game to
                    be prerendered, which is less efficient in terms of file size.</paragraph>
                <paragraph>To use existing text as a baseline for prerendering, go to the <strong>Glyphs from the
                        Character Map</strong> sub-tab of the Advanced Import Settings dialog, then
                    <emphasis>double-click</emphasis> character sets to be enabled on the right:</paragraph>
                <figure align="center" ids="id36">
                    <image alt="Enabling prerendering in the Advanced Import Settings dialog, Glyphs from the Character Map tab" candidates="{'*': 'tutorials/ui/img/using_fonts_advanced_import_settings_prerender_character_map.webp'}" uri="tutorials/ui/img/using_fonts_advanced_import_settings_prerender_character_map.webp"></image>
                    <caption>Enabling prerendering in the Advanced Import Settings dialog with the <strong>Glyphs from the Character Map</strong> tab</caption>
                </figure>
                <paragraph>To ensure full prerendering, the character sets you need to enable depend on
                    which languages are supported in your game. For English, only <strong>Basic Latin</strong>
                    needs to be enabled. Enabling <strong>Latin-1 Supplement</strong> as well allows fully
                    covering many more languages, such as French, German and Spanish. For Russian,
                    <strong>Cyrillic</strong> needs to be enabled, and so on.</paragraph>
            </section>
            <section ids="default-project-font-properties" names="default\ project\ font\ properties 默认项目字体属性">
                <title>默认项目字体属性</title>
                <paragraph>在高级“项目设置”的 <strong>GUI &gt; 主题</strong>部分中，可以对默认字体的渲染方式进行选择：</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><strong>Default Font Antialiasing:</strong> Controls the
                            <reference internal="True" refid="doc-using-fonts-antialiasing"><inline classes="std std-ref">antialiasing</inline></reference> method used
                            for the default project font.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><strong>Default Font Hinting:</strong> Controls the
                            <reference internal="True" refid="doc-using-fonts-hinting"><inline classes="std std-ref">hinting</inline></reference> method used for
                            the default project font.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><strong>Default Font Subpixel Positioning:</strong> Controls the
                            <reference internal="True" refid="doc-using-fonts-subpixel-positioning"><inline classes="std std-ref">subpixel positioning</inline></reference>
                            method for the default project font.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><strong>Default Font Multichannel Signed Distance Field:</strong> If <literal>true</literal>, makes the
                            default project font use <reference internal="True" refid="doc-using-fonts-msdf"><inline classes="std std-ref">MSDF font rendering</inline></reference> instead
                            of traditional rasterization.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><strong>Default Font Generate Mipmaps:</strong> If <literal>true</literal>, enables
                            <reference internal="True" refid="doc-using-fonts-mipmaps"><inline classes="std std-ref">mipmap</inline></reference> generation and
                            usage for the default project font.</paragraph>
                    </list_item>
                </bullet_list>
                <note>
                    <paragraph>These project settings <emphasis>only</emphasis> affect the default project font (the one that
                        is hardcoded in the engine binary).</paragraph>
                    <paragraph>Custom fonts' properties are governed by their respective import options
                        instead. You can use the <strong>Import Defaults</strong> section of the Project Settings
                        dialog to override default import options for custom fonts.</paragraph>
                </note>
                <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
            </section>
        </section>
    </section>
</document>
