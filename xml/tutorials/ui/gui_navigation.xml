<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/tutorials/ui/gui_navigation.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-gui-navigation"></target>
    <section ids="keyboard-controller-navigation-and-focus doc-gui-navigation" names="keyboard/controller\ navigation\ and\ focus 键盘/控制器导航和焦点 doc_gui_navigation">
        <title>键盘/控制器导航和焦点</title>
        <paragraph>对于用户界面来说，支持全键盘和控制器进行导航和交互是常见的。这有利于改善项目可访问性，不是每个人都能使用鼠标或触摸控制进行交互，或是让你的项目准备在<reference internal="True" refuri="../platform/consoles#doc-consoles"><inline classes="std std-ref">游戏主机</inline></reference>上运行，或者只是为了那些喜欢在PC上用控制器玩游戏的人。</paragraph>
        <paragraph>使用键盘或控制器在 UI 元素之间导航是通过更改主动选择的节点来完成的。这也称为更改 UI 焦点。 Godot 中的每个 <reference internal="True" refuri="../../classes/class_control#class-control"><inline classes="std std-ref">Control</inline></reference> 节点都能够获得焦点。默认情况下，一些控件节点有能力自动拾取焦点内置的 UI 动作，并做出反应，例如 <literal>ui_up</literal>, <literal>ui_down</literal>, <literal>ui_focus_next</literal> 等。这些动作可以在项目的输入映射中的设置和修改。</paragraph>
        <warning>
            <paragraph>因为这些动作用于焦点，它们不应该被用于游戏代码。</paragraph>
        </warning>
        <section ids="node-settings" names="node\ settings 节点设置">
            <title>节点设置</title>
            <paragraph>除了内置的逻辑之外，你还可以为每个单独的控件节点定义所谓的邻焦点。这允许在你项目的用户界面上的路径微调UI焦点。单个节点的设置可以在检查器栏的 "Control" 部分的 "Focus " 类别下找到。</paragraph>
            <image candidates="{'*': 'tutorials/ui/img/focus_settings.png'}" uri="tutorials/ui/img/focus_settings.png"></image>
            <paragraph>邻近选项用于定义四向导航的节点，例如使用箭头键或控制器上的方向键。如，当使用向下箭头向下导航或按下方向键时，将使用底部邻近。 “下一个”和“上一个”选项与焦点转移按钮一起使用，例如桌面操作系统上的 <literal classes="kbd">Tab</literal>。</paragraph>
            <note>
                <paragraph>如果节点被隐藏，它就会失去焦点。</paragraph>
            </note>
            <paragraph>模式设置定义了节点如何被聚焦。<strong>All</strong>意味着节点可以通过用鼠标点击，或用键盘或控制器选择而被关注。<strong>Click</strong>意味着只能通过点击来关注。最后，<strong>None</strong>意味着它根本不能被关注。不同的控件节点根据它们的典型使用方式有不同的默认设置，如，<reference internal="True" refuri="../../classes/class_label#class-label"><inline classes="std std-ref">Label</inline></reference> 节点默认设置为“None”，而<reference internal="True" refuri="../../classes/class_button#class-button"><inline classes="std std-ref">按钮</inline></reference>则为“All”。</paragraph>
            <paragraph>确保为焦点和导航正确配置场景。如果节点没有配置邻焦点，引擎将尝试自动猜测下一个控件。这可能会导致意外行为，尤其是在没有明确定义垂直或水平导航操作的复杂用户界面中。</paragraph>
        </section>
        <section ids="necessary-code" names="necessary\ code 必要的代码">
            <title>必要的代码</title>
            <paragraph>为了使键盘和控制器导航正常工作，在场景开始时，所有节点都需要使用代码进行焦点控制。如果不这样做，按下按钮或按键时，就不会有任何作用。下面是一个用代码设置初始焦点的基本例子：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func _ready():
    $StartButton.grab_focus()</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">public override void _Ready()
{
    GetNode&lt;Button&gt;("StartButton").GrabFocus();
}</literal_block>
                </div>
            </container>
            <paragraph>现在，当场景启动，"Start Button" 节点被聚焦，键盘或控制器可以用来在它和其他UI元素之间进行导航。</paragraph>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
