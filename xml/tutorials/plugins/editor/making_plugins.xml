<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/tutorials/plugins/editor/making_plugins.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-making-plugins"></target>
    <section ids="making-plugins doc-making-plugins" names="making\ plugins 制作插件 doc_making_plugins">
        <title>制作插件</title>
        <section ids="about-plugins" names="about\ plugins 关于插件">
            <title>关于插件</title>
            <paragraph>插件是用有用的工具来扩展编辑器的一个好方法. 它可以完全用GDScript和标准场景制作, 甚至不需要重新加载编辑器. 与模块不同, 你不需要创建C++代码也不需要重新编译引擎. 虽然这使得插件的功能不那么强大, 但你仍然可以用它们做很多事情. 请注意, 一个插件与你已经可以制作的任何场景相似, 只是它是用脚本创建的, 以增加编辑器功能.</paragraph>
            <paragraph>This tutorial will guide you through the creation of two plugins so
                you can understand how they work and be able to develop your own. The first
                is a custom node that you can add to any scene in the project, and the
                other is a custom dock added to the editor.</paragraph>
        </section>
        <section ids="creating-a-plugin" names="creating\ a\ plugin 创建插件">
            <title>创建插件</title>
            <paragraph>在开始前, 先找个地方创建个空项目. 这个空项目是制作和测试我们插件的基础.</paragraph>
            <paragraph>编辑器要识别一个新的插件, 首先需要创建两个文件: 一个是 <literal>plugin.cfg</literal> 用于配置和具有此功能的工具脚本. 插件在项目文件夹里面有一个标准路径, 比如 <literal>addons/plugin_name</literal>.Godot提供了一个属性框, 用于生成这些文件并将它们放在需要的位置.</paragraph>
            <paragraph>In the main toolbar, click the <literal>Project</literal> dropdown. Then click
                <literal>Project Settings...</literal>. Go to the <literal>Plugins</literal> tab and then click
                on the <literal>Create New Plugin</literal> button in the top-right.</paragraph>
            <paragraph>你会看到出现了一个对话框，类似这样：</paragraph>
            <image candidates="{'*': 'tutorials/plugins/editor/img/making_plugins-create_plugin_dialog.webp'}" uri="tutorials/plugins/editor/img/making_plugins-create_plugin_dialog.webp"></image>
            <paragraph>每个字段中文本属性都描述了它会影响到哪些配置文件的值.</paragraph>
            <paragraph>如果要继续使用该例子，请使用下列的值：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="ini" linenos="False" xml:space="preserve">Plugin Name: My Custom Node
Subfolder: my_custom_node
Description: A custom node made to extend the Godot Engine.
Author: Your Name Here
Version: 1.0.0
Language: GDScript
Script Name: custom_node.gd
Activate now: No</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="ini" linenos="False" xml:space="preserve">Plugin Name: My Custom Node
Subfolder: MyCustomNode
Description: A custom node made to extend the Godot Engine.
Author: Your Name Here
Version: 1.0.0
Language: C#
Script Name: CustomNode.cs
Activate now: No</literal_block>
                </div>
            </container>
            <warning>
                <paragraph>始终需要在 C# 中去掉对 <literal>立即激活？</literal> 选项的勾选，因为和其他 C# 脚本一样，EditorPlugin 脚本是需要编译的，要求构建整个项目。构建项目后，就可以在 <literal>项目设置</literal> 的 <literal>插件</literal> 选项卡中启用该插件。</paragraph>
            </warning>
            <paragraph>你最终的目录结构应该是这样显示的：</paragraph>
            <image candidates="{'*': 'tutorials/plugins/editor/img/making_plugins-my_custom_mode_folder.webp'}" uri="tutorials/plugins/editor/img/making_plugins-my_custom_mode_folder.webp"></image>
            <paragraph><literal>plugin.cfg</literal> is an INI file with metadata about your plugin.
                The name and description help people understand what it does.
                Your name helps you get properly credited for your work.
                The version number helps others know if they have an outdated version;
                if you are unsure on how to come up with the version number, check out <reference name="Semantic Versioning" refuri="https://semver.org/">Semantic Versioning</reference><target ids="semantic-versioning" names="semantic\ versioning" refuri="https://semver.org/"></target>.
                The main script file will instruct Godot what your plugin does in the editor
                once it is active.</paragraph>
            <section ids="the-script-file" names="the\ script\ file 脚本文件">
                <title>脚本文件</title>
                <paragraph>Upon creation of the plugin, the dialog will automatically open the
                    EditorPlugin script for you. The script has two requirements that you cannot
                    change: it must be a <literal>@tool</literal> script, or else it will not load properly in the
                    editor, and it must inherit from <reference internal="True" refuri="../../../classes/class_editorplugin#class-editorplugin"><inline classes="std std-ref">EditorPlugin</inline></reference>.</paragraph>
                <warning>
                    <paragraph>In addition to the EditorPlugin script, any other GDScript that your plugin uses
                        must <emphasis>also</emphasis> be a tool. Any GDScript without <literal>@tool</literal> imported into the editor
                        will act like an empty file!</paragraph>
                </warning>
                <paragraph>It's important to deal with initialization and clean-up of resources.
                    A good practice is to use the virtual function
                    <reference internal="True" refuri="../../../classes/class_node#class-node-private-method-enter-tree"><inline classes="std std-ref">_enter_tree()</inline></reference> to initialize your plugin and
                    <reference internal="True" refuri="../../../classes/class_node#class-node-private-method-exit-tree"><inline classes="std std-ref">_exit_tree()</inline></reference> to clean it up. Thankfully,
                    the dialog generates these callbacks for you. Your script should look something
                    like this:</paragraph>
                <target refid="doc-making-plugins-template-code"></target>
                <container classes="sphinx-tabs" ids="doc-making-plugins-template-code" names="doc_making_plugins_template_code" type="tab-element">
                    <div aria-label="Tabbed content" role="tablist">
                        <button aria-controls="panel-1-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                        <button aria-controls="panel-1-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                    </div>
                    <div aria-labelledby="tab-1-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                        <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">@tool
extends EditorPlugin


func _enter_tree():
    # Initialization of the plugin goes here.
    pass


func _exit_tree():
    # Clean-up of the plugin goes here.
    pass</literal_block>
                    </div>
                    <div aria-labelledby="tab-1-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-1-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                        <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">#if TOOLS
using Godot;

[Tool]
public partial class CustomNode : EditorPlugin
{
    public override void _EnterTree()
    {
        // Initialization of the plugin goes here.
    }

    public override void _ExitTree()
    {
        // Clean-up of the plugin goes here.
    }
}
#endif</literal_block>
                    </div>
                </container>
                <paragraph>这是创建新插件时使用的好模板.</paragraph>
            </section>
        </section>
        <section ids="a-custom-node" names="a\ custom\ node 自定义节点">
            <title>自定义节点</title>
            <paragraph>有时你希望在许多节点中存在某种行为, 例如可以重复使用的自定义场景或控件. 实例化在很多情况下都很有用, 但有时它会很麻烦, 特别是如果你在许多项目中使用它. 一个很好的解决方案是创建一个插件, 添加一个具有自定义行为的节点.</paragraph>
            <warning>
                <paragraph>通过 EditorPlugin 添加的节点是“CustomType”（自定义类型）节点。虽然它们可以用于任何脚本语言，但功能比 <reference internal="True" refuri="../../scripting/gdscript/gdscript_basics#doc-gdscript-basics-class-name"><inline classes="std std-ref">Script 类系统</inline></reference>少。如果你正在编写 GDScript 或 NativeScript，建议使用 Script 类代替。</paragraph>
            </warning>
            <paragraph>To create a new node type, you can use the function
                <reference internal="True" refuri="../../../classes/class_editorplugin#class-editorplugin-method-add-custom-type"><inline classes="std std-ref">add_custom_type()</inline></reference> from the
                <reference internal="True" refuri="../../../classes/class_editorplugin#class-editorplugin"><inline classes="std std-ref">EditorPlugin</inline></reference> class. This function can add new types to the editor
                (nodes or resources). However, before you can create the type, you need a script
                that will act as the logic for the type. While that script doesn't have to use
                the <literal>@tool</literal> annotation, it can be added so the script runs in the editor.</paragraph>
            <paragraph>For this tutorial, we'll create a button that prints a message when
                clicked. For that, we'll need a script that extends from
                <reference internal="True" refuri="../../../classes/class_button#class-button"><inline classes="std std-ref">Button</inline></reference>. It could also extend
                <reference internal="True" refuri="../../../classes/class_basebutton#class-basebutton"><inline classes="std std-ref">BaseButton</inline></reference> if you prefer:</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-2-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-2-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-2-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">@tool
extends Button


func _enter_tree():
    pressed.connect(clicked)


func clicked():
    print("You clicked me!")</literal_block>
                </div>
                <div aria-labelledby="tab-2-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-2-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">using Godot;

[Tool]
public partial class MyButton : Button
{
    public override void _EnterTree()
    {
        Pressed += Clicked;
    }

    public void Clicked()
    {
        GD.Print("You clicked me!");
    }
}</literal_block>
                </div>
            </container>
            <paragraph>That's it for our basic button. You can save this as <literal>my_button.gd</literal> inside the
                plugin folder. You'll also need a 16×16 icon to show in the scene tree. If you
                don't have one, you can grab the default one from the engine and save it in your
                <title_reference>addons/my_custom_node</title_reference> folder as <title_reference>icon.png</title_reference>, or use the default Godot logo
                (<title_reference>preload("res://icon.svg")</title_reference>).</paragraph>
            <tip>
                <paragraph>SVG images that are used as custom node icons should have the
                    <strong>Editor &gt; Scale With Editor Scale</strong> and <strong>Editor &gt; Convert Icons With Editor Theme</strong>
                    <reference internal="True" refuri="../../assets_pipeline/importing_images#doc-importing-images-editor-import-options"><inline classes="std std-ref">import options</inline></reference> enabled. This allows
                    icons to follow the editor's scale and theming settings if the icons are designed with
                    the same color palette as Godot's own icons.</paragraph>
            </tip>
            <image candidates="{'*': 'tutorials/plugins/editor/img/making_plugins-custom_node_icon.png'}" uri="tutorials/plugins/editor/img/making_plugins-custom_node_icon.png"></image>
            <paragraph>现在，我们需要把它作为一个自定义类型添加，以便它显示在<strong>新建 Node</strong> 的对话框中。为此，将 <literal>custom_node.gd</literal> 脚本改为以下内容：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-3-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-3-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-3-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-3-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-3-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-3-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">@tool
extends EditorPlugin


func _enter_tree():
    # Initialization of the plugin goes here.
    # Add the new type with a name, a parent type, a script and an icon.
    add_custom_type("MyButton", "Button", preload("my_button.gd"), preload("icon.png"))


func _exit_tree():
    # Clean-up of the plugin goes here.
    # Always remember to remove it from the engine when deactivated.
    remove_custom_type("MyButton")</literal_block>
                </div>
                <div aria-labelledby="tab-3-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-3-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">#if TOOLS
using Godot;

[Tool]
public partial class CustomNode : EditorPlugin
{
    public override void _EnterTree()
    {
        // Initialization of the plugin goes here.
        // Add the new type with a name, a parent type, a script and an icon.
        var script = GD.Load&lt;Script&gt;("res://addons/MyCustomNode/MyButton.cs");
        var texture = GD.Load&lt;Texture2D&gt;("res://addons/MyCustomNode/Icon.png");
        AddCustomType("MyButton", "Button", script, texture);
    }

    public override void _ExitTree()
    {
        // Clean-up of the plugin goes here.
        // Always remember to remove it from the engine when deactivated.
        RemoveCustomType("MyButton");
    }
}
#endif</literal_block>
                </div>
            </container>
            <paragraph>完成后, 插件应该已经在 <strong>项目设置</strong> 的插件列表中可用, 因此请按照 <reference name="Checking the results" refid="checking-the-results">Checking the results</reference> 中的说明激活它.</paragraph>
            <paragraph>然后通过添加新节点来尝试:</paragraph>
            <image candidates="{'*': 'tutorials/plugins/editor/img/making_plugins-custom_node_create.webp'}" uri="tutorials/plugins/editor/img/making_plugins-custom_node_create.webp"></image>
            <paragraph>当你添加节点时, 你可以看到它已经有你创建的脚本附加在上面. 给这个按钮设置一个文本, 保存并运行场景. 当你点击按钮时, 你可以在控制台中看到一些文字:</paragraph>
            <image candidates="{'*': 'tutorials/plugins/editor/img/making_plugins-custom_node_console.webp'}" uri="tutorials/plugins/editor/img/making_plugins-custom_node_console.webp"></image>
            <section ids="a-custom-dock" names="a\ custom\ dock 自定义窗口">
                <title>自定义窗口</title>
                <paragraph>有时, 你需要扩展编辑器并添加始终可用的工具. 一种简单的方法是添加一个带插件的新扩展面板. Docks只是基于Control的场景, 因此它们的创建方式与通常的GUI场景类似.</paragraph>
                <paragraph>创建一个自定义栏好的方法和自定义节点一样. 在 <literal>addons/my_custom_dock</literal> 文件夹中创建一个新的 <literal>plugin.cfg</literal> 文件, 然后在其中添加以下内容:</paragraph>
                <container classes="sphinx-tabs" type="tab-element">
                    <div aria-label="Tabbed content" role="tablist">
                        <button aria-controls="panel-4-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-4-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                        <button aria-controls="panel-4-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-4-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                    </div>
                    <div aria-labelledby="tab-4-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-4-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                        <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">[plugin]

name="My Custom Dock"
description="A custom dock made so I can learn how to make plugins."
author="Your Name Here"
version="1.0"
script="custom_dock.gd"</literal_block>
                    </div>
                    <div aria-labelledby="tab-4-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-4-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                        <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">[plugin]

name="My Custom Dock"
description="A custom dock made so I can learn how to make plugins."
author="Your Name Here"
version="1.0"
script="CustomDock.cs"</literal_block>
                    </div>
                </container>
                <paragraph>然后在同一文件夹中创建脚本 <literal>custom_dock.gd</literal>。填写<reference internal="True" refid="doc-making-plugins-template-code"><inline classes="std std-ref">之前见过的模板</inline></reference>以获得良好的开端。</paragraph>
                <paragraph>由于我们正在尝试添加新的自定义窗口, 因此我们需要创建窗口的内容. 这只不过是一个标准的Godot场景: 只需在编辑器中创建一个新场景然后编辑它.</paragraph>
                <paragraph>对于编辑器停靠站, 根节点 <strong>必须是</strong> <reference internal="True" refuri="../../../classes/class_control#class-control"><inline classes="std std-ref">Control</inline></reference> 或其子类之一. 在本教程中, 你可以创建一个按钮. 根节点的名称也将是面板对话框中显示的名称, 因此请务必为其指定一个简短的描述性名称. 另外, 不要忘记在按钮上添加一些文字.</paragraph>
                <image candidates="{'*': 'tutorials/plugins/editor/img/making_plugins-my_custom_dock_scene.webp'}" uri="tutorials/plugins/editor/img/making_plugins-my_custom_dock_scene.webp"></image>
                <paragraph>把这个场景保存为 <literal>my_dock.tscn</literal> . 现在, 我们需要抓取我们创建的场景, 然后在编辑器中把它添加为一个栏目. 为此, 你可以依赖 <reference internal="True" refuri="../../../classes/class_editorplugin#class-editorplugin-method-add-control-to-dock"><inline classes="std std-ref">add_control_to_dock()</inline></reference> 这个函数, 它来自 <reference internal="True" refuri="../../../classes/class_editorplugin#class-editorplugin"><inline classes="std std-ref">EditorPlugin</inline></reference> 类.</paragraph>
                <paragraph>你需要选择一个停靠位置并定义要添加的控件, 也就是你刚刚创建的场景. 不要忘了在插件停用时 <strong>remove the dock</strong> . 脚本可以是这样的:</paragraph>
                <container classes="sphinx-tabs" type="tab-element">
                    <div aria-label="Tabbed content" role="tablist">
                        <button aria-controls="panel-5-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-5-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                        <button aria-controls="panel-5-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-5-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                    </div>
                    <div aria-labelledby="tab-5-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-5-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                        <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">@tool
extends EditorPlugin


# A class member to hold the dock during the plugin life cycle.
var dock


func _enter_tree():
    # Initialization of the plugin goes here.
    # Load the dock scene and instantiate it.
    dock = preload("res://addons/my_custom_dock/my_dock.tscn").instantiate()

    # Add the loaded scene to the docks.
    add_control_to_dock(DOCK_SLOT_LEFT_UL, dock)
    # Note that LEFT_UL means the left of the editor, upper-left dock.


func _exit_tree():
    # Clean-up of the plugin goes here.
    # Remove the dock.
    remove_control_from_docks(dock)
    # Erase the control from the memory.
    dock.free()</literal_block>
                    </div>
                    <div aria-labelledby="tab-5-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-5-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                        <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">#if TOOLS
using Godot;

[Tool]
public partial class CustomDock : EditorPlugin
{
    private Control _dock;

    public override void _EnterTree()
    {
        _dock = GD.Load&lt;PackedScene&gt;("res://addons/MyCustomDock/MyDock.tscn").Instantiate&lt;Control&gt;();
        AddControlToDock(DockSlot.LeftUl, _dock);
    }

    public override void _ExitTree()
    {
        // Clean-up of the plugin goes here.
        // Remove the dock.
        RemoveControlFromDocks(_dock);
        // Erase the control from the memory.
        _dock.Free();
    }
}
#endif</literal_block>
                    </div>
                </container>
                <paragraph>请注意, 虽然Dock最初会出现在其指定的位置, 但用户可以自由改变其位置, 并保存所产生的布局.</paragraph>
            </section>
            <section ids="checking-the-results" names="checking\ the\ results 检查结果">
                <title>检查结果</title>
                <paragraph>It's now time to check the results of your work. Open the <strong>Project
                        Settings</strong> and click on the <strong>Plugins</strong> tab. Your plugin should be the only one
                    on the list.</paragraph>
                <image candidates="{'*': 'tutorials/plugins/editor/img/making_plugins-project_settings.webp'}" uri="tutorials/plugins/editor/img/making_plugins-project_settings.webp"></image>
                <paragraph>You can see the plugin is not enabled.
                    Click the <strong>Enable</strong> checkbox to activate the plugin.
                    The dock should become visible before you even close
                    the settings window. You should now have a custom dock:</paragraph>
                <image candidates="{'*': 'tutorials/plugins/editor/img/making_plugins-custom_dock.webp'}" uri="tutorials/plugins/editor/img/making_plugins-custom_dock.webp"></image>
            </section>
        </section>
        <section ids="going-beyond" names="going\ beyond 举一反三">
            <title>举一反三</title>
            <paragraph>现在你已经学会了如何制作基本插件, 你可以通过多种方式扩展编辑器. 可以使用GDScript将许多功能添加到编辑器中; 它是一种创建专业编辑器的强大方法, 无需深入研究C++模块.</paragraph>
            <paragraph>你可以制作自己的插件来帮助自己或在 <reference name="资产库" refuri="https://godotengine.org/asset-library/">资产库</reference><target ids="id1" names="资产库" refuri="https://godotengine.org/asset-library/"></target> 中分享它们，以便人们可以从你的工作中受益。</paragraph>
            <target refid="doc-making-plugins-autoload"></target>
        </section>
        <section ids="registering-autoloads-singletons-in-plugins doc-making-plugins-autoload" names="registering\ autoloads/singletons\ in\ plugins 在插件中注册自动加载/单例 doc_making_plugins_autoload">
            <title>在插件中注册自动加载/单例</title>
            <paragraph>编辑器插件可以在启用时自动注册<reference internal="True" refuri="../../scripting/singletons_autoload#doc-singletons-autoload"><inline classes="std std-ref">自动加载</inline></reference>。同样也包含了在插件禁用时反注册该自动加载。</paragraph>
            <paragraph>这样用户就可以更快速地设置插件了，因为你的编辑器插件要求使用自动加载时，他们不必再手动去项目设置里添加自动加载了。</paragraph>
            <paragraph>在编辑器插件中使用以下代码注册单例：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-6-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-6-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-6-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-6-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-6-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-6-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">@tool
extends EditorPlugin

# Replace this value with a PascalCase autoload name, as per the GDScript style guide.
const AUTOLOAD_NAME = "SomeAutoload"


func _enter_tree():
    # The autoload can be a scene or script file.
    add_autoload_singleton(AUTOLOAD_NAME, "res://addons/my_addon/some_autoload.tscn")


func _exit_tree():
    remove_autoload_singleton(AUTOLOAD_NAME)</literal_block>
                </div>
                <div aria-labelledby="tab-6-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-6-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">#if TOOLS
using Godot;

[Tool]
public partial class MyEditorPlugin : EditorPlugin
{
    // Replace this value with a PascalCase autoload name.
    private const string AutoloadName = "SomeAutoload";

    public override void _EnterTree()
    {
        // The autoload can be a scene or script file.
        AddAutoloadSingleton(AutoloadName, "res://addons/MyAddon/SomeAutoload.tscn");
    }

    public override void _ExitTree()
    {
        RemoveAutoloadSingleton(AutoloadName);
    }
}
#endif</literal_block>
                </div>
            </container>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
