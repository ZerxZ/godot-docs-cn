<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/tutorials/plugins/editor/making_main_screen_plugins.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-making-main-screen-plugins"></target>
    <section ids="making-main-screen-plugins doc-making-main-screen-plugins" names="making\ main\ screen\ plugins 制作主屏幕插件 doc_making_main_screen_plugins">
        <title>制作主屏幕插件</title>
        <section ids="what-this-tutorial-covers" names="what\ this\ tutorial\ covers 本教程涵盖的内容">
            <title>本教程涵盖的内容</title>
            <paragraph>Main screen plugins allow you to create
                new UIs in the central part of the editor, which appear next to the
                "2D", "3D", "Script", and "AssetLib" buttons. Such editor plugins are
                referred as "Main screen plugins".</paragraph>
            <paragraph>本教程将带领你创建一个基本的主场景插件. 为了简单起见, 主场景插件将包含一个打印文本到控制台的单个按钮.</paragraph>
        </section>
        <section ids="initializing-the-plugin" names="initializing\ the\ plugin 初始化插件">
            <title>初始化插件</title>
            <paragraph>首先从Plugins菜单中创建一个新插件. 在本教程中, 我们将把它放在一个名为 <literal>main_screen</literal> 的文件夹中, 但你可以使用任何你喜欢的名字.</paragraph>
            <paragraph>插件脚本会自带 <literal>_enter_tree()</literal> 和 <literal>_exit_tree()</literal> 方法, 但对于主场景插件来说, 我们需要添加一些额外的方法. 增加五个额外的方法, 脚本就像这样:</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">@tool
extends EditorPlugin


func _enter_tree():
    pass


func _exit_tree():
    pass


func _has_main_screen():
    return true


func _make_visible(visible):
    pass


func _get_plugin_name():
    return "Main Screen Plugin"


func _get_plugin_icon():
    return EditorInterface.get_editor_theme().get_icon("Node", "EditorIcons")</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">#if TOOLS
using Godot;

[Tool]
public partial class MainScreenPlugin : EditorPlugin
{
    public override void _EnterTree()
    {

    }

    public override void _ExitTree()
    {

    }

    public override bool _HasMainScreen()
    {
        return true;
    }

    public override void _MakeVisible(bool visible)
    {

    }

    public override string _GetPluginName()
    {
        return "Main Screen Plugin";
    }

    public override Texture2D _GetPluginIcon()
    {
        return EditorInterface.GetEditorTheme().GetIcon("Node", "EditorIcons");
    }
}
#endif</literal_block>
                </div>
            </container>
            <paragraph>The important part in this script is the <literal>_has_main_screen()</literal> function,
                which is overloaded so it returns <literal>true</literal>. This function is automatically
                called by the editor on plugin activation, to tell it that this plugin
                adds a new center view to the editor. For now, we'll leave this script
                as-is and we'll come back to it later.</paragraph>
        </section>
        <section ids="main-screen-scene" names="main\ screen\ scene 主画面场景">
            <title>主画面场景</title>
            <paragraph>创建一个新的场景，其根节点由 <literal>Control</literal> 派生而来（在这个示例插件中，我们将使根节点为 <literal>CenterContainer</literal>）。选择这个根节点，在视口中，点击 <literal>布局</literal> 菜单，选择 <literal>整个矩形</literal>。你还需要在检查器中启用 <literal>Expand</literal> 垂直尺寸标志。面板现在使用主视口中的所有可用空间。</paragraph>
            <paragraph>接下来, 让我们为我们的主屏幕插件示例添加一个按钮. 添加一个 <literal>Button</literal> 节点, 并将文本设置为 "Print Hello "或类似的内容. 给按钮添加一个脚本, 像这样:</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-1-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-1-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-1-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">@tool
extends Button


func _on_print_hello_pressed():
    print("Hello from the main screen plugin!")</literal_block>
                </div>
                <div aria-labelledby="tab-1-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-1-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">using Godot;

[Tool]
public partial class PrintHello : Button
{
    private void OnPrintHelloPressed()
    {
        GD.Print("Hello from the main screen plugin!");
    }
}</literal_block>
                </div>
            </container>
            <paragraph>然后将 "按下" 信号连接到自身. 如果你需要信号方面的帮助, 请参考 <reference internal="True" refuri="../../../getting_started/step_by_step/signals#doc-signals"><inline classes="std std-ref">使用信号</inline></reference> 一文.</paragraph>
            <paragraph>我们完成了主屏幕面板. 将场景保存为 <literal>main_panel.tscn</literal>.</paragraph>
        </section>
        <section ids="update-the-plugin-script" names="update\ the\ plugin\ script 更新插件脚本">
            <title>更新插件脚本</title>
            <paragraph>我们需要更新 <literal>main_screen_plugin.gd</literal> 脚本，让插件实例化我们的主面板场景，并将其放置在需要的位置。这是完整的插件脚本：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-2-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-2-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-2-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">@tool
extends EditorPlugin


const MainPanel = preload("res://addons/main_screen/main_panel.tscn")

var main_panel_instance


func _enter_tree():
    main_panel_instance = MainPanel.instantiate()
    # Add the main panel to the editor's main viewport.
    EditorInterface.get_editor_main_screen().add_child(main_panel_instance)
    # Hide the main panel. Very much required.
    _make_visible(false)


func _exit_tree():
    if main_panel_instance:
        main_panel_instance.queue_free()


func _has_main_screen():
    return true


func _make_visible(visible):
    if main_panel_instance:
        main_panel_instance.visible = visible


func _get_plugin_name():
    return "Main Screen Plugin"


func _get_plugin_icon():
    # Must return some kind of Texture for the icon.
    return EditorInterface.get_editor_theme().get_icon("Node", "EditorIcons")</literal_block>
                </div>
                <div aria-labelledby="tab-2-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-2-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">#if TOOLS
using Godot;

[Tool]
public partial class MainScreenPlugin : EditorPlugin
{
    PackedScene MainPanel = ResourceLoader.Load&lt;PackedScene&gt;("res://addons/main_screen/main_panel.tscn");
    Control MainPanelInstance;

    public override void _EnterTree()
    {
        MainPanelInstance = (Control)MainPanel.Instantiate();
        // Add the main panel to the editor's main viewport.
        EditorInterface.GetEditorMainScreen().AddChild(MainPanelInstance);
        // Hide the main panel. Very much required.
        _MakeVisible(false);
    }

    public override void _ExitTree()
    {
        if (MainPanelInstance != null)
        {
            MainPanelInstance.QueueFree();
        }
    }

    public override bool _HasMainScreen()
    {
        return true;
    }

    public override void _MakeVisible(bool visible)
    {
        if (MainPanelInstance != null)
        {
            MainPanelInstance.Visible = visible;
        }
    }

    public override string _GetPluginName()
    {
        return "Main Screen Plugin";
    }

    public override Texture2D _GetPluginIcon()
    {
        // Must return some kind of Texture for the icon.
        return EditorInterface.GetEditorTheme().GetIcon("Node", "EditorIcons");
    }
}
#endif</literal_block>
                </div>
            </container>
            <paragraph>增加了几行具体的内容. <literal>MainPanel</literal> 是一个常量, 持有对场景的引用, 我们将其实例化为 <title_reference>main_panel_instance</title_reference>.</paragraph>
            <paragraph>The <literal>_enter_tree()</literal> function is called before <literal>_ready()</literal>. This is where
                we instance the main panel scene, and add them as children of specific parts
                of the editor. We use <literal>EditorInterface.get_editor_main_screen()</literal> to
                obtain the main editor screen and add our main panel instance as a child to it.
                We call the <literal>_make_visible(false)</literal> function to hide the main panel so
                it doesn't compete for space when first activating the plugin.</paragraph>
            <paragraph>当插件停用时, 调用 <literal>_exit_tree()</literal> 函数. 如果主屏幕仍然存在, 我们调用 <literal>queue_free()</literal> 来释放实例, 并将其从内存中移除.</paragraph>
            <paragraph>The <literal>_make_visible()</literal> function is overridden to hide or show the main
                panel as needed. This function is automatically called by the editor when the
                user clicks on the main viewport buttons at the top of the editor.</paragraph>
            <paragraph>The <literal>_get_plugin_name()</literal> and <literal>_get_plugin_icon()</literal> functions control
                the displayed name and icon for the plugin's main viewport button.</paragraph>
            <paragraph>另一个你可以添加的函数是 <literal>handles()</literal> 函数, 它允许你处理一个节点类型, 当选择该类型时自动聚焦主屏幕. 这类似于点击一个3D节点会自动切换到3D视口.</paragraph>
        </section>
        <section ids="try-the-plugin" names="try\ the\ plugin 试试这个插件">
            <title>试试这个插件</title>
            <paragraph>在项目设置中激活插件. 你会观察到主视口上方的2D, 3D, 脚本旁边有一个新的按钮. 点击它将带你进入新的主屏幕插件, 中间的按钮将打印文本.</paragraph>
            <paragraph>如果你想试试这个插件的完成版, 请在这里查看插件演示:<reference refuri="https://github.com/godotengine/godot-demo-projects/tree/master/plugins">https://github.com/godotengine/godot-demo-projects/tree/master/plugins</reference></paragraph>
            <paragraph>如果你想看一个更完整的例子, 了解主屏幕插件的能力, 请看这里的2.5D演示项目:<reference refuri="https://github.com/godotengine/godot-demo-projects/tree/master/misc/2.5d">https://github.com/godotengine/godot-demo-projects/tree/master/misc/2.5d</reference></paragraph>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
