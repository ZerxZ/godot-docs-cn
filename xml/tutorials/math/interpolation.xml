<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/tutorials/math/interpolation.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-interpolation"></target>
    <section ids="interpolation doc-interpolation" names="interpolation 插值 doc_interpolation">
        <title>插值</title>
        <paragraph>插值是图形编程中一个非常基本的操作. 作为一名图形开发人员, 熟悉它有助于扩展你的视野.</paragraph>
        <paragraph>基本思想是从 A 转换到 B。<literal>t</literal> 值是介于两者之间的状态。</paragraph>
        <paragraph>For example, if <literal>t</literal> is 0, then the state is A. If <literal>t</literal> is 1, then the state is B. Anything in-between is an <emphasis>interpolation</emphasis>.</paragraph>
        <paragraph>Between two real (floating-point) numbers, an interpolation can be described as:</paragraph>
        <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">interpolation = A * (1 - t) + B * t</literal_block>
        <paragraph>通常简化为:</paragraph>
        <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">interpolation = A + (B - A) * t</literal_block>
        <paragraph>The name of this type of interpolation, which transforms a value into another at <emphasis>constant speed</emphasis> is <emphasis>"linear"</emphasis>. So, when you hear about <emphasis>Linear Interpolation</emphasis>, you know they are referring to this formula.</paragraph>
        <paragraph>还有其他类型的插值, 这里将不做讨论. 建议之后阅读 <reference internal="True" refuri="beziers_and_curves#doc-beziers-and-curves"><inline classes="std std-ref">Bezier</inline></reference> 页面.</paragraph>
        <section ids="vector-interpolation" names="vector\ interpolation 向量插值">
            <title>向量插值</title>
            <paragraph>Vector types (<reference internal="True" refuri="../../classes/class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> and <reference internal="True" refuri="../../classes/class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference>) can also be interpolated, they come with handy functions to do it
                <reference internal="True" refuri="../../classes/class_vector2#class-vector2-method-lerp"><inline classes="std std-ref">Vector2.lerp()</inline></reference> and <reference internal="True" refuri="../../classes/class_vector3#class-vector3-method-lerp"><inline classes="std std-ref">Vector3.lerp()</inline></reference>.</paragraph>
            <paragraph>对于三次插值，还有 <reference internal="True" refuri="../../classes/class_vector2#class-vector2-method-cubic-interpolate"><inline classes="std std-ref">Vector2.cubic_interpolate()</inline></reference> 和 <reference internal="True" refuri="../../classes/class_vector3#class-vector3-method-cubic-interpolate"><inline classes="std std-ref">Vector3.cubic_interpolate()</inline></reference> ，它们执行 <reference internal="True" refuri="beziers_and_curves#doc-beziers-and-curves"><inline classes="std std-ref">Bezier</inline></reference> 式插值。</paragraph>
            <paragraph>Here is example pseudo-code for going from point A to B using interpolation:</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var t = 0.0

func _physics_process(delta):
    t += delta * 0.4

    $Sprite2D.position = $A.position.lerp($B.position, t)</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">private float _t = 0.0f;

public override void _PhysicsProcess(double delta)
{
    _t += (float)delta * 0.4f;

    Marker2D a = GetNode&lt;Marker2D&gt;("A");
    Marker2D b = GetNode&lt;Marker2D&gt;("B");
    Sprite2D sprite = GetNode&lt;Sprite2D&gt;("Sprite2D");

    sprite.Position = a.Position.Lerp(b.Position, _t);
}</literal_block>
                </div>
            </container>
            <paragraph>它将产生以下运动:</paragraph>
            <image candidates="{'*': 'tutorials/math/img/interpolation_vector.gif'}" uri="tutorials/math/img/interpolation_vector.gif"></image>
        </section>
        <section ids="transform-interpolation" names="transform\ interpolation 变换插值">
            <title>变换插值</title>
            <paragraph>It is also possible to interpolate whole transforms (make sure they have either uniform scale or, at least, the same non-uniform scale).
                For this, the function <reference internal="True" refuri="../../classes/class_transform3d#class-transform3d-method-interpolate-with"><inline classes="std std-ref">Transform3D.interpolate_with()</inline></reference> can be used.</paragraph>
            <paragraph>下面是将猴子从位置1转换为位置2的例子:</paragraph>
            <image candidates="{'*': 'tutorials/math/img/interpolation_positions.png'}" uri="tutorials/math/img/interpolation_positions.png"></image>
            <paragraph>使用以下伪代码:</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-1-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-1-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-1-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var t = 0.0

func _physics_process(delta):
    t += delta

    $Monkey.transform = $Position1.transform.interpolate_with($Position2.transform, t)</literal_block>
                </div>
                <div aria-labelledby="tab-1-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-1-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">private float _t = 0.0f;

public override void _PhysicsProcess(double delta)
{
    _t += (float)delta;

    Marker3D p1 = GetNode&lt;Marker3D&gt;("Position1");
    Marker3D p2 = GetNode&lt;Marker3D&gt;("Position2");
    CSGMesh3D monkey = GetNode&lt;CSGMesh3D&gt;("Monkey");

    monkey.Transform = p1.Transform.InterpolateWith(p2.Transform, _t);
}</literal_block>
                </div>
            </container>
            <paragraph>又会产生下面的动作:</paragraph>
            <image candidates="{'*': 'tutorials/math/img/interpolation_monkey.gif'}" uri="tutorials/math/img/interpolation_monkey.gif"></image>
        </section>
        <section ids="smoothing-motion" names="smoothing\ motion 平滑运动">
            <title>平滑运动</title>
            <paragraph>插值可用于平滑运动, 旋转等. 下面是使用平滑运动跟随鼠标的圆圈的例子:</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-2-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-2-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-2-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">const FOLLOW_SPEED = 4.0

func _physics_process(delta):
    var mouse_pos = get_local_mouse_position()

    $Sprite2D.position = $Sprite2D.position.lerp(mouse_pos, delta * FOLLOW_SPEED)</literal_block>
                </div>
                <div aria-labelledby="tab-2-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-2-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">private const float FollowSpeed = 4.0f;

public override void _PhysicsProcess(double delta)
{
    Vector2 mousePos = GetLocalMousePosition();

    Sprite2D sprite = GetNode&lt;Sprite2D&gt;("Sprite2D");

    sprite.Position = sprite.Position.Lerp(mousePos, (float)delta * FollowSpeed);
}</literal_block>
                </div>
            </container>
            <paragraph>如下:</paragraph>
            <image candidates="{'*': 'tutorials/math/img/interpolation_follow.gif'}" uri="tutorials/math/img/interpolation_follow.gif"></image>
            <paragraph>这对平滑相机运动很有用, 队友在跟随你(确保他们保持在一定范围内), 以及许多其他常见的游戏模式.</paragraph>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
