<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/tutorials/math/random_number_generation.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-random-number-generation"></target>
    <section ids="random-number-generation doc-random-number-generation" names="random\ number\ generation 随机数生成 doc_random_number_generation">
        <title>随机数生成</title>
        <paragraph>许多游戏依靠随机性来实现核心游戏机制. 本页将指导你了解常见的随机性类型, 以及如何在Godot中实现它们.</paragraph>
        <paragraph>After giving you a brief overview of useful functions that generate random
            numbers, you will learn how to get random elements from arrays, dictionaries,
            and how to use a noise generator in GDScript. Lastly, we'll take a look at
            cryptographically secure random number generation and how it differs from
            typical random number generation.</paragraph>
        <note>
            <paragraph>计算机不能产生“真正的”随机数。相反，它们依赖<reference name="伪随机数生成器" refuri="https://en.wikipedia.org/wiki/Pseudorandom_number_generator">伪随机数生成器</reference>（PRNG）。</paragraph>
            <paragraph>Godot internally uses the <reference name="PCG Family" refuri="https://www.pcg-random.org/">PCG Family</reference>
                of pseudorandom number generators.</paragraph>
        </note>
        <section ids="global-scope-versus-randomnumbergenerator-class" names="global\ scope\ versus\ randomnumbergenerator\ class 全局作用域\ vs\ randomnumbergenerator\ 类">
            <title>全局作用域 vs RandomNumberGenerator 类</title>
            <paragraph>Godot 提供了两种生成随机数的方式：通过<emphasis>全局作用域</emphasis>方法或使用 <reference internal="True" refuri="../../classes/class_randomnumbergenerator#class-randomnumbergenerator"><inline classes="std std-ref">RandomNumberGenerator</inline></reference> 类。</paragraph>
            <paragraph>全局作用域方法更容易设置，但不能提供太多控制。</paragraph>
            <paragraph>RandomNumberGenerator requires more code to use, but allows creating
                multiple instances, each with their own seed and state.</paragraph>
            <paragraph>本教程使用全局作用域方法, 只存在于RandomNumberGenerator类中的方法除外.</paragraph>
        </section>
        <section ids="the-randomize-method" names="the\ randomize()\ method randomize()\ 方法">
            <title>randomize() 方法</title>
            <note>
                <paragraph>Since Godot 4.0, the random seed is automatically set to a random value when
                    the project starts. This means you don't need to call <literal>randomize()</literal> in
                    <literal>_ready()</literal> anymore to ensure that results are random across project runs.
                    However, you can still use <literal>randomize()</literal> if you want to use a specific
                    seed number, or generate it using a different method.</paragraph>
            </note>
            <paragraph>In global scope, you can find a <reference internal="True" refuri="../../classes/class_@globalscope#class-globalscope-method-randomize"><inline classes="std std-ref">randomize()</inline></reference> method. <strong>This method should be called only
                    once when your project starts to initialize the random seed.</strong> Calling it
                multiple times is unnecessary and may impact performance negatively.</paragraph>
            <paragraph>把它放在你的主场景脚本的 <literal>_ready()</literal> 方法中是个不错的选择：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func _ready():
    randomize()</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">public override void _Ready()
{
    GD.Randomize();
}</literal_block>
                </div>
            </container>
            <paragraph>You can also set a fixed random seed instead using <reference internal="True" refuri="../../classes/class_@globalscope#class-globalscope-method-seed"><inline classes="std std-ref">seed()</inline></reference>. Doing so will give you <emphasis>deterministic</emphasis> results
                across runs:</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-1-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-1-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-1-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func _ready():
    seed(12345)
    # To use a string as a seed, you can hash it to a number.
    seed("Hello world".hash())</literal_block>
                </div>
                <div aria-labelledby="tab-1-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-1-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">public override void _Ready()
{
    GD.Seed(12345);
    GD.Seed("Hello world".Hash());
}</literal_block>
                </div>
            </container>
            <paragraph>当使用RandomNumberGenerator类时，应该在实例上调用 <literal>randomize()</literal> ，因为它有自己的种子:</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-2-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-2-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-2-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var random = RandomNumberGenerator.new()
random.randomize()</literal_block>
                </div>
                <div aria-labelledby="tab-2-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-2-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var random = new RandomNumberGenerator();
random.Randomize();</literal_block>
                </div>
            </container>
        </section>
        <section ids="getting-a-random-number" names="getting\ a\ random\ number 获得一个随机数">
            <title>获得一个随机数</title>
            <paragraph>让我们来看看Godot中最常用的一些生成随机数的函数和方法.</paragraph>
            <paragraph>The function <reference internal="True" refuri="../../classes/class_@globalscope#class-globalscope-method-randi"><inline classes="std std-ref">randi()</inline></reference> returns a random
                number between 0 and 2^32-1. Since the maximum value is huge, you most likely
                want to use the modulo operator (<literal>%</literal>) to bound the result between 0 and the
                denominator:</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-3-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-3-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-3-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-3-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-3-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-3-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve"># Prints a random integer between 0 and 49.
print(randi() % 50)

# Prints a random integer between 10 and 60.
print(randi() % 51 + 10)</literal_block>
                </div>
                <div aria-labelledby="tab-3-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-3-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">// Prints a random integer between 0 and 49.
GD.Print(GD.Randi() % 50);

// Prints a random integer between 10 and 60.
GD.Print(GD.Randi() % 51 + 10);</literal_block>
                </div>
            </container>
            <paragraph><reference internal="True" refuri="../../classes/class_@globalscope#class-globalscope-method-randf"><inline classes="std std-ref">randf()</inline></reference> returns a random floating-point
                number between 0 and 1. This is useful to implement a
                <reference internal="True" refid="doc-random-number-generation-weighted-random-probability"><inline classes="std std-ref">加权随机概率</inline></reference> system, among
                other things.</paragraph>
            <paragraph><reference internal="True" refuri="../../classes/class_randomnumbergenerator#class-randomnumbergenerator-method-randfn"><inline classes="std std-ref">randfn()</inline></reference> 返回遵循 <reference name="正态分布" refuri="https://en.wikipedia.org/wiki/Normal_distribution">正态分布</reference> 的随机浮点数。这意味着返回值更有可能在平均值附近（默认为 0.0），随偏差变化（默认为 1.0）:</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-4-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-4-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-4-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-4-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-4-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-4-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve"># Prints a random floating-point number from a normal distribution with a mean 0.0 and deviation 1.0.
var random = RandomNumberGenerator.new()
random.randomize()
print(random.randfn())</literal_block>
                </div>
                <div aria-labelledby="tab-4-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-4-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">// Prints a normally distributed floating-point number between 0.0 and 1.0.
var random = new RandomNumberGenerator();
random.Randomize();
GD.Print(random.Randfn());</literal_block>
                </div>
            </container>
            <paragraph><reference internal="True" refuri="../../classes/class_@globalscope#class-globalscope-method-randf-range"><inline classes="std std-ref">randf_range()</inline></reference> takes two arguments
                <literal>from</literal> and <literal>to</literal>, and returns a random floating-point number between <literal>from</literal>
                and <literal>to</literal>:</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-5-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-5-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                </div>
                <div aria-labelledby="tab-5-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-5-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve"># Prints a random floating-point number between -4 and 6.5.
print(randf_range(-4, 6.5))</literal_block>
                </div>
            </container>
            <paragraph><reference internal="True" refuri="../../classes/class_randomnumbergenerator#class-randomnumbergenerator-method-randi-range"><inline classes="std std-ref">RandomNumberGenerator.randi_range()</inline></reference> 接受两个参数 <literal>from</literal> 和 <literal>to</literal> ，并返回一个介于 <literal>from</literal> 和 <literal>to</literal> 之间的随机整数：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-6-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-6-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-6-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-6-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-6-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-6-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve"># Prints a random integer between -10 and 10.
var random = RandomNumberGenerator.new()
random.randomize()
print(random.randi_range(-10, 10))</literal_block>
                </div>
                <div aria-labelledby="tab-6-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-6-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">// Prints a random integer number between -10 and 10.
random.Randomize();
GD.Print(random.RandiRange(-10, 10));</literal_block>
                </div>
            </container>
        </section>
        <section ids="get-a-random-array-element" names="get\ a\ random\ array\ element 获取一个随机数组元素">
            <title>获取一个随机数组元素</title>
            <paragraph>我们可以使用随机整数生成来从数组中获得一个随机元素:</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-7-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-7-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-7-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-7-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-7-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-7-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var _fruits = ["apple", "orange", "pear", "banana"]

func _ready():
    randomize()

    for i in range(100):
        # Pick 100 fruits randomly.
        print(get_fruit())


func get_fruit():
    var random_fruit = _fruits[randi() % _fruits.size()]
    # Returns "apple", "orange", "pear", or "banana" every time the code runs.
    # We may get the same fruit multiple times in a row.
    return random_fruit</literal_block>
                </div>
                <div aria-labelledby="tab-7-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-7-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">private string[] _fruits = { "apple", "orange", "pear", "banana" };

public override void _Ready()
{
    GD.Randomize();

    for (int i = 0; i &lt; 100; i++)
    {
        // Pick 100 fruits randomly.
        GD.Print(GetFruit());
    }
}

public string GetFruit()
{
    string randomFruit = _fruits[GD.Randi() % _fruits.Length];
    // Returns "apple", "orange", "pear", or "banana" every time the code runs.
    // We may get the same fruit multiple times in a row.
    return randomFruit;
}</literal_block>
                </div>
            </container>
            <paragraph>为了防止连续多次采摘相同的水果，我们可以给这个方法添加更多的逻辑:</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-8-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-8-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-8-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-8-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-8-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-8-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var _fruits = ["apple", "orange", "pear", "banana"]
var _last_fruit = ""


func _ready():
    randomize()

    # Pick 100 fruits randomly.
    for i in range(100):
        print(get_fruit())


func get_fruit():
    var random_fruit = _fruits[randi() % _fruits.size()]
    while random_fruit == _last_fruit:
        # The last fruit was picked, try again until we get a different fruit.
        random_fruit = _fruits[randi() % _fruits.size()]

    # Note: if the random element to pick is passed by reference,
    # such as an array or dictionary,
    # use `_last_fruit = random_fruit.duplicate()` instead.
    _last_fruit = random_fruit

    # Returns "apple", "orange", "pear", or "banana" every time the code runs.
    # The function will never return the same fruit more than once in a row.
    return random_fruit</literal_block>
                </div>
                <div aria-labelledby="tab-8-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-8-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">private string[] _fruits = { "apple", "orange", "pear", "banana" };
private string _lastFruit = "";

public override void _Ready()
{
    GD.Randomize();

    for (int i = 0; i &lt; 100; i++)
    {
        // Pick 100 fruits randomly.
        GD.Print(GetFruit());
    }
}

public string GetFruit()
{
    string randomFruit = _fruits[GD.Randi() % _fruits.Length];
    while (randomFruit == _lastFruit)
    {
        // The last fruit was picked, try again until we get a different fruit.
        randomFruit = _fruits[GD.Randi() % _fruits.Length];
    }

    _lastFruit = randomFruit;

    // Returns "apple", "orange", "pear", or "banana" every time the code runs.
    // The function will never return the same fruit more than once in a row.
    return randomFruit;
}</literal_block>
                </div>
            </container>
            <paragraph>这种方法可以让随机数生成的感觉不那么重复. 不过, 它仍然不能防止结果在有限的一组值之间 "乒乓反复". 为了防止这种情况, 请使用 <reference internal="True" refid="doc-random-number-generation-shuffle-bags"><inline classes="std std-ref">shuffle bag</inline></reference> 模式来代替.</paragraph>
        </section>
        <section ids="get-a-random-dictionary-value" names="get\ a\ random\ dictionary\ value 获取一个随机字典值">
            <title>获取一个随机字典值</title>
            <paragraph>我们也可以将数组的类似逻辑应用于字典:</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-9-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-9-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                </div>
                <div aria-labelledby="tab-9-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-9-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var metals = {
    "copper": {"quantity": 50, "price": 50},
    "silver": {"quantity": 20, "price": 150},
    "gold": {"quantity": 3, "price": 500},
}


func _ready():
    randomize()

    for i in range(20):
        print(get_metal())


func get_metal():
    var random_metal = metals.values()[randi() % metals.size()]
    # Returns a random metal value dictionary every time the code runs.
    # The same metal may be selected multiple times in succession.
    return random_metal</literal_block>
                </div>
            </container>
            <target refid="doc-random-number-generation-weighted-random-probability"></target>
        </section>
        <section ids="weighted-random-probability doc-random-number-generation-weighted-random-probability" names="weighted\ random\ probability 加权随机概率 doc_random_number_generation_weighted_random_probability">
            <title>加权随机概率</title>
            <paragraph>The <reference internal="True" refuri="../../classes/class_@globalscope#class-globalscope-method-randf"><inline classes="std std-ref">randf()</inline></reference> method returns a
                floating-point number between 0.0 and 1.0. We can use this to create a
                "weighted" probability where different outcomes have different likelihoods:</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-10-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-10-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-10-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-10-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-10-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-10-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func _ready():
    randomize()

    for i in range(100):
        print(get_item_rarity())


func get_item_rarity():
    var random_float = randf()

    if random_float &lt; 0.8:
        # 80% chance of being returned.
        return "Common"
    elif random_float &lt; 0.95:
        # 15% chance of being returned.
        return "Uncommon"
    else:
        # 5% chance of being returned.
        return "Rare"</literal_block>
                </div>
                <div aria-labelledby="tab-10-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-10-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">public override void _Ready()
{
    GD.Randomize();

    for (int i = 0; i &lt; 100; i++)
    {
        GD.Print(GetItemRarity());
    }
}

public string GetItemRarity()
{
    float randomFloat = GD.Randf();

    if (randomFloat &lt; 0.8f)
    {
        // 80% chance of being returned.
        return "Common";
    }
    else if (randomFloat &lt; 0.95f)
    {
        // 15% chance of being returned
        return "Uncommon";
    }
    else
    {
        // 5% chance of being returned.
        return "Rare";
    }
}</literal_block>
                </div>
            </container>
            <target refid="doc-random-number-generation-shuffle-bags"></target>
        </section>
        <section ids="better-randomness-using-shuffle-bags doc-random-number-generation-shuffle-bags" names='"better"\ randomness\ using\ shuffle\ bags 使用\ shuffle\ bag\ 达到“更好”随机性 doc_random_number_generation_shuffle_bags'>
            <title>使用 shuffle bag 达到“更好”随机性</title>
            <paragraph>以上面同样的例子为例, 我们希望随机挑选水果. 然而, 每次选择水果时依靠随机数生成会导致分布不那么 <emphasis>均匀</emphasis> . 如果玩家足够幸运(或不幸), 他们可能会连续三次或更多次得到相同的水果.</paragraph>
            <paragraph>你可以使用 <emphasis>shuffle bag</emphasis> 模式来实现。它的工作原理是在选择数组后从数组中删除一个元素。多次选择之后，数组会被清空。当这种情况发生时，就将数组重新初始化为默认值：</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var _fruits = ["apple", "orange", "pear", "banana"]
# A copy of the fruits array so we can restore the original value into `fruits`.
var _fruits_full = []


func _ready():
    randomize()
    _fruits_full = _fruits.duplicate()
    _fruits.shuffle()

    for i in 100:
        print(get_fruit())


func get_fruit():
    if _fruits.is_empty():
        # Fill the fruits array again and shuffle it.
        _fruits = _fruits_full.duplicate()
        _fruits.shuffle()

    # Get a random fruit, since we shuffled the array,
    # and remove it from the `_fruits` array.
    var random_fruit = _fruits.pop_front()
    # Prints "apple", "orange", "pear", or "banana" every time the code runs.
    return random_fruit</literal_block>
            <paragraph>在运行上面的代码时, 仍有可能连续两次得到同一个水果. 我们摘下一个水果时, 它将不再是一个可能的返回值, 但除非数组现在是空的. 当数组为空时, 此时我们将其重置回默认值, 这样就导致了能再次获得相同的水果, 但只有这一次.</paragraph>
        </section>
        <section ids="random-noise" names="random\ noise 随机噪音">
            <title>随机噪音</title>
            <paragraph>当你需要一个 <emphasis>缓慢</emphasis> 根据输入而变化的值时, 上面显示的随机数生成方式就显示出了它们的局限性. 这里的输入可以是位置, 时间或其他任何东西.</paragraph>
            <paragraph>To achieve this, you can use random <emphasis>noise</emphasis> functions. Noise functions are
                especially popular in procedural generation to generate realistic-looking
                terrain. Godot provides <reference internal="True" refuri="../../classes/class_fastnoiselite#class-fastnoiselite"><inline classes="std std-ref">FastNoiseLite</inline></reference> for this, which supports
                1D, 2D and 3D noise. Here's an example with 1D noise:</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-11-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-11-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-11-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-11-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-11-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-11-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var _noise = FastNoiseLite.new()

func _ready():
    randomize()
    # Configure the FastNoiseLite instance.
    _noise.noise_type = FastNoiseLite.NoiseType.TYPE_SIMPLEX_SMOOTH
    _noise.seed = randi()
    _noise.fractal_octaves = 4
    _noise.frequency = 1.0 / 20.0

    for i in 100:
        # Prints a slowly-changing series of floating-point numbers
        # between -1.0 and 1.0.
        print(_noise.get_noise_1d(i))</literal_block>
                </div>
                <div aria-labelledby="tab-11-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-11-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">private FastNoiseLite _noise = new FastNoiseLite();

public override void _Ready()
{
    GD.Randomize();
    // Configure the FastNoiseLite instance.
    _noise.NoiseType = NoiseTypeEnum.SimplexSmooth;
    _noise.Seed = (int)GD.Randi();
    _noise.FractalOctaves = 4;
    _noise.Frequency = 1.0f / 20.0f;

    for (int i = 0; i &lt; 100; i++)
    {
        GD.Print(_noise.GetNoise1D(i));
    }
}</literal_block>
                </div>
            </container>
        </section>
        <section ids="cryptographically-secure-pseudorandom-number-generation" names="cryptographically\ secure\ pseudorandom\ number\ generation 密码安全的伪随机数生成器">
            <title>密码安全的伪随机数生成器</title>
            <paragraph>目前为止提到的方法都<strong>无法</strong>实现<emphasis>密码安全</emphasis>的伪随机数生成（CSPRNG）。这对于游戏而言没有问题，但是对于涉及加密、认证、签名的场景就显得捉襟见肘。</paragraph>
            <paragraph>Godot 为此提供了 <reference internal="True" refuri="../../classes/class_crypto#class-crypto"><inline classes="std std-ref">Crypto</inline></reference> 类。这个类可以执行非对称密钥加密、解密、签名和验证，也可以生成密码安全的随机字节块、RSA 密钥、HMAC 摘要、自签名的 <reference internal="True" refuri="../../classes/class_x509certificate#class-x509certificate"><inline classes="std std-ref">X509Certificate</inline></reference>。</paragraph>
            <paragraph>The downside of <abbreviation explanation="Cryptographically secure pseudorandom number generation">CSPRNG</abbreviation>
                is that it's much slower than standard pseudorandom number generation. Its API
                is also less convenient to use. As a result,
                <abbreviation explanation="Cryptographically secure pseudorandom number generation">CSPRNG</abbreviation>
                should be avoided for gameplay elements.</paragraph>
            <paragraph>Example of using the Crypto class to generate 2 random integers between <literal>0</literal>
                and <literal>2^32 - 1</literal> (inclusive):</paragraph>
            <literal_block force="False" language="gdscript" linenos="False" xml:space="preserve">var crypto := Crypto.new()
# Request as many bytes as you need, but try to minimize the amount
# of separate requests to improve performance.
# Each 32-bit integer requires 4 bytes, so we request 8 bytes.
var byte_array := crypto.generate_random_bytes(8)

# Use the ``decode_u32()`` method from PackedByteArray to decode a 32-bit unsigned integer
# from the beginning of `byte_array`. This method doesn't modify `byte_array`.
var random_int_1 := byte_array.decode_u32(0)
# Do the same as above, but with an offset of 4 bytes since we've already decoded
# the first 4 bytes previously.
var random_int_2 := byte_array.decode_u32(4)

prints("Random integers:", random_int_1, random_int_2)</literal_block>
            <seealso>
                <paragraph>See <reference internal="True" refuri="../../classes/class_packedbytearray#class-packedbytearray"><inline classes="std std-ref">PackedByteArray</inline></reference>'s documentation for other methods you can
                    use to decode the generated bytes into various types of data, such as
                    integers or floats.</paragraph>
            </seealso>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
