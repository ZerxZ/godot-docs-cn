<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/tutorials/math/vector_math.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-vector-math"></target>
    <section ids="vector-math doc-vector-math" names="vector\ math 向量数学 doc_vector_math">
        <title>向量数学</title>
        <section ids="introduction" names="introduction 前言">
            <title>前言</title>
            <paragraph>本教程是一个面向游戏开发的简短线性代数介绍。线性代数是研究向量及其用途的学科。向量在 2D 和 3D 开发中都有许多应用，Godot 对它们的应用也非常广泛。要成为一名优秀的游戏开发者，对向量数学的理解是必不可少的。</paragraph>
            <note>
                <paragraph>本教程<strong>不是</strong>线性代数的正式教科书。我们将只关注它如何应用于游戏开发。要更全面地了解数学，请参见 <reference refuri="https://www.khanacademy.org/math/linear-algebra">https://www.khanacademy.org/math/linear-algebra</reference></paragraph>
            </note>
        </section>
        <section ids="coordinate-systems-2d" names="coordinate\ systems\ (2d) 坐标系（2d）">
            <title>坐标系（2D）</title>
            <paragraph>在 2D 空间中，使用水平轴（<literal>x</literal>）和垂直轴（<literal>y</literal>）定义坐标。2D 空间中的特定位置会被写成一对值，如 <literal>(4, 3)</literal>。</paragraph>
            <image candidates="{'*': 'tutorials/math/img/vector_axis1.png'}" uri="tutorials/math/img/vector_axis1.png"></image>
            <note>
                <paragraph>如果你是计算机图形学的新手，可能会觉得很奇怪，<literal>y</literal> 轴的正方向<strong>朝下</strong>而不是向上（你在数学课上学到的就像那样）。然而，这在大多数计算机图形应用程序中是常见的。</paragraph>
            </note>
            <paragraph>2D 平面上的任何位置都可以用一对数字来表示。然而，我们也可以将位置 <literal>(4, 3)</literal> 看作是从 <literal>(0, 0)</literal> 点或<strong>原点</strong>出发的<strong>偏移</strong>。画一个箭头从原点指向点：</paragraph>
            <image candidates="{'*': 'tutorials/math/img/vector_xy1.png'}" uri="tutorials/math/img/vector_xy1.png"></image>
            <paragraph>这便是一个<strong>向量</strong>。一个向量的背后蕴藏着大量信息：除了告诉我们点在 <literal>(4, 3)</literal> 之外，还可以形象化地用向量方向（或向量角度） <literal>θ</literal> 和向量大小（线段长度）<literal>m</literal>表示它。在上述例子中，箭头便是一个<strong>位置向量</strong>——它表示空间中相对于原点的位置。</paragraph>
            <paragraph>关于向量有一点非常重要：向量仅表示<strong>相对</strong>方向和大小，没有向量所在位置的概念。下图中的两个向量是相同的：</paragraph>
            <image candidates="{'*': 'tutorials/math/img/vector_xy2.png'}" uri="tutorials/math/img/vector_xy2.png"></image>
            <paragraph>这两个向量表示的都是从某起点开始向右 4 个单位、向下 3 个单位处的一个点。画在平面中的哪个位置是无所谓的，向量表示的始终都是相对方向和大小。</paragraph>
        </section>
        <section ids="vector-operations" names="vector\ operations 向量运算">
            <title>向量运算</title>
            <paragraph>表示向量的方法有两种（XY 坐标，以及角度和大小），不过方便起见，程序员通常使用的是坐标表示法。举个例子，Godot 中以屏幕左上角为原点，因此要将一个名为 <literal>Node2D</literal> 的 2D 节点放在向右 400 像素、向下 300 像素的位置，可以使用如下代码：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">$Node2D.position = Vector2(400, 300)</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var node2D = GetNode&lt;Node2D&gt;("Node2D");
node2D.Position = new Vector2(400, 300);</literal_block>
                </div>
            </container>
            <paragraph>Godot supports both <reference internal="True" refuri="../../classes/class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> and <reference internal="True" refuri="../../classes/class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> for 2D and 3D usage, respectively. The same mathematical rules
                discussed in this article apply to both types, and wherever we link to
                <literal>Vector2</literal> methods in the class reference, you can also check out their
                <literal>Vector3</literal> counterparts.</paragraph>
            <section ids="member-access" names="member\ access 成员访问">
                <title>成员访问</title>
                <paragraph>向量的各个分量可以直接通过名称访问。</paragraph>
                <container classes="sphinx-tabs" type="tab-element">
                    <div aria-label="Tabbed content" role="tablist">
                        <button aria-controls="panel-1-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                        <button aria-controls="panel-1-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                    </div>
                    <div aria-labelledby="tab-1-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                        <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve"># Create a vector with coordinates (2, 5).
var a = Vector2(2, 5)
# Create a vector and assign x and y manually.
var b = Vector2()
b.x = 3
b.y = 1</literal_block>
                    </div>
                    <div aria-labelledby="tab-1-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-1-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                        <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">// Create a vector with coordinates (2, 5).
var a = new Vector2(2, 5);
// Create a vector and assign x and y manually.
var b = new Vector2();
b.X = 3;
b.Y = 1;</literal_block>
                    </div>
                </container>
            </section>
            <section ids="adding-vectors" names="adding\ vectors 向量加法">
                <title>向量加法</title>
                <paragraph>两个向量相加减时，会将对应分量进行加减：</paragraph>
                <container classes="sphinx-tabs" type="tab-element">
                    <div aria-label="Tabbed content" role="tablist">
                        <button aria-controls="panel-2-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                        <button aria-controls="panel-2-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                    </div>
                    <div aria-labelledby="tab-2-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                        <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var c = a + b  # (2, 5) + (3, 1) = (5, 6)</literal_block>
                    </div>
                    <div aria-labelledby="tab-2-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-2-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                        <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var c = a + b;  // (2, 5) + (3, 1) = (5, 6)</literal_block>
                    </div>
                </container>
                <paragraph>我们也可以通过在第一个向量的末尾加上第二个向量来直观地了解这一点：</paragraph>
                <image candidates="{'*': 'tutorials/math/img/vector_add1.png'}" uri="tutorials/math/img/vector_add1.png"></image>
                <paragraph>注意，做 <literal>a + b</literal> 的加法和 <literal>b + a</literal> 得到的结果是一样的。</paragraph>
            </section>
            <section ids="scalar-multiplication" names="scalar\ multiplication 标量乘法">
                <title>标量乘法</title>
                <note>
                    <paragraph>向量可以同时表示方向和幅度。而仅表示幅度的值被称作<strong>标量</strong>(Scalar) 。标量在 Godot 中使用 <reference internal="True" refuri="../../classes/class_float#class-float"><inline classes="std std-ref">float</inline></reference> 类。</paragraph>
                </note>
                <paragraph>向量可以乘以<strong>标量</strong>：</paragraph>
                <container classes="sphinx-tabs" type="tab-element">
                    <div aria-label="Tabbed content" role="tablist">
                        <button aria-controls="panel-3-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-3-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                        <button aria-controls="panel-3-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-3-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                    </div>
                    <div aria-labelledby="tab-3-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-3-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                        <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var c = a * 2  # (2, 5) * 2 = (4, 10)
var d = b / 3  # (3, 6) / 3 = (1, 2)
var e = d * -2 # (1, 2) * -2 = (-2, -4)</literal_block>
                    </div>
                    <div aria-labelledby="tab-3-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-3-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                        <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var c = a * 2;  // (2, 5) * 2 = (4, 10)
var d = b / 3;  // (3, 6) / 3 = (1, 2)
var e = d * -2; // (1, 2) * -2 = (-2, -4)</literal_block>
                    </div>
                </container>
                <image candidates="{'*': 'tutorials/math/img/vector_mult1.png'}" uri="tutorials/math/img/vector_mult1.png"></image>
                <note>
                    <paragraph>向量与正标量相乘不会改变它的方向，只会改变它的幅值。与负标量相乘得到的是方向相反的向量。这就是向量的<strong>缩放</strong>。</paragraph>
                </note>
            </section>
        </section>
        <section ids="practical-applications" names="practical\ applications 实际应用">
            <title>实际应用</title>
            <paragraph>让我们看看向量加减的两种常见应用。</paragraph>
            <section ids="movement" names="movement 移动">
                <title>移动</title>
                <paragraph>向量可以表示具有大小和方向的<strong>任何</strong>量。典型的例子有：位置、速度、加速度、力。在这幅图像中，飞船第 1 步的位置向量为 <literal>(1,3)</literal>，速度向量为 <literal>(2,1)</literal>。速度向量表示飞船每一步移动的距离。通过将速度加到当前位置，我们可以求出第 2 步的位置。</paragraph>
                <image candidates="{'*': 'tutorials/math/img/vector_movement1.png'}" uri="tutorials/math/img/vector_movement1.png"></image>
                <tip>
                    <paragraph>速度测量的是单位时间内位置的<strong>变化</strong>。新的位置是通过在前一个位置上增加速度与所经过时间的积（这里假设为一个单位，即 1 秒）得到的。</paragraph>
                    <paragraph>常见的 2D 游戏中，速度的单位通常是像素每秒，你需要将其乘以 <reference internal="True" refuri="../../classes/class_node#class-node-private-method-process"><inline classes="std std-ref">_process()</inline></reference> 或 <reference internal="True" refuri="../../classes/class_node#class-node-private-method-physics-process"><inline classes="std std-ref">_physics_process()</inline></reference> 回调的 <literal>delta</literal> 参数（从上一帧开始经过的时间）。</paragraph>
                </tip>
            </section>
            <section dupnames="指向目标" ids="pointing-toward-a-target" names="pointing\ toward\ a\ target">
                <title>指向目标</title>
                <paragraph>在这个场景中，你有一辆坦克，坦克希望让炮塔指向机器人。把机器人的位置减去坦克的位置就得到了从坦克指向机器人的向量。</paragraph>
                <image candidates="{'*': 'tutorials/math/img/vector_subtract2.webp'}" uri="tutorials/math/img/vector_subtract2.webp"></image>
                <tip>
                    <paragraph>要找到从 <literal>A</literal> 指向 <literal>B</literal> 的向量，请使用 <literal>B - A</literal>。</paragraph>
                </tip>
            </section>
        </section>
        <section ids="unit-vectors" names="unit\ vectors 单位向量">
            <title>单位向量</title>
            <paragraph><strong>大小</strong>为 <literal>1</literal> 的向量称为<strong>单位向量</strong>，有时也被称为<strong>方向向量</strong>或<strong>法线</strong>。当你需要记录方向时就可以使用单位向量。</paragraph>
            <section ids="normalization" names="normalization 归一化">
                <title>归一化</title>
                <paragraph>对向量进行<strong>归一化</strong>就是将其长度缩减到 <literal>1</literal>，但是保持方向不变。其方法是将每个分量除以其幅度。因为这是很常见的运算，所以 Godot 提供了专门的 <reference internal="True" refuri="../../classes/class_vector2#class-vector2-method-normalized"><inline classes="std std-ref">normalized()</inline></reference> 方法：</paragraph>
                <container classes="sphinx-tabs" type="tab-element">
                    <div aria-label="Tabbed content" role="tablist">
                        <button aria-controls="panel-4-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-4-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                        <button aria-controls="panel-4-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-4-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                    </div>
                    <div aria-labelledby="tab-4-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-4-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                        <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">a = a.normalized()</literal_block>
                    </div>
                    <div aria-labelledby="tab-4-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-4-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                        <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">a = a.Normalized();</literal_block>
                    </div>
                </container>
                <warning>
                    <paragraph>因为归一化的过程中需要除以向量的长度，所以无法对长度为 <literal>0</literal> 的向量进行归一化。尝试进行这样的操作一般会出错。不过在 GDScript 中对长度为 0 的向量调用 <literal>normalized()</literal> 不会对向量的值进行更改，不会报错。</paragraph>
                </warning>
            </section>
            <section ids="reflection" names="reflection 反射">
                <title>反射</title>
                <paragraph>单位向量的一种常见用法是表示<strong>法线</strong>。法向量是垂直于表面的单位向量，定义了表面的方向。它们通常用于照明、碰撞和涉及表面的其他操作。</paragraph>
                <paragraph>举个例子，假设我们有一个移动的球，我们想让它从墙上或其他物体上弹回来：</paragraph>
                <image candidates="{'*': 'tutorials/math/img/vector_reflect1.png'}" uri="tutorials/math/img/vector_reflect1.png"></image>
                <paragraph>对于水平表面而言，其法线向量通常指向上方，即 <literal>(0, -1)</literal> 。当球与表面碰撞时，我们可以根据小球碰撞时的运动方向（碰撞时的剩余运动量）和表面法线的关系计算其反射向量。在Godot中， <reference internal="True" refuri="../../classes/class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> 类的 <literal>bounce()</literal> 方法可以快速处理这一系列过程，将该方法与 :ref:<problematic ids="id2" refid="id1">`</problematic>KinematicBody2D &lt;class_KinematicBody2D&gt;`相结合的示例代码如下：</paragraph>
                <container classes="sphinx-tabs" type="tab-element">
                    <div aria-label="Tabbed content" role="tablist">
                        <button aria-controls="panel-5-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-5-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                        <button aria-controls="panel-5-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-5-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                    </div>
                    <div aria-labelledby="tab-5-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-5-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                        <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var collision: KinematicCollision2D = move_and_collide(velocity * delta)
if collision:
    var reflect = collision.get_remainder().bounce(collision.get_normal())
    velocity = velocity.bounce(collision.get_normal())
    move_and_collide(reflect)</literal_block>
                    </div>
                    <div aria-labelledby="tab-5-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-5-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                        <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">KinematicCollision2D collision = MoveAndCollide(_velocity * (float)delta);
if (collision != null)
{
    var reflect = collision.GetRemainder().Bounce(collision.GetNormal());
    _velocity = _velocity.Bounce(collision.GetNormal());
    MoveAndCollide(reflect);
}</literal_block>
                    </div>
                </container>
            </section>
        </section>
        <section ids="dot-product" names="dot\ product 点积">
            <title>点积</title>
            <paragraph><strong>点积</strong>是向量数学中最重要的概念之一，但经常被误解。点积是对两个向量的操作，返回一个<strong>标量</strong>。与同时包含大小和方向的向量不同，标量值只有大小。</paragraph>
            <paragraph>点积公式有两种常见形式：</paragraph>
            <image candidates="{'*': 'tutorials/math/img/vector_dot1.png'}" uri="tutorials/math/img/vector_dot1.png"></image>
            <paragraph>以及</paragraph>
            <image candidates="{'*': 'tutorials/math/img/vector_dot2.png'}" uri="tutorials/math/img/vector_dot2.png"></image>
            <paragraph>数学符号 <emphasis>||A||</emphasis> 代表向量 <literal>A</literal> 的幅值，而 <emphasis>A</emphasis><subscript>x</subscript> 表示向量 <literal>A</literal> 的 <literal>x</literal> 分量。</paragraph>
            <paragraph>不过在大多数情况下用内置的 <reference internal="True" refuri="../../classes/class_vector2#class-vector2-method-dot"><inline classes="std std-ref">dot()</inline></reference> 方法更加方便。请注意，两个向量的顺序并不重要：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-6-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-6-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-6-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-6-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-6-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-6-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var c = a.dot(b)
var d = b.dot(a)  # These are equivalent.</literal_block>
                </div>
                <div aria-labelledby="tab-6-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-6-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">float c = a.Dot(b);
float d = b.Dot(a);  // These are equivalent.</literal_block>
                </div>
            </container>
            <paragraph>与单位向量一起使用时，点积是最有用的，这样第一个公式就可以简化到只有 <literal>cosθ</literal>。这意味着我们可以使用点积得到两个向量之间夹角的一些信息：</paragraph>
            <image candidates="{'*': 'tutorials/math/img/vector_dot3.png'}" uri="tutorials/math/img/vector_dot3.png"></image>
            <paragraph>使用单位向量时，结果总是会在 <literal>-1</literal>（180°）和 <literal>1</literal>（0°）之间。</paragraph>
            <section ids="facing" names="facing 朝向">
                <title>朝向</title>
                <paragraph>我们可以利用这个事实来检测一个物体是否朝向另一个物体。在下图中，玩家 <literal>P</literal> 正试图避开僵尸 <literal>A</literal> 和 <literal>B</literal> 。假设僵尸的视野是 <strong>180°</strong> ，它们能看到玩家吗？</paragraph>
                <image candidates="{'*': 'tutorials/math/img/vector_facing2.png'}" uri="tutorials/math/img/vector_facing2.png"></image>
                <paragraph>绿色箭头 <literal>fA</literal> 和 <literal>fB</literal> 是僵尸的<strong>单位向量</strong>，代表僵尸的朝向；蓝色半圆代表其视野。对于僵尸 <literal>A</literal>，我们用 <literal>P - A</literal> 找到指向玩家的方向向量 <literal>AP</literal> 并进行归一化处理。不过，Godot 有一个辅助方法可以快速完成以上流程，叫做 <literal>direction_to</literal>。如果这个向量和面对的向量之间的角度小于 90°，那么僵尸就可以看到玩家。</paragraph>
                <paragraph>示例代码如下：</paragraph>
                <container classes="sphinx-tabs" type="tab-element">
                    <div aria-label="Tabbed content" role="tablist">
                        <button aria-controls="panel-7-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-7-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                        <button aria-controls="panel-7-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-7-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                    </div>
                    <div aria-labelledby="tab-7-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-7-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                        <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var AP = A.direction_to(P)
if AP.dot(fA) &gt; 0:
    print("A sees P!")</literal_block>
                    </div>
                    <div aria-labelledby="tab-7-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-7-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                        <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var AP = A.DirectionTo(P);
if (AP.Dot(fA) &gt; 0)
{
    GD.Print("A sees P!");
}</literal_block>
                    </div>
                </container>
            </section>
        </section>
        <section ids="cross-product" names="cross\ product 叉积">
            <title>叉积</title>
            <paragraph>和点积一样，<strong>叉积</strong>也是对两个向量的运算。但是，叉乘积的结果是一个方向与两个向量垂直的向量。它的大小取决于相对角度，如果两个向量是平行的，那么叉积的结果将是一个空向量。</paragraph>
            <image candidates="{'*': 'tutorials/math/img/vector_cross1.png'}" uri="tutorials/math/img/vector_cross1.png"></image>
            <image candidates="{'*': 'tutorials/math/img/vector_cross2.png'}" uri="tutorials/math/img/vector_cross2.png"></image>
            <paragraph>叉积是这样计算的：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-8-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-8-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-8-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-8-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-8-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-8-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var c = Vector3()
c.x = (a.y * b.z) - (a.z * b.y)
c.y = (a.z * b.x) - (a.x * b.z)
c.z = (a.x * b.y) - (a.y * b.x)</literal_block>
                </div>
                <div aria-labelledby="tab-8-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-8-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var c = new Vector3();
c.X = (a.Y * b.Z) - (a.Z * b.Y);
c.Y = (a.Z * b.X) - (a.X * b.Z);
c.Z = (a.X * b.Y) - (a.Y * b.X);</literal_block>
                </div>
            </container>
            <paragraph>在Godot中，你可以使用内置方法 :ref:<problematic ids="id2" refid="id1">`</problematic>Vector3.cross() &lt;class_Vector3_method_cross&gt;`完成以上计算：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-9-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-9-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-9-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-9-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-9-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-9-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var c = a.cross(b)</literal_block>
                </div>
                <div aria-labelledby="tab-9-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-9-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var c = a.Cross(b);</literal_block>
                </div>
            </container>
            <paragraph>注意：叉积在 2D 平面中没有数学定义。<reference internal="True" refuri="../../classes/class_vector2#class-vector2-method-cross"><inline classes="std std-ref">Vector2.cross()</inline></reference> 是在 2D 向量计算中模拟 3D 叉积的常用方法。</paragraph>
            <note>
                <paragraph>在叉积中，顺序很重要。<literal>a.cross(b)</literal> 和 <literal>b.cross(a)</literal> 的结果不一样，会得到指向相反的向量。</paragraph>
            </note>
            <section ids="calculating-normals" names="calculating\ normals 法线计算">
                <title>法线计算</title>
                <paragraph>One common use of cross products is to find the surface normal of a plane or
                    surface in 3D space. If we have the triangle <literal>ABC</literal> we can use vector
                    subtraction to find two edges <literal>AB</literal> and <literal>AC</literal>. Using the cross product,
                    <literal>AB × AC</literal> produces a vector perpendicular to both: the surface normal.</paragraph>
                <paragraph>下面是一个计算三角形法线的函数：</paragraph>
                <container classes="sphinx-tabs" type="tab-element">
                    <div aria-label="Tabbed content" role="tablist">
                        <button aria-controls="panel-10-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-10-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                        <button aria-controls="panel-10-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-10-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                    </div>
                    <div aria-labelledby="tab-10-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-10-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                        <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func get_triangle_normal(a, b, c):
    # Find the surface normal given 3 vertices.
    var side1 = b - a
    var side2 = c - a
    var normal = side1.cross(side2)
    return normal</literal_block>
                    </div>
                    <div aria-labelledby="tab-10-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-10-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                        <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">Vector3 GetTriangleNormal(Vector3 a, Vector3 b, Vector3 c)
{
    // Find the surface normal given 3 vertices.
    var side1 = b - a;
    var side2 = c - a;
    var normal = side1.Cross(side2);
    return normal;
}</literal_block>
                    </div>
                </container>
            </section>
            <section dupnames="指向目标" ids="pointing-to-a-target" names="pointing\ to\ a\ target">
                <title>指向目标</title>
                <paragraph>在上面的点积部分，我们看到如何用它来查找两个向量之间的角度。然而在 3D 中，这些信息还不够。我们还需要知道在围绕什么轴旋转。我们可以通过计算当前面对的方向和目标方向的叉积来查找。由此得到的垂直向量就是旋转轴。</paragraph>
            </section>
        </section>
        <section ids="more-information" names="more\ information 更多信息">
            <title>更多信息</title>
            <paragraph>有关在 Godot 中使用向量数学的更多信息，请参阅以下文章：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="vectors_advanced#doc-vectors-advanced"><inline classes="std std-ref">高等向量数学</inline></reference></paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="matrices_and_transforms#doc-matrices-and-transforms"><inline classes="std std-ref">矩阵与变换</inline></reference></paragraph>
                </list_item>
            </bullet_list>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
