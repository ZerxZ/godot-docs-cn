<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/tutorials/shaders/shaders_style_guide.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-shaders-style-guide"></target>
    <section ids="shaders-style-guide doc-shaders-style-guide" names="shaders\ style\ guide 着色器风格指南 doc_shaders_style_guide">
        <title>着色器风格指南</title>
        <paragraph>本风格指南列出了编写优雅着色器的规范。其目的是鼓励编写干净、可读的代码，并促进各项目、讨论和教程的一致性。希望这也能支持自动格式化工具的发展。</paragraph>
        <paragraph>Since the Godot shader language is close to C-style languages and GLSL, this
            guide is inspired by Godot's own GLSL formatting. You can view examples of
            GLSL files in Godot's source code
            <reference name="here" refuri="https://github.com/godotengine/godot/blob/master/drivers/gles3/shaders/">here</reference>.</paragraph>
        <paragraph>风格指南并不是硬性的规则教条，有些情况下，你可能无法施行下面的一些规范。如果这种情况发生在你身上，最好自行进行选择，并询问其他开发人员的见解。</paragraph>
        <paragraph>一般来说，在项目和团队中保持代码风格的一致性，比一板一眼地遵循本指南更为重要。</paragraph>
        <note>
            <paragraph>Godot的内置着色器编辑器默认使用了很多这样的约定. 让它来帮助你.</paragraph>
        </note>
        <paragraph>下面是基于这些规范的完整着色器的例子：</paragraph>
        <literal_block force="False" highlight_args="{}" language="glsl" linenos="False" xml:space="preserve">shader_type canvas_item;
// Screen-space shader to adjust a 2D scene's brightness, contrast
// and saturation. Taken from
// https://github.com/godotengine/godot-demo-projects/blob/master/2d/screen_space_shaders/shaders/BCS.gdshader

uniform sampler2D screen_texture : hint_screen_texture, filter_linear_mipmap;
uniform float brightness = 0.8;
uniform float contrast = 1.5;
uniform float saturation = 1.8;

void fragment() {
    vec3 c = textureLod(screen_texture, SCREEN_UV, 0.0).rgb;

    c.rgb = mix(vec3(0.0), c.rgb, brightness);
    c.rgb = mix(vec3(0.5), c.rgb, contrast);
    c.rgb = mix(vec3(dot(vec3(1.0), c.rgb) * 0.33333), c.rgb, saturation);

    COLOR.rgb = c;
}</literal_block>
        <section ids="formatting" names="formatting 格式">
            <title>格式</title>
            <section ids="encoding-and-special-characters" names="encoding\ and\ special\ characters 编码与特殊字符">
                <title>编码与特殊字符</title>
                <bullet_list bullet="*">
                    <list_item>
                        <paragraph>使用换行符（<strong>LF</strong>）换行，而非 CRLF 或 CR。<emphasis>（编辑器默认）</emphasis></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>在每个文件的末尾使用一个换行符。<emphasis>（编辑器默认）</emphasis></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>使用不带<reference name="字节顺序标记" refuri="https://zh.wikipedia.org/zh-cn/%E4%BD%8D%E5%85%83%E7%B5%84%E9%A0%86%E5%BA%8F%E8%A8%98%E8%99%9F">字节顺序标记</reference><target ids="id1" names="字节顺序标记" refuri="https://zh.wikipedia.org/zh-cn/%E4%BD%8D%E5%85%83%E7%B5%84%E9%A0%86%E5%BA%8F%E8%A8%98%E8%99%9F"></target>的 <strong>UTF-8</strong> 编码。<emphasis>（编辑器默认）</emphasis></paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>使用<strong>制表符</strong>代替空格进行缩进。<emphasis>（编辑器默认）</emphasis></paragraph>
                    </list_item>
                </bullet_list>
            </section>
            <section ids="indentation" names="indentation 缩进">
                <title>缩进</title>
                <paragraph>每个缩进级别应比包含它的区块多一个制表符.</paragraph>
                <paragraph><strong>规范示例</strong> :</paragraph>
                <literal_block force="False" highlight_args="{}" language="glsl" linenos="False" xml:space="preserve">void fragment() {
    COLOR = vec3(1.0, 1.0, 1.0);
}</literal_block>
                <paragraph><strong>不规范示例</strong> :</paragraph>
                <literal_block force="False" highlight_args="{}" language="glsl" linenos="False" xml:space="preserve">void fragment() {
        COLOR = vec3(1.0, 1.0, 1.0);
}</literal_block>
                <paragraph>使用2个缩进级别来区分续行代码块与常规代码块。</paragraph>
                <paragraph><strong>规范示例</strong> :</paragraph>
                <literal_block force="False" highlight_args="{}" language="glsl" linenos="False" xml:space="preserve">vec2 st = vec2(
        atan(NORMAL.x, NORMAL.z),
        acos(NORMAL.y));</literal_block>
                <paragraph><strong>不规范示例</strong> :</paragraph>
                <literal_block force="False" highlight_args="{}" language="glsl" linenos="False" xml:space="preserve">vec2 st = vec2(
    atan(NORMAL.x, NORMAL.z),
    acos(NORMAL.y));</literal_block>
            </section>
            <section ids="line-breaks-and-blank-lines" names="line\ breaks\ and\ blank\ lines 换行符和空白行">
                <title>换行符和空白行</title>
                <paragraph>常规的缩进规则是遵循<reference name="“1TBS 样式”" refuri="https://en.wikipedia.org/wiki/Indentation_style#Variant:_1TBS_(OTBS)">“1TBS 样式”</reference><target ids="tbs" names="“1tbs\ 样式”" refuri="https://en.wikipedia.org/wiki/Indentation_style#Variant:_1TBS_(OTBS)"></target>，建议将与控制语句关联的大括号放在同一行上。始终对语句使用大括号，即使只占一行。这样更易于重构，并且能够避免在向 <literal>if</literal> 等类似语句中添加更多行时出错。</paragraph>
                <paragraph><strong>规范示例</strong> :</paragraph>
                <literal_block force="False" highlight_args="{}" language="glsl" linenos="False" xml:space="preserve">void fragment() {
    if (true) {
        // ...
    }
}</literal_block>
                <paragraph><strong>不规范示例</strong> :</paragraph>
                <literal_block force="False" highlight_args="{}" language="glsl" linenos="False" xml:space="preserve">void fragment()
{
    if (true)
        // ...
}</literal_block>
            </section>
            <section ids="blank-lines" names="blank\ lines 空白行">
                <title>空白行</title>
                <paragraph>用一个(而且只有一个)空行围绕着函数定义:</paragraph>
                <literal_block force="False" highlight_args="{}" language="glsl" linenos="False" xml:space="preserve">void do_something() {
    // ...
}

void fragment() {
    // ...
}</literal_block>
                <paragraph>在函数中使用一个(而且只有一个)空行来分隔逻辑部分.</paragraph>
            </section>
            <section ids="line-length" names="line\ length 行的长度">
                <title>行的长度</title>
                <paragraph>把每行代码控制在100个字符以内。</paragraph>
                <paragraph>如果可以的话, 尽量将行数保持在80个字符以下. 这有助于在小显示器上和在外部文本编辑器中并排打开的两个着色器上阅读代码. 例如, 在查看差异修改时.</paragraph>
            </section>
            <section ids="one-statement-per-line" names="one\ statement\ per\ line 一条语句一行">
                <title>一条语句一行</title>
                <paragraph>切勿在一行中合并多个语句.</paragraph>
                <paragraph><strong>规范示例</strong> :</paragraph>
                <literal_block force="False" highlight_args="{}" language="glsl" linenos="False" xml:space="preserve">void fragment() {
    ALBEDO = vec3(1.0);
    EMISSION = vec3(1.0);
}</literal_block>
                <paragraph><strong>不规范示例</strong> :</paragraph>
                <literal_block force="False" highlight_args="{}" language="glsl" linenos="False" xml:space="preserve">void fragment() {
    ALBEDO = vec3(1.0); EMISSION = vec3(1.0);
}</literal_block>
                <paragraph>该规则的唯一例外便是三元运算符：</paragraph>
                <literal_block force="False" highlight_args="{}" language="glsl" linenos="False" xml:space="preserve">void fragment() {
     bool should_be_white = true;
     ALBEDO = should_be_white ? vec3(1.0) : vec3(0.0);
 }</literal_block>
            </section>
            <section ids="comment-spacing" names="comment\ spacing 注释间距">
                <title>注释间距</title>
                <paragraph>普通注释开头应该留一个空格，但如果是为了停用代码而将其注释掉则不需要留。这样可以用来区分文本注释和停用的代码。</paragraph>
                <paragraph><strong>规范示例</strong> :</paragraph>
                <literal_block force="False" highlight_args="{}" language="glsl" linenos="False" xml:space="preserve">// This is a comment.
//return;</literal_block>
                <paragraph><strong>不规范示例</strong> :</paragraph>
                <literal_block force="False" highlight_args="{}" language="glsl" linenos="False" xml:space="preserve">//This is a comment.
// return;</literal_block>
                <paragraph>如果你的注释可以容纳在单行上, 就不要使用多行注释语法:</paragraph>
                <literal_block force="False" highlight_args="{}" language="glsl" linenos="False" xml:space="preserve">/* This is another comment. */</literal_block>
                <note>
                    <paragraph>在着色器编辑器中, 要使选定的代码成为注释或取消注释, 按 <literal classes="kbd">Ctrl + K</literal> . 该功能在所选行的开头添加或删除 <literal>//</literal> .</paragraph>
                </note>
            </section>
            <section ids="whitespace" names="whitespace 空格">
                <title>空格</title>
                <paragraph>在运算符周围和逗号后面总是使用一个空格. 另外, 避免在函数调用中使用多余的空格.</paragraph>
                <paragraph><strong>规范示例</strong> :</paragraph>
                <literal_block force="False" highlight_args="{}" language="glsl" linenos="False" xml:space="preserve">COLOR.r = 5.0;
COLOR.r = COLOR.g + 0.1;
COLOR.b = some_function(1.0, 2.0);</literal_block>
                <paragraph><strong>不规范示例</strong> :</paragraph>
                <literal_block force="False" highlight_args="{}" language="glsl" linenos="False" xml:space="preserve">COLOR.r=5.0;
COLOR.r = COLOR.g+0.1;
COLOR.b = some_function (1.0,2.0);</literal_block>
                <paragraph>不要用空格去垂直对齐表达式：</paragraph>
                <literal_block force="False" highlight_args="{}" language="glsl" linenos="False" xml:space="preserve">ALBEDO.r   = 1.0;
EMISSION.r = 1.0;</literal_block>
            </section>
            <section ids="floating-point-numbers" names="floating-point\ numbers 浮点数字">
                <title>浮点数字</title>
                <paragraph>在整数和小数部分请始终指定至少一个数字, 这样可以更容易区分浮点和整数, 以及区分大于1和小于1的数字. 这样可以更容易区分浮点数和整数, 以及区分大于1和小于1的数字.</paragraph>
                <paragraph><strong>规范示例</strong> :</paragraph>
                <literal_block force="False" highlight_args="{}" language="glsl" linenos="False" xml:space="preserve">void fragment() {
    ALBEDO.rgb = vec3(5.0, 0.1, 0.2);
}</literal_block>
                <paragraph><strong>不规范示例</strong> :</paragraph>
                <literal_block force="False" highlight_args="{}" language="glsl" linenos="False" xml:space="preserve">void fragment() {
    ALBEDO.rgb = vec3(5., .1, .2);
}</literal_block>
            </section>
        </section>
        <section ids="accessing-vector-members" names="accessing\ vector\ members 访问向量成员">
            <title>访问向量成员</title>
            <paragraph>如果向量包含颜色, 在访问向量成员时使用 <literal>r</literal> , <literal>g</literal> , <literal>b</literal> 和 <literal>a</literal> . 如果向量中不包含颜色, 则使用 <literal>x</literal> , <literal>y</literal> , <literal>z</literal> 和 <literal>w</literal> . 这可以让那些阅读你的代码的人更好地理解基础数据的含义.</paragraph>
            <paragraph><strong>规范示例</strong> :</paragraph>
            <literal_block force="False" highlight_args="{}" language="glsl" linenos="False" xml:space="preserve">COLOR.rgb = vec3(5.0, 0.1, 0.2);</literal_block>
            <paragraph><strong>不规范示例</strong> :</paragraph>
            <literal_block force="False" highlight_args="{}" language="glsl" linenos="False" xml:space="preserve">COLOR.xyz = vec3(5.0, 0.1, 0.2);</literal_block>
        </section>
        <section ids="naming-conventions" names="naming\ conventions 命名规定">
            <title>命名规定</title>
            <paragraph>这些命名规定遵循 Godot 引擎风格，不遵循这些规定都会使你的代码与内置的命名规定相冲突，导致风格不一致的代码.</paragraph>
            <section ids="functions-and-variables" names="functions\ and\ variables 函数与变量">
                <title>函数与变量</title>
                <paragraph>函数与变量使用 snake_case 命名：</paragraph>
                <literal_block force="False" highlight_args="{}" language="glsl" linenos="False" xml:space="preserve">void some_function() {
     float some_variable = 0.5;
}</literal_block>
            </section>
            <section ids="constants" names="constants 常量">
                <title>常量</title>
                <paragraph>使用 CONSTANT_CASE，全部大写，并用下划线（_）来分隔单词：</paragraph>
                <literal_block force="False" highlight_args="{}" language="glsl" linenos="False" xml:space="preserve">const float GOLDEN_RATIO = 1.618;</literal_block>
            </section>
            <section ids="preprocessor-directives" names="preprocessor\ directives 预处理器指令">
                <title>预处理器指令</title>
                <paragraph><reference internal="True" refuri="shader_reference/shader_preprocessor#doc-shader-preprocessor"><inline classes="std std-ref">着色器预处理器</inline></reference> directives should be written in CONSTANT__CASE.
                    Directives should be written without any indentation before them, even if
                    nested within a function.</paragraph>
                <paragraph>To preserve the natural flow of indentation when shader errors are printed to
                    the console, extra indentation should <strong>not</strong> be added within <literal>#if</literal>,
                    <literal>#ifdef</literal> or <literal>#ifndef</literal> blocks:</paragraph>
                <paragraph><strong>规范示例</strong> :</paragraph>
                <literal_block force="False" highlight_args="{}" language="glsl" linenos="False" xml:space="preserve">#define HEIGHTMAP_ENABLED

void fragment() {
    vec2 position = vec2(1.0, 2.0);

#ifdef HEIGHTMAP_ENABLED
    sample_heightmap(position);
#endif
}</literal_block>
                <paragraph><strong>不规范示例</strong> :</paragraph>
                <literal_block force="False" highlight_args="{}" language="glsl" linenos="False" xml:space="preserve">#define heightmap_enabled

void fragment() {
    vec2 position = vec2(1.0, 2.0);

    #ifdef heightmap_enabled
        sample_heightmap(position);
    #endif
}</literal_block>
            </section>
        </section>
        <section ids="code-order" names="code\ order 代码顺序">
            <title>代码顺序</title>
            <paragraph>我们建议以这种方式组织着色器代码:</paragraph>
            <literal_block force="False" highlight_args="{}" language="glsl" linenos="False" xml:space="preserve">01. shader type declaration
02. render mode declaration
03. // docstring

04. uniforms
05. constants
06. varyings

07. other functions
08. vertex() function
09. fragment() function
10. light() function</literal_block>
            <paragraph>我们优化了代码顺序，从上往下阅读代码更加容易，帮助第一次阅读代码的开发人员了解代码的工作原理，同时避免与变量声明顺序相关的错误。</paragraph>
            <paragraph>此代码顺序遵循两个经验法则:</paragraph>
            <enumerated_list enumtype="arabic" prefix="" suffix=".">
                <list_item>
                    <paragraph>先是元数据和属性, 然后是方法.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>“公共”在“私有”之前。在着色器语言的语境中，“公共”指的是用户可以轻易调整的东西（uniform）。</paragraph>
                </list_item>
            </enumerated_list>
            <section ids="local-variables" names="local\ variables 局部变量">
                <title>局部变量</title>
                <paragraph>局部变量的声明位置离首次使用该局部变量的位置越近越好，让人更容易跟上代码的思路，而不需要上翻下找该变量的声明位置。</paragraph>
                <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
            </section>
        </section>
    </section>
</document>
