<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/tutorials/shaders/shader_materials.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-shader-materials"></target>
    <section ids="shader-materials doc-shader-materials" names="shader\ materials 着色器材质 doc_shader_materials">
        <title>着色器材质</title>
        <section ids="introduction" names="introduction 前言">
            <title>前言</title>
            <paragraph>For the most common cases, Godot provides ready to use materials for
                most types of shaders, such as <reference internal="True" refuri="../../classes/class_standardmaterial3d#class-standardmaterial3d"><inline classes="std std-ref">StandardMaterial3D</inline></reference>,
                <reference internal="True" refuri="../../classes/class_canvasitemmaterial#class-canvasitemmaterial"><inline classes="std std-ref">CanvasItemMaterial</inline></reference> and <reference internal="True" refuri="../../classes/class_particleprocessmaterial#class-particleprocessmaterial"><inline classes="std std-ref">ParticleProcessMaterial</inline></reference>.
                They are flexible implementations that cover most use cases.</paragraph>
            <paragraph>着色器材质允许直接编写自定义着色器, 以获得最大的灵活性. 这方面的示例是:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>创建程序式纹理。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>创建复杂的纹理混合效果.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>创建动画材质, 或随时间变化的材质.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>创建折射效果或其他高级效果.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>为更具异国情调的材质创建特殊照明着色器.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>动画顶点, 如树叶或草.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>创建自定义粒子代码.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>以及更多！</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>Godot提供了内置的功能, 使频繁的操作更容易. 此外,Godot的着色器编辑器会在你输入时检测错误, 所以你可以实时看到编辑的着色器. 也可以使用可视化的, 基于节点的图形编辑器来编辑着色器.</paragraph>
        </section>
        <section ids="creating-a-shadermaterial" names="creating\ a\ shadermaterial 创建\ shadermaterial">
            <title>创建 ShaderMaterial</title>
            <paragraph>在你选择的某个对象中创建一个新的 ShaderMaterial。转到 <literal>Material</literal> 属性并创建 ShaderMaterial。</paragraph>
            <image candidates="{'*': 'tutorials/shaders/img/shader_material_create.png'}" uri="tutorials/shaders/img/shader_material_create.png"></image>
            <paragraph>接下来, 点击着色器材质, 查看其属性. 从这里你可以创建一个着色器或视觉着色器. 常规着色器使用代码来设置它们的属性, 而视觉着色器则使用基于节点的工作流程.</paragraph>
            <paragraph>如果你需要, 你可以将视觉着色器转换为文本着色器. 但是你不能将文本着色器转换为视觉着色器.</paragraph>
            <paragraph>选择其中一个, 你就可以开始编辑你的着色器.</paragraph>
            <image candidates="{'*': 'tutorials/shaders/img/shader_create.png'}" uri="tutorials/shaders/img/shader_create.png"></image>
            <paragraph>编辑新创建的着色器, 着色器编辑器将打开.</paragraph>
            <image candidates="{'*': 'tutorials/shaders/img/shader_material_editor.png'}" uri="tutorials/shaders/img/shader_material_editor.png"></image>
            <paragraph>编辑新创建的着色器, 着色器编辑器将打开.</paragraph>
            <image candidates="{'*': 'tutorials/shaders/img/visual_shader_editor.png'}" uri="tutorials/shaders/img/visual_shader_editor.png"></image>
            <paragraph>在视觉着色器编辑器中, 你可以点击一个按钮, 看看你的视觉着色器作为着色器代码的样子. 如果你想复制一个文本着色器作为节点, 这可能是有用的, 或者它可以作为将你的视觉着色器转换为文本着色器的预览.</paragraph>
            <image candidates="{'*': 'tutorials/shaders/img/visual_shader_code.png'}" uri="tutorials/shaders/img/visual_shader_code.png"></image>
            <note>
                <paragraph>要了解更多关于可视化着色器的信息, 请阅读 <reference internal="True" refuri="visual_shaders#doc-visual-shaders"><inline classes="std std-ref">使用 VisualShader</inline></reference> .</paragraph>
            </note>
        </section>
        <section ids="converting-to-shadermaterial" names="converting\ to\ shadermaterial 转换为\ shadermaterial">
            <title>转换为 ShaderMaterial</title>
            <paragraph>It is possible to convert from StandardMaterial3D, CanvasItemMaterial and
                ParticleProcessMaterial to ShaderMaterial. To do so, go to the material properties
                and select the convert option.</paragraph>
            <image candidates="{'*': 'tutorials/shaders/img/shader_material_convert.png'}" uri="tutorials/shaders/img/shader_material_convert.png"></image>
            <note>
                <paragraph>Using the convert option will turn the StandardMaterial3D into a ShaderMaterial
                    with a text shader, not a visual shader.</paragraph>
            </note>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
