<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/tutorials/shaders/shader_reference/sky_shader.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-sky-shader"></target>
    <section ids="sky-shaders doc-sky-shader" names="sky\ shaders 天空着色器 doc_sky_shader">
        <title>天空着色器</title>
        <paragraph>Sky shaders are a special type of shader used for drawing sky backgrounds
            and for updating radiance cubemaps which are used for image-based lighting
            (IBL). Sky shaders only have one processing function, the <literal>sky()</literal>
            function.</paragraph>
        <paragraph>There are three places the sky shader is used.</paragraph>
        <bullet_list bullet="*">
            <list_item>
                <paragraph>First the sky shader is used to draw the sky when you have selected to use
                    a Sky as the background in your scene.</paragraph>
            </list_item>
            <list_item>
                <paragraph>Second, the sky shader is used to update the radiance cubemap
                    when using the Sky for ambient color or reflections.</paragraph>
            </list_item>
            <list_item>
                <paragraph>Third, the sky shader is used to draw the lower res subpasses which can be
                    used in the high-res background or cubemap pass.</paragraph>
            </list_item>
        </bullet_list>
        <paragraph>In total, this means the sky shader can run up
            to six times per frame, however, in practice it will be much less than that
            because the radiance cubemap does not need to be updated every frame, and
            not all subpasses will be used. You can change the behavior of the shader
            based on where it is called by checking the <literal>AT_*_PASS</literal> booleans. For
            example:</paragraph>
        <literal_block force="False" highlight_args="{}" language="glsl" linenos="False" xml:space="preserve">shader_type sky;

void sky() {
    if (AT_CUBEMAP_PASS) {
        // Sets the radiance cubemap to a nice shade of blue instead of doing
        // expensive sky calculations
        COLOR = vec3(0.2, 0.6, 1.0);
    } else {
        // Do expensive sky calculations for background sky only
        COLOR = get_sky_color(EYEDIR);
    }
}</literal_block>
        <paragraph>When using the sky shader to draw a background, the shader will be called for
            all non-occluded fragments on the screen. However, for the background's
            subpasses, the shader will be called for every pixel of the subpass.</paragraph>
        <paragraph>When using the sky shader to update the radiance cubemap, the sky shader
            will be called for every pixel in the cubemap. On the other hand, the shader
            will only be called when the radiance cubemap needs to be updated. The radiance
            cubemap needs to be updated when any of the shader parameters are updated.
            For example, if <literal>TIME</literal> is used in the shader, then the radiance cubemap
            will update every frame. The following list of changes force an update of
            the radiance cubemap:</paragraph>
        <bullet_list bullet="*">
            <list_item>
                <paragraph><literal>TIME</literal> is used.</paragraph>
            </list_item>
            <list_item>
                <paragraph><literal>POSITION</literal> is used and the camera position changes.</paragraph>
            </list_item>
            <list_item>
                <paragraph>If any <literal>LIGHTX_*</literal> properties are used and any
                    <reference internal="True" refuri="../../../classes/class_directionallight3d#class-directionallight3d"><inline classes="std std-ref">DirectionalLight3D</inline></reference> changes.</paragraph>
            </list_item>
            <list_item>
                <paragraph>If any uniform is changed in the shader.</paragraph>
            </list_item>
            <list_item>
                <paragraph>If the screen is resized and either of the subpasses are used.</paragraph>
            </list_item>
        </bullet_list>
        <paragraph>Try to avoid updating the radiance cubemap needlessly. If you do need to
            update the radiance cubemap each frame, make sure your
            <reference internal="True" refuri="../../../classes/class_sky#class-sky-property-process-mode"><inline classes="std std-ref">Sky process mode</inline></reference> is set to
            <reference internal="True" refuri="../../../classes/class_sky#class-sky-constant-process-mode-realtime"><inline classes="std std-ref">REALTIME</inline></reference>.</paragraph>
        <paragraph>Note that the <reference internal="True" refuri="../../../classes/class_sky#class-sky-property-process-mode"><inline classes="std std-ref">process mode</inline></reference> only
            affects the rendering of the radiance cubemap. The visible sky is always
            rendered by calling the fragment shader for every pixel. With complex fragment
            shaders, this can result in a high rendering overhead. If the sky is static
            (the conditions listed above are met) or changes slowly, running the full
            fragment shader every frame is not needed. This can be avoided by rendering the
            full sky into the radiance cubemap, and reading from this cubemap when
            rendering the visible sky. With a completely static sky, this means that it
            needs to be rendered only once.</paragraph>
        <paragraph>The following code renders the full sky into the radiance cubemap and reads
            from that cubemap for displaying the visible sky:</paragraph>
        <literal_block force="False" highlight_args="{}" language="glsl" linenos="False" xml:space="preserve">shader_type sky;

void sky() {
    if (AT_CUBEMAP_PASS) {
        vec3 dir = EYEDIR;

        vec4 col = vec4(0.0);

        // Complex color calculation

        COLOR = col.xyz;
        ALPHA = 1.0;
    } else {
        COLOR = texture(RADIANCE, EYEDIR).rgb;
    }
}</literal_block>
        <paragraph>This way, the complex calculations happen only in the cubemap pass, which can
            be optimized by setting the sky's <reference internal="True" refuri="../../../classes/class_sky#class-sky-property-process-mode"><inline classes="std std-ref">process mode</inline></reference>
            and the <reference internal="True" refuri="../../../classes/class_sky#class-sky-property-radiance-size"><inline classes="std std-ref">radiance size</inline></reference> to get the
            desired balance between performance and visual fidelity.</paragraph>
        <section ids="render-modes" names="render\ modes 渲染模式">
            <title>渲染模式</title>
            <paragraph>Subpasses allow you to do more expensive calculations at a lower resolution
                to speed up your shaders. For example the following code renders clouds at
                a lower resolution than the rest of the sky:</paragraph>
            <literal_block force="False" highlight_args="{}" language="glsl" linenos="False" xml:space="preserve">shader_type sky;
render_mode use_half_res_pass;

void sky() {
    if (AT_HALF_RES_PASS) {
        // Run cloud calculation for 1/4 of the pixels
        vec4 color = generate_clouds(EYEDIR);
        COLOR = color.rgb;
        ALPHA = color.a;
    } else {
        // At full resolution pass, blend sky and clouds together
        vec3 color = generate_sky(EYEDIR);
        COLOR = color + HALF_RES_COLOR.rgb * HALF_RES_COLOR.a;
    }
}</literal_block>
            <table>
                <tgroup cols="2">
                    <colspec colwidth="26"></colspec>
                    <colspec colwidth="71"></colspec>
                    <thead>
                        <row>
                            <entry>
                                <paragraph>渲染模式</paragraph>
                            </entry>
                            <entry>
                                <paragraph>描述</paragraph>
                            </entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><strong>use_half_res_pass</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>允许着色器对半分辨率阶段进行写入和访问。</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><strong>use_quarter_res_pass</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>允许着色器对四分之一分辨率阶段进行写入和访问。</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><strong>disable_fog</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>使用后，雾不会影响天空。</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section ids="built-ins" names="built-ins 内置">
            <title>内置</title>
            <paragraph>Values marked as "in" are read-only. Values marked as "out" are for optional
                writing and will not necessarily contain sensible values. Samplers cannot be
                written to so they are not marked.</paragraph>
        </section>
        <section ids="global-built-ins" names="global\ built-ins 全局内置">
            <title>全局内置</title>
            <paragraph>Global built-ins are available everywhere, including in custom functions.</paragraph>
            <paragraph><literal>LIGHTX</literal> 灯光有 4 个，可以通过 <literal>LIGHT0</literal>、<literal>LIGHT1</literal>、<literal>LIGHT2</literal>、<literal>LIGHT3</literal> 访问。</paragraph>
            <table>
                <tgroup cols="2">
                    <colspec colwidth="33"></colspec>
                    <colspec colwidth="122"></colspec>
                    <thead>
                        <row>
                            <entry>
                                <paragraph>内置</paragraph>
                            </entry>
                            <entry>
                                <paragraph>描述</paragraph>
                            </entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph>in float <strong>TIME</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>全球时间, 以秒为单位.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>in vec3 <strong>POSITION</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>相机位置，使用世界空间</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>samplerCube <strong>RADIANCE</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>辐射度立方体贴图。只能在背景阶段读取。使用前请检查 <literal>!AT_CUBEMAP_PASS</literal>。</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>in bool <strong>AT_HALF_RES_PASS</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>目前正在渲染半分辨率阶段。</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>in bool <strong>AT_QUARTER_RES_PASS</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>目前正在渲染四分之一分辨率阶段。</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>in bool <strong>AT_CUBEMAP_PASS</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>目前正在渲染辐射度立方体贴图。</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>in bool <strong>LIGHTX_ENABLED</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>场景中存在 <literal>LightX</literal> 并且可见。如果为 <literal>false</literal>，则其他灯光属性可能为垃圾值。</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>in float <strong>LIGHTX_ENERGY</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>LIGHTX</literal> 的能量乘数。</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>in vec3 <strong>LIGHTX_DIRECTION</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>LIGHTX</literal> 面朝的方向。</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>in vec3 <strong>LIGHTX_COLOR</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph><literal>LIGHTX</literal> 的颜色。</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>in float <strong>LIGHTX_SIZE</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Angular diameter of <literal>LIGHTX</literal> in the sky. Expressed in radians. For reference, the sun from earth is about .0087 radians
                                    (0.5 degrees).</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>in float <strong>PI</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>圆周率常量 <literal>PI</literal>（<literal>3.141592</literal>）。圆的周长与直径的比值，转半圈的弧度值。</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>in float <strong>TAU</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>A <literal>TAU</literal> constant (<literal>6.283185</literal>).
                                    An equivalent of <literal>PI * 2</literal> and amount of radians in full turn.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>in float <strong>E</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>A <literal>E</literal> constant (<literal>2.718281</literal>).
                                    Euler's number and a base of the natural logarithm.</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section ids="sky-built-ins" names="sky\ built-ins">
            <title>Sky built-ins</title>
            <table>
                <tgroup cols="2">
                    <colspec colwidth="31"></colspec>
                    <colspec colwidth="97"></colspec>
                    <thead>
                        <row>
                            <entry>
                                <paragraph>内置</paragraph>
                            </entry>
                            <entry>
                                <paragraph>描述</paragraph>
                            </entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph>in vec3 <strong>EYEDIR</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Normalized direction of current pixel. Use this as your basic direction for procedural effects.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>in vec2 <strong>SCREEN_UV</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Screen UV coordinate for current pixel. Used to map a texture to the full screen.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>in vec2 <strong>SKY_COORDS</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Sphere UV. Used to map a panorama texture to the sky.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>in vec4 <strong>HALF_RES_COLOR</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Color value of corresponding pixel from half resolution pass. Uses linear filter.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>in vec4 <strong>QUARTER_RES_COLOR</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Color value of corresponding pixel from quarter resolution pass. Uses linear filter.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>out vec3 <strong>COLOR</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>输出颜色。</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>out float <strong>ALPHA</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Output alpha value, can only be used in subpasses.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>out vec4 <strong>FOG</strong></paragraph>
                            </entry>
                            <entry>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
