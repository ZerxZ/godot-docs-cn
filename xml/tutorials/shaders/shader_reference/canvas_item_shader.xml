<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/tutorials/shaders/shader_reference/canvas_item_shader.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-canvas-item-shader"></target>
    <section ids="canvasitem-shaders doc-canvas-item-shader" names="canvasitem\ shaders canvasitem\ 着色器 doc_canvas_item_shader">
        <title>CanvasItem 着色器</title>
        <paragraph>画布组件着色器用于绘制Godot中的所有二维元素. 这包括从画布组件继承的所有节点, 以及所有图形用户界面元素.</paragraph>
        <paragraph>画布组件着色器比空间着色器包含更少的内置变量和功能, 但它们与顶点, 片段和光处理器功能保持相同的基本结构.</paragraph>
        <section ids="render-modes" names="render\ modes 渲染模式">
            <title>渲染模式</title>
            <table>
                <tgroup cols="2">
                    <colspec colwidth="33"></colspec>
                    <colspec colwidth="70"></colspec>
                    <thead>
                        <row>
                            <entry>
                                <paragraph>渲染模式</paragraph>
                            </entry>
                            <entry>
                                <paragraph>描述</paragraph>
                            </entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph><strong>blend_mix</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>混合混合模式（Alpha 为透明度），默认。</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><strong>blend_add</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>叠加混合模式。</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><strong>blend_sub</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>减法混合模式。</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><strong>blend_mul</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>乘法混合模式。</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><strong>blend_premul_alpha</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>预乘 Alpha 混合模式。</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><strong>blend_disabled</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>禁用混合，值（包括 Alpha）会按原样写入。</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><strong>unshaded</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>结果只使用反照率。材质中不会发生照明/阴影。</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><strong>light_only</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>仅在光通过时绘制.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><strong>skip_vertex_transform</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>VERTEX needs to be transformed manually in vertex function.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph><strong>world_vertex_coords</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>VERTEX is modified in world coordinates instead of local.</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section ids="built-ins" names="built-ins 内置">
            <title>内置</title>
            <paragraph>标记为 "in" 的值是只读的. 标记为 "out" 的值是可以选择写入的, 不一定包含合理的值. 标记为 "inout" 的值提供一个合理的默认值, 并且可以选择写入. 采样器不是写入的对象, 它们没有被标记.</paragraph>
        </section>
        <section ids="global-built-ins" names="global\ built-ins 全局内置">
            <title>全局内置</title>
            <paragraph>全局内置的功能随处可见, 包括自定义功能.</paragraph>
            <table>
                <tgroup cols="2">
                    <colspec colwidth="19"></colspec>
                    <colspec colwidth="88"></colspec>
                    <thead>
                        <row>
                            <entry>
                                <paragraph>内置</paragraph>
                            </entry>
                            <entry>
                                <paragraph>描述</paragraph>
                            </entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph>in float <strong>TIME</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Global time since the engine has started, in seconds (always positive).
                                    It's subject to the rollover setting (which is 3,600 seconds by default).
                                    It's not affected by <reference internal="True" refuri="../../../classes/class_engine#class-engine-property-time-scale"><inline classes="std std-ref">time_scale</inline></reference>
                                    or pausing, but you can define a global shader uniform to add a "scaled"
                                    <literal>TIME</literal> variable if desired.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>in float <strong>PI</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>A <literal>PI</literal> constant (<literal>3.141592</literal>).
                                    A ration of circle's circumference to its diameter and amount of radians in half turn.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>in float <strong>TAU</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>A <literal>TAU</literal> constant (<literal>6.283185</literal>).
                                    An equivalent of <literal>PI * 2</literal> and amount of radians in full turn.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>in float <strong>E</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>A <literal>E</literal> constant (<literal>2.718281</literal>).
                                    Euler's number and a base of the natural logarithm.</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section ids="vertex-built-ins" names="vertex\ built-ins 顶点内置">
            <title>顶点内置</title>
            <paragraph>Vertex data (<literal>VERTEX</literal>) is presented in local space (pixel coordinates, relative to the Node2D's origin).
                If not written to, these values will not be modified and be passed through as they came.</paragraph>
            <paragraph>The user can disable the built-in model to world transform (world to screen and projection will still
                happen later) and do it manually with the following code:</paragraph>
            <literal_block force="False" highlight_args="{}" language="glsl" linenos="False" xml:space="preserve">shader_type canvas_item;
render_mode skip_vertex_transform;

void vertex() {

    VERTEX = (MODEL_MATRIX * vec4(VERTEX, 0.0, 1.0)).xy;
}</literal_block>
            <paragraph>其他内置程序, 如UV和COLOR, 如果没有修改, 也会传递给片段函数.</paragraph>
            <paragraph>对于实例化，INSTANCE_CUSTOM变量包含实例自定义数据. 使用粒子时, 此信息通常是:</paragraph>
            <bullet_list bullet="*">
                <list_item>
                    <paragraph><strong>x</strong>：旋转角度，单位为弧度。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><strong>y</strong>：生命周期的阶段（0 到 1）。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><strong>z</strong>：动画帧。</paragraph>
                </list_item>
            </bullet_list>
            <table>
                <tgroup cols="2">
                    <colspec colwidth="32"></colspec>
                    <colspec colwidth="52"></colspec>
                    <thead>
                        <row>
                            <entry>
                                <paragraph>内置</paragraph>
                            </entry>
                            <entry>
                                <paragraph>描述</paragraph>
                            </entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph>in mat4 <strong>MODEL_MATRIX</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Local space to world space transform. World space
                                    is the coordinates you normally use in the editor.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>in mat4 <strong>CANVAS_MATRIX</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>World space to canvas space transform. In canvas
                                    space the origin is the upper-left corner of the
                                    screen and coordinates ranging from (0, 0) to
                                    viewport size.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>in mat4 <strong>SCREEN_MATRIX</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Canvas space to clip space. In clip space
                                    coordinates ranging from (-1, -1) to (1, 1).</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>in int  <strong>INSTANCE_ID</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>实例化的实例ID.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>in vec4 <strong>INSTANCE_CUSTOM</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>实例自定义数据.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>in bool <strong>AT_LIGHT_PASS</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>始终为 <literal>false</literal>。</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>in vec2 <strong>TEXTURE_PIXEL_SIZE</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Normalized pixel size of default 2D texture.
                                    For a Sprite2D with a texture of size 64x32px,
                                    <strong>TEXTURE_PIXEL_SIZE</strong> = <literal>vec2(1/64, 1/32)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>inout vec2 <strong>VERTEX</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Vertex, in local space.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>in int <strong>VERTEX_ID</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>The index of the current vertex in the vertex
                                    buffer.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>inout vec2 <strong>UV</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Normalized texture coordinates. Range from 0 to 1.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>inout vec4 <strong>COLOR</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>来自顶点原语的颜色.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>inout float <strong>POINT_SIZE</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>点绘图的点大小.</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section ids="fragment-built-ins" names="fragment\ built-ins 片段内置">
            <title>片段内置</title>
            <paragraph>Certain Nodes (for example, <reference internal="True" refuri="../../../classes/class_sprite2d#class-sprite2d"><inline classes="std std-ref">Sprite2Ds</inline></reference>) display a texture
                by default. However, when a custom fragment function is attached to these nodes,
                the texture lookup needs to be done manually. Godot provides the texture color
                in the <literal>COLOR</literal> built-in variable multiplied by the node's color. To read the
                texture color by itself, you can use:</paragraph>
            <literal_block force="False" highlight_args="{}" language="glsl" linenos="False" xml:space="preserve">COLOR = texture(TEXTURE, UV);</literal_block>
            <paragraph>Similarly, if a normal map is used in the <reference internal="True" refuri="../../../classes/class_canvastexture#class-canvastexture"><inline classes="std std-ref">CanvasTexture</inline></reference>, Godot uses
                it by default and assigns its value to the built-in <literal>NORMAL</literal> variable. If you are using a normal
                map meant for use in 3D, it will appear inverted. In order to use it in your shader, you must assign
                it to the <literal>NORMALMAP</literal> property. Godot will handle converting it for use in 2D and overwriting <literal>NORMAL</literal>.</paragraph>
            <literal_block force="False" highlight_args="{}" language="glsl" linenos="False" xml:space="preserve">NORMALMAP = texture(NORMAL_TEXTURE, UV).rgb;</literal_block>
            <table>
                <tgroup cols="2">
                    <colspec colwidth="45"></colspec>
                    <colspec colwidth="63"></colspec>
                    <thead>
                        <row>
                            <entry>
                                <paragraph>内置</paragraph>
                            </entry>
                            <entry>
                                <paragraph>描述</paragraph>
                            </entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph>in vec4 <strong>FRAGCOORD</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Coordinate of pixel center. In screen space. <literal>xy</literal> specifies
                                    position in window. Origin is lower-left.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>in vec2 <strong>SCREEN_PIXEL_SIZE</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>单个像素的大小. 等于分辨率的倒数.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>in vec2 <strong>POINT_COORD</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>所绘制点的坐标。</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>sampler2D <strong>TEXTURE</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>默认的2D纹理.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>in vec2 <strong>TEXTURE_PIXEL_SIZE</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Normalized pixel size of default 2D texture.
                                    For a Sprite2D with a texture of size 64x32px,
                                    <strong>TEXTURE_PIXEL_SIZE</strong> = <literal>vec2(1/64, 1/32)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>in bool <strong>AT_LIGHT_PASS</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>始终为 <literal>false</literal>。</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>sampler2D <strong>SPECULAR_SHININESS_TEXTURE</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Specular shininess texture of this object.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>in vec4 <strong>SPECULAR_SHININESS</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Specular shininess color, as sampled from the texture.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>in vec2 <strong>UV</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>来自顶点功能的UV.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>in vec2 <strong>SCREEN_UV</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>屏幕当前像素的UV坐标.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>sampler2D <strong>SCREEN_TEXTURE</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>在 Godot 4 中移除。请改用 <literal>sampler2D</literal> 和 <literal>hint_screen_texture</literal>。</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>inout vec3 <strong>NORMAL</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>从 ** NORMAL_TEXTURE ** 中正常读取. 可写的.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>sampler2D <strong>NORMAL_TEXTURE</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>默认 2D 法线纹理。</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>out vec3 <strong>NORMAL_MAP</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Configures normal maps meant for 3D for use in 2D. If used,
                                    overrides <strong>NORMAL</strong>.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>out float <strong>NORMAL_MAP_DEPTH</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>用于缩放的法线贴图深度.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>inout vec2 <strong>VERTEX</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>屏幕空间中的像素位置。</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>inout vec2 <strong>SHADOW_VERTEX</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>与 <literal>VERTEX</literal> 相同，但是可以通过写入来修改阴影。</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>inout vec3 <strong>LIGHT_VERTEX</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>与 <literal>VERTEX</literal> 相同，但是可以通过写入来修改灯光。Z 分量代表高度。</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>inout vec4 <strong>COLOR</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Color from vertex function multiplied by the <strong>TEXTURE</strong>
                                    color. Also output color value.</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section ids="light-built-ins" names="light\ built-ins 内置灯光">
            <title>内置灯光</title>
            <paragraph>Light processor functions work differently in Godot 4.x than they did in Godot
                3.x. In Godot 4.x all lighting is done during the regular draw pass. In other
                words, Godot no longer draws the object again for each light.</paragraph>
            <paragraph>Use render_mode <literal>unshaded</literal> if you do not want the light processor function to
                run. Use render_mode <literal>light_only</literal> if you only want to see the impact of
                lighting on an object; this can be useful when you only want the object visible
                where it is covered by light.</paragraph>
            <paragraph>If you define a light function it will replace the built in light function,
                even if your light function is empty.</paragraph>
            <paragraph>Below is an example of a light shader that takes a CanvasItem's normal map into account:</paragraph>
            <literal_block force="False" highlight_args="{}" language="glsl" linenos="False" xml:space="preserve">void light() {
  float cNdotL = max(0.0, dot(NORMAL, LIGHT_DIRECTION));
  LIGHT = vec4(LIGHT_COLOR.rgb * COLOR.rgb * LIGHT_ENERGY * cNdotL, LIGHT_COLOR.a);
}</literal_block>
            <table>
                <tgroup cols="2">
                    <colspec colwidth="34"></colspec>
                    <colspec colwidth="78"></colspec>
                    <thead>
                        <row>
                            <entry>
                                <paragraph>内置</paragraph>
                            </entry>
                            <entry>
                                <paragraph>描述</paragraph>
                            </entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph>in vec4 <strong>FRAGCOORD</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Coordinate of pixel center. In screen space. <literal>xy</literal> specifies
                                    position in window. Origin is lower-left.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>in vec3 <strong>NORMAL</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>输入法线。</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>in vec4 <strong>COLOR</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>输入颜色。这是 fragment 函数的输出。</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>in vec2 <strong>UV</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>UV，来自 vertex 函数，等价于 fragment 函数中的 UV。</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>sampler2D <strong>TEXTURE</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>CanvasItem使用的当前纹理.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>in vec2 <strong>TEXTURE_PIXEL_SIZE</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Normalized pixel size of <strong>TEXTURE</strong>.
                                    For a Sprite2D with a <strong>TEXTURE</strong> of size 64x32px,
                                    <strong>TEXTURE_PIXEL_SIZE</strong> = <literal>vec2(1/64, 1/32)</literal></paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>in vec2 <strong>SCREEN_UV</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>屏幕当前像素的UV坐标.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>in vec2 <strong>POINT_COORD</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>点精灵的UV.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>in vec4 <strong>LIGHT_COLOR</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Color of Light multiplied by Light's texture.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>in float <strong>LIGHT_ENERGY</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>灯光的能量乘数。</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>in vec3 <strong>LIGHT_POSITION</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>灯光在屏幕空间中的位置。如果使用的是 <literal>DirectionalLight2D</literal>，则始终为 <literal>vec3(0,0,0)</literal>。</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>in vec3 <strong>LIGHT_DIRECTION</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>灯光在屏幕空间中的方向。</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>in bool <strong>LIGHT_IS_DIRECTIONAL</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>如果该阶段为 <literal>DirectionalLight2D</literal> 则为 <literal>true</literal>。</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>in vec3 <strong>LIGHT_VERTEX</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>像素位置，使用屏幕空间坐标，是在 fragment 函数中修改的。</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>inout vec4 <strong>LIGHT</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>该 Light 的输出颜色。</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>in vec4 <strong>SPECULAR_SHININESS</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>镜面反射光泽度，由对象的纹理设置。</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>out vec4 <strong>SHADOW_MODULATE</strong></paragraph>
                            </entry>
                            <entry>
                                <paragraph>Multiply shadows cast at this point by this color.</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </section>
        <section ids="sdf-functions" names="sdf\ functions sdf\ 函数">
            <title>SDF 函数</title>
            <paragraph>There are a few additional functions implemented to sample an automatically
                generated Signed Distance Field texture. These functions available for Fragment
                and Light functions of CanvasItem shaders.</paragraph>
            <paragraph>The signed distance field is generated from <reference internal="True" refuri="../../../classes/class_lightoccluder2d#class-lightoccluder2d"><inline classes="std std-ref">LightOccluder2D</inline></reference> nodes
                present in the scene with the <strong>SDF Collision</strong> property enabled (which is the
                default). See the <reference internal="True" refuri="../../2d/2d_lights_and_shadows#doc-2d-lights-and-shadows-setting-up-shadows"><inline classes="std std-ref">2D lights and shadows</inline></reference>
                documentation for more information.</paragraph>
            <table>
                <tgroup cols="2">
                    <colspec colwidth="47"></colspec>
                    <colspec colwidth="43"></colspec>
                    <thead>
                        <row>
                            <entry>
                                <paragraph>函数</paragraph>
                            </entry>
                            <entry>
                                <paragraph>描述</paragraph>
                            </entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry>
                                <paragraph>float <strong>texture_sdf</strong> (vec2 sdf_pos)</paragraph>
                            </entry>
                            <entry>
                                <paragraph>执行2D纹理读取。</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>vec2 <strong>texture_sdf_normal</strong> (vec2 sdf_pos)</paragraph>
                            </entry>
                            <entry>
                                <paragraph>Calculates a normal from the SDF texture.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>vec2 <strong>sdf_to_screen_uv</strong> (vec2 sdf_pos)</paragraph>
                            </entry>
                            <entry>
                                <paragraph>Converts a SDF to screen UV.</paragraph>
                            </entry>
                        </row>
                        <row>
                            <entry>
                                <paragraph>vec2 <strong>screen_uv_to_sdf</strong> (vec2 uv)</paragraph>
                            </entry>
                            <entry>
                                <paragraph>将缩进转为制表符。</paragraph>
                            </entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
