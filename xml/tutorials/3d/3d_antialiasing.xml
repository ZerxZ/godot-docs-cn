<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/tutorials/3d/3d_antialiasing.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-3d-antialiasing"></target>
    <section ids="d-antialiasing doc-3d-antialiasing" names="3d\ antialiasing 3d\ 抗锯齿 doc_3d_antialiasing">
        <title>3D 抗锯齿</title>
        <comment xml:space="preserve">Images on this page were generated using the project below</comment>
        <comment xml:space="preserve">(except for `antialiasing_none_scaled.webp`):</comment>
        <comment xml:space="preserve">https://github.com/Calinou/godot-antialiasing-comparison</comment>
        <seealso>
            <paragraph>Godot 还支持在 2D 渲染中的抗锯齿。这部分在 <reference internal="True" refuri="../2d/2d_antialiasing#doc-2d-antialiasing"><inline classes="std std-ref">2D 抗锯齿</inline></reference> 页面中进行了介绍。</paragraph>
        </seealso>
        <section ids="introduction" names="introduction 前言">
            <title>前言</title>
            <paragraph>由于分辨率有限，以 3D 渲染的场景可能会出现锯齿伪影。 这些伪影通常表现为表面边缘上的“阶梯（staircase）”效应（边缘锯齿）以及反射表面上的闪烁和/或闪烁（镜面锯齿）。</paragraph>
            <paragraph>在下面的示例中，你可以注意到边缘如何具有块状外观。 植被也在闪烁，盒子顶部的细线几乎消失了：</paragraph>
            <figure align="center" ids="id1">
                <image alt="图像缩放 2 倍并进行近邻滤波，使混叠现象更加明显。" candidates="{'*': 'tutorials/3d/img/antialiasing_none_scaled.webp'}" uri="tutorials/3d/img/antialiasing_none_scaled.webp"></image>
                <caption>图像缩放 2 倍并进行近邻滤波，使混叠现象更加明显。</caption>
            </figure>
            <paragraph>为了解决这个问题，Godot 中可以使用多种抗锯齿技术。 下面详细介绍这些内容。</paragraph>
            <seealso>
                <paragraph>你可以使用 <reference name="3D 抗锯齿演示项目" refuri="https://github.com/godotengine/godot-demo-projects/tree/master/3d/antialiasing">3D 抗锯齿演示项目</reference> 比较实际的抗锯齿算法。</paragraph>
            </seealso>
        </section>
        <section ids="multisample-antialiasing-msaa" names="multisample\ antialiasing\ (msaa) 多重采样抗锯齿（msaa）">
            <title>多重采样抗锯齿（MSAA）</title>
            <paragraph>这种技术是处理别名效应的“历史”方法。多重采样抗锯齿（MSAA）在几何边缘上非常有效（尤其是在较高级别上）。MSAA不会引入任何模糊。</paragraph>
            <paragraph>MSAA有三个级别可供选择：2×、4×、8×。较高级别在抗锯齿边缘方面更有效，但要求更高。在具有现代视觉效果的游戏中，强烈建议使用2×或4×的MSAA，因为8×的MSAA通常要求过高。</paragraph>
            <paragraph>MSAA 的缺点是它仅在边缘上运行。 这是因为 MSAA 增加了 <emphasis>覆盖率</emphasis> 样本的数量，但没有增加 <emphasis>颜色</emphasis> 样本的数量。 然而，由于颜色样本的数量没有增加，片段着色器仍然只为每个像素运行一次。 因此，MSAA 不会减少使用 <strong>Alpha Scissor</strong> 透明度模式（1 位透明度）的材质的透明度锯齿。 此外，MSAA 对镜面反射锯齿也无效。</paragraph>
            <paragraph>为了减轻 Alpha 裁剪材质上的锯齿，可以在 StandardMaterial3D 或 ORMMaterial3D 属性中的特定材质上启用 <reference internal="True" refuri="standard_material_3d#doc-standard-material-3d-alpha-antialiasing"><inline classes="std std-ref">Alpha 抗锯齿</inline></reference>（也称为 <emphasis>Alpha 覆盖范围</emphasis>）。Alpha 覆盖范围具有适中的性能成本，但它可以有效减少透明材质上的锯齿，而且不会引入任何模糊。</paragraph>
            <paragraph>通过更改 <strong>渲染 &gt; 抗锯齿 &gt; 质量 &gt; MSAA 3D</strong> 设置的值，可以在项目设置中启用 MSAA。 更改 <strong>MSAA 3D</strong> 设置的值而不是 <strong>MSAA 2D</strong> 非常重要，因为这些是完全独立的设置。</paragraph>
            <paragraph>无抗锯齿（左）与不同 MSAA 级别（右）之间的比较。 请注意，此处未使用 alpha 抗锯齿：</paragraph>
            <image candidates="{'*': 'tutorials/3d/img/antialiasing_msaa_2x.webp'}" uri="tutorials/3d/img/antialiasing_msaa_2x.webp"></image>
            <image candidates="{'*': 'tutorials/3d/img/antialiasing_msaa_4x.webp'}" uri="tutorials/3d/img/antialiasing_msaa_4x.webp"></image>
            <image candidates="{'*': 'tutorials/3d/img/antialiasing_msaa_8x.webp'}" uri="tutorials/3d/img/antialiasing_msaa_8x.webp"></image>
            <target refid="doc-3d-antialiasing-taa"></target>
        </section>
        <section ids="temporal-antialiasing-taa doc-3d-antialiasing-taa" names="temporal\ antialiasing\ (taa) 时间抗锯齿（taa） doc_3d_antialiasing_taa">
            <title>时间抗锯齿（TAA）</title>
            <paragraph><emphasis>该功能仅适用于集群 Forward 后端，不适用于 Forward 移动或兼容性后端。</emphasis></paragraph>
            <paragraph>时间抗锯齿（Temporal antialiasing）的工作原理是将先前渲染帧的结果 <emphasis>聚合</emphasis> 成单个高质量帧。 这是一个连续的过程，通过在每帧抖动场景中所有顶点的位置来工作。 这种抖动是为了捕捉子像素细节，除非在极端情况下，否则（抖动）应该是不明显的。</paragraph>
            <paragraph>此技术在现代游戏中常用，因为它提供了针对镜面反射锯齿和其他着色器引起的伪影的最有效的抗锯齿方式。 此外，TAA 还全面支持透明度抗锯齿。</paragraph>
            <paragraph>在静止场景中启用 TAA 会产生少量模糊，而当相机移动时，这种模糊效果会变得更加明显。 TAA 的另一个缺点是它可能会在移动物体后面呈现 <emphasis>重影（ghosting）</emphasis> 伪影。 以更高的帧速率进行渲染将使 TAA 收敛得更快，从而使这些重影伪像变得不那么明显。</paragraph>
            <paragraph>通过在项目设置中更改 <strong>渲染 &gt; 抗锯齿 &gt; 质量 &gt; 使用 TAA</strong> 的配置，可以启用时间抗锯齿功能。</paragraph>
            <paragraph>无抗锯齿（左）和 TAA（右）之间的比较：</paragraph>
            <image candidates="{'*': 'tutorials/3d/img/antialiasing_taa.webp'}" uri="tutorials/3d/img/antialiasing_taa.webp"></image>
            <target refid="doc-3d-antialiasing-fsr2"></target>
        </section>
        <section ids="amd-fidelityfx-super-resolution-2-2-fsr2 doc-3d-antialiasing-fsr2" names="amd\ fidelityfx\ super\ resolution\ 2.2\ (fsr2) amd\ fidelityfx\ super\ resolution\ 2.2\ （fsr2） doc_3d_antialiasing_fsr2">
            <title>AMD FidelityFX Super Resolution 2.2 （FSR2）</title>
            <paragraph>自 Godot 4.2 起，内置了对 <reference name="AMD FidelityFX Super Resolution" refuri="https://www.amd.com/zh-hans/technologies/fidelityfx-super-resolution">AMD FidelityFX Super Resolution</reference> 2.2 的支持。这是一种与任何供应商的所有最新 GPU 兼容的 <reference internal="True" refuri="resolution_scaling#doc-resolution-scaling"><inline classes="std std-ref">放大方法</inline></reference>。 FSR2 旨在通过降低内部的 3D 渲染分辨率，然后放大到输出分辨率来提高性能。</paragraph>
            <paragraph>然而，与 FSR1 不同的是，FSR2 有时间抗锯齿功能。这意味着 FSR2 可以在原始分辨率下使用，以获得高质量的抗锯齿效果，并且输入分辨率等于输出分辨率。在这种情况下，启用 FSR2 实际上会 <emphasis>降低</emphasis> 性能，但会显着提高渲染质量。</paragraph>
            <paragraph>在原始分辨率下使用 FSR2 比在原始分辨率下使用 TAA 要求更高，因此，仅在你有足够大的 GPU 显存空间时才建议使用它。从好的方面来说，与 TAA 相比，FSR2 提供了更好的抗锯齿覆盖范围和更少的模糊度，尤其是在运动画面中。</paragraph>
            <paragraph>无抗锯齿（左）和原始分辨率下的 FSR2（右）之间的比较：</paragraph>
            <image candidates="{'*': 'tutorials/3d/img/antialiasing_fsr2_native.webp'}" uri="tutorials/3d/img/antialiasing_fsr2_native.webp"></image>
            <note>
                <paragraph>默认情况下， <strong>FSR 锐度</strong> 项目设置设置为 <literal>0.2</literal> （值越高，锐化程度越低）。为了进行比较，在以上的屏幕截图中，FSR 锐度被设置为 <literal>2.0</literal> ，从而禁用了 FSR 锐化。</paragraph>
            </note>
            <target refid="doc-3d-antialiasing-fxaa"></target>
        </section>
        <section ids="fast-approximate-antialiasing-fxaa doc-3d-antialiasing-fxaa" names="fast\ approximate\ antialiasing\ (fxaa) 快速近似抗锯齿（fxaa） doc_3d_antialiasing_fxaa">
            <title>快速近似抗锯齿（FXAA）</title>
            <paragraph><emphasis>该功能仅适用于集群 Forward 和 Forward 移动后端，不适用于兼容性后端。</emphasis></paragraph>
            <paragraph>快速近似抗锯齿是一种后期处理抗锯齿解决方案。 它的运行速度比任何其他抗锯齿技术都要快，并且还支持抗锯齿透明度。 然而，由于它缺乏时间信息，因此它对于防止镜面反射锯齿没有多大作用。</paragraph>
            <paragraph>这种技术有时仍会在手机游戏中使用。 然而，在桌面平台上，FXAA 通常已经是过时的，取而代之的是时间抗锯齿，后者对于对抗镜面反射锯齿更为有效。 尽管如此，对于只有低端 GPU 的玩家来说，将 FXAA 作为游戏内选项可能仍然是值得的。</paragraph>
            <paragraph>FXAA 启用后会产生适度的模糊（静止时比 TAA 多，但相机移动时比 TAA 少）。</paragraph>
            <paragraph>可以在项目设置中启用 FXAA，方法是将 <strong>渲染 &gt; 抗锯齿 &gt; 质量 &gt; 屏幕空间 AA</strong> 设置的值更改为 <strong>FXAA</strong> 。</paragraph>
            <paragraph>无抗锯齿（左）和 FXAA（右）之间的对比：</paragraph>
            <image candidates="{'*': 'tutorials/3d/img/antialiasing_fxaa.webp'}" uri="tutorials/3d/img/antialiasing_fxaa.webp"></image>
        </section>
        <section ids="supersample-antialiasing-ssaa" names="supersample\ antialiasing\ (ssaa) 超采样抗锯齿（ssaa）">
            <title>超采样抗锯齿（SSAA）</title>
            <paragraph><emphasis>该功能仅适用于集群 Forward 和 Forward 移动后端，不适用于兼容性后端。</emphasis></paragraph>
            <paragraph>超采样可以提供最高质量的抗锯齿效果，但它也是成本最贵的。 它的工作原理是多次对场景中的每个像素进行着色。 这允许 SSAA 同时抗锯齿边缘、透明度 <emphasis>和</emphasis> 镜面反射锯齿，而不会引入潜在的重影伪影。</paragraph>
            <paragraph>SSAA 的缺点是其 <emphasis>极高</emphasis> 的成本。 这种成本通常会使 SSAA 难以用于游戏目的，但你可能仍会发现超采样对于 <reference internal="True" refuri="../animation/creating_movies#doc-creating-movies"><inline classes="std std-ref">离线渲染</inline></reference> 很有用。</paragraph>
            <paragraph>超采样抗锯齿是通过将高级项目设置中 <strong>渲染 &gt; 缩放 3D &gt; 缩放</strong> 的设置增加到 <literal>1.0</literal> 以上来执行的，同时确保 <strong>渲染 &gt; 缩放 3D &gt; 模式</strong> 设置为 <strong>Bilinear</strong> （默认） 。 由于比例因子是按轴定义的，比例因子 <literal>1.5</literal> 将导致 2.25× SSAA，而比例因子 <literal>2.0</literal> 将导致 4× SSAA。由于 Godot 使用硬件自身的双线性过滤来执行降采样，因此结果在整数的比例因子（即 <literal>2.0</literal> ）下看起来会更清晰。</paragraph>
            <paragraph>无抗锯齿（左）与不同 SSAA 级别（右）之间的比较：</paragraph>
            <image candidates="{'*': 'tutorials/3d/img/antialiasing_ssaa_2.25x.webp'}" uri="tutorials/3d/img/antialiasing_ssaa_2.25x.webp"></image>
            <image candidates="{'*': 'tutorials/3d/img/antialiasing_ssaa_4x.webp'}" uri="tutorials/3d/img/antialiasing_ssaa_4x.webp"></image>
            <warning>
                <paragraph>超采样还有很高的视频 RAM （即显存）要求，因为它需要以目标分辨率渲染，然后 <emphasis>缩小</emphasis> 到窗口大小。 例如，使用 4× SSAA 显示 3840×2160（4K 分辨率）的项目需要以 7680×4320（8K 分辨率）渲染场景，这是原像素数的 4 倍。</paragraph>
                <paragraph>如果你使用较大的窗口大小（例如 4K），你可能会发现将分辨率比例增加到超过特定值时，会因 VRAM 耗尽而导致严重减速（甚至崩溃）。</paragraph>
            </warning>
        </section>
        <section ids="screen-space-roughness-limiter" names="screen-space\ roughness\ limiter 屏幕空间粗糙度限制器">
            <title>屏幕空间粗糙度限制器</title>
            <paragraph><emphasis>该功能仅适用于集群 Forward 和 Forward 移动后端，不适用于兼容性后端。</emphasis></paragraph>
            <paragraph>这并不是一种边缘抗锯齿方法，而是减少 3D 镜面反射锯齿的一种方法。</paragraph>
            <paragraph>屏幕空间粗糙度限制器最适合详细的几何形状。 虽然它对粗糙度图渲染本身有影响，但其影响有限。</paragraph>
            <paragraph>屏幕空间粗糙度限制器默认启用； 它不需要任何手动设置。 它对性能影响很小，因此如果你的项目不受镜面反射锯齿影响太多，请考虑禁用它。</paragraph>
        </section>
        <section ids="texture-roughness-limiter-on-import" names="texture\ roughness\ limiter\ on\ import 导入时的纹理粗糙度限制器">
            <title>导入时的纹理粗糙度限制器</title>
            <paragraph>与屏幕空间粗糙度限制器一样，这也不是一种边缘抗锯齿方法，而是减少 3D 镜面反射锯齿的一种方法。</paragraph>
            <paragraph>通过指定法线贴图来限制导入的粗糙度，以用作限制粗糙度的指导。 这是通过在文件系统面板中选择粗糙度图来完成的，然后转到导入面板并将 <strong>粗糙度&gt;模式</strong> 设置为存储粗糙度图的颜色通道（通常为 <strong>绿色</strong> ），然后设置材质法线贴图的路径。 在设置法线贴图的路径后，请别忘记单击导入面板底部的 <strong>重新导入</strong> 。</paragraph>
            <paragraph>由于此处理仅在导入时进行，因此没有任何性能成本。 但其视觉效果改善有限。 限制导入时的粗糙度仅有助于减少纹理内的镜面反射锯齿，而无助于减少详细网格上的几何边缘上发生的锯齿。</paragraph>
        </section>
        <section ids="which-antialiasing-technique-should-i-use" names="which\ antialiasing\ technique\ should\ i\ use? 我应该使用哪种抗锯齿技术？">
            <title>我应该使用哪种抗锯齿技术？</title>
            <paragraph><strong>没有“一招鲜”的抗锯齿技术</strong> 。 由于抗锯齿通常对 GPU 要求很高，或者可能会引入不必要的模糊，因此你需要添加一个设置以允许玩家禁用抗锯齿。</paragraph>
            <paragraph>对于具有照片级拟真艺术目标的项目，通常来说 TAA 是最合适的选择。虽然 TAA 会引入重影伪像，但没有其他技术能像 TAA 那样对抗镜面反射锯齿。屏幕空间粗糙度限制器也有点用，但总体上对镜面反射锯齿的效果要差得多。如果你的 GPU 性能不错，则可以在原始分辨率下使用 FSR2，以获得比标准 TAA 更好的时间抗锯齿。</paragraph>
            <paragraph>对于反射表面较少的项目（例如卡通艺术风格），MSAA 可以表现很好。如果（对项目而言）避免模糊和时域伪影很重要，例如在竞技游戏中，MSAA 也是一个不错的选择。</paragraph>
            <paragraph>在针对移动或集成显卡等低端平台时，FXAA 通常是唯一可行的选择。2× MSAA 在某些情况下可能可用，但更高的 MSAA 级别不太可能在移动 GPU 上流畅运行。</paragraph>
            <paragraph>Godot 允许同时使用多种抗锯齿技术。这通常是不必要的，但在高端 GPU 上或在 <reference internal="True" refuri="../animation/creating_movies#doc-creating-movies"><inline classes="std std-ref">非实时渲染</inline></reference> 中可以提供更好的视觉效果。例如，为了在启用 TAA 时让移动边缘看起来更好，还可以同时启用 MSAA。</paragraph>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
