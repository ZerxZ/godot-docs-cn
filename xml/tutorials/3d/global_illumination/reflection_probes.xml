<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/tutorials/3d/global_illumination/reflection_probes.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-reflection-probes"></target>
    <section ids="reflection-probes doc-reflection-probes" names="reflection\ probes 反射探针 doc_reflection_probes">
        <title>反射探针</title>
        <note>
            <paragraph>反射探针仅在集群 Forward 和 Forward 移动渲染后端中受支持，在兼容性后端中则不受支持。</paragraph>
        </note>
        <paragraph>如 <reference internal="True" refuri="../standard_material_3d#doc-standard-material-3d"><inline classes="std std-ref">标准 3D 材质与 ORM 3D 材质</inline></reference> 中所述，物体可以显示反射光和/或漫射光。 反射探针用作影响区域内物体的反射 <emphasis>和</emphasis> 环境光源。 它们可用于提供比 <reference internal="True" refuri="using_voxel_gi#doc-using-voxel-gi"><inline classes="std std-ref">VoxelGI</inline></reference> 和 <reference internal="True" refuri="using_sdfgi#doc-using-sdfgi"><inline classes="std std-ref">SDFGI</inline></reference> 更准确的反射，同时占用的系统资源相当便宜。</paragraph>
        <paragraph>由于反射探针还可以存储环境光，因此当 <reference internal="True" refuri="using_lightmap_gi#doc-using-lightmap-gi"><inline classes="std std-ref">烘焙光照贴图</inline></reference> 不可用时（例如在程序生成的关卡中），它们可以用作 VoxelGI 和 SDFGI 的低端替代品。</paragraph>
        <paragraph>反射探针还可以与屏幕空间反射同时使用，为屏幕外的对象提供反射。 在这种情况下，Godot 会将屏幕空间反射和反射探针的反射混合在一起。</paragraph>
        <seealso>
            <paragraph>不确定 ReflectionProbe 是否符合你的需求？那么请到 <reference internal="True" refuri="introduction_to_global_illumination#doc-introduction-to-global-illumination-comparison"><inline classes="std std-ref">我应该使用哪种全局光照技术？</inline></reference> 来查阅 Godot 中可用的 GI 技术的比较。</paragraph>
        </seealso>
        <section ids="visual-comparison" names="visual\ comparison 视觉比较">
            <title>视觉比较</title>
            <figure align="center" ids="id1">
                <image alt="反射探针禁用。环境天空作为反馈使用。" candidates="{'*': 'tutorials/3d/global_illumination/img/gi_none.webp'}" uri="tutorials/3d/global_illumination/img/gi_none.webp"></image>
                <caption>反射探针禁用。环境天空作为反馈使用。</caption>
            </figure>
            <figure align="center" ids="id2">
                <image alt="反射探针启用。" candidates="{'*': 'tutorials/3d/global_illumination/img/gi_none_reflection_probe.webp'}" uri="tutorials/3d/global_illumination/img/gi_none_reflection_probe.webp"></image>
                <caption>反射探针启用。</caption>
            </figure>
            <figure align="center" ids="id3">
                <image alt="反射探针启用。" candidates="{'*': 'tutorials/3d/global_illumination/img/gi_lightmap_gi_indirect_only_reflection_probe.webp'}" uri="tutorials/3d/global_illumination/img/gi_lightmap_gi_indirect_only_reflection_probe.webp"></image>
                <caption>反射探针与 LightmapGI 同时启用。光照贴图出现在反射中。</caption>
            </figure>
            <paragraph>通过将反射探针与屏幕空间反射相结合，你可以两全其美：既能够一般房间结构提供高质量反射（在屏幕外时仍然存在），还可以为小的细节提供实时反射。</paragraph>
            <figure align="center" ids="id4">
                <image alt="仅使用 ReflectionProbe 在房间中进行的反射。" candidates="{'*': 'tutorials/3d/global_illumination/img/reflection_probes_reflection_probe.webp'}" uri="tutorials/3d/global_illumination/img/reflection_probes_reflection_probe.webp"></image>
                <caption>仅使用 ReflectionProbe 在房间中进行的反射。注意，小的细节没有任何反射。</caption>
            </figure>
            <figure align="center" ids="id5">
                <image alt="仅使用屏幕空间反射在房间中进行的反射。" candidates="{'*': 'tutorials/3d/global_illumination/img/reflection_probes_ssr.webp'}" uri="tutorials/3d/global_illumination/img/reflection_probes_ssr.webp"></image>
                <caption>仅使用屏幕空间反射在房间中进行的反射。注意，由于房间的墙面侧面已经在屏幕之外，其上的反射出现了部分缺失。</caption>
            </figure>
            <figure align="center" ids="id6">
                <image alt="同时使用了 RefectionProbe 和屏幕空间反射在房间中进行的反射。" candidates="{'*': 'tutorials/3d/global_illumination/img/reflection_probes_reflection_probe_ssr.webp'}" uri="tutorials/3d/global_illumination/img/reflection_probes_reflection_probe_ssr.webp"></image>
                <caption>同时使用了 RefectionProbe 和屏幕空间反射在房间中进行的反射。屏幕空间反射和反射探针相混合，在反射探针无法显示任何反射的情况下充当后备。</caption>
            </figure>
        </section>
        <section ids="setting-up-a-reflectionprobe" names="setting\ up\ a\ reflectionprobe 设置\ reflectionprobe">
            <title>设置 ReflectionProbe</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>添加一个 <reference internal="True" refuri="../../../classes/class_reflectionprobe#class-reflectionprobe"><inline classes="std std-ref">ReflectionProbe</inline></reference> 节点.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>在检查器中配置 ReflectionProbe 的范围以适应你的场景。 为了获得准确的反射，每个房间通常应该有一个 ReflectionProbe 节点（有时，对于大房间来说会有更多）。</paragraph>
                </list_item>
            </bullet_list>
            <tip>
                <paragraph>请记住，ReflectionProbe 范围不必是正方形，你甚至可以旋转 ReflectionProbe 节点以适应未与 X/Z 网格对齐的房间。 利用这一点可以更好地覆盖房间，而无需放置太多 ReflectionProbe 节点。</paragraph>
            </tip>
        </section>
        <section ids="reflectionprobe-properties" names="reflectionprobe\ properties reflectionprobe\ 属性">
            <title>ReflectionProbe 属性</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><strong>Update Mode（更新模式）：</strong> 控制反射探针何时更新。 每次移动 ReflectionProbe 时 <strong>Once</strong> 仅渲染场景一次。 与 <strong>Always</strong> 更新模式相比，这使得渲染速度更快，后者强制探针每帧重新渲染周围的所有内容。 将此属性保留为 <strong>Once</strong> （默认），除非你需要反射探针来更新每一帧。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><strong>Intensity（强度）：</strong> 反射和环境照明的亮度。 通常不需要更改其默认值 <literal>1.0</literal> ，但如果你发现反射看起来太强，可以将其减小 <literal>1.0</literal> 。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><strong>Max Distance（最大距离）：</strong> 控制 ReflectionProbe 内部摄像头使用的最大距离。 该距离始终至少等于 <strong>Extents</strong> （范围） ，但可以增加该距离以使位于范围之外的对象在反射中可见。 <emphasis>此属性不会影响 ReflectionProbe 本身可见的最大距离。</emphasis></paragraph>
                </list_item>
                <list_item>
                    <paragraph><strong>Extents（范围）：</strong> 将受到 ReflectionProbe 照明和反射影响的区域。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><strong>Origin Offset（原点偏移）：</strong> 用于反射探针渲染的内部摄像机的原点。 这必须始终限制在 <strong>Extents</strong> 内。 如果需要，请调整此项以防止反射被正好位于 ReflectionProbe 中心的固体物体阻挡。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><strong>Box Projection（箱体投影）：</strong> 控制渲染反射探针时是否应使用视差校正。 这将根据相机的位置（相对于反射探针）调整反射的外观。 这会产生很小的性能成本，但在箱型房间中，质量的提高通常是物有所值的。 请注意，这种效果在形状不太规则的房间（例如椭圆形的房间）中效果不佳。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><strong>Interior（内部）：</strong> 如果启用，环境照明将不会来自环境天空，并且背景天空不会渲染到反射探针上。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><strong>Enable Shadow（启用阴影）：</strong> 控制是否应在反射探针内渲染实时光阴影。 启用此功能可以提高反射质量，但会牺牲性能。 对于具有 <strong>Always</strong> 模式的反射探针，应禁用此功能，因为每帧渲染带有阴影的反射的成本非常高。 完全 <reference internal="True" refuri="using_lightmap_gi#doc-using-lightmap-gi"><inline classes="std std-ref">烘焙光</inline></reference> 阴影不受此设置的影响，并且无论如何都会在反射探针中渲染。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><strong>Cull Mask（剔除遮罩）：</strong> 控制哪些对象在反射中可见。 该属性可以通过从反射中排除小物体来提高性能。该属性也可用于防止对象在无法使用 <strong>Origin Offset</strong> 的情况下出现自反射伪影（self-reflection artifacts）。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><strong>Mesh LOD Threshold（网格 LOD 阈值）：</strong> 用于调整在反射内渲染网格的自动细节层次的阈值。 这仅影响自动生成 LOD 的网格体。 较高的值可以通过使用不太详细的几何体来提高性能，特别是对于远离反射原点的对象。 在游戏过程中，使用不太详细的对象的视觉差异通常不是很明显，尤其是在粗糙的反射中。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>环境类别具有多个属性，用于调整 ReflectionProbe 渲染的环境光：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><strong>Mode（模式）：</strong> 设置为 <strong>Disabled</strong> ，探针将不添加环境光。如果设置为 <strong>Environment</strong> （环境），环境光颜色将自动从环境天空（当 <strong>Interior</strong> 被禁用）和反射的平均颜色中采样。如果设置为 <strong>Constant Color</strong> （固定颜色），则使用 <strong>Color</strong> 属性中指定的颜色。 <strong>Constant Color</strong> 模式可作为区域照明的近似值。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><strong>Color（颜色）：</strong> 当环境光模式设置为 <strong>Constant Mode（固定模式）</strong> 时使用的颜色。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><strong>Color Energy（颜色能量）：</strong>用于环境光自定义 <strong>Color</strong> 的乘数。 这仅在环境光模式为 <strong>Custom Color</strong>（自定义颜色） 时有效。</paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section ids="reflectionprobe-blending" names="reflectionprobe\ blending reflectionprobe\ 混合">
            <title>ReflectionProbe 混合</title>
            <paragraph>为了使反射源之间的过渡更加平滑，Godot 支持自动探针混合：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>最多可以在给定位置，将 4 个 ReflectionProbe 混合在一起。 当 ReflectionProbe 不接触任何其他 ReflectionProbe 节点时，它也会平滑地淡出回到环境照明中。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>如果使用该功能的话，SDFGI 和 VoxelGI 将与 ReflectionProbes 顺利融合。 这允许策略性地放置 ReflectionProbes，以便在需要时获得更准确（或完全实时）的反射，同时在 VoxelGI 或 SDFGI 的影响区域中仍然具有可用的粗略反射。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>要使多个 ReflectionProbe 相互混合，你需要使每个 ReflectionProbe 的部分区域相互重叠。区域范围应仅与其他反射探针（的范围）尽可能少地重叠，以提高渲染性能（通常是 3D 空间中的几个单位）。</paragraph>
        </section>
        <section ids="limitations" names="limitations 限制">
            <title>限制</title>
            <paragraph>在使用 Forward+ 渲染器时，Godot 采用 <emphasis>集群</emphasis> 方法进行实时照明。只要性能允许，可以添加任意数量的反射探针。不过，默认情况下，当前摄像机视图中的 <emphasis>集群元素</emphasis> 上限仍为 512 个。集群元素是指全向灯、聚光灯、 <reference internal="True" refuri="../using_decals#doc-using-decals"><inline classes="std std-ref">贴花</inline></reference> 或 <reference internal="True" refid="doc-reflection-probes"><inline classes="std std-ref">反射探针</inline></reference>。可以通过调整 "<strong>渲染 &gt; 限制 &gt; 群集生成器 &gt; 最大群集元素</strong>"高级项目设置来增加此限制。</paragraph>
            <paragraph>在使用 Forward 移动后端时，每个单独的 Mesh <emphasis>资源</emphasis> 上只能应用 8 个反射探针。如果单个网格上有超出数量限制的反射探针，它们并不会全部渲染在网格上。</paragraph>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
