<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/tutorials/3d/using_gridmaps.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-using-gridmaps"></target>
    <section dupnames="使用\ gridmap" ids="using-gridmaps doc-using-gridmaps" names="using\ gridmaps doc_using_gridmaps">
        <title>使用 GridMap</title>
        <section ids="introduction" names="introduction 前言">
            <title>前言</title>
            <paragraph><reference internal="True" refuri="../../classes/class_gridmap#class-gridmap"><inline classes="std std-ref">Gridmaps</inline></reference> 是一种用于创建3D游戏关卡的工具, 方式类似于2D中使用 <reference internal="True" refuri="../2d/using_tilemaps#doc-using-tilemaps"><inline classes="std std-ref">TileMap</inline></reference> . 使用一个定义好的可以放在一个网格中的 3D mesh (a <reference internal="True" refuri="../../classes/class_meshlibrary#class-meshlibrary"><inline classes="std std-ref">MeshLibrary</inline></reference>) (译注,grid和mesh都译作网格, 这里为了清晰,mesh直接使用英文,grid则译作网格)对象集合搭建关卡, 就像你使用无限多数量的乐高积木搭建世界一样.</paragraph>
            <paragraph>就像使用tilemap的tile一样, 碰撞和导航也可以添加到网格中.</paragraph>
        </section>
        <section ids="example-project" names="example\ project 示例项目">
            <title>示例项目</title>
            <paragraph>要学习 GridMaps 是怎么样工作的，请先下载示例项目：<reference name="gridmap_starter.zip" refuri="https://github.com/godotengine/godot-docs-project-starters/releases/download/latest-4.x/gridmap_starter.zip">gridmap_starter.zip</reference><target ids="gridmap-starter-zip" names="gridmap_starter.zip" refuri="https://github.com/godotengine/godot-docs-project-starters/releases/download/latest-4.x/gridmap_starter.zip"></target>。</paragraph>
            <paragraph>解压缩此项目并使用“导入”按钮将其添加到项目管理器。</paragraph>
        </section>
        <section ids="creating-a-meshlibrary" names="creating\ a\ meshlibrary 创建\ meshlibrary">
            <title>创建 MeshLibrary</title>
            <paragraph>首先，你需要一个 <reference internal="True" refuri="../../classes/class_meshlibrary#class-meshlibrary"><inline classes="std std-ref">MeshLibrary</inline></reference>，它是可以在网格地图中使用的 Mesh 的集合。打开“mesh_library_source.tscn”场景以查看如何设置网格库的示例。</paragraph>
            <image candidates="{'*': 'tutorials/3d/img/gridmap_meshlibrary1.png'}" uri="tutorials/3d/img/gridmap_meshlibrary1.png"></image>
            <paragraph>如你所见，该场景有一个 <reference internal="True" refuri="../../classes/class_node3d#class-node3d"><inline classes="std std-ref">Node3D</inline></reference> 节点作为其根节点，以及许多 <reference internal="True" refuri="../../classes/class_meshinstance3d#class-meshinstance3d"><inline classes="std std-ref">MeshInstance3D</inline></reference> 节点子节点。</paragraph>
            <paragraph>如果你的场景中不需要任何物理, 那么到这里就完成了. 但是, 在大多数情况下, 你还需要给网格指定碰撞体.</paragraph>
        </section>
        <section ids="collisions" names="collisions 碰撞">
            <title>碰撞</title>
            <paragraph>你可以手动为每个 Mesh 指定 <reference internal="True" refuri="../../classes/class_staticbody3d#class-staticbody3d"><inline classes="std std-ref">StaticBody3D</inline></reference> 和 <reference internal="True" refuri="../../classes/class_collisionshape3d#class-collisionshape3d"><inline classes="std std-ref">CollisionShape3D</inline></reference>。或者，你可以使用“网格”菜单根据 Mesh 数据自动创建碰撞体。</paragraph>
            <image candidates="{'*': 'tutorials/3d/img/gridmap_create_body.png'}" uri="tutorials/3d/img/gridmap_create_body.png"></image>
            <paragraph>请注意，“凸”（Convex）碰撞体对于简单 Mesh 效果更好。对于更复杂的形状，请选择“创建三角网格静态体”。一旦每个网格都分配了物理主体和碰撞形状，就可以使用网格库了。</paragraph>
            <image candidates="{'*': 'tutorials/3d/img/gridmap_mesh_scene.png'}" uri="tutorials/3d/img/gridmap_mesh_scene.png"></image>
        </section>
        <section ids="materials" names="materials 材质">
            <title>材质</title>
            <paragraph>在生成网格库时, 只使用网格内的材质. 节点上设置的材质将被忽略.</paragraph>
        </section>
        <section ids="navigationmeshes" names="navigationmeshes navigationmesh">
            <title>NavigationMesh</title>
            <paragraph>和所有网格实例一样，MeshLibrary 的项目可以用 <reference internal="True" refuri="../../classes/class_navigationmesh#class-navigationmesh"><inline classes="std std-ref">NavigationMesh</inline></reference> 赋值，既可以手动创建，也即可按下面的说明进行烘焙。</paragraph>
            <paragraph>要从 MeshLibrary 场景导出创建 NavigationMesh，请在 GridMap 项的主 MeshInstance3D 下方放置一个 <reference internal="True" refuri="../../classes/class_navigationregion3d#class-navigationregion3d"><inline classes="std std-ref">NavigationRegion3D</inline></reference> 子节点。为该 NavigationRegion3D 添加有效的 NavigationMesh 资源，然后在下面的一些源几何体节点，再烘焙 NavigationMesh。</paragraph>
            <note>
                <paragraph>如果单元格比较小，一般需要把 NavigationMesh 属性里的代理半径和最小地区大小降低。</paragraph>
            </note>
            <image candidates="{'*': 'tutorials/3d/img/meshlibrary_scene.png'}" uri="tutorials/3d/img/meshlibrary_scene.png"></image>
            <paragraph>NavigationRegion3D 下的节点在导出 MeshLibrary 场景时会被忽略，所以可以专门为烘焙导航网格添加额外的节点，作为来源几何体。</paragraph>
            <warning>
                <paragraph>烘焙 NavigationMesh 的单元格大小必须与 NavigationServer 地图的单元格大小一致，才能把不同 Grid 单元格的导航网格合并起来。</paragraph>
            </warning>
        </section>
        <section ids="exporting-the-meshlibrary" names="exporting\ the\ meshlibrary 导出\ meshlibrary">
            <title>导出 MeshLibrary</title>
            <paragraph>要导出库，点击 <strong>场景 &gt; 导出为.. &gt; MeshLibrary...</strong> ，并将其保存为资源。</paragraph>
            <image candidates="{'*': 'tutorials/3d/img/gridmap_export.png'}" uri="tutorials/3d/img/gridmap_export.png"></image>
            <paragraph>可以在项目中找到已导出的名为“MeshLibrary.tres”的 MeshLibrary。</paragraph>
        </section>
        <section dupnames="使用\ gridmap" ids="using-gridmap" names="using\ gridmap">
            <title>使用 GridMap</title>
            <paragraph>创建一个新场景并添加一个 GridMap 节点。通过从文件系统面板拖动资源文件并将其放入检查器中的“Theme”（主题）属性中来添加网格库。</paragraph>
            <image candidates="{'*': 'tutorials/3d/img/gridmap_main.png'}" uri="tutorials/3d/img/gridmap_main.png"></image>
            <paragraph>“Cell/Size”属性应设置为网格的大小。在本示例中你可以使用默认值。将“Center Y”属性设置为“未启用”。</paragraph>
            <paragraph>现在，你可以开始设计关卡了，从调色板中选择一个图块，然后在编辑器窗口中用左键单击它。要删除一个图块，使用右键单击。</paragraph>
            <paragraph>使用“GridMap”菜单旁边的箭头更改你正在处理的层。</paragraph>
            <paragraph>单击“GridMap”菜单可以查看选项和快捷键。例如，按下 <literal classes="kbd">S</literal> 绕 Y 轴旋转图块。</paragraph>
            <image candidates="{'*': 'tutorials/3d/img/gridmap_menu.png'}" uri="tutorials/3d/img/gridmap_menu.png"></image>
            <paragraph>按住 <literal classes="kbd">Shift</literal> 并使用鼠标左键拖动将绘制一个选择框. 你可以使用相应的菜单选项复制或清除所选区域.</paragraph>
            <image candidates="{'*': 'tutorials/3d/img/gridmap_select.png'}" uri="tutorials/3d/img/gridmap_select.png"></image>
            <paragraph>在菜单中, 你还可以更改正在绘制的轴, 并将绘图平面在其轴上移动得更高或更低.</paragraph>
            <image candidates="{'*': 'tutorials/3d/img/gridmap_shift_axis.png'}" uri="tutorials/3d/img/gridmap_shift_axis.png"></image>
        </section>
        <section ids="using-gridmap-in-code" names="using\ gridmap\ in\ code 在代码中使用\ gridmap">
            <title>在代码中使用 GridMap</title>
            <paragraph>有关节点方法和成员变量的详细信息, 请参阅 <reference internal="True" refuri="../../classes/class_gridmap#class-gridmap"><inline classes="std std-ref">GridMap</inline></reference>.</paragraph>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
