<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/tutorials/3d/introduction_to_3d.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-introduction-to-3d"></target>
    <section ids="introduction-to-3d doc-introduction-to-3d" names="introduction\ to\ 3d 3d\ 简介 doc_introduction_to_3d">
        <title>3D 简介</title>
        <paragraph>创造一个 3D 游戏很有挑战性。那个多出来的的 Z 轴使许多有助于使 2D 游戏变得简单的常用技术不再起作用。为了帮助习惯这种转变，值得一提的是，Godot在2D和3D上使用了类似的API。大多数节点是相同的，并且存在 2D 和 3D 版本。事实上，可以看看 3D 平台游戏教程或 3D 运动学角色教程，它们大部分与2D对应教程相同。</paragraph>
        <paragraph>在3D中, 数学比2D更复杂一些, 所以看看Wiki里的 <reference internal="True" refuri="../math/vector_math#doc-vector-math"><inline classes="std std-ref">向量数学</inline></reference> 将有助于为有效开发3D游戏铺平道路(它是为游戏开发者, 而不是数学家或工程师, 特别创建的).</paragraph>
        <section ids="node3d-node" names="node3d\ node node3d\ 节点">
            <title>Node3D 节点</title>
            <paragraph><reference internal="True" refuri="../../classes/class_node2d#class-node2d"><inline classes="std std-ref">Node2D</inline></reference> 是 2D 的基础节点。<reference internal="True" refuri="../../classes/class_control#class-control"><inline classes="std std-ref">Control</inline></reference> 是所有 GUI 的基础节点。同理，3D 引擎中的所有 3D 物体都使用 <reference internal="True" refuri="../../classes/class_node3d#class-node3d"><inline classes="std std-ref">Node3D</inline></reference> 节点。</paragraph>
            <note>
                <paragraph>请注意，从 Godot 4 开始，“Spatial”节点现在称为“Node3D”。任何 Godot 3.x 中提到的“Spatial”节点都是指 Godot 4 中的“Node3D”。</paragraph>
            </note>
            <image candidates="{'*': 'tutorials/3d/img/tuto_3d1.png'}" uri="tutorials/3d/img/tuto_3d1.png"></image>
            <paragraph>Node3D 有一个局部变换，它是相对于父节点而言的（只要父节点也是 <strong>或继承自</strong> Node3D 类型）。这个变换可以作为 4×3 的 <reference internal="True" refuri="../../classes/class_transform3d#class-transform3d"><inline classes="std std-ref">Transform3D</inline></reference> 形式访问，也可以以 3 个 <reference internal="True" refuri="../../classes/class_vector3#class-vector3"><inline classes="std std-ref">Vector3</inline></reference> 成员的形式访问，分别代表位置、欧拉旋转（X、Y、Z 角度）和缩放。</paragraph>
            <image candidates="{'*': 'tutorials/3d/img/tuto_3d2.png'}" uri="tutorials/3d/img/tuto_3d2.png"></image>
        </section>
        <section ids="d-content" names="3d\ content 3d\ 内容">
            <title>3D 内容</title>
            <paragraph>与 2D 中加载图像内容和绘图都非常直观相比，3D 就有所不同，会稍微难一些。3D 内容需要使用特殊的 3D 工具（通常称为数字内容创建工具，Digital Content Creation 工具，简称 DCC）来创建，然后导出到某种交换文件格式，才能被 Godot 导入。这是因为 3D 格式的标准化不及图像。</paragraph>
            <section ids="manually-authored-models-using-3d-modeling-software" names="manually\ authored\ models\ (using\ 3d\ modeling\ software) 手动制作的模型（使用\ 3d\ 建模软件）">
                <title>手动制作的模型（使用 3D 建模软件）</title>
                <comment xml:space="preserve">FIXME: Needs update to properly description Godot 3.x workflow
(used to reference a non existing doc_importing_3d_meshes importer).</comment>
                <paragraph>有两条管线可以导入 3D 模型到 Godot 中。第一个也是最常见的一个，是通过 <reference internal="True" refuri="../assets_pipeline/importing_3d_scenes/index#doc-importing-3d-scenes"><inline classes="std std-ref">导入 3D 场景</inline></reference> , 它允许导入整个场景（就像它们在DCC中看起来的那样），包括动画，骨架绑定，混合形状等。</paragraph>
                <paragraph>第二条管线是通过导入简单的 .OBJ 文件作为网格资源，然后将其放入 <reference internal="True" refuri="../../classes/class_meshinstance3d#class-meshinstance3d"><inline classes="std std-ref">MeshInstance3D</inline></reference> 节点中显示。</paragraph>
            </section>
            <section ids="generated-geometry" names="generated\ geometry 生成的几何体">
                <title>生成的几何体</title>
                <paragraph>通过直接使用 <reference internal="True" refuri="../../classes/class_mesh#class-mesh"><inline classes="std std-ref">Mesh</inline></reference> 资源可以创建自定义几何体。只需创建数组并使用 <reference internal="True" refuri="../../classes/class_arraymesh#class-arraymesh-method-add-surface-from-arrays"><inline classes="std std-ref">ArrayMesh.add_surface_from_arrays()</inline></reference> 函数即可。也可以使用辅助类 <reference internal="True" refuri="../../classes/class_surfacetool#class-surfacetool"><inline classes="std std-ref">SurfaceTool</inline></reference>，它提供了一个更直接的 API 和帮助工具，用于索引、生成法线、切线等。</paragraph>
                <paragraph>在任何情况下, 这种方法都是为了用于生成静态几何体(不会经常更新的模型), 因为创建顶点数组并将它们提交给3D API具有显著的性能开销.</paragraph>
            </section>
            <section ids="immediate-geometry" names="immediate\ geometry 即时几何体">
                <title>即时几何体</title>
                <paragraph>相反，如果你需要生成经常更新的简单几何体，Godot 提供了一种特殊的 <reference internal="True" refuri="../../classes/class_immediatemesh#class-immediatemesh"><inline classes="std std-ref">ImmediateMesh</inline></reference> 资源，它可以在 <reference internal="True" refuri="../../classes/class_meshinstance3d#class-meshinstance3d"><inline classes="std std-ref">MeshInstance3D</inline></reference> 节点中使用。这提供了 OpenGL 1.x 风格的即时模式 API 来创建点、线、三角形等。</paragraph>
            </section>
            <section ids="d-in-3d" names="2d\ in\ 3d 3d\ 中的\ 2d">
                <title>3D 中的 2D</title>
                <paragraph>虽然Godot包装了强大的2D引擎, 但许多类型的游戏会使用在3D环境中的2D效果. 通过使用不旋转的固定相机(正交或透视), 可以使用诸如 <reference internal="True" refuri="../../classes/class_sprite3d#class-sprite3d"><inline classes="std std-ref">Sprite3D</inline></reference> 和 <reference internal="True" refuri="../../classes/class_animatedsprite3d#class-animatedsprite3d"><inline classes="std std-ref">AnimatedSprite3D</inline></reference> 等节点来创建混合了具有3D背景, 更逼真的视差, 灯光/阴影效果等的2D游戏.</paragraph>
                <paragraph>当然, 缺点在于与普通2D相比增加了复杂性并降低了与普通2D 相比的性能, 以及缺乏进行像素工作时的参考.</paragraph>
            </section>
        </section>
        <section ids="environment" names="environment 环境">
            <title>环境</title>
            <paragraph>除了编辑场景之外, 编辑环境通常也很常见. Godot提供了一个 <reference internal="True" refuri="../../classes/class_worldenvironment#class-worldenvironment"><inline classes="std std-ref">WorldEnvironment</inline></reference> 节点, 该节点允许更改背景颜色, 模式(就像放一个天空盒时那样)以及应用多种内置处理后效果. 环境可以在Camera中被覆写.</paragraph>
        </section>
        <section ids="d-viewport" names="3d\ viewport 3d\ 视口">
            <title>3D 视口</title>
            <paragraph>编辑 3D 场景可以在 3D 选项卡中完成。该选项卡可以手动选择，但在选择 Node3D 节点时将自动启用。</paragraph>
            <image candidates="{'*': 'tutorials/3d/img/tuto_3d3.png'}" uri="tutorials/3d/img/tuto_3d3.png"></image>
            <paragraph>默认的3D场景导航控制类似于Blender(旨在在自由软件工作流程中具有某种一致性), 但在编辑器设置中也包含了自定义鼠标按钮和行为使其看上去像其他工具的选项:</paragraph>
            <image candidates="{'*': 'tutorials/3d/img/tuto_3d4.png'}" uri="tutorials/3d/img/tuto_3d4.png"></image>
            <section ids="coordinate-system" names="coordinate\ system 坐标系">
                <title>坐标系</title>
                <paragraph>Godot 在 3D 中使用的都是<reference name="公制" refuri="https://zh.wikipedia.org/zh-cn/%E7%B1%B3%E5%88%B6">公制</reference>，1 个单位等于 1 米。物理和其他区域都为此而调整过。因此，试图使用不同的比例通常是一个坏主意（除非你知道你在做什么）。</paragraph>
                <paragraph>使用 3D 资产时，最好始终使用正确的比例（在 3D 建模软件中将单位设置为公制）。Godot 允许在导入后缩放，尽管在大多数时都没问题，但在极少数情况下，会在渲染或物理等敏感区域带来浮点精度问题（从而导致故障或伪影）。所以，确保你的艺术家始终在正确的比例下进行创作！</paragraph>
                <paragraph>Y 坐标用于“向上”。至于水平 X/Z 轴，Godot 使用 <strong>右手</strong> 坐标系。这意味着对于大多数需要对齐的对象（例如灯光或相机），Z 轴被用作“指向”方向。这个约定的大致意思是：</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><strong>X</strong> 是两边</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><strong>Y</strong> 是上/下</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><strong>Z</strong> 是前/后</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>有关与其他 3D 软件的比较，请参阅此图表：</paragraph>
                <figure align="center" ids="id1">
                    <image alt="3D坐标系比较图表" candidates="{'*': 'tutorials/3d/img/introduction_to_3d_coordinate_systems.webp'}" uri="tutorials/3d/img/introduction_to_3d_coordinate_systems.webp"></image>
                    <caption>图像来自 <reference name="Freya Holmér" refuri="https://twitter.com/FreyaHolmer">Freya Holmér</reference></caption>
                </figure>
            </section>
            <section ids="space-and-manipulation-gizmos" names="space\ and\ manipulation\ gizmos 空间与操纵小工具">
                <title>空间与操纵小工具</title>
                <paragraph>在 3D 视图中移动物体是通过操纵器小工具完成的。每个轴用一种颜色表示：红、绿、蓝分别代表 X、Y、Z。这种惯例也适用于网格和其他小工具（也适用于着色器语言、Vector3、Color 等组件的顺序）。</paragraph>
                <image candidates="{'*': 'tutorials/3d/img/tuto_3d5.png'}" uri="tutorials/3d/img/tuto_3d5.png"></image>
                <paragraph>一些有用的键盘绑定:</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>在移动, 缩放或旋转时, 按 <literal classes="kbd">Ctrl</literal> 键, 可进行吸附放置或旋转.</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>要将视图集中在所选对象上, 按 <literal classes="kbd">F</literal>.</paragraph>
                    </list_item>
                </bullet_list>
            </section>
            <section ids="using-blender-style-transform-shortcuts" names="using\ blender-style\ transform\ shortcuts 使用\ blender\ 风格的变换快捷键">
                <title>使用 Blender 风格的变换快捷键</title>
                <paragraph>从 Godot 4.2 开始，可以启用 Blender 风格的快捷键来平移、旋转和缩放节点。在 Blender 中，这些快捷键分别是：</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><literal classes="kbd">G</literal> 用于平移</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal classes="kbd">R</literal> 用于旋转</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><literal classes="kbd">S</literal> 用于缩放</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>在聚焦于 3D 编辑器视口的同时，按下快捷键，可以移动鼠标或输入数字以将选定节点移动指定的 3D 单位量。你可以通过用字母指定特定的轴，然后指定距离（如果使用键盘来输入值），以此来将选中节点的平移限制到特定的轴上。</paragraph>
                <paragraph>例如，要将选中物体向上移动 2.5 个单位，请按顺序输入以下序列（Y+ 在 Godot 中是向上，也就是延 Y 轴正方向）：</paragraph>
                <paragraph><literal classes="kbd">G</literal>-<literal classes="kbd">Y</literal>-<literal classes="kbd">2</literal>-<literal classes="kbd">.</literal>-<literal classes="kbd">5</literal>-<literal classes="kbd">Enter</literal></paragraph>
                <paragraph>如果要在 Godot 中使用 Blender 风格的变换快捷键，请转到编辑器设置的 <strong>快捷键</strong> 选项卡，然后在 Spatial Editor 部分中进行以下调整：</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>将 <strong>开始平移转换</strong> 绑定到 <literal classes="kbd">G</literal>。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>将 <strong>开始旋转变换</strong> 绑定到 <literal classes="kbd">R</literal>。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>将 <strong>开始缩放转换</strong> 绑定到 <literal classes="kbd">S</literal>。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>最后，取消 <strong>缩放模式</strong> 快捷键的绑定，使其快捷键不会与 <strong>开始旋转变换</strong> 冲突。</paragraph>
                    </list_item>
                </bullet_list>
            </section>
            <section ids="view-menu" names="view\ menu 视图菜单">
                <title>视图菜单</title>
                <paragraph>视图选项由视口工具栏中的“视图”菜单控制。</paragraph>
                <image candidates="{'*': 'tutorials/3d/img/tuto_3d6.png'}" uri="tutorials/3d/img/tuto_3d6.png"></image>
                <paragraph>你可以通过这个菜单在编辑器的 3D 视图中隐藏小工具：</paragraph>
                <image candidates="{'*': 'tutorials/3d/img/tuto_3d6_1.png'}" uri="tutorials/3d/img/tuto_3d6_1.png"></image>
                <paragraph>要隐藏特定类型的小工具，你可以在“视图”菜单中把它们切换掉。</paragraph>
                <image candidates="{'*': 'tutorials/3d/img/tuto_3d6_2.png'}" uri="tutorials/3d/img/tuto_3d6_2.png"></image>
            </section>
            <section ids="default-environment" names="default\ environment 默认环境">
                <title>默认环境</title>
                <paragraph>从项目管理器中创建时,3D环境具有默认的天空.</paragraph>
                <image candidates="{'*': 'tutorials/3d/img/tuto_3d8.png'}" uri="tutorials/3d/img/tuto_3d8.png"></image>
                <paragraph>鉴于基于物理的渲染工作方式，建议总是尝试使用默认环境，以便为对象提供间接和反射光。</paragraph>
            </section>
            <section ids="cameras" names="cameras 相机">
                <title>相机</title>
                <paragraph>无论在 3D 空间中放置多少物体，除非在场景中添加了 <reference internal="True" refuri="../../classes/class_camera3d#class-camera3d"><inline classes="std std-ref">Camera3D</inline></reference>，否则不会显示任何内容。相机可以在正交或透视投影中工作：</paragraph>
                <image candidates="{'*': 'tutorials/3d/img/tuto_3d10.png'}" uri="tutorials/3d/img/tuto_3d10.png"></image>
                <paragraph>摄像机与父视口或其祖先视口相关联, 且仅显示到他们上面. 由于场景树的根是一个视口, 默认情况下会在其上显示摄像机, 但如果需要子视口(作为渲染目标或画中画), 则需要自己的子摄像头才能显示.</paragraph>
                <image candidates="{'*': 'tutorials/3d/img/tuto_3d11.png'}" uri="tutorials/3d/img/tuto_3d11.png"></image>
                <paragraph>处理多台摄像机时, 每个视口都遵循以下规则:</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>如果场景树中没有摄像机，则第一个进入的摄像机将成为活跃摄像机。进入场景的其他摄像机将被忽略（除非它们被设置为 <emphasis>current</emphasis>）。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>如果相机设置了“<emphasis>current</emphasis>”属性，则无论场景中是否有其他相机，都会使用它。如果该属性已设置，它将变为活动状态，取代之前的摄像机。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>如果活动摄像机离开了场景树，则按树形顺序排列的第一台摄像机将取代它。</paragraph>
                    </list_item>
                </bullet_list>
            </section>
            <section ids="lights" names="lights 灯光">
                <title>灯光</title>
                <paragraph>背景环境发出一些出现在表面上的环境光。然而，如果场景中没有任何光源，除非背景环境非常明亮，否则场景会显得很暗。</paragraph>
                <paragraph>大多数室外场景都有平行光（如太阳或月亮），而室内场景通常有多个位置光（如灯、手电筒等）。 有关在 Godot 中设置灯光的更多信息，请参阅 <reference internal="True" refuri="lights_and_shadows#doc-lights-and-shadows"><inline classes="std std-ref">3D 灯光和阴影</inline></reference>。</paragraph>
                <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
            </section>
        </section>
    </section>
</document>
