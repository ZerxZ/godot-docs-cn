<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/about/list_of_features.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-list-of-features"></target>
    <section ids="list-of-features doc-list-of-features" names="list\ of\ features 特性列表 doc_list_of_features">
        <title>特性列表</title>
        <paragraph>本页旨在列出 Godot 当前支持的<strong>所有</strong>特性。</paragraph>
        <note>
            <paragraph>这个页面列出了当前稳定版本的 Godot 所支持的特性。其中一些功能可能在<reference name="LTS 版本系列 （3.x）" refuri="https://docs.godotengine.org/en/3.5/about/list_of_features.html">LTS 版本系列 （3.x）</reference><target ids="lts-3-x" names="lts\ 版本系列\ （3.x）" refuri="https://docs.godotengine.org/en/3.5/about/list_of_features.html"></target>中不可用。</paragraph>
        </note>
        <section ids="platforms" names="platforms 平台">
            <title>平台</title>
            <seealso>
                <paragraph>软硬件版本需求见 <reference internal="True" refuri="system_requirements#doc-system-requirements"><inline classes="std std-ref">系统需求</inline></reference>。</paragraph>
            </seealso>
            <paragraph><strong>可以运行编辑器以及导出项目的：</strong></paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>Windows（x86、64 位和 32 位）。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>macOS（x86 和 ARM，仅 64 位）。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Linux（x86 和 ARM，64 位和 32 位）。</paragraph>
                    <block_quote>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>二进制文件是静态链接的，并且如果在足够旧的基本发行版上进行编译，则可以在任何发行版上运行。</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>官方可执行文件使用 <reference name="Godot Engine buildroot" refuri="https://github.com/godotengine/buildroot">Godot Engine buildroot</reference> 编译，可执行文件能够在常见 Linux 发行版（包括对应的 LTS 版本）上正常运行。</paragraph>
                            </list_item>
                        </bullet_list>
                    </block_quote>
                </list_item>
                <list_item>
                    <paragraph>Android（编辑器支持是实验性的）。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/editor/using_the_web_editor#doc-using-the-web-editor"><inline classes="std std-ref">Web 浏览器</inline></reference> 。在 4.0 中是实验性的，当针对 HTML5 时，建议使用 Godot 3.x。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><strong>运行导出的项目：</strong></paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>iOS。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/platform/consoles#doc-consoles"><inline classes="std std-ref">主机</inline></reference>。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>Godot 的目标是尽可能地独立于平台，并且可以相对轻松地 <reference internal="True" refuri="../contributing/development/core_and_modules/custom_platform_ports#doc-custom-platform-ports"><inline classes="std std-ref">移植到新平台</inline></reference> 。</paragraph>
            <note>
                <paragraph>在 Godot 4 中用 C# 编写的项目目前无法导出到 Web 平台。如果要在该平台上使用 C#，请考虑使用 Godot 3。 （C# 的）Android 和 iOS 平台支持从 Godot 4.2 开始提供，但仍处于实验阶段，并且 <reference internal="True" refuri="../tutorials/scripting/c_sharp/index#doc-c-sharp-platforms"><inline classes="std std-ref">存在一些限制</inline></reference> 。</paragraph>
            </note>
        </section>
        <section ids="editor" names="editor 编辑器">
            <title>编辑器</title>
            <paragraph><strong>特性：</strong></paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>场景树编辑器。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>内置脚本编辑器。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>支持 Visual Studio Code、VIM 等<reference internal="True" refuri="../tutorials/editor/external_editor#doc-external-editor"><inline classes="std std-ref">外部文本编辑器</inline></reference>。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>GDScript <reference internal="True" refuri="../tutorials/scripting/debug/debugger_panel#doc-debugger-panel"><inline classes="std std-ref">调试器</inline></reference>。</paragraph>
                    <block_quote>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>从 4.2 版本开始支持多线程调试。</paragraph>
                            </list_item>
                        </bullet_list>
                    </block_quote>
                </list_item>
                <list_item>
                    <paragraph>可视化（性能）分析器能指出在渲染管线中 CPU 与 GPU 在每个步骤花费的时间。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>性能监视工具，包括<reference internal="True" refuri="../tutorials/scripting/debug/custom_performance_monitors#doc-custom-performance-monitors"><inline classes="std std-ref">自定义性能监视器</inline></reference>。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>脚本热重载。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>场景热编辑。</paragraph>
                    <block_quote>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>更改会在编辑器中生效并且会在关闭当前项目后保留。</paragraph>
                            </list_item>
                        </bullet_list>
                    </block_quote>
                </list_item>
                <list_item>
                    <paragraph>远程检查器。</paragraph>
                    <block_quote>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>在关闭正在运行的项目后，更改不会被反映在编辑器中，也不会被保留。</paragraph>
                            </list_item>
                        </bullet_list>
                    </block_quote>
                </list_item>
                <list_item>
                    <paragraph>实时摄像机复制。</paragraph>
                    <block_quote>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>移动编辑器中的摄像头，并在正在运行的项目中查看结果。</paragraph>
                            </list_item>
                        </bullet_list>
                    </block_quote>
                </list_item>
                <list_item>
                    <paragraph>内置离线类参考文档。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>使用由社区贡献的支持数十种语言的编辑器。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><strong>插件：</strong></paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>可以从<reference internal="True" refuri="../community/asset_library/what_is_assetlib#doc-what-is-assetlib"><inline classes="std std-ref">资产库</inline></reference>下载编辑器插件，扩展编辑器的功能。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>使用 GDScript <reference internal="True" refuri="../tutorials/plugins/editor/making_plugins#doc-making-plugins"><inline classes="std std-ref">自己创建插件</inline></reference>，添加新功能或者加速你的工作流。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>在项目管理器中，<reference internal="True" refuri="../community/asset_library/using_assetlib#doc-using-assetlib-editor"><inline classes="std std-ref">从资产库下载项目</inline></reference>并直接导入。</paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section ids="rendering" names="rendering 渲染">
            <title>渲染</title>
            <paragraph>提供 3 种渲染<emphasis>方法</emphasis>（运行在 2 种渲染<emphasis>驱动</emphasis>上）：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><strong>Forward+</strong>，在Vulkan 1.0 以上运行（具备可选的 Vulkan 1.1和 1.2 功能）。仅适用于桌面平台的最先进图形后端。在桌面平台上默认使用。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><strong>Forward Mobile</strong>，在 Vulkan 1.0 以上运行（带有可选的 Vulkan 1.1 和 1.2 功能）。该功能较少，但渲染简单场景更快。适用于移动和桌面平台。在移动平台上默认使用。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><strong>Compatibility（兼容）</strong>，在 OpenGL 3.3、OpenGL ES 3.0 和 WebGL 2.0 以上运行。最低级的图形后端，适合低端桌面和移动平台。在 Web 平台上默认使用。</paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section ids="d-graphics" names="2d\ graphics 2d\ 图形">
            <title>2D 图形</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>精灵、多边形和线条渲染。</paragraph>
                    <block_quote>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>用于绘制线和多边形的高级工具，例如<reference internal="True" refuri="../classes/class_polygon2d#class-polygon2d"><inline classes="std std-ref">Polygon2D</inline></reference>和<reference internal="True" refuri="../classes/class_line2d#class-line2d"><inline classes="std std-ref">Line2D</inline></reference>，支持纹理。</paragraph>
                            </list_item>
                        </bullet_list>
                    </block_quote>
                </list_item>
                <list_item>
                    <paragraph>AnimatedSprite2D 辅助制作动画精灵。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>视差层。</paragraph>
                    <block_quote>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>伪 3D 支持，可在编辑器中进行预览。</paragraph>
                            </list_item>
                        </bullet_list>
                    </block_quote>
                </list_item>
                <list_item>
                    <paragraph>带有法线贴图和镜面反射贴图的 <reference internal="True" refuri="../tutorials/2d/2d_lights_and_shadows#doc-2d-lights-and-shadows"><inline classes="std std-ref">2D 光照</inline></reference>。</paragraph>
                    <block_quote>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>2D 点光源（全向灯/聚光灯）和平行光源。</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>硬阴影或软阴影（可根据每个光源进行调整）。</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>自定义着色器可以访问一个基于 <reference internal="True" refuri="../classes/class_lightoccluder2d#class-lightoccluder2d"><inline classes="std std-ref">LightOccluder2D</inline></reference> 节点的，由实时 <abbreviation explanation="Signed Distance Field，带符号距离场">SDF</abbreviation> 表示的二维场景，它可以用于改进二维照明效果，包括二维全局光源。</paragraph>
                            </list_item>
                        </bullet_list>
                    </block_quote>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/ui/gui_using_fonts#doc-gui-using-fonts"><inline classes="std std-ref">字体渲染</inline></reference>使用位图，光栅化使用 FreeType 或多通道有符号距离场（MSDF）。</paragraph>
                    <block_quote>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>位图字体可以使用 BMFont 等工具导出，也可以从图像导入（仅适用于等宽字体）。</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>动态字体支持单色字体以及彩色字体（例如用于表情符号）。支持的格式有 TTF、OTF、WOFF1 和 WOFF2。</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>动态字体支持具有可调整宽度和颜色的可选字体轮廓。</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>动态字体支持可变字体和 OpenType 功能，包括连字（ligatures）。</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>当字体文件缺少粗体和斜体样式时，动态字体支持模拟这些样式。</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>动态字体支持超采样, 以在更高的分辨率下保持字体的清晰度.</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>动态字体支持亚像素定位（subpixel positioning），使字体在小尺寸下更清晰。</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>动态字体支持 LCD 亚像素优化，使字体在小尺寸下更加清晰。</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>带符号距离场字体可以在任何分辨率下进行缩放，而无需重新光栅化。与单色带符号距离场字体相比，利用多通道可使带符号距离场字体更好地缩放至更小尺寸。</paragraph>
                            </list_item>
                        </bullet_list>
                    </block_quote>
                </list_item>
                <list_item>
                    <paragraph>基于 GPU 的 <reference internal="True" refuri="../tutorials/2d/particle_systems_2d#doc-particle-systems-2d"><inline classes="std std-ref">粒子</inline></reference>，支持 <reference internal="True" refuri="../tutorials/shaders/shader_reference/particle_shader#doc-particle-shader"><inline classes="std std-ref">自定义粒子着色器</inline></reference>。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>基于 CPU 的粒子。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>为了更好的辉光功能，可选择 <reference internal="True" refuri="../tutorials/3d/environment_and_post_processing#doc-environment-and-post-processing-using-glow-in-2d"><inline classes="std std-ref">2D HDR 渲染</inline></reference> 。</paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section ids="d-tools" names="2d\ tools 2d\ 工具">
            <title>2D 工具</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/2d/using_tilemaps#doc-using-tilemaps"><inline classes="std std-ref">TileMap</inline></reference> 用于由 2D 图块构建的关卡设计。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>内置平滑和拖动边距的 2D 相机.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>用于代表 2D 空间中的一条路径的 Path2D 节点。</paragraph>
                    <block_quote>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>可以在编辑器中绘制或者通过程序生成。</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>用于使节点跟随一条Path2D的PathFollow2D 节点.</paragraph>
                            </list_item>
                        </bullet_list>
                    </block_quote>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../classes/class_geometry2d#class-geometry2d"><inline classes="std std-ref">2D 几何辅助类</inline></reference>。</paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section ids="d-physics" names="2d\ physics 2d\ 物理">
            <title>2D 物理</title>
            <paragraph><strong>物理体：</strong></paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>静态物体。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>动画体（用于仅通过脚本或动画移动的物体，如门和平台）。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>刚体。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>角色体。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>关节。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>用以检测实体进入或离开的区域.</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><strong>碰撞检测:</strong></paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>内置形状：线条，框体，圆圈，胶囊，世界边界（无限平面）。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>碰撞多边形（可以人工绘制，或者在编辑器中根据精灵生成）。</paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section ids="id1" names="3d\ graphics 3d\ 图形">
            <title>3D 图形</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>使用 sRGB 进行 HDR 渲染。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>透视、正交以及视锥偏移摄像机。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>在使用 Forward+ 后端时，可利用深度预处理（depth prepass）降低过度绘制成本从而提高复杂场景的性能。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/3d/variable_rate_shading#doc-variable-rate-shading"><inline classes="std std-ref">可变速率着色</inline></reference> 可在支持的 GPU 并且 Forward+ 和 Forward Mobile 模式下使用。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><strong>基于物理的渲染（内置材质特性）：</strong></paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>遵循迪士尼 PBR 模型。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>支持 Burley、Lambert、Lambert Wrap（半 Lambert）、Toon 漫反射着色模式。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>支持 Schlick-GGX、Toon 和 Disabled 镜面反射着色模式。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>使用粗糙度金属度工作流，支持 ORM 纹理。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>使用地平线镜面反射遮蔽（Filament 模型）提升材质外观。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>法线贴图。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>具有基于距离的自动细节级别的视差/浮雕贴图。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>反照率及法线贴图的细节贴图。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>次表面散射和透射率。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>支持材质粗糙度的屏幕空间折射（达到模糊折射的效果）。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>邻近淡出（软粒子）和距离淡出。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>远离时淡出可以使用透明度混合（alpha blending）或颜色抖动（dithering）避免穿过透明管线。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>抖动可以根据每个像素或每个对象来确定。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><strong>实时光照：</strong></paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>全向光（日光/月光）。每个场景最多 4 个。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>全向光。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>可调整锥角和衰减的聚光。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>镜面反射、间接光和体积雾能量可以根据每个光源独立进行调整。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>可调节的灯光 "大小" 来帮助虚拟区域打光（也会使阴影更模糊）。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>可以选择距离渐变系统（distance fade system）来渐变远处的灯光及其阴影，提高性能。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>当使用 Forward+ 后端（桌面上的默认设置）时，灯光将使用集群前向优化进行渲染，以降低其单独成本。集群渲染还取消了对网格上可以使用的灯光数量的任何限制。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>使用 Forward 移动后端时，每个网格资源最多可以显示 8 个泛光灯和 8 个聚光灯。如果需要，可以使用烘焙照明来克服这一限制。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><strong>阴影贴图：</strong></paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><emphasis>DirectionLight：</emphasis>正交（最快）、二分和四分 PSSM。支持在分割之间做混合。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><emphasis>OmniLight：</emphasis>双抛物面（快速）或立方映射（较慢但更精确）。支持全景形式的彩色投影纹理。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><emphasis>SpotLight：</emphasis>单个材质。支持彩色投影纹理。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>要缓解可见的阴影失真和阴影悬浮的情况，可以调整阴影的法线偏移量偏置以及阴影压平。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>类似 <abbreviation explanation="Percentage Closer Soft Shadows">PCSS</abbreviation> 的阴影模糊是基于光线大小和与阴影投射表面的距离。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>可以单独调整各个光源的阴影模糊。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><strong>具有间接照明的全局照明：</strong></paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/3d/global_illumination/using_lightmap_gi#doc-using-lightmap-gi"><inline classes="std std-ref">烘焙光照贴图</inline></reference> （快速，但无法在运行时更新）。</paragraph>
                    <block_quote>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>支持仅烘焙间接光照，或者同时烘焙直接和间接光照。可以给各个光源单独设置烘焙模式，从而实现混合光照烘焙。</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>支持动态对象照明采用自动和手动布置探针。</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>可选支持基于球谐函数的平行光和粗糙反射。</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>光照贴图在 GPU 上使用计算着色器烘焙（与 CPU 计算光照贴图相比速度更快）。烘焙只能在编辑器中进行，不能在导出的项目中进行。</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>支持使用 JNLM 进行基于 GPU 的 <reference internal="True" refuri="../tutorials/3d/global_illumination/using_lightmap_gi#doc-using-lightmap-gi-denoising"><inline classes="std std-ref">降噪</inline></reference>，或使用 OIDN 进行基于 CPU/GPU 的降噪。</paragraph>
                            </list_item>
                        </bullet_list>
                    </block_quote>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/3d/global_illumination/using_voxel_gi#doc-using-voxel-gi"><inline classes="std std-ref">基于体素的 GI 探针</inline></reference>。支持动态灯光<emphasis>和</emphasis>动态遮挡器，同时还支持反射。需要执行快速烘焙步骤，该步骤可在编辑器中或运行时（包括从导出的项目中）执行。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/3d/global_illumination/using_sdfgi#doc-using-sdfgi"><inline classes="std std-ref">有符号距离场 GI</inline></reference> 是为大型开放世界设计的一种全局照明技术。支持动态光照，不支持动态遮挡器。可以支持反射效果。不需要进行烘焙操作。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/3d/environment_and_post_processing#doc-environment-and-post-processing-ssil"><inline classes="std std-ref">屏幕空间间接光照（SSIL）</inline></reference>，可以选择半分辨率或全分辨率。它完全实时，支持任何类型的自发光光源（包括贴花）。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>VoxelGI 和 SDFGI 使用延迟渲染通道，可以在半分辨率下渲染全局光照，以提高性能（同时还支持 MSAA 抗锯齿）。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><strong>反射：</strong></paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>基于体素的反射（使用 GI 探针时）和基于 SDF 的反射（使用符号距离场 GI 时）。基于体素的反射在透明表面上可见，而基于粗糙 SDF 的反射在透明表面上可见。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>使用 ReflectionProbe 实现较快的烘焙反射或较慢的实时反射。可以选择启用视差盒校正。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>支持材料粗糙度的屏幕空间反射。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>可以混用反射技术，以获得更高的准确性或可扩展性。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>使用 Forward+ 后端时（桌面平台的默认设置），反射探针会使用集群前向优化来降低它们的单独开销。集群渲染也消除了在一个网格上使用的反射探针的数量限制。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>使用Forward Mobile后端时，每个网格资源最多可以显示8个反射探针。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><strong>贴花：</strong></paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/3d/using_decals#doc-using-decals"><inline classes="std std-ref">支持漫反射</inline></reference>，自发光， <abbreviation explanation="遮挡度粗糙度金属度">ORM</abbreviation> 和法线贴图。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>纹理通道可以平滑地叠加在底层材料之上，并支持普通/纯 ORM 贴花。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>支持根据入射角度来淡出贴花的法线淡出效果。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>不依赖实时网格生成。这意味着贴花可用于复杂的蒙皮网格，即使贴花每帧都在移动，也不会影响性能。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>支持最近邻、双线性、三线性、各向异性纹理过滤（全局设置）。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Optional distance fade system to fade distant decals, improving performance.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>使用 Forward+ 后端时（桌面平台的默认设置），贴花会使用集群前向优化来降低它们的单独开销。集群渲染也消除了在一个网格上使用的贴花的数量限制。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>使用Forward Mobile后端时，每个网格资源最多可以显示8个贴花。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><strong>天空:</strong></paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>全景天空（使用 HDRI）。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>程序天空和基于物理的天空，用于响应场景中的方向光。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>支持 <reference internal="True" refuri="../tutorials/shaders/shader_reference/sky_shader#doc-sky-shader"><inline classes="std std-ref">自定义天空着色器</inline></reference> 可以进行动画处理。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>取决于所选的质量设置，用于环境光和镜面反射光的辐射图可以实时更新。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><strong>雾:</strong></paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>指数深度雾。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>指数高度雾。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>支持根据天空颜色自动调整雾的颜色（使用大气透视）。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>支持雾中的太阳散射。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>支持控制雾的渲染对天空的影响程度，对传统的雾和体积雾进行单独控制。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>支持使特定材质忽略雾。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><strong>体积雾：</strong></paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>对光影做出反应的全局 <reference internal="True" refuri="../tutorials/3d/volumetric_fog#doc-volumetric-fog"><inline classes="std std-ref">体积雾</inline></reference>。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>在使用VoxelGI或SDFGI时体积雾可以受间接光影响。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>可以放置雾体积节点以向特定区域添加雾（或从特定区域去除雾）。支持的形状包括长方体、椭圆形、圆锥体、圆柱体和基于 3D 纹理的密度图。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>每个雾体积都可以有自己的自定义着色器。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>可与传统雾一起使用。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><strong>粒子：</strong></paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>基于 GPU 的粒子，支持子发射器（2D + 3D）、尾迹（2D + 3D）、吸引器（仅 3D）和碰撞（2D + 3D）。</paragraph>
                    <bullet_list bullet="-">
                        <list_item>
                            <paragraph>支持 3D 粒子吸引器形状：长方体、球体和 3D 向量场。</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>支持 3D 粒子碰撞形状：长方体、球体、烘焙带符号距离场和实时高度图（适用于开放世界天气效果）。</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>2D 粒子碰撞是使用基于场景中的 <reference internal="True" refuri="../classes/class_lightoccluder2d#class-lightoccluder2d"><inline classes="std std-ref">LightOccluder2D</inline></reference> 节点实时生成的带符号距离场来处理的。</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>尾迹可以使用内置的带状尾迹和管状尾迹网格，也可以使用带有骨架的自定义网格。</paragraph>
                        </list_item>
                        <list_item>
                            <paragraph>支持手动发射的自定义粒子着色器。</paragraph>
                        </list_item>
                    </bullet_list>
                </list_item>
                <list_item>
                    <paragraph>基于 CPU 的粒子。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><strong>后期处理：</strong></paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>色调映射(线性, Reinhard, Filmic, ACES).</paragraph>
                </list_item>
                <list_item>
                    <paragraph>根据视口亮度自动调整曝光（或使用手动曝光覆盖）。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>可以通过景深的远近调节对焦外散斑的模拟（方框、六边形、圆形）。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>半分辨率或全分辨率的屏幕空间环境光遮蔽（SSAO）。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>辉光/泛光，可以使用可选的双三次放大和多种混合模式：滤色（Screen）、柔光（Soft Light）、添加（Add）、替换（Replace）、融合（Mix）。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>辉光可以使用彩色污渍贴图纹理，实现镜头脏污效果。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>辉光可 <reference internal="True" refuri="../tutorials/3d/environment_and_post_processing#doc-environment-and-post-processing-using-glow-to-blur-the-screen"><inline classes="std std-ref">用作屏幕空间模糊效果</inline></reference>。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>使用一维渐变或 3D LUT 纹理进行颜色校正。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>可减少镜面反射锯齿的影响的粗糙度限幅器。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>亮度, 对比度和饱和度调整.</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><strong>纹理过滤：</strong></paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>最近邻、双线性、三线性、各向异性过滤。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>过滤项是基于每次使用定义的，而不是基于每个纹理。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><strong>纹理压缩：</strong></paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>Basis Universal（速度较慢，但文件较小）。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>用于高质量压缩的 BPTC（macOS 不支持）。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>ETC2（macOS 不支持）。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>S3TC（不支持网页和移动平台）。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><strong>抗锯齿：</strong></paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>时间<reference internal="True" refuri="../tutorials/3d/3d_antialiasing#doc-3d-antialiasing"><inline classes="std std-ref">抗锯齿</inline></reference>（TAA）。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>AMD FidelityFX Super Resolution 2.2 <reference internal="True" refuri="../tutorials/3d/3d_antialiasing#doc-3d-antialiasing"><inline classes="std std-ref">antialiasing</inline></reference> (FSR2) 可在原始分辨率下用作高质量的时间抗锯齿。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>多重采样抗锯齿（ MSAA ），同时适用于 <reference internal="True" refuri="../tutorials/2d/2d_antialiasing#doc-2d-antialiasing"><inline classes="std std-ref">2D 抗锯齿</inline></reference> 和 <reference internal="True" refuri="../tutorials/3d/3d_antialiasing#doc-3d-antialiasing"><inline classes="std std-ref">3D 抗锯齿</inline></reference> 。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>快速近似抗锯齿（FXAA）。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>使用双线性三维缩放和高于 1.0 的三维分辨率比例进行超采样抗锯齿 (SSAA)。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>在每种材质基础上的 Alpha 抗锯齿、基于多重采样（MSAA）的 Alpha 覆盖（Alpha-To-Coverage）和 Alpha 哈希。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><strong>分辨率缩放：</strong></paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>支持 <reference internal="True" refuri="../tutorials/3d/resolution_scaling#doc-resolution-scaling"><inline classes="std std-ref">以较低分辨率渲染 3D</inline></reference>，同时保持原始比例的 2D 渲染。 这可用于提高低端系统的性能或改善高端系统的视觉效果。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>分辨率缩放使用了双线性过滤、 AMD FidelityFX Super Resolution 1.0 （FSR1）和 AMD FidelityFX Super Resolution 2.2 （FSR2）。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>多级渐远纹理 LOD 偏置会自动调整，以提高较低分辨率比例下的质量。也可以通过手动偏移进行修改。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>上述效果中的大多数都可以进行调整，从而提升性能、提高质量。这在 <reference internal="True" refuri="../tutorials/animation/creating_movies#doc-creating-movies"><inline classes="std std-ref">使用 Godot 进行脱机渲染</inline></reference>时非常有用。</paragraph>
        </section>
        <section ids="id2" names="3d\ tools 3d\ 工具">
            <title>3D 工具</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>内置网格：立方体、圆柱体/圆锥体、（半）球体、棱柱体、平面、四边形、圆环面、条带、管状。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/3d/using_gridmaps#doc-using-gridmaps"><inline classes="std std-ref">GridMaps</inline></reference> 用于由 3D 图块构建的关卡设计。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/3d/csg_tools#doc-csg-tools"><inline classes="std std-ref">构造实体几何</inline></reference>（用于原型制作）。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/3d/procedural_geometry/index#doc-procedural-geometry"><inline classes="std std-ref">程序式几何体生成</inline></reference>工具。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Path3D 节点表示 3D 空间中的路径。</paragraph>
                    <block_quote>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>可以在编辑器中绘制或者通过程序生成。</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>PathFollow3D 节点使节点沿 Path3D 运动。</paragraph>
                            </list_item>
                        </bullet_list>
                    </block_quote>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../classes/class_geometry3d#class-geometry3d"><inline classes="std std-ref">3D 几何体辅助类</inline></reference>。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>支持在编辑器中或在已经被导出的项目的运行时将当前场景导出为 glTF 2.0 文件。</paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section ids="id3" names="3d\ physics 3d\ 物理学">
            <title>3D 物理学</title>
            <paragraph><strong>物理体：</strong></paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>静态物体。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>动画体（用于仅通过脚本或动画移动的物体，如门和平台）。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>刚体。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>角色体。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>车身（用于街机物理，而非模拟）。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>关节。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>柔体。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>布娃娃。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>用以检测实体进入或离开的区域.</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><strong>碰撞检测:</strong></paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>内置形状：立方体、球体、胶囊体、圆柱体、世界边界（无限平面）。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>从编辑器中为任何网格生成三角形碰撞形状。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>从编辑器中为任何网格生成一个或多个凸碰撞形状。</paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section ids="shaders" names="shaders 着色器">
            <title>着色器</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><emphasis>2D：</emphasis>自定义顶点、片段和灯光着色器。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><emphasis>3D：</emphasis>自定义顶点、片段、灯光和天空着色器。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>基于文本的着色器，使用<reference internal="True" refuri="../tutorials/shaders/shader_reference/shading_language#doc-shading-language"><inline classes="std std-ref">由 GLSL 启发的着色器语言</inline></reference>。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>可视化着色器编辑器。</paragraph>
                    <block_quote>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>支持可视化着色器插件。</paragraph>
                            </list_item>
                        </bullet_list>
                    </block_quote>
                </list_item>
            </bullet_list>
        </section>
        <section ids="scripting" names="scripting 编写脚本">
            <title>编写脚本</title>
            <paragraph><strong>常规:</strong></paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>具有脚本扩展节点的面向对象设计模式.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>用于脚本之间通信的信号和组.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>支持<reference internal="True" refuri="../tutorials/scripting/cross_language_scripting#doc-cross-language-scripting"><inline classes="std std-ref">跨语言脚本编程</inline></reference>。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>多种二维、三维以及四维线性代数数据类型，比如向量和变换。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><reference internal="True" refuri="../tutorials/scripting/gdscript/index#toc-learn-scripting-gdscript"><inline classes="std std-ref">GDScript:</inline></reference></paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>带 <reference internal="True" refuri="../tutorials/scripting/gdscript/static_typing#doc-gdscript-static-typing"><inline classes="std std-ref">可选静态类型</inline></reference>的<reference internal="True" refuri="../tutorials/scripting/gdscript/gdscript_basics#doc-gdscript"><inline classes="std std-ref">高级解释语言</inline></reference>。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>语法的灵感来自 Python。然而 GDScript <strong>并不</strong>基于 Python。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>GitHub 上提供了语法高亮显示。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/performance/using_multiple_threads#doc-using-multiple-threads"><inline classes="std std-ref">使用线程</inline></reference>执行异步操作或使用多个处理器内核。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><reference internal="True" refuri="../tutorials/scripting/c_sharp/index#toc-learn-scripting-c"><inline classes="std std-ref">C#:</inline></reference></paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>打包成一个单独的二进制文件，以保持文件大小和依赖关系。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>支持.NET 6 及更高版本。</paragraph>
                    <block_quote>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>完全支持C#10.0语法和功能.</paragraph>
                            </list_item>
                        </bullet_list>
                    </block_quote>
                </list_item>
                <list_item>
                    <paragraph>支持 Windows、Linux 和 macOS。从 4.2 开始，还提供对 Android 和 iOS 的实验性支持（需要适用于 Android 的 .NET 7.0 项目和适用于 iOS 的 .NET 8.0 项目）。</paragraph>
                    <block_quote>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>在 Android 平台上，仅支持部分架构： <literal>arm64</literal> 和 <literal>x64</literal> 。</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>在 iOS 平台上，仅支持某部分架构： <literal>arm64</literal> 。</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>目前不支持 Web 平台。要在该平台上使用 C # ，请考虑改用 Godot 3。</paragraph>
                            </list_item>
                        </bullet_list>
                    </block_quote>
                </list_item>
                <list_item>
                    <paragraph>建议使用外部编辑器以从IDE功能中获益.</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><strong>GDExtension（C、C++、Rust、D……）：</strong></paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>在需要时, 可以链接到本机库以获得更高的性能和第三方集成.</paragraph>
                    <block_quote>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>对于脚本游戏逻辑, 如果性能足够, 建议使用 GDScript 或 C#.</paragraph>
                            </list_item>
                        </bullet_list>
                    </block_quote>
                </list_item>
                <list_item>
                    <paragraph>官方对 <reference name="C" refuri="https://github.com/godotengine/godot-headers">C</reference> 和 <reference name="C++" refuri="https://github.com/godotengine/godot-cpp">C++</reference> 的 GDExtension 绑定。</paragraph>
                    <block_quote>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>使用任何你想要的构建系统和语言功能.</paragraph>
                            </list_item>
                        </bullet_list>
                    </block_quote>
                </list_item>
                <list_item>
                    <paragraph>社区积极开发对 <reference name="D" refuri="https://github.com/godot-dlang/godot-dlang">D</reference>、<reference name="Haxe" refuri="https://hxgodot.github.io/">Haxe</reference>、<reference name="Swift" refuri="https://github.com/migueldeicaza/SwiftGodot">Swift</reference> 和 <reference name="Rust" refuri="https://github.com/godot-rust/gdextension">Rust</reference> 的 GDExtension 绑定（其中一些绑定可能是实验性的，不适合生产）。</paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section ids="audio" names="audio 音频">
            <title>音频</title>
            <paragraph><strong>特性：</strong></paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>单声道、立体声、5.1 和 7.1 输出。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>2D 和 3D 的非定位和定位播放。</paragraph>
                    <block_quote>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>选择 2D 或 3D 的多普勒效应。</paragraph>
                            </list_item>
                        </bullet_list>
                    </block_quote>
                </list_item>
                <list_item>
                    <paragraph>支持重路由 <reference internal="True" refuri="../tutorials/audio/audio_buses#doc-audio-buses"><inline classes="std std-ref">音频总线</inline></reference> 以及大量其它效果.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>支持复调（使用单个 AudioStreamPlayer 节点播放多个声音）。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>支持随机音量和音高。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>支持实时音高缩放。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>支持顺序 / 随机采样，包括在随机采样时防止重复。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>Listener2D 和 Listener3D 节点从不同于摄像机的位置进行侦听。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>支持<reference internal="True" refuri="../classes/class_audiostreamgenerator#class-audiostreamgenerator"><inline classes="std std-ref">程序式音频生成</inline></reference>。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>录制麦克风的音频输入。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>MIDI 输入.</paragraph>
                    <block_quote>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>尚不支持MIDI输出.</paragraph>
                            </list_item>
                        </bullet_list>
                    </block_quote>
                </list_item>
            </bullet_list>
            <paragraph><strong>使用的 API：</strong></paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><emphasis>Windows：</emphasis> WASAPI。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><emphasis>macOS：</emphasis> CoreAudio。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><emphasis>Linux：</emphasis> PulseAudio 或 ALSA。</paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section ids="import" names="import 导入">
            <title>导入</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>支持<reference internal="True" refuri="../tutorials/plugins/editor/import_plugins#doc-import-plugins"><inline classes="std std-ref">自定义导入插件</inline></reference>。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><strong>格式：</strong></paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><emphasis>图片：</emphasis> 请参阅 <reference internal="True" refuri="../tutorials/assets_pipeline/importing_images#doc-importing-images"><inline classes="std std-ref">导入图像</inline></reference> 。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><emphasis>音频：</emphasis></paragraph>
                    <block_quote>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>WAV，可选 IMA-ADPCM 压缩。</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>Ogg Vorbis。</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>MP3。</paragraph>
                            </list_item>
                        </bullet_list>
                    </block_quote>
                </list_item>
                <list_item>
                    <paragraph><emphasis>3D 场景：</emphasis> 请参阅 <reference internal="True" refuri="../tutorials/assets_pipeline/importing_3d_scenes/index#doc-importing-3d-scenes"><inline classes="std std-ref">导入 3D 场景</inline></reference> 。</paragraph>
                    <block_quote>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>glTF 2.0 <emphasis>（推荐）</emphasis> 。</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph><literal>.blend</literal>（隐式调用 Blender 的 glTF 导出功能）。</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>FBX （通过显式调用 <reference name="FBX2glTF" refuri="https://github.com/godotengine/FBX2glTF">FBX2glTF</reference> ）。</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>Collada（.dae）。</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>Wavefront OBJ（仅静态场景，可直接被加载为网格或 3D 场景）。</paragraph>
                            </list_item>
                        </bullet_list>
                    </block_quote>
                </list_item>
                <list_item>
                    <paragraph>支持在运行时加载 glTF 2.0 场景（包括已经导出的项目）。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>在导入时使用 <reference name="Mikktspace" refuri="http://www.mikktspace.com/">Mikktspace</reference> 为 3D 网格生成切线，保证与 Blender 等其他 3D 应用的一致性。</paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section ids="input" names="input 输入">
            <title>输入</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>该 <reference internal="True" refuri="../tutorials/inputs/input_examples#doc-input-examples"><inline classes="std std-ref">输入映射系统</inline></reference>使用硬编码的输入事件, 也可以使用可重定向的输入动作。</paragraph>
                    <block_quote>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>坐标轴参数可以映射到两个不同的操作上, 这些操作可以配置死区.</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>使用相同的代码支持键盘和手柄操作.</paragraph>
                            </list_item>
                        </bullet_list>
                    </block_quote>
                </list_item>
                <list_item>
                    <paragraph>键盘输入。</paragraph>
                    <block_quote>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>按键可以被映射到“物理”模式，该模式下按键行为和键盘布局无关。</paragraph>
                            </list_item>
                        </bullet_list>
                    </block_quote>
                </list_item>
                <list_item>
                    <paragraph>鼠标输入。</paragraph>
                    <block_quote>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>可以将鼠标光标配置为可见、隐藏、捕获，或者将其限制在窗口范围内。</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>捕获输入时，在 Windows 和 Linux 平台会使用原始输入，回避操作系统的鼠标加速度设置。</paragraph>
                            </list_item>
                        </bullet_list>
                    </block_quote>
                </list_item>
                <list_item>
                    <paragraph>手柄输入（最多同时支持 8 个控制器）。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>支持带压感的绘图笔和平板输入.</paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section ids="navigation" names="navigation 导航">
            <title>导航</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>A* 算法在 <reference internal="True" refuri="../classes/class_astar2d#class-astar2d"><inline classes="std std-ref">2D</inline></reference> 和 <reference internal="True" refuri="../classes/class_astar3d#class-astar3d"><inline classes="std std-ref">3D</inline></reference> 里。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>具有动态避障功能的导航网格在 <reference internal="True" refuri="../tutorials/navigation/navigation_introduction_2d#doc-navigation-overview-2d"><inline classes="std std-ref">2D</inline></reference> 和 <reference internal="True" refuri="../tutorials/navigation/navigation_introduction_3d#doc-navigation-overview-3d"><inline classes="std std-ref">3D</inline></reference> 里。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>在编辑器内或运行时生成导航网格（包括导出的项目）。</paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section ids="networking" names="networking 网络">
            <title>网络</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>使用 <reference internal="True" refuri="../classes/class_streampeer#class-streampeer"><inline classes="std std-ref">StreamPeer</inline></reference> 和 <reference internal="True" refuri="../classes/class_tcpserver#class-tcpserver"><inline classes="std std-ref">TCPServer</inline></reference> 开发底层TCP网络通信.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>使用 <reference internal="True" refuri="../classes/class_packetpeer#class-packetpeer"><inline classes="std std-ref">PacketPeer</inline></reference> 和 <reference internal="True" refuri="../classes/class_udpserver#class-udpserver"><inline classes="std std-ref">UDPServer</inline></reference> 开发底层UDP网络通信.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>使用 <reference internal="True" refuri="../classes/class_httpclient#class-httpclient"><inline classes="std std-ref">HTTPClient</inline></reference> 进行低阶 HTTP 请求。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>使用 <reference internal="True" refuri="../classes/class_httprequest#class-httprequest"><inline classes="std std-ref">HTTPRequest</inline></reference> 进行高阶 HTTP 请求。</paragraph>
                    <block_quote>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>使用打包的证书相关工具, 支持开箱即用的HTTPS功能.</paragraph>
                            </list_item>
                        </bullet_list>
                    </block_quote>
                </list_item>
                <list_item>
                    <paragraph>使用UDP和ENet的 <reference internal="True" refuri="../tutorials/networking/high_level_multiplayer#doc-high-level-multiplayer"><inline classes="std std-ref">高级联机</inline></reference>API.</paragraph>
                    <block_quote>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>使用远程过程调用(RPCS)实现的自动同步复制功能.</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>支持不可靠, 可靠和有序传输模型.</paragraph>
                            </list_item>
                        </bullet_list>
                    </block_quote>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/networking/websocket#doc-websocket"><inline classes="std std-ref">WebSocket</inline></reference> 客户端和服务器，全平台可用。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/networking/webrtc#doc-webrtc"><inline classes="std std-ref">WebRTC</inline></reference> 客户端和服务器，全平台可用。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>当在NAT后部署服务器时, 支持使用 <reference internal="True" refuri="../classes/class_upnp#class-upnp"><inline classes="std std-ref">UPnP</inline></reference>来避免对转发端口的需求.</paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section ids="internationalization" names="internationalization 国际化">
            <title>国际化</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>对包含emoji的Unicode完整支持.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>使用 <reference internal="True" refuri="../tutorials/i18n/internationalizing_games#doc-internationalizing-games"><inline classes="std std-ref">CSV</inline></reference> 或 <reference internal="True" refuri="../tutorials/i18n/localization_using_gettext#doc-localization-using-gettext"><inline classes="std std-ref">gettext</inline></reference> 存储本地化字符串.</paragraph>
                    <bullet_list bullet="-">
                        <list_item>
                            <paragraph>支持从编辑器中生成 gettext POT 和 PO 文件。</paragraph>
                        </list_item>
                    </bullet_list>
                </list_item>
                <list_item>
                    <paragraph>在你的项目中自动在GUI元素中或通过使用 <literal>tr()</literal> 函数使用本地化的字符串.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>当使用 gettext 翻译时，支持多元化和翻译上下文。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>支持 <reference internal="True" refuri="../tutorials/i18n/internationalizing_games#doc-internationalizing-games-bidi"><inline classes="std std-ref">双向排版</inline></reference> ，文本整形和 OpenType 本地化表单。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>用于从右到左区域设置的自动UI镜像。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>支持伪本地化，以测试你的项目对 i18n 的友好性。</paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section ids="windowing-and-os-integration" names="windowing\ and\ os\ integration 窗口功能与操作系统整合">
            <title>窗口功能与操作系统整合</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>在单个进程中生成多个独立窗口。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>移动, 调整大小, 最小化和最大化项目产生的窗口。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>更改窗口标题和图标.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>吸引注意（在大多数平台上表现为标题栏闪烁）。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>全屏模式。</paragraph>
                    <block_quote>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>在 Windows 上，默认情况下使用无边框全屏进行快速切换，但也可以选择使用独占全屏来减少输入滞后。</paragraph>
                            </list_item>
                        </bullet_list>
                    </block_quote>
                </list_item>
                <list_item>
                    <paragraph>无边框窗口（全屏或非全屏）。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>窗口置顶功能。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>macOS上的全局菜单整合.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>以阻塞或非阻塞方式执行命令（包括运行同一项目的多个实例）。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>使用默认或自定义(已注册在系统中的)协议处理器打开文件路径或URL.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>解析自定义命令行参数.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>任何 Godot 二进制文件（编辑器或导出的项目）都可以 <reference internal="True" refuri="../tutorials/export/exporting_for_dedicated_servers#doc-exporting-for-dedicated-servers"><inline classes="std std-ref">用作无头服务器</inline></reference> ，方法是用 <literal>--headless</literal> 命令行参数启动它。这允许在没有GPU或显示服务器的情况下运行引擎。</paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section ids="mobile" names="mobile 移动端">
            <title>移动端</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>在 <reference internal="True" refuri="../tutorials/platform/android/android_in_app_purchases#doc-android-in-app-purchases"><inline classes="std std-ref">Android</inline></reference> 或 <reference internal="True" refuri="../tutorials/platform/ios/plugins_for_ios#doc-plugins-for-ios"><inline classes="std std-ref">iOS</inline></reference> 上的应用内购。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>支持第三方广告组件.</paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section ids="xr-support-ar-and-vr" names="xr\ support\ (ar\ and\ vr) xr\ 支持（ar\ 和\ vr）">
            <title>XR 支持（AR 和 VR）</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>开箱即用的 <reference internal="True" refuri="../tutorials/xr/setting_up_xr#doc-setting-up-xr"><inline classes="std std-ref">OpenXR 支持</inline></reference> 。</paragraph>
                    <block_quote>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>包括对流行的桌面 VR 头戴式设备的支持，例如 Valve Index、WMR 头戴式显示器和 Quest over Link。</paragraph>
                            </list_item>
                        </bullet_list>
                    </block_quote>
                </list_item>
                <list_item>
                    <paragraph>通过插件，使用 OpenXR 支持 <reference internal="True" refuri="../tutorials/xr/deploying_to_android#doc-deploying-to-android"><inline classes="std std-ref">基于 Android 的头戴式设备</inline></reference>。</paragraph>
                    <bullet_list bullet="-">
                        <list_item>
                            <paragraph>包括对流行的一体式 VR 头戴设备的支持，例如 Meta Quest 1/2/3 和 Pro、Pico 4、Magic Leap 2 和 Lynx R1。</paragraph>
                        </list_item>
                    </bullet_list>
                </list_item>
                <list_item>
                    <paragraph>通过 XR 插件结构支持的其他设备。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>可以使用各种高级工具包来实现 XR 应用程序所需的常见功能。</paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section ids="gui-system" names="gui\ system gui\ 系统">
            <title>GUI 系统</title>
            <paragraph>Godot 的 GUI 也是使用 Control 节点搭建的，和制作游戏时所使用的节点一致。编辑器 UI 可以通过插件轻松地进行各种扩展。</paragraph>
            <paragraph><strong>节点：</strong></paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>按钮。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>复选框、复选按钮、单选按钮。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>使用 <reference internal="True" refuri="../classes/class_lineedit#class-lineedit"><inline classes="std std-ref">LineEdit</inline></reference>（单行）和 <reference internal="True" refuri="../classes/class_textedit#class-textedit"><inline classes="std std-ref">TextEdit</inline></reference>（多行）进行文本输入。TextEdit 还支持代码编辑功能，例如显示行号和语法高亮。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>使用 <reference internal="True" refuri="../classes/class_popupmenu#class-popupmenu"><inline classes="std std-ref">PopupMenu</inline></reference> 和 <reference internal="True" refuri="../classes/class_optionbutton#class-optionbutton"><inline classes="std std-ref">OptionButton</inline></reference> 实现下拉菜单。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>滚动条。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>标签。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>使用 RichTextLabel 显示 <reference internal="True" refuri="../tutorials/ui/bbcode_in_richtextlabel#doc-bbcode-in-richtextlabel"><inline classes="std std-ref">使用 BBCode 的格式化文本</inline></reference>，支持自定义动画效果。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>树状图（也可用于显示表格）。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>支持 RGB 及 HSV 模式的取色器。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>控件可以旋转和缩放。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><strong>调整大小：</strong></paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>锚点可将固定GUI元素在特定的角落, 边缘, 或者居中.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>容器可根据特定规则自动放置UI元素.</paragraph>
                    <block_quote>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph><reference internal="True" refuri="../classes/class_boxcontainer#class-boxcontainer"><inline classes="std std-ref">堆叠</inline></reference> 布局。</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph><reference internal="True" refuri="../classes/class_gridcontainer#class-gridcontainer"><inline classes="std std-ref">网格</inline></reference> 布局。</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph><reference internal="True" refuri="../classes/class_flowcontainer#class-flowcontainer"><inline classes="std std-ref">流式</inline></reference> 布局（类似于文本自动折行）。</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph><reference internal="True" refuri="../classes/class_margincontainer#class-margincontainer"><inline classes="std std-ref">边距</inline></reference>、<reference internal="True" refuri="../classes/class_centercontainer#class-centercontainer"><inline classes="std std-ref">居中</inline></reference>和<reference internal="True" refuri="../classes/class_aspectratiocontainer#class-aspectratiocontainer"><inline classes="std std-ref">纵横比</inline></reference>布局。</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph><reference internal="True" refuri="../classes/class_splitcontainer#class-splitcontainer"><inline classes="std std-ref">可拖拽分割器</inline></reference> 布局。</paragraph>
                            </list_item>
                        </bullet_list>
                    </block_quote>
                </list_item>
                <list_item>
                    <paragraph>使用 <literal>canvas_items</literal> 或 <literal>viewport</literal> 拉伸模式缩放至 <reference internal="True" refuri="../tutorials/rendering/multiple_resolutions#doc-multiple-resolutions"><inline classes="std std-ref">多种分辨率</inline></reference>。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>使用锚点和 <literal>expand</literal> 等比例缩放，支持任意纵横比。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph><strong>主题：</strong></paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>内置主题编辑器。</paragraph>
                    <block_quote>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>根据当前的编辑器主题设置生成主题。</paragraph>
                            </list_item>
                        </bullet_list>
                    </block_quote>
                </list_item>
                <list_item>
                    <paragraph>使用 <reference internal="True" refuri="../classes/class_styleboxflat#class-styleboxflat"><inline classes="std std-ref">StyleBoxFlat</inline></reference> 进行基于向量的程序式主题设计。</paragraph>
                    <block_quote>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>支持圆角/斜角、阴影、每边框宽度、抗锯齿。</paragraph>
                            </list_item>
                        </bullet_list>
                    </block_quote>
                </list_item>
                <list_item>
                    <paragraph>使用 <reference internal="True" refuri="../classes/class_styleboxtexture#class-styleboxtexture"><inline classes="std std-ref">StyleBoxTexture</inline></reference> 进行基于纹理的主题设计。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>Godot的发行软件包较小, 使其适合替代Electron或Qt之类的框架.</paragraph>
        </section>
        <section ids="animation" names="animation 动画">
            <title>动画</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>正向运动学与反向运动学.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>支持为任何属性制作动画, 可自定义插值.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>支持在动画轨道中调用方法.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>支持在动画轨道中播放声音.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>支持在动画中使用贝塞尔曲线.</paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section ids="file-formats" names="file\ formats 文件格式">
            <title>文件格式</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>场景和资源可保存为 <reference internal="True" refuri="../contributing/development/file_formats/tscn#doc-tscn-file-format"><inline classes="std std-ref">文本</inline></reference> 或二进制格式.</paragraph>
                    <block_quote>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>基于文本的格式易于阅读, 并且对版本控制更友好.</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>二进制格式保存/加载大型场景/资源的速度更快.</paragraph>
                            </list_item>
                        </bullet_list>
                    </block_quote>
                </list_item>
                <list_item>
                    <paragraph>使用 <reference internal="True" refuri="../classes/class_fileaccess#class-fileaccess"><inline classes="std std-ref">FileAccess</inline></reference> 读写文本或二进制文件.</paragraph>
                    <block_quote>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>可选择使用压缩或加密.</paragraph>
                            </list_item>
                        </bullet_list>
                    </block_quote>
                </list_item>
                <list_item>
                    <paragraph>读写 <reference internal="True" refuri="../classes/class_json#class-json"><inline classes="std std-ref">JSON</inline></reference> 文件.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>使用 <reference internal="True" refuri="../classes/class_configfile#class-configfile"><inline classes="std std-ref">ConfigFile</inline></reference> 读写 INI 样式的配置文件.</paragraph>
                    <block_quote>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>可以（反）序列化任何 Godot 数据类型，包括 Vector2/3、Color 等。</paragraph>
                            </list_item>
                        </bullet_list>
                    </block_quote>
                </list_item>
                <list_item>
                    <paragraph>使用 <reference internal="True" refuri="../classes/class_xmlparser#class-xmlparser"><inline classes="std std-ref">XMLParser</inline></reference> 读取 XML 文件。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>无需通过 Godot 的导入系统， 在导出的项目中 <reference internal="True" refuri="../tutorials/io/runtime_file_loading_and_saving#doc-runtime-loading-and-saving"><inline classes="std std-ref">加载和保存图像、音频/视频、字体和 ZIP 存档</inline></reference>。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>将游戏数据打包到 PCK 文件（针对快速搜索优化的自定义格式），ZIP 存档或直接打包到可执行文件中以进行单文件分发。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/export/exporting_pcks#doc-exporting-pcks"><inline classes="std std-ref">导出额外的 PCK 文件</inline></reference>，引擎可以读取这些文件以支持 mod 和 DLC。</paragraph>
                </list_item>
            </bullet_list>
        </section>
        <section ids="miscellaneous" names="miscellaneous 杂项">
            <title>杂项</title>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/animation/playing_videos#doc-playing-videos"><inline classes="std std-ref">视频回放</inline></reference>内置支持 Ogg Theora。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/animation/creating_movies#doc-creating-movies"><inline classes="std std-ref">Movie Maker 模式</inline></reference>可从正在运行的项目中录制视频，并具有同步音频和完美的帧同步。</paragraph>
                </list_item>
                <list_item>
                    <paragraph><reference internal="True" refuri="../tutorials/performance/using_servers#doc-using-servers"><inline classes="std std-ref">对服务器的低级别访问</inline></reference>，能够在必要时绕过场景树的开销。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>使用<reference internal="True" refuri="../tutorials/editor/command_line_tutorial#doc-command-line-tutorial"><inline classes="std std-ref">命令行接口</inline></reference>进行自动化。</paragraph>
                    <block_quote>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>使用持续集成平台导出和部署项目.</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>适用于 Bash、zsh 和 fish 的 <reference name="Shell 补全脚本" refuri="https://github.com/godotengine/godot/tree/master/misc/dist/shell">Shell 补全脚本</reference><target ids="shell" names="shell\ 补全脚本" refuri="https://github.com/godotengine/godot/tree/master/misc/dist/shell"></target>。</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>使用 <reference internal="True" refuri="../classes/class_@globalscope#class-globalscope-method-print-rich"><inline classes="std std-ref">print_rich</inline></reference>将彩色文本打印至所有平台的标准输出。</paragraph>
                            </list_item>
                        </bullet_list>
                    </block_quote>
                </list_item>
                <list_item>
                    <paragraph>支持将 <reference internal="True" refuri="../contributing/development/core_and_modules/custom_modules_in_cpp#doc-custom-modules-in-cpp"><inline classes="std std-ref">C++ 模块</inline></reference> 静态链接到引擎二进制文件中。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>引擎和编辑器以 C++17 编写。</paragraph>
                    <block_quote>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>可使用 GCC、Clang、MSVC 进行<reference internal="True" refuri="../contributing/development/compiling/introduction_to_the_buildsystem#doc-introduction-to-the-buildsystem"><inline classes="std std-ref">编译</inline></reference>。同时支持 MinGW。</paragraph>
                            </list_item>
                            <list_item>
                                <paragraph>对打包者友好。通常情况下，可以使用系统库代替 Godot 提供的库。构建系统不会下载任何东西。构建完全可重现。</paragraph>
                            </list_item>
                        </bullet_list>
                    </block_quote>
                </list_item>
                <list_item>
                    <paragraph>使用宽松的 MIT 许可。</paragraph>
                    <block_quote>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph>开放的开发过程，<reference internal="True" refuri="../contributing/ways_to_contribute#doc-ways-to-contribute"><inline classes="std std-ref">欢迎贡献</inline></reference>。</paragraph>
                            </list_item>
                        </bullet_list>
                    </block_quote>
                </list_item>
            </bullet_list>
            <seealso>
                <paragraph><reference name="Godot 提案库" refuri="https://github.com/godotengine/godot-proposals">Godot 提案库</reference>列出了社区要求的、可能在未来 Godot 版本中实现的功能。</paragraph>
            </seealso>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
