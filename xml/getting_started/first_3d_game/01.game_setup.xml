<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/getting_started/first_3d_game/01.game_setup.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-first-3d-game-game-area"></target>
    <section ids="setting-up-the-game-area doc-first-3d-game-game-area" names="setting\ up\ the\ game\ area 设置游戏区域 doc_first_3d_game_game_area">
        <title>设置游戏区域</title>
        <paragraph>在第一部分中，我们将设置游戏区域。让我们从导入初始资产、设置游戏场景入手。</paragraph>
        <paragraph>我们为这个教程准备了一个带有 3D 模型和音效的 Godot 项目，链接在索引页。如果你还没有下载，可以下载这个压缩包：<reference name="Squash the Creeps 资产" refuri="https://github.com/godotengine/godot-3d-dodge-the-creeps/releases/tag/1.1.0">Squash the Creeps 资产</reference>。</paragraph>
        <paragraph>下载完成之后，请将 .zip 压缩包解压到你的电脑上。打开 Godot 项目管理器，然后点击<emphasis>导入</emphasis>按钮。</paragraph>
        <image candidates="{'*': 'getting_started/first_3d_game/img/01.game_setup/01.import_button.webp'}" uri="getting_started/first_3d_game/img/01.game_setup/01.import_button.webp"></image>
        <paragraph>请在导入弹出框中输入刚才新建的目录 <literal>squash_the_creeps_start/</literal> 的完整路径。你也可以点击右侧的<emphasis>浏览</emphasis>按钮，打开文件浏览器并找到该文件夹所包含的 <literal>project.godot</literal> 文件。</paragraph>
        <image candidates="{'*': 'getting_started/first_3d_game/img/01.game_setup/02.browse_to_project_folder.png'}" uri="getting_started/first_3d_game/img/01.game_setup/02.browse_to_project_folder.png"></image>
        <paragraph>点击<emphasis>导入并编辑</emphasis>在编辑器中打开该项目。</paragraph>
        <image candidates="{'*': 'getting_started/first_3d_game/img/01.game_setup/03.import_and_edit.png'}" uri="getting_started/first_3d_game/img/01.game_setup/03.import_and_edit.png"></image>
        <paragraph>起始项目中包含一个图标和两个文件夹：<literal>art/</literal> 和 <literal>fonts/</literal>。你可以在里面找到游戏中我们会用到的艺术资产和音乐。</paragraph>
        <image candidates="{'*': 'getting_started/first_3d_game/img/01.game_setup/04.start_assets.png'}" uri="getting_started/first_3d_game/img/01.game_setup/04.start_assets.png"></image>
        <paragraph>里面有两个 3D 模型，<literal>player.glb</literal> 和 <literal>mob.glb</literal>，一些模型使用的材质，以及一首音乐。</paragraph>
        <section ids="setting-up-the-playable-area" names="setting\ up\ the\ playable\ area 设置游玩区域">
            <title>设置游玩区域</title>
            <paragraph>我们将以普通的 <reference internal="True" refuri="../../classes/class_node#class-node"><inline classes="std std-ref">Node</inline></reference> 作为其根创建主场景。在<emphasis>场景</emphasis>面板中，单击左上角由“+”图标表示的<emphasis>添加子节点</emphasis>按钮，然后双击 <emphasis>Node</emphasis>。将节点命名为 <literal>Main</literal>。另一种重命名节点的方法是在<emphasis>节点</emphasis>上单击右键，然后选择<emphasis>重命名</emphasis>（或者按 <literal classes="kbd">F2</literal>）。另一种将节点添加到场景中的方法是按 <literal classes="kbd">Ctrl + a</literal> （macOS 上则是按 <literal classes="kbd">Cmd + a</literal>）。</paragraph>
            <image candidates="{'*': 'getting_started/first_3d_game/img/01.game_setup/05.main_node.png'}" uri="getting_started/first_3d_game/img/01.game_setup/05.main_node.png"></image>
            <paragraph>按 <literal classes="kbd">Ctrl + s</literal> 将场景保存为 <literal>main.tscn</literal>（macOS 上则是按 <literal classes="kbd">Cmd + s</literal>）。</paragraph>
            <paragraph>我们先添加一个地板，以防止角色掉落。要创建地板、墙壁或天花板等静态碰撞器，可以使用 <reference internal="True" refuri="../../classes/class_staticbody3d#class-staticbody3d"><inline classes="std std-ref">StaticBody3D</inline></reference> 节点。它们需要 <reference internal="True" refuri="../../classes/class_collisionshape3d#class-collisionshape3d"><inline classes="std std-ref">CollisionShape3D</inline></reference> 子节点来定义碰撞区域。选择 <emphasis>Main</emphasis> 节点后，添加 <reference internal="True" refuri="../../classes/class_staticbody3d#class-staticbody3d"><inline classes="std std-ref">StaticBody3D</inline></reference> 节点，然后添加 <reference internal="True" refuri="../../classes/class_collisionshape3d#class-collisionshape3d"><inline classes="std std-ref">CollisionShape3D</inline></reference>。将 <reference internal="True" refuri="../../classes/class_staticbody3d#class-staticbody3d"><inline classes="std std-ref">StaticBody3D</inline></reference> 重命名为 <literal>Ground</literal> 。</paragraph>
            <image candidates="{'*': 'getting_started/first_3d_game/img/01.game_setup/adding_static_body3D.webp'}" uri="getting_started/first_3d_game/img/01.game_setup/adding_static_body3D.webp"></image>
            <paragraph>你的场景树应该看上去像这样</paragraph>
            <image candidates="{'*': 'getting_started/first_3d_game/img/01.game_setup/06.staticbody_node.png'}" uri="getting_started/first_3d_game/img/01.game_setup/06.staticbody_node.png"></image>
            <paragraph>在 <reference internal="True" refuri="../../classes/class_collisionshape3d#class-collisionshape3d"><inline classes="std std-ref">CollisionShape3D</inline></reference> 旁边会出现一个警告标志，因为我们还没有定义它的形状。如果你点击这个图标，就会弹出一个窗口，为你提供更多信息。</paragraph>
            <image candidates="{'*': 'getting_started/first_3d_game/img/01.game_setup/07.collision_shape_warning.png'}" uri="getting_started/first_3d_game/img/01.game_setup/07.collision_shape_warning.png"></image>
            <paragraph>要创建形状，请选中 <reference internal="True" refuri="../../classes/class_collisionshape3d#class-collisionshape3d"><inline classes="std std-ref">CollisionShape3D</inline></reference>，转到<emphasis>检查器</emphasis>，然后单击 <emphasis>Shape</emphasis>（形状）属性旁边的 <emphasis>&lt;空&gt;</emphasis> 字段。创建一个新的 <emphasis>BoxShape3D</emphasis>。</paragraph>
            <image candidates="{'*': 'getting_started/first_3d_game/img/01.game_setup/08.create_box_shape3D.jpg'}" uri="getting_started/first_3d_game/img/01.game_setup/08.create_box_shape3D.jpg"></image>
            <paragraph>盒子形状非常适合平坦的地面和墙壁。它的厚度使它能够可靠地阻挡甚至快速移动的物体。</paragraph>
            <paragraph>盒子的线框会在视口中出现三个橙色的小点。你可以点击并拖动这些点来交互地编辑形状的范围。我们也可以在检查器中精确设置尺寸。点击 <reference internal="True" refuri="../../classes/class_boxshape3d#class-boxshape3d"><inline classes="std std-ref">BoxShape3D</inline></reference> 来展开资源。将它的 <emphasis>Size</emphasis> 设置为 X 轴上的 <literal>60</literal>，Y 轴的 <literal>2</literal> 和 Z 轴上的 <literal>60</literal>。</paragraph>
            <image candidates="{'*': 'getting_started/first_3d_game/img/01.game_setup/09.box_size.webp'}" uri="getting_started/first_3d_game/img/01.game_setup/09.box_size.webp"></image>
            <paragraph>碰撞形状是不可见的。我们需要添加一个与之配套的视觉层。选择 <literal>Ground</literal> 节点并添加一个 <reference internal="True" refuri="../../classes/class_meshinstance3d#class-meshinstance3d"><inline classes="std std-ref">MeshInstance3D</inline></reference> 作为其子节点。</paragraph>
            <image candidates="{'*': 'getting_started/first_3d_game/img/01.game_setup/10.mesh_instance3d.png'}" uri="getting_started/first_3d_game/img/01.game_setup/10.mesh_instance3d.png"></image>
            <paragraph>在<emphasis>检查器</emphasis>中，点击 <emphasis>Mesh</emphasis> 旁边的字段，创建一个 <reference internal="True" refuri="../../classes/class_boxmesh#class-boxmesh"><inline classes="std std-ref">BoxMesh</inline></reference> 资源，创建一个可见的立方体。</paragraph>
            <image candidates="{'*': 'getting_started/first_3d_game/img/01.game_setup/11.box_mesh.webp'}" uri="getting_started/first_3d_game/img/01.game_setup/11.box_mesh.webp"></image>
            <paragraph>再次设置大小，对于默认值来说它有点太小了。点击立方体图标展开资源，并将其 <emphasis>Size</emphasis> 设置为 <literal>60</literal>、<literal>2</literal>、<literal>60</literal>。由于立方体资源使用的是大小（size）而不是范围（extents），我们需要使用这些值，以便它与我们的碰撞形状相匹配。</paragraph>
            <image candidates="{'*': 'getting_started/first_3d_game/img/01.game_setup/12.cube_resized.png'}" uri="getting_started/first_3d_game/img/01.game_setup/12.cube_resized.png"></image>
            <paragraph>你应该会在视口中看到一个覆盖网格以及蓝色和红色轴的宽灰色平板。</paragraph>
            <paragraph>我们要把地面往下移一点，这样才能看到地板网格。选中 <emphasis>Ground</emphasis> 节点，按住 <literal classes="kbd">Ctrl</literal>键启用网格吸附（macOS 上则是 <literal classes="kbd">Cmd</literal>），然后单击并在 Y 轴上向下拖动。也就是移动小工具里的绿色箭头。</paragraph>
            <image candidates="{'*': 'getting_started/first_3d_game/img/01.game_setup/move_gizmo_y_axis.webp'}" uri="getting_started/first_3d_game/img/01.game_setup/move_gizmo_y_axis.webp"></image>
            <note>
                <paragraph>如果你没有看到如上图所示的 3D 对象操作器，请确保已激活视图上方工具栏中的<emphasis>选择模式</emphasis>。</paragraph>
            </note>
            <image candidates="{'*': 'getting_started/first_3d_game/img/01.game_setup/14.select_mode_icon.png'}" uri="getting_started/first_3d_game/img/01.game_setup/14.select_mode_icon.png"></image>
            <paragraph>为了有一个可见的编辑器栅格，可以将地面往下移动 <literal>1</literal> 米。视口左下角的标签会显示你将该节点平移了多远。</paragraph>
            <image candidates="{'*': 'getting_started/first_3d_game/img/01.game_setup/15.translation_amount.png'}" uri="getting_started/first_3d_game/img/01.game_setup/15.translation_amount.png"></image>
            <note>
                <paragraph>子节点会跟随 <emphasis>Ground</emphasis> 节点一起往下移动。请确保你移动的是 <emphasis>Ground</emphasis> 节点，而不是 <emphasis>MeshInstance3D</emphasis> 和 <emphasis>CollisionShape3D</emphasis>。</paragraph>
            </note>
            <paragraph>最终，<literal>Ground</literal> 的 transform.position.y 应当是 -1</paragraph>
            <image candidates="{'*': 'getting_started/first_3d_game/img/01.game_setup/ground_down1meter.webp'}" uri="getting_started/first_3d_game/img/01.game_setup/ground_down1meter.webp"></image>
            <paragraph>现在来添加一个平行光，从而让我们的整个场景不全都是灰色的。选择 <literal>Main</literal> 节点，然后添加一个子节点 <reference internal="True" refuri="../../classes/class_directionallight3d#class-directionallight3d"><inline classes="std std-ref">DirectionalLight3D</inline></reference>。</paragraph>
            <image candidates="{'*': 'getting_started/first_3d_game/img/01.game_setup/create_directional_light3d.webp'}" uri="getting_started/first_3d_game/img/01.game_setup/create_directional_light3d.webp"></image>
            <paragraph>我们需要移动并旋转 <reference internal="True" refuri="../../classes/class_directionallight3d#class-directionallight3d"><inline classes="std std-ref">DirectionalLight3D</inline></reference> 节点。通过单击并拖动操纵器的绿色箭头将其向上移动，然后单击并拖动红色弧线以围绕 X 轴旋转它，直到地面被照亮。</paragraph>
            <paragraph>在<emphasis>检查器</emphasis>中，勾选复选框打开<emphasis>Shadow -&gt; Enabled</emphasis>。</paragraph>
            <image candidates="{'*': 'getting_started/first_3d_game/img/01.game_setup/16.turn_on_shadows.webp'}" uri="getting_started/first_3d_game/img/01.game_setup/16.turn_on_shadows.webp"></image>
            <paragraph>项目此时看起来是这个样子。</paragraph>
            <image candidates="{'*': 'getting_started/first_3d_game/img/01.game_setup/17.project_with_light.webp'}" uri="getting_started/first_3d_game/img/01.game_setup/17.project_with_light.webp"></image>
            <paragraph>这就是我们的起点了。在下一部分中，我们将处理玩家场景与基础移动。</paragraph>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
