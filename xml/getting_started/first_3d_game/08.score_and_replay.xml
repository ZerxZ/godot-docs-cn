<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/getting_started/first_3d_game/08.score_and_replay.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-first-3d-game-score-and-replay"></target>
    <section ids="score-and-replay doc-first-3d-game-score-and-replay" names="score\ and\ replay 分数与重玩 doc_first_3d_game_score_and_replay">
        <title>分数与重玩</title>
        <paragraph>在这一部分中，我们会添加计分、播放音乐、重启游戏的能力。</paragraph>
        <paragraph>我们要用一个变量来记录当前的分数，使用最简的界面在屏幕上显示。我们会用文本标签来实现。</paragraph>
        <paragraph>在主场景中，添加一个新的 <reference internal="True" refuri="../../classes/class_control#class-control"><inline classes="std std-ref">Control</inline></reference> 节点作为 <literal>Main</literal> 的子项，命名为 <literal>UserInterface</literal>。你会被自动切换到 2D 屏幕，可以在这里编辑你的用户界面 User Interface（UI）。</paragraph>
        <paragraph>名为分数标签 <literal>ScoreLabel</literal> 的 <reference internal="True" refuri="../../classes/class_label#class-label"><inline classes="std std-ref">Label</inline></reference></paragraph>
        <paragraph><image alt="image1" candidates="{'*': 'getting_started/first_3d_game/img/08.score_and_replay/01_label_node.webp'}" uri="getting_started/first_3d_game/img/08.score_and_replay/01_label_node.webp"></image></paragraph>
        <paragraph>在<emphasis>检查器</emphasis>中将该 <emphasis>Label</emphasis> 的 <emphasis>Text</emphasis> 设为类似“Score: 0”的占位内容。</paragraph>
        <paragraph><image alt="image2" candidates="{'*': 'getting_started/first_3d_game/img/08.score_and_replay/02_score_placeholder.webp'}" uri="getting_started/first_3d_game/img/08.score_and_replay/02_score_placeholder.webp"></image></paragraph>
        <paragraph>并且，文本默认是白色的，和我们的游戏背景一样。我们需要修改它的颜色，才能在运行时看到。</paragraph>
        <paragraph>向下滚动到 <emphasis>Theme Overrides</emphasis>（主题覆盖）然后展开 <emphasis>Colors</emphasis>（颜色）并点击 <emphasis>Font Color</emphasis>（字体颜色）旁边的黑框来为文字着色</paragraph>
        <paragraph><image alt="image3" candidates="{'*': 'getting_started/first_3d_game/img/08.score_and_replay/03_score_font_color.webp'}" uri="getting_started/first_3d_game/img/08.score_and_replay/03_score_font_color.webp"></image></paragraph>
        <paragraph>最后单击视口中的文本，将其拖离左上角。</paragraph>
        <paragraph><image alt="image4" candidates="{'*': 'getting_started/first_3d_game/img/08.score_and_replay/04_score_label_moved.webp'}" uri="getting_started/first_3d_game/img/08.score_and_replay/04_score_label_moved.webp"></image></paragraph>
        <paragraph><literal>UserInterface</literal> 节点让我们可以将 UI 组合到场景树的一个分支上，并且也让主题资源能够传播到它的所有子节点上。我们将会用它来设置游戏的字体。</paragraph>
        <section ids="creating-a-ui-theme" names="creating\ a\ ui\ theme 创建\ ui\ 主题">
            <title>创建 UI 主题</title>
            <paragraph>再次选中 <literal>UserInterface</literal> 节点。在<emphasis>检查器</emphasis>中为 <emphasis>Theme -&gt; Theme</emphasis> 创建一个新的主题资源。</paragraph>
            <paragraph><image alt="image5" candidates="{'*': 'getting_started/first_3d_game/img/08.score_and_replay/05_creating_theme.webp'}" uri="getting_started/first_3d_game/img/08.score_and_replay/05_creating_theme.webp"></image></paragraph>
            <paragraph>单击这个资源就会在底部面板中打开主题编辑器。会展示使用你的主题资源时内置 UI 控件的外观。</paragraph>
            <paragraph><image alt="image6" candidates="{'*': 'getting_started/first_3d_game/img/08.score_and_replay/06_theme_preview.webp'}" uri="getting_started/first_3d_game/img/08.score_and_replay/06_theme_preview.webp"></image></paragraph>
            <paragraph>默认情况下，主题只有一个属性，<emphasis>Default Font</emphasis>（默认字体）。</paragraph>
            <seealso>
                <paragraph>你可以为主题资源添加更多属性，从而设计更复杂的用户界面，不过这就超出本系列的范畴了。要学习主题的创建和编辑，请参阅 <reference internal="True" refuri="../../tutorials/ui/gui_skinning#doc-gui-skinning"><inline classes="std std-ref">GUI 皮肤简介</inline></reference>。</paragraph>
            </seealso>
            <paragraph>这里需要的是一个字体文件，就是你电脑上用的那种。常见的字体文件格式有两种：TrueType 字体（TTF）和 OpenType 字体（OTF）。</paragraph>
            <paragraph>在<emphasis>文件系统</emphasis>面板中，展开 <literal>fonts</literal> 目录，单击我们包含在项目里的 <literal>Montserrat-Medium.ttf</literal> 文件并将其拖放到<emphasis>Default Font</emphasis>（默认字体）上。文本就又会出现在主题预览中了。</paragraph>
            <paragraph>文本有一点小。将<emphasis>Default Font Size</emphasis>（默认字体大小）设置为 <literal>22</literal> 像素即可增大文本的大小。</paragraph>
            <paragraph><image alt="image7" candidates="{'*': 'getting_started/first_3d_game/img/08.score_and_replay/07_font_size.webp'}" uri="getting_started/first_3d_game/img/08.score_and_replay/07_font_size.webp"></image></paragraph>
        </section>
        <section ids="keeping-track-of-the-score" names="keeping\ track\ of\ the\ score 跟踪得分">
            <title>跟踪得分</title>
            <paragraph>我们下一步是进行计分。为 <literal>ScoreLabel</literal> 附加一个新的脚本，并在其中定义 <literal>score</literal>（分数）变量。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">extends Label

var score = 0</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">using Godot;

public partial class ScoreLabel : Label
{
    private int _score = 0;
}</literal_block>
                </div>
            </container>
            <paragraph>每踩扁一只怪物，这个分数就应该加 <literal>1</literal>。我们可以使用它们的 <literal>squashed</literal> 信号来得知发生的时间。不过，因为我们是用代码实例化的怪物，我们无法在编辑器中将怪物的信号连接到 <literal>ScoreLabel</literal>。</paragraph>
            <paragraph>不过，我们可以在每次生成一只怪物时通过代码来进行连接。</paragraph>
            <paragraph>打开 <literal>main.gd</literal> 脚本。如果它还开着，你可以在脚本编辑器左栏中点击它的名字。</paragraph>
            <paragraph><image alt="image8" candidates="{'*': 'getting_started/first_3d_game/img/08.score_and_replay/08_open_main_script.webp'}" uri="getting_started/first_3d_game/img/08.score_and_replay/08_open_main_script.webp"></image></paragraph>
            <paragraph>另一种方法是在<emphasis>文件系统</emphasis>面板中双击 <literal>main.gd</literal> 文件。</paragraph>
            <paragraph>在 <literal>_on_mob_timer_timeout()</literal> 函数的最后添加下面这行代码:</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-1-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-1-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-1-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func _on_mob_timer_timeout():
    #...
    # We connect the mob to the score label to update the score upon squashing one.
    mob.squashed.connect($UserInterface/ScoreLabel._on_mob_squashed.bind())</literal_block>
                </div>
                <div aria-labelledby="tab-1-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-1-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">private void OnMobTimerTimeout()
{
    // ...
    // We connect the mob to the score label to update the score upon squashing one.
    mob.Squashed += GetNode&lt;ScoreLabel&gt;("UserInterface/ScoreLabel").OnMobSquashed;
}</literal_block>
                </div>
            </container>
            <paragraph>这一行的意思是，当小怪发出 <literal>squashed</literal> 信号时，<literal>ScoreLabel</literal> 节点就会接收到并调用 <literal>_on_mob_squashed()</literal> 函数。</paragraph>
            <paragraph>回到 <literal>ScoreLabel.gd</literal> 脚本，定义回调函数 <literal>_on_mob_squashed()</literal>。</paragraph>
            <paragraph>这里我们将进行加分并更新显示的文本。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-2-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-2-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-2-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func _on_mob_squashed():
    score += 1
    text = "Score: %s" % score</literal_block>
                </div>
                <div aria-labelledby="tab-2-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-2-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">public void OnMobSquashed()
{
    _score += 1;
    Text = $"Score: {_score}";
}</literal_block>
                </div>
            </container>
            <paragraph>第二行用 <literal>score</literal> 变量的值替换占位符 <literal>%s</literal>。使用此功能时，Godot 会自动将值转换为字符串文本，这在向标签中输出文本或者使用 <literal>print()</literal> 函数时非常方便。</paragraph>
            <seealso>
                <paragraph>可以在 <reference internal="True" refuri="../../tutorials/scripting/gdscript/gdscript_format_string#doc-gdscript-printf"><inline classes="std std-ref">GDScript 格式字符串</inline></reference> 学习字符串格式化相关的更多信息。在 C# 中请考虑<reference name="使用“$”进行字符串插值" refuri="https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated">使用“$”进行字符串插值</reference><target ids="id1" names="使用“$”进行字符串插值" refuri="https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated"></target>。</paragraph>
            </seealso>
            <paragraph>你现在可以玩游戏，压死几个敌人，看看分数的增长。</paragraph>
            <paragraph><image alt="image9" candidates="{'*': 'getting_started/first_3d_game/img/08.score_and_replay/09_score_in_game.png'}" uri="getting_started/first_3d_game/img/08.score_and_replay/09_score_in_game.png"></image></paragraph>
            <note>
                <paragraph>在一个复杂的游戏中，你可能想把你的用户界面与游戏世界完全分开。在这种情况下，你就不会在标签上记录分数了。相反，你可能想把它存储在一个单独的、专门的对象中。但当原型设计或你的项目很简单时，保持你的代码简单就可以了。编程总是一种平衡的行为。</paragraph>
            </note>
        </section>
        <section ids="retrying-the-game" names="retrying\ the\ game 重玩游戏">
            <title>重玩游戏</title>
            <paragraph>我们现在就要添加死亡后重玩的能力。玩家死亡后，我们会在屏幕上现实一条消息并等待输入。</paragraph>
            <paragraph>回到 <literal>main.tscn</literal> 场景，选中 <literal>UserInterface</literal> 节点，添加 <reference internal="True" refuri="../../classes/class_colorrect#class-colorrect"><inline classes="std std-ref">ColorRect</inline></reference> 节点作为其子项并命名为 <literal>Retry</literal>（重试）。该节点会使用单一色彩填充矩形，我们用它来覆盖画面，达到变暗的效果。</paragraph>
            <paragraph>要使其覆盖整个视口，可以使用工具栏中 <emphasis>锚点预设</emphasis> 菜单。</paragraph>
            <paragraph><image alt="image10" candidates="{'*': 'getting_started/first_3d_game/img/08.score_and_replay/10_anchor_preset.webp'}" uri="getting_started/first_3d_game/img/08.score_and_replay/10_anchor_preset.webp"></image></paragraph>
            <paragraph>点击打开，并应用<emphasis>整个矩形</emphasis>命令。</paragraph>
            <paragraph><image alt="image11" candidates="{'*': 'getting_started/first_3d_game/img/08.score_and_replay/11_full_rect_option.webp'}" uri="getting_started/first_3d_game/img/08.score_and_replay/11_full_rect_option.webp"></image></paragraph>
            <paragraph>什么都没发生。好吧，是几乎什么都没有；只有四个绿色的大头针移动到了选择框的四个角落。</paragraph>
            <paragraph><image alt="image12" candidates="{'*': 'getting_started/first_3d_game/img/08.score_and_replay/12_anchors_updated.webp'}" uri="getting_started/first_3d_game/img/08.score_and_replay/12_anchors_updated.webp"></image></paragraph>
            <paragraph>这是因为 UI 节点（图标都是绿色）使用的是锚点和边距，它们都相对于它们父节点包围框。这里的 <literal>UserInterface</literal> 节点比较小，所以 <literal>Retry</literal> 会受限于它。</paragraph>
            <paragraph>选中 <literal>UserInterface</literal> 然后也对其使用<emphasis>锚点预设 -&gt; 整个矩形</emphasis>。<literal>Retry</literal> 节点就应该覆盖整个视口了。</paragraph>
            <paragraph>让我们修改它的颜色，把游戏区域变暗。选中 <literal>Retry</literal>，在<emphasis>检查器</emphasis>中将 <emphasis>Color</emphasis>（颜色）设置为透明的暗色。要实现整个效果，可以在取色器中将 <emphasis>A</emphasis> 滑动条拖到左边。它控制的是颜色的 Alpha 通道，也就是不透明度。</paragraph>
            <paragraph><image alt="image13" candidates="{'*': 'getting_started/first_3d_game/img/08.score_and_replay/13_retry_color_picker.webp'}" uri="getting_started/first_3d_game/img/08.score_and_replay/13_retry_color_picker.webp"></image></paragraph>
            <paragraph>接下来，添加一个 <reference internal="True" refuri="../../classes/class_label#class-label"><inline classes="std std-ref">Label</inline></reference> 的节点作为 <literal>Retry</literal> 的子节点并且设置他的 <emphasis>Text</emphasis> 为“Press Enter to retry”。将其移动至屏幕中央，并且选择 <emphasis>Anchor Preset -&gt; Center</emphasis>（锚点预设 &gt; 居中）。</paragraph>
            <paragraph><image alt="image14" candidates="{'*': 'getting_started/first_3d_game/img/08.score_and_replay/14_center_option.webp'}" uri="getting_started/first_3d_game/img/08.score_and_replay/14_center_option.webp"></image></paragraph>
            <section ids="coding-the-retry-option" names="coding\ the\ retry\ option 编写重试选项">
                <title>编写重试选项</title>
                <paragraph>我们现在就可以去编写代码，在玩家死亡时显示 <literal>Retry</literal> 节点，重玩时隐藏。</paragraph>
                <paragraph>打开 <literal>main.gd</literal> 脚本。首先，我们想要在游戏开始时隐藏覆盖层。将这一行加到 <literal>_ready()</literal> 函数中。</paragraph>
                <container classes="sphinx-tabs" type="tab-element">
                    <div aria-label="Tabbed content" role="tablist">
                        <button aria-controls="panel-3-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-3-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                        <button aria-controls="panel-3-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-3-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                    </div>
                    <div aria-labelledby="tab-3-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-3-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                        <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func _ready():
    $UserInterface/Retry.hide()</literal_block>
                    </div>
                    <div aria-labelledby="tab-3-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-3-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                        <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">public override void _Ready()
{
    GetNode&lt;Control&gt;("UserInterface/Retry").Hide();
}</literal_block>
                    </div>
                </container>
                <paragraph>然后在玩家受到攻击时，我们就显示这个覆盖层。</paragraph>
                <container classes="sphinx-tabs" type="tab-element">
                    <div aria-label="Tabbed content" role="tablist">
                        <button aria-controls="panel-4-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-4-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                        <button aria-controls="panel-4-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-4-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                    </div>
                    <div aria-labelledby="tab-4-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-4-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                        <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func _on_player_hit():
    #...
    $UserInterface/Retry.show()</literal_block>
                    </div>
                    <div aria-labelledby="tab-4-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-4-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                        <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">private void OnPlayerHit()
{
    //...
    GetNode&lt;Control&gt;("UserInterface/Retry").Show();
}</literal_block>
                    </div>
                </container>
                <paragraph>最后，当 <literal>Retry</literal> 节点可见时，我们需要监听玩家的输入，按下回车键时让游戏重启。可以使用内置的 <literal>_unhandled_input()</literal> 回调来实现，任何输入都会触发这个回调。</paragraph>
                <paragraph>如果玩家按下了预设的 <literal>ui_accept</literal> 输入动作并且 <literal>Retry</literal> 是可见状态，我们就重新加载当前场景。</paragraph>
                <container classes="sphinx-tabs" type="tab-element">
                    <div aria-label="Tabbed content" role="tablist">
                        <button aria-controls="panel-5-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-5-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                        <button aria-controls="panel-5-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-5-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                    </div>
                    <div aria-labelledby="tab-5-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-5-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                        <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func _unhandled_input(event):
    if event.is_action_pressed("ui_accept") and $UserInterface/Retry.visible:
        # This restarts the current scene.
        get_tree().reload_current_scene()</literal_block>
                    </div>
                    <div aria-labelledby="tab-5-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-5-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                        <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">public override void _UnhandledInput(InputEvent @event)
{
    if (@event.IsActionPressed("ui_accept") &amp;&amp; GetNode&lt;Control&gt;("UserInterface/Retry").Visible)
    {
        // This restarts the current scene.
        GetTree().ReloadCurrentScene();
    }
}</literal_block>
                    </div>
                </container>
                <paragraph>我们可以通过 <literal>get_tree()</literal> 函数访问全局 <reference internal="True" refuri="../../classes/class_scenetree#class-scenetree"><inline classes="std std-ref">SceneTree</inline></reference> 对象，然后用它来重新加载并重启当前场景。</paragraph>
            </section>
        </section>
        <section ids="adding-music" names="adding\ music 添加音乐">
            <title>添加音乐</title>
            <paragraph>要添加音乐，让音乐在后台连续播放，我们就要用到 Godot 的另一项特性：<reference internal="True" refuri="../../tutorials/scripting/singletons_autoload#doc-singletons-autoload"><inline classes="std std-ref">自动加载</inline></reference>。</paragraph>
            <paragraph>要播放音频，只需往场景里添加一个 <reference internal="True" refuri="../../classes/class_audiostreamplayer#class-audiostreamplayer"><inline classes="std std-ref">AudioStreamPlayer</inline></reference> 节点，然后为它附加一个音频文件。启动场景时，就会自动播放。然而，如果重新加载了场景，比如我们在重玩的时候就这么干了，这些音频节点也会被重置，音乐也就会从头开始播放。</paragraph>
            <paragraph>你可以使用自动加载功能来让 Godot 在游戏开始时自动加载节点或场景，不依赖于当前场景。你还可以用它来创建能够全局访问的对象。</paragraph>
            <paragraph>在<emphasis>场景</emphasis>菜单中单击<emphasis>新建场景</emphasis>，或者使用当前打开的场景旁边的 <emphasis>+</emphasis> 图标来创建一个新场景。</paragraph>
            <paragraph><image alt="image15" candidates="{'*': 'getting_started/first_3d_game/img/08.score_and_replay/15_new_scene.webp'}" uri="getting_started/first_3d_game/img/08.score_and_replay/15_new_scene.webp"></image></paragraph>
            <paragraph>单击<emphasis>其他节点</emphasis>按钮，创建一个 <reference internal="True" refuri="../../classes/class_audiostreamplayer#class-audiostreamplayer"><inline classes="std std-ref">AudioStreamPlayer</inline></reference> 然后将其重命名为 <literal>MusicPlayer</literal>（音乐播放器）。</paragraph>
            <paragraph><image alt="image16" candidates="{'*': 'getting_started/first_3d_game/img/08.score_and_replay/16_music_player_node.webp'}" uri="getting_started/first_3d_game/img/08.score_and_replay/16_music_player_node.webp"></image></paragraph>
            <paragraph>我们在 <literal>art/</literal> 目录中包含了一条音乐音轨 <literal>House In a Forest Loop.ogg</literal>。单击并把它拖放到<emphasis>检查器</emphasis>中的 <emphasis>Stream</emphasis>（流）属性上。同时要打开 <emphasis>Autoplay</emphasis>，这样音乐就会在游戏开始时自动播放了。</paragraph>
            <paragraph><image alt="image17" candidates="{'*': 'getting_started/first_3d_game/img/08.score_and_replay/17_music_node_properties.webp'}" uri="getting_started/first_3d_game/img/08.score_and_replay/17_music_node_properties.webp"></image></paragraph>
            <paragraph>将这个场景保存为 <literal>MusicPlayer.tscn</literal>。</paragraph>
            <paragraph>我们需要将其注册为自动加载。前往菜单<emphasis>项目 -&gt; 项目设置...</emphasis>，然后单击<emphasis>自动加载</emphasis>选项卡。</paragraph>
            <paragraph><emphasis>路径</emphasis>输入框中需要输入场景的路径。单击文件夹图标打开文件浏览器，然后双击 <literal>MusicPlayer.tscn</literal>。接下来，单击右侧的<emphasis>添加</emphasis>按钮，将该节点进行注册。</paragraph>
            <paragraph><image alt="image18" candidates="{'*': 'getting_started/first_3d_game/img/08.score_and_replay/18_register_autoload.webp'}" uri="getting_started/first_3d_game/img/08.score_and_replay/18_register_autoload.webp"></image></paragraph>
            <paragraph><literal>MusicPlayer.tscn</literal> 现在会被加载到任何你打开或播放的场景中。 因此，如果你现在运行游戏，音乐将在任何场景中自动播放。</paragraph>
            <paragraph>在这一节课结束之前，我们来看一下在底层发生了什么。运行游戏时，你的<emphasis>场景</emphasis>面板会多出来两个选项卡：<emphasis>远程</emphasis>和<emphasis>本地</emphasis>。</paragraph>
            <paragraph><image alt="image19" candidates="{'*': 'getting_started/first_3d_game/img/08.score_and_replay/19_scene_dock_tabs.webp'}" uri="getting_started/first_3d_game/img/08.score_and_replay/19_scene_dock_tabs.webp"></image></paragraph>
            <paragraph>你可以在<emphasis>远程</emphasis>选项卡中查看运行中的游戏的节点树。你会看到 <emphasis>Main</emphasis> 节点以及场景中所包含的所有东西，最底部是实例化的小怪。</paragraph>
            <paragraph><image alt="image20" candidates="{'*': 'getting_started/first_3d_game/img/08.score_and_replay/20_remote_scene_tree.webp'}" uri="getting_started/first_3d_game/img/08.score_and_replay/20_remote_scene_tree.webp"></image></paragraph>
            <paragraph>顶部的是自动加载的 <literal>MusicPlayer</literal> 以及一个 <emphasis>root</emphasis> 节点，这是你的游戏的视口。</paragraph>
            <paragraph>这一节课就是这样。在下一部分，我们会添加动画，让游戏更美观。</paragraph>
            <paragraph>这是完整的 <literal>main.gd</literal> 脚本，仅供参考。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-6-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-6-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-6-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-6-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-6-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-6-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">extends Node

@export var mob_scene: PackedScene

func _ready():
    $UserInterface/Retry.hide()


func _on_mob_timer_timeout():
    # Create a new instance of the Mob scene.
    var mob = mob_scene.instantiate()

    # Choose a random location on the SpawnPath.
    # We store the reference to the SpawnLocation node.
    var mob_spawn_location = get_node("SpawnPath/SpawnLocation")
    # And give it a random offset.
    mob_spawn_location.progress_ratio = randf()

    var player_position = $Player.position
    mob.initialize(mob_spawn_location.position, player_position)

    # Spawn the mob by adding it to the Main scene.
    add_child(mob)

    # We connect the mob to the score label to update the score upon squashing one.
    mob.squashed.connect($UserInterface/ScoreLabel._on_mob_squashed.bind())

func _on_player_hit():
    $MobTimer.stop()
    $UserInterface/Retry.show()

func _unhandled_input(event):
    if event.is_action_pressed("ui_accept") and $UserInterface/Retry.visible:
        # This restarts the current scene.
        get_tree().reload_current_scene()</literal_block>
                </div>
                <div aria-labelledby="tab-6-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-6-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">using Godot;

public partial class Main : Node
{
    [Export]
    public PackedScene MobScene { get; set; }

    public override void _Ready()
    {
        GetNode&lt;Control&gt;("UserInterface/Retry").Hide();
    }

    public override void _UnhandledInput(InputEvent @event)
    {
        if (@event.IsActionPressed("ui_accept") &amp;&amp; GetNode&lt;Control&gt;("UserInterface/Retry").Visible)
        {
            // This restarts the current scene.
            GetTree().ReloadCurrentScene();
        }
    }

    private void OnMobTimerTimeout()
    {
        // Create a new instance of the Mob scene.
        Mob mob = MobScene.Instantiate&lt;Mob&gt;();

        // Choose a random location on the SpawnPath.
        // We store the reference to the SpawnLocation node.
        var mobSpawnLocation = GetNode&lt;PathFollow3D&gt;("SpawnPath/SpawnLocation");
        // And give it a random offset.
        mobSpawnLocation.ProgressRatio = GD.Randf();

        Vector3 playerPosition = GetNode&lt;Player&gt;("Player").position;
        mob.Initialize(mobSpawnLocation.Position, playerPosition);

        // Spawn the mob by adding it to the Main scene.
        AddChild(mob);

        // We connect the mob to the score label to update the score upon squashing one.
        mob.Squashed += GetNode&lt;ScoreLabel&gt;("UserInterface/ScoreLabel").OnMobSquashed;
    }

    private void OnPlayerHit()
    {
        GetNode&lt;Timer&gt;("MobTimer").Stop();
        GetNode&lt;Control&gt;("UserInterface/Retry").Show();
    }
}</literal_block>
                </div>
            </container>
            <substitution_definition names="image1"><image alt="image1" candidates="{'*': 'getting_started/first_3d_game/img/08.score_and_replay/01_label_node.webp'}" uri="getting_started/first_3d_game/img/08.score_and_replay/01_label_node.webp"></image></substitution_definition>
            <substitution_definition names="image2"><image alt="image2" candidates="{'*': 'getting_started/first_3d_game/img/08.score_and_replay/02_score_placeholder.webp'}" uri="getting_started/first_3d_game/img/08.score_and_replay/02_score_placeholder.webp"></image></substitution_definition>
            <substitution_definition names="image3"><image alt="image3" candidates="{'*': 'getting_started/first_3d_game/img/08.score_and_replay/03_score_font_color.webp'}" uri="getting_started/first_3d_game/img/08.score_and_replay/03_score_font_color.webp"></image></substitution_definition>
            <substitution_definition names="image4"><image alt="image4" candidates="{'*': 'getting_started/first_3d_game/img/08.score_and_replay/04_score_label_moved.webp'}" uri="getting_started/first_3d_game/img/08.score_and_replay/04_score_label_moved.webp"></image></substitution_definition>
            <substitution_definition names="image5"><image alt="image5" candidates="{'*': 'getting_started/first_3d_game/img/08.score_and_replay/05_creating_theme.webp'}" uri="getting_started/first_3d_game/img/08.score_and_replay/05_creating_theme.webp"></image></substitution_definition>
            <substitution_definition names="image6"><image alt="image6" candidates="{'*': 'getting_started/first_3d_game/img/08.score_and_replay/06_theme_preview.webp'}" uri="getting_started/first_3d_game/img/08.score_and_replay/06_theme_preview.webp"></image></substitution_definition>
            <substitution_definition names="image7"><image alt="image7" candidates="{'*': 'getting_started/first_3d_game/img/08.score_and_replay/07_font_size.webp'}" uri="getting_started/first_3d_game/img/08.score_and_replay/07_font_size.webp"></image></substitution_definition>
            <substitution_definition names="image8"><image alt="image8" candidates="{'*': 'getting_started/first_3d_game/img/08.score_and_replay/08_open_main_script.webp'}" uri="getting_started/first_3d_game/img/08.score_and_replay/08_open_main_script.webp"></image></substitution_definition>
            <substitution_definition names="image9"><image alt="image9" candidates="{'*': 'getting_started/first_3d_game/img/08.score_and_replay/09_score_in_game.png'}" uri="getting_started/first_3d_game/img/08.score_and_replay/09_score_in_game.png"></image></substitution_definition>
            <substitution_definition names="image10"><image alt="image10" candidates="{'*': 'getting_started/first_3d_game/img/08.score_and_replay/10_anchor_preset.webp'}" uri="getting_started/first_3d_game/img/08.score_and_replay/10_anchor_preset.webp"></image></substitution_definition>
            <substitution_definition names="image11"><image alt="image11" candidates="{'*': 'getting_started/first_3d_game/img/08.score_and_replay/11_full_rect_option.webp'}" uri="getting_started/first_3d_game/img/08.score_and_replay/11_full_rect_option.webp"></image></substitution_definition>
            <substitution_definition names="image12"><image alt="image12" candidates="{'*': 'getting_started/first_3d_game/img/08.score_and_replay/12_anchors_updated.webp'}" uri="getting_started/first_3d_game/img/08.score_and_replay/12_anchors_updated.webp"></image></substitution_definition>
            <substitution_definition names="image13"><image alt="image13" candidates="{'*': 'getting_started/first_3d_game/img/08.score_and_replay/13_retry_color_picker.webp'}" uri="getting_started/first_3d_game/img/08.score_and_replay/13_retry_color_picker.webp"></image></substitution_definition>
            <substitution_definition names="image14"><image alt="image14" candidates="{'*': 'getting_started/first_3d_game/img/08.score_and_replay/14_center_option.webp'}" uri="getting_started/first_3d_game/img/08.score_and_replay/14_center_option.webp"></image></substitution_definition>
            <substitution_definition names="image15"><image alt="image15" candidates="{'*': 'getting_started/first_3d_game/img/08.score_and_replay/15_new_scene.webp'}" uri="getting_started/first_3d_game/img/08.score_and_replay/15_new_scene.webp"></image></substitution_definition>
            <substitution_definition names="image16"><image alt="image16" candidates="{'*': 'getting_started/first_3d_game/img/08.score_and_replay/16_music_player_node.webp'}" uri="getting_started/first_3d_game/img/08.score_and_replay/16_music_player_node.webp"></image></substitution_definition>
            <substitution_definition names="image17"><image alt="image17" candidates="{'*': 'getting_started/first_3d_game/img/08.score_and_replay/17_music_node_properties.webp'}" uri="getting_started/first_3d_game/img/08.score_and_replay/17_music_node_properties.webp"></image></substitution_definition>
            <substitution_definition names="image18"><image alt="image18" candidates="{'*': 'getting_started/first_3d_game/img/08.score_and_replay/18_register_autoload.webp'}" uri="getting_started/first_3d_game/img/08.score_and_replay/18_register_autoload.webp"></image></substitution_definition>
            <substitution_definition names="image19"><image alt="image19" candidates="{'*': 'getting_started/first_3d_game/img/08.score_and_replay/19_scene_dock_tabs.webp'}" uri="getting_started/first_3d_game/img/08.score_and_replay/19_scene_dock_tabs.webp"></image></substitution_definition>
            <substitution_definition names="image20"><image alt="image20" candidates="{'*': 'getting_started/first_3d_game/img/08.score_and_replay/20_remote_scene_tree.webp'}" uri="getting_started/first_3d_game/img/08.score_and_replay/20_remote_scene_tree.webp"></image></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
