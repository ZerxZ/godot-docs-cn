<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/getting_started/first_2d_game/02.player_scene.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-your-first-2d-game-player-scene"></target>
    <section ids="creating-the-player-scene doc-your-first-2d-game-player-scene" names="creating\ the\ player\ scene 创建玩家场景 doc_your_first_2d_game_player_scene">
        <title>创建玩家场景</title>
        <paragraph>项目设置到位后，我们可以开始处理玩家控制的角色。</paragraph>
        <paragraph>第一个场景, 我们会定义 <literal>Player</literal> 对象. 单独创建Player场景的好处之一是, 在游戏的其他部分做出来之前, 我们就可以对其进行单独测试.</paragraph>
        <section ids="node-structure" names="node\ structure 节点结构">
            <title>节点结构</title>
            <paragraph>首先，我们需要为玩家对象选择一个根节点。一般而言，场景的根节点应该反映对象所需的功能——对象<emphasis>是什么</emphasis>。单击“其他节点”按钮并将 <reference internal="True" refuri="../../classes/class_area2d#class-area2d"><inline classes="std std-ref">Area2D</inline></reference> 节点添加到场景中。</paragraph>
            <image candidates="{'*': 'getting_started/first_2d_game/img/add_node.webp'}" uri="getting_started/first_2d_game/img/add_node.webp"></image>
            <paragraph>Godot 将在场景树中的节点旁边显示警告图标。你现在可以忽略它。我们稍后再谈。</paragraph>
            <paragraph>使用 <literal>Area2D</literal> 可以检测到与玩家重叠或进入玩家内的物体. 通过双击节点名称将其名称更改为 <literal>Player</literal>. 我们已经设置好了场景的根节点, 现在可以向该角色中添加其他节点来增加功能.</paragraph>
            <paragraph>在将任何子级添加到 <literal>Player</literal> 节点之前，我们要确保不会通过点击它们而意外地移动它们或调整其大小。请选中该节点，然后点击锁右侧的图标；它的工具提示显示“确保对象的子级不可选择”</paragraph>
            <image candidates="{'*': 'getting_started/first_2d_game/img/lock_children.webp'}" uri="getting_started/first_2d_game/img/lock_children.webp"></image>
            <paragraph>保存场景。点击“场景 -&gt; 保存”，或者在 Windows/Linux 平台上按下 <literal classes="kbd">Ctrl+S</literal>，在 macOS 上按下 <literal classes="kbd">Cmd+S</literal>。</paragraph>
            <note>
                <paragraph>对于此项目，我们将遵循 Godot 的命名约定。</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph><strong>GDScript</strong>：类（节点）使用 PascalCase（大驼峰命名法），变量和函数使用 snake_case（蛇形命名法），常量使用 ALL_CAPS（全大写）（请参阅 <reference internal="True" refuri="../../tutorials/scripting/gdscript/gdscript_styleguide#doc-gdscript-styleguide"><inline classes="std std-ref">GDScript 编写风格指南</inline></reference>）。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><strong>C#</strong>：类、导出变量和方法使用 PascalCase（大驼峰命名法），私有字段使用 _camelCase（前缀下划线的小驼峰命名法），局部变量和参数使用 camelCase（小驼峰命名法）（请参阅 <reference internal="True" refuri="../../tutorials/scripting/c_sharp/c_sharp_style_guide#doc-c-sharp-styleguide"><inline classes="std std-ref">C# 风格指南</inline></reference>）。连接信号时，请务必准确键入方法名称。</paragraph>
                    </list_item>
                </bullet_list>
            </note>
        </section>
        <section ids="sprite-animation" names="sprite\ animation 精灵动画">
            <title>精灵动画</title>
            <paragraph>点击 <literal>Player</literal> 节点并添加（在 Windows/Linux 中按<literal classes="kbd">Ctrl + A</literal>，或者在 macOS 中按 <literal classes="kbd">Cmd + A</literal>）一个 <reference internal="True" refuri="../../classes/class_animatedsprite2d#class-animatedsprite2d"><inline classes="std std-ref">AnimatedSprite2D</inline></reference> 节点作为子节点。<literal>AnimatedSprite2D</literal> 将处理我们玩家的外观和动画。请注意，节点旁边有一个警告符号。<literal>AnimatedSprite2D</literal> 需要一个 <reference internal="True" refuri="../../classes/class_spriteframes#class-spriteframes"><inline classes="std std-ref">SpriteFrames</inline></reference> 资源，该资源是一个可显示的动画列表。要创建它，在“检查器”的 <literal>Animation</literal> 选项卡中找到 <literal>Sprite Frames</literal> 属性，然后点击“[空]”-&gt;“新建 SpriteFrames”。再次点击来打开 <literal>SpriteFrames</literal> 面板：</paragraph>
            <image candidates="{'*': 'getting_started/first_2d_game/img/spriteframes_panel.webp'}" uri="getting_started/first_2d_game/img/spriteframes_panel.webp"></image>
            <paragraph>左边是一个动画列表。点击“defalult”动画并将其重命名为“walk”。然后点击“Add Animation”按钮，创建另一个名为“up”的动画。在“FileSystem”选项卡中找到玩家图像——它们应该在你之前解压的 <literal>art</literal> 文件夹中。将每个动画的两张图像， <literal>playerGrey_up[1/2]</literal> 和 <literal>playerGrey_walk[1/2]</literal>，拖到对应动画的面板的“Animation Frames”处：</paragraph>
            <image candidates="{'*': 'getting_started/first_2d_game/img/spriteframes_panel2.webp'}" uri="getting_started/first_2d_game/img/spriteframes_panel2.webp"></image>
            <paragraph>玩家图像对于游戏窗口来说有点过大，需要缩小它们。点击 <literal>AnimatedSprite2D</literal> 节点，可以在检查器 <literal>Node2D</literal> 标签中，将 <literal>Scale</literal> 属性设置为 <literal>(0.5, 0.5)</literal> 。</paragraph>
            <image candidates="{'*': 'getting_started/first_2d_game/img/player_scale.webp'}" uri="getting_started/first_2d_game/img/player_scale.webp"></image>
            <paragraph>最后，在 <literal>Player</literal> 下添加一个 <reference internal="True" refuri="../../classes/class_collisionshape2d#class-collisionshape2d"><inline classes="std std-ref">CollisionShape2D</inline></reference> 作为子节点，以确定玩家的“攻击框”，或者说碰撞范围。<literal>CapsuleShape2D</literal> 节点最适合这个角色，那么就在检查器中“Shape”的旁边点击“[空]”-&gt;“新建 CapsuleShape2D”添加形状，使用两个控制柄，调整形状大小以覆盖精灵：</paragraph>
            <image candidates="{'*': 'getting_started/first_2d_game/img/player_coll_shape.webp'}" uri="getting_started/first_2d_game/img/player_coll_shape.webp"></image>
            <paragraph>完成后, 你的 <literal>Player</literal> 场景看起来应该像这样:</paragraph>
            <image candidates="{'*': 'getting_started/first_2d_game/img/player_scene_nodes.webp'}" uri="getting_started/first_2d_game/img/player_scene_nodes.webp"></image>
            <paragraph>修改完成后请确保再次保存场景.</paragraph>
            <paragraph>在下一部分中，我们将向玩家节点添加一个脚本，以移动它并为其添加动画效果。然后，我们将设置碰撞检测，以了解玩家何时被某些东西击中。</paragraph>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
