<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/getting_started/first_2d_game/04.creating_the_enemy.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-your-first-2d-game-creating-the-enemy"></target>
    <section ids="creating-the-enemy doc-your-first-2d-game-creating-the-enemy" names="creating\ the\ enemy 创建敌人 doc_your_first_2d_game_creating_the_enemy">
        <title>创建敌人</title>
        <paragraph>是时候去做一些玩家必须躲避的敌人了. 它们的行为很简单: 怪物将随机生成在屏幕的边缘, 沿着随机的方向直线移动.</paragraph>
        <paragraph>我们将创建一个 <literal>Mob</literal> 的怪物场景，以便在游戏中独立<emphasis>实例化</emphasis>出任意数量的怪物。</paragraph>
        <section ids="node-setup" names="node\ setup 节点设置">
            <title>节点设置</title>
            <paragraph>点击顶部菜单的“场景 -&gt; 新建场景”，然后添加以下节点：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph><reference internal="True" refuri="../../classes/class_rigidbody2d#class-rigidbody2d"><inline classes="std std-ref">RigidBody2D</inline></reference>（名为 <literal>Mob</literal>）</paragraph>
                    <block_quote>
                        <bullet_list bullet="-">
                            <list_item>
                                <paragraph><reference internal="True" refuri="../../classes/class_animatedsprite2d#class-animatedsprite2d"><inline classes="std std-ref">AnimatedSprite2D</inline></reference></paragraph>
                            </list_item>
                            <list_item>
                                <paragraph><reference internal="True" refuri="../../classes/class_collisionshape2d#class-collisionshape2d"><inline classes="std std-ref">CollisionShape2D</inline></reference></paragraph>
                            </list_item>
                            <list_item>
                                <paragraph><reference internal="True" refuri="../../classes/class_visibleonscreennotifier2d#class-visibleonscreennotifier2d"><inline classes="std std-ref">VisibleOnScreenNotifier2D</inline></reference></paragraph>
                            </list_item>
                        </bullet_list>
                    </block_quote>
                </list_item>
            </bullet_list>
            <paragraph>别忘了设置子项，使其无法被选中，就像你对 Player 场景所做的那样。</paragraph>
            <paragraph>Select the <literal>Mob</literal> node and set its <literal>Gravity Scale</literal>
                property in the <reference internal="True" refuri="../../classes/class_rigidbody2d#class-rigidbody2d"><inline classes="std std-ref">RigidBody2D</inline></reference>
                section of the inspector to <literal>0</literal>.
                This will prevent the mob from falling downwards.</paragraph>
            <paragraph>In addition, under the <reference internal="True" refuri="../../classes/class_collisionobject2d#class-collisionobject2d"><inline classes="std std-ref">CollisionObject2D</inline></reference>
                section just beneath the <strong>RigidBody2D</strong> section,
                expand the <strong>Collision</strong> group and
                uncheck the <literal>1</literal> inside the <literal>Mask</literal> property.
                This will ensure the mobs do not collide with each other.</paragraph>
            <image candidates="{'*': 'getting_started/first_2d_game/img/set_collision_mask.webp'}" uri="getting_started/first_2d_game/img/set_collision_mask.webp"></image>
            <paragraph>像设置玩家一样设置 <reference internal="True" refuri="../../classes/class_animatedsprite2d#class-animatedsprite2d"><inline classes="std std-ref">AnimatedSprite2D</inline></reference>。这一次，我们有 3 个动画：<literal>fly</literal>、<literal>swim</literal>、<literal>walk</literal>，每个动画在 art 文件夹中都有两张图片。</paragraph>
            <paragraph>必须为每个单独动画设置 <literal>动画速度</literal> 属性，将三个动画的对应动画速度值都调整为 <literal>3</literal>。</paragraph>
            <image candidates="{'*': 'getting_started/first_2d_game/img/mob_animations.webp'}" uri="getting_started/first_2d_game/img/mob_animations.webp"></image>
            <paragraph>你可以使用 <literal>动画速度</literal> 输入区域右侧的“播放动画”按钮预览动画。</paragraph>
            <paragraph>我们将随机选择其中一个动画，以便小怪有一些变化。</paragraph>
            <paragraph>像玩家的图像一样，这些小怪的图像也要缩小。请将 <literal>AnimatedSprite2D</literal> 的 <literal>Scale</literal> 属性设为 <literal>(0.75, 0.75)</literal>。</paragraph>
            <paragraph>像在 <literal>Player</literal> 场景中一样，为碰撞添加一个 <literal>CapsuleShape2D</literal>。为了使形状与图像对齐，你需要将 <literal>Rotation</literal> 属性设为 <literal>90</literal>（在“检查器”的“Transform”下）。</paragraph>
            <paragraph>保存该场景。</paragraph>
        </section>
        <section ids="enemy-script" names="enemy\ script 敌人的脚本">
            <title>敌人的脚本</title>
            <paragraph>像这样将脚本添加到 <literal>Mob</literal> 上：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">extends RigidBody2D</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">using Godot;

public partial class Mob : RigidBody2D
{
    // Don't forget to rebuild the project.
}</literal_block>
                </div>
            </container>
            <paragraph>现在让我们看一下脚本的其余部分。在 <literal>_ready()</literal> 中，我们从三个动画类型中随机选择一个播放：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-1-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-1-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-1-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func _ready():
    var mob_types = $AnimatedSprite2D.sprite_frames.get_animation_names()
    $AnimatedSprite2D.play(mob_types[randi() % mob_types.size()])</literal_block>
                </div>
                <div aria-labelledby="tab-1-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-1-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">public override void _Ready()
{
    var animatedSprite2D = GetNode&lt;AnimatedSprite2D&gt;("AnimatedSprite2D");
    string[] mobTypes = animatedSprite2D.SpriteFrames.GetAnimationNames();
    animatedSprite2D.Play(mobTypes[GD.Randi() % mobTypes.Length]);
}</literal_block>
                </div>
            </container>
            <paragraph>首先，我们从 AnimatedSprite2D 的 <literal>sprite_frames</literal> 属性中获取动画名称的列表。返回的是一个数组，该数组包含三个动画名称：<literal>["walk", "swim", "fly"]</literal>。</paragraph>
            <paragraph>然后我们需要在 <literal>0</literal> 和 <literal>2</literal> 之间选取一个随机的数字, 以在列表中选择一个名称(数组索引以 <literal>0</literal> 起始). <literal>randi() % n</literal> 会在 <literal>0</literal> and <literal>n-1</literal> 之中选择一个随机整数.</paragraph>
            <paragraph>最后一步是让怪物在超出屏幕时删除自己。将 <literal>VisibleOnScreenNotifier2D</literal> 节点的 <literal>screen_exited()</literal> 信号连接到 <literal>Mob</literal> 上，然后添加如下代码：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-2-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-2-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-2-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func _on_visible_on_screen_notifier_2d_screen_exited():
    queue_free()</literal_block>
                </div>
                <div aria-labelledby="tab-2-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-2-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">private void OnVisibleOnScreenNotifier2DScreenExited()
{
    QueueFree();
}</literal_block>
                </div>
            </container>
            <paragraph>这样就完成了 <title_reference>Mob</title_reference> 场景。</paragraph>
            <paragraph>玩家和敌人已经准备就绪，接下来，我们将在一个新的场景中把他们放到一起。我们将使敌人在游戏板上随机生成并前进，我们的项目将变成一个能玩的游戏。</paragraph>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
