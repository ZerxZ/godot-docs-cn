<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/getting_started/first_2d_game/07.finishing-up.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-your-first-2d-game-finishing-up"></target>
    <section ids="finishing-up doc-your-first-2d-game-finishing-up" names="finishing\ up 完成了 doc_your_first_2d_game_finishing_up">
        <title>完成了</title>
        <paragraph>现在，我们已经完成了游戏的所有功能。以下是一些剩余的步骤，为游戏加点“料”，改善游戏体验。</paragraph>
        <paragraph>随意用你自己的想法扩展游戏玩法。</paragraph>
        <section ids="background" names="background 背景">
            <title>背景</title>
            <paragraph>默认的灰色背景不是很吸引人，那么我们就来改一下颜色。一种方法是使用 <reference internal="True" refuri="../../classes/class_colorrect#class-colorrect"><inline classes="std std-ref">ColorRect</inline></reference> 节点。将其设为 <literal>Main</literal> 下的第一个节点，这样这个节点就会绘制在其他节点之后。<literal>ColorRect</literal> 只有一个属性：<literal>Color</literal>（颜色）。选择一个你喜欢的颜色，然后在视口顶部的工具栏或者检查器中选择“布局”-&gt;“锚点预设”-&gt;“整个矩形”（Layout -&gt; Anchors Preset -&gt; Full Rect），使其覆盖屏幕。</paragraph>
            <paragraph>如果你有背景图片, 你也可以通过使用 <literal>TextureRect</literal> 节点来添加背景图片.</paragraph>
        </section>
        <section ids="sound-effects" names="sound\ effects 音效">
            <title>音效</title>
            <paragraph>声音和音乐可能是增强游戏吸引力的最有效方法。在游戏 <strong>art</strong> 文件夹中，有两个声音文件：“House in a Forest Loop.ogg”用于背景音乐，而“gameover.wav”用于当玩家失败时。</paragraph>
            <paragraph>添加两个 <reference internal="True" refuri="../../classes/class_audiostreamplayer#class-audiostreamplayer"><inline classes="std std-ref">AudioStreamPlayer</inline></reference> 节点作为 <literal>Main</literal> 的子节点。将其中一个命名为 <literal>Music</literal>，将另一个命名为 <literal>DeathSound</literal>。 在每个节点选项上，点击 <literal>Stream</literal> 属性，选择 <literal>加载</literal>，然后选择相应的音频文件。</paragraph>
            <paragraph>所有音频都会在禁用 <literal>循环</literal> 设置的情况下自动导入。如果希望音乐无缝循环，请单击流文件下拉箭头，选择 <literal>唯一化</literal>，然后再单击流文件并选中 <literal>循环</literal> 框。</paragraph>
            <paragraph>要播放音乐, 在 <literal>new_game()</literal> 函数中添加 <literal>$Music.play()</literal>, 在 <literal>game_over()</literal> 函数中添加 <literal>$Music.stop()</literal> .</paragraph>
            <paragraph>最后, 在 <literal>game_over()</literal> 函数中添加 <literal>$DeathSound.play()</literal> .</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func game_over():
    ...
    $Music.stop()
    $DeathSound.play()

func new_game():
    ...
    $Music.play()</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">public void GameOver()
{
    ...
    GetNode&lt;AudioStreamPlayer&gt;("Music").Stop();
    GetNode&lt;AudioStreamPlayer&gt;("DeathSound").Play();
}

public void NewGame()
{
    ...
    GetNode&lt;AudioStreamPlayer&gt;("Music").Play();
}</literal_block>
                </div>
            </container>
        </section>
        <section ids="keyboard-shortcut" names="keyboard\ shortcut 键盘快捷键">
            <title>键盘快捷键</title>
            <paragraph>当游戏使用键盘控制，可以方便地按键盘上的键来启动游戏。一种方法是使用 <literal>Button</literal> 节点的 “Shortcut”（快捷键）属性。</paragraph>
            <paragraph>在上一课中，我们创建了四个输入动作来移动角色。我们将创建一个类似的输入动作来映射到开始按钮。</paragraph>
            <paragraph>选择“项目 -&gt; 项目设置”，然后单击“输入映射”选项卡。与创建移动输入动作的方式相同，创建一个名为 <literal>start_game</literal> 的新输入操作，并为 <literal classes="kbd">Enter</literal> 添加按键映射。</paragraph>
            <image candidates="{'*': 'getting_started/first_2d_game/img/input-mapping-start_game.webp'}" uri="getting_started/first_2d_game/img/input-mapping-start_game.webp"></image>
            <paragraph>如果你有一个手柄，现在可以添加一个手柄支持。连接上你的手柄，然后在每一个你想添加手柄支持的输入动作下，点击 "+" 按钮然后按下该输入动作对应的按钮，方向键或者摇杆。</paragraph>
            <paragraph>在 <literal>HUD</literal> 场景中，选择 <literal>StartButton</literal> 并在检查器中找到它的 <strong>Shortcut（快捷方式）</strong>属性。通过在框中单击来创建一个新的 <reference internal="True" refuri="../../classes/class_shortcut#class-shortcut"><inline classes="std std-ref">快捷键</inline></reference> 资源，打开 <strong>Events（事件）</strong> 数组并通过单击 <strong>Array[InputEvent] (size 0)</strong> 向其添加一个新的数组元素。</paragraph>
            <image candidates="{'*': 'getting_started/first_2d_game/img/start_button_shortcut.webp'}" uri="getting_started/first_2d_game/img/start_button_shortcut.webp"></image>
            <paragraph>创建一个新的 <reference internal="True" refuri="../../classes/class_inputeventaction#class-inputeventaction"><inline classes="std std-ref">InputEventAction</inline></reference>并将其命名为 <literal>start_game</literal>。</paragraph>
            <image candidates="{'*': 'getting_started/first_2d_game/img/start_button_shortcut2.webp'}" uri="getting_started/first_2d_game/img/start_button_shortcut2.webp"></image>
            <paragraph>这样，开始按钮出现后，你就可以点击它或按 <literal classes="kbd">Enter</literal> 来启动游戏。</paragraph>
            <paragraph>就这样，你在 Godot 中完成了你的第一个 2D 游戏。</paragraph>
            <image candidates="{'*': 'getting_started/first_2d_game/img/dodge_preview.gif'}" uri="getting_started/first_2d_game/img/dodge_preview.gif"></image>
            <paragraph>你已经能够制作由玩家控制的角色、在游戏区域内随机产生的敌人、计算分数、实现游戏结束和重玩、用户界面、声音，以及更多内容。祝贺！</paragraph>
            <paragraph>还有很多东西需要学习，但你可以花点时间来欣赏你所取得的成就。</paragraph>
            <paragraph>当你准备好了，你可以继续学习 <reference internal="True" refuri="../first_3d_game/index#doc-your-first-3d-game"><inline classes="std std-ref">你的第一个 3D 游戏</inline></reference>，学习在 Godot 中从头开始创建一个完整的 3D 游戏。</paragraph>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
