<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/getting_started/first_2d_game/03.coding_the_player.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-your-first-2d-game-coding-the-player"></target>
    <section ids="coding-the-player doc-your-first-2d-game-coding-the-player" names="coding\ the\ player 编写玩家代码 doc_your_first_2d_game_coding_the_player">
        <title>编写玩家代码</title>
        <paragraph>在这一课中，我们将添加玩家的动作、动画，并将其设置为检测碰撞。</paragraph>
        <paragraph>现在我们需要添加一些内置节点所不具备的功能，因此要添加一个脚本。点击 <literal>Player</literal> 节点然后点击“附加脚本”按钮：</paragraph>
        <image candidates="{'*': 'getting_started/first_2d_game/img/add_script_button.webp'}" uri="getting_started/first_2d_game/img/add_script_button.webp"></image>
        <paragraph>在脚本设置窗口中，你可以维持默认设置。点击“创建”即可：</paragraph>
        <note>
            <paragraph>如果你要创建 C# 脚本或者其他语言的脚本，那就在创建之前在<title_reference>语言</title_reference>下拉菜单中选择语言。</paragraph>
        </note>
        <image candidates="{'*': 'getting_started/first_2d_game/img/attach_node_window.webp'}" uri="getting_started/first_2d_game/img/attach_node_window.webp"></image>
        <note>
            <paragraph>如果这是你第一次接触 GDScript，请在继续之前阅读 <reference internal="True" refuri="../step_by_step/scripting_languages#doc-scripting"><inline classes="std std-ref">脚本语言</inline></reference>。</paragraph>
        </note>
        <paragraph>首先声明该对象将需要的成员变量：</paragraph>
        <container classes="sphinx-tabs" type="tab-element">
            <div aria-label="Tabbed content" role="tablist">
                <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
            </div>
            <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">extends Area2D

@export var speed = 400 # How fast the player will move (pixels/sec).
var screen_size # Size of the game window.</literal_block>
            </div>
            <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">using Godot;

public partial class Player : Area2D
{
    [Export]
    public int Speed { get; set; } = 400; // How fast the player will move (pixels/sec).

    public Vector2 ScreenSize; // Size of the game window.
}</literal_block>
            </div>
        </container>
        <paragraph>Using the <literal>export</literal> keyword on the first variable <literal>speed</literal> allows us to set
            its value in the Inspector. This can be handy for values that you want to be
            able to adjust just like a node's built-in properties. Click on the <literal>Player</literal>
            node and you'll see the property now appears in the Inspector in a new section
            with the name of the script. Remember, if you change the value here, it will
            override the value written in the script.</paragraph>
        <warning>
            <paragraph>如果你在使用 C# ，想要查看新的导出变量或信号，就需要（重新）构建项目程序集。可以通过点击编辑器右上角的 <strong>构建</strong> 按钮手动触发构建过程。</paragraph>
            <image candidates="{'*': 'getting_started/first_2d_game/img/build_dotnet.webp'}" uri="getting_started/first_2d_game/img/build_dotnet.webp"></image>
        </warning>
        <image candidates="{'*': 'getting_started/first_2d_game/img/export_variable.webp'}" uri="getting_started/first_2d_game/img/export_variable.webp"></image>
        <paragraph>你的 <literal>player.gd</literal> 脚本应该已经包含一个 <literal>_ready()</literal> 和一个 <literal>_process()</literal> 函数。如果你没有选择上面展示的默认模板，请在学习本课程的同时创建这些函数。</paragraph>
        <paragraph>当节点进入场景树时，<literal>_ready()</literal> 函数被调用，这是查看游戏窗口大小的好时机：</paragraph>
        <container classes="sphinx-tabs" type="tab-element">
            <div aria-label="Tabbed content" role="tablist">
                <button aria-controls="panel-1-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                <button aria-controls="panel-1-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
            </div>
            <div aria-labelledby="tab-1-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func _ready():
    screen_size = get_viewport_rect().size</literal_block>
            </div>
            <div aria-labelledby="tab-1-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-1-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">public override void _Ready()
{
    ScreenSize = GetViewportRect().Size;
}</literal_block>
            </div>
        </container>
        <paragraph>现在我们可以使用 <literal>_process()</literal> 函数定义玩家将执行的操作。<literal>_process()</literal> 在每一帧都被调用，因此我们将使用它来更新我们希望会经常变化的游戏元素。对于玩家而言，我们需要执行以下操作：</paragraph>
        <bullet_list bullet="-">
            <list_item>
                <paragraph>检查输入。</paragraph>
            </list_item>
            <list_item>
                <paragraph>沿给定方向移动。</paragraph>
            </list_item>
            <list_item>
                <paragraph>播放合适的动画。</paragraph>
            </list_item>
        </bullet_list>
        <paragraph>首先，我们需要检查输入——玩家是否正在按键？对于这个游戏，我们有 4 个方向的输入要检查。输入动作在项目设置中的“输入映射”下定义。在这里，你可以定义自定义事件，并为其分配不同的按键、鼠标事件、或者其他输入。对于此游戏，我们将把方向键映射给四个方向。</paragraph>
        <paragraph>点击<emphasis>项目 -&gt; 项目设置</emphasis>打开项目设置窗口，然后单击顶部的<emphasis>输入映射</emphasis>选项卡。在顶部栏中键入“move_right”，然后单击“添加”按钮以添加该 <literal>move_right</literal> 动作。</paragraph>
        <image candidates="{'*': 'getting_started/first_2d_game/img/input-mapping-add-action.webp'}" uri="getting_started/first_2d_game/img/input-mapping-add-action.webp"></image>
        <paragraph>我们需要为这个操作分配一个按键。单击右侧的“+”图标，打开事件管理器窗口。</paragraph>
        <image candidates="{'*': 'getting_started/first_2d_game/img/input-mapping-add-key.webp'}" uri="getting_started/first_2d_game/img/input-mapping-add-key.webp"></image>
        <paragraph>会自动选中“监听输入...”区域。按下键盘上的“右方向”键，菜单应该像这样。</paragraph>
        <image candidates="{'*': 'getting_started/first_2d_game/img/input-mapping-event-configuration.webp'}" uri="getting_started/first_2d_game/img/input-mapping-event-configuration.webp"></image>
        <paragraph>选择“确定”按钮。现在“右方向”键与 <literal>move_right</literal> 动作关联了。</paragraph>
        <paragraph>重复这些步骤以再添加三个映射：</paragraph>
        <enumerated_list enumtype="arabic" prefix="" suffix=".">
            <list_item>
                <paragraph><literal>move_left</literal> 映射到左箭头键。</paragraph>
            </list_item>
            <list_item>
                <paragraph><literal>move_up</literal> 映射到向上箭头键。</paragraph>
            </list_item>
            <list_item>
                <paragraph><literal>move_down</literal> 映射到向下箭头键。</paragraph>
            </list_item>
        </enumerated_list>
        <paragraph>按键映射选项卡应该看起来类似这样：</paragraph>
        <image candidates="{'*': 'getting_started/first_2d_game/img/input-mapping-completed.webp'}" uri="getting_started/first_2d_game/img/input-mapping-completed.webp"></image>
        <paragraph>单击“关闭”按钮关闭项目设置。</paragraph>
        <note>
            <paragraph>我们只将一个键映射到每个输入动作，但你可以将多个键、操纵杆按钮或鼠标按钮映射到同一个输入动作。</paragraph>
        </note>
        <paragraph>你可以使用 <literal>Input.is_action_pressed()</literal> 来检测是否按下了键, 如果按下会返回 <literal>true</literal>, 否则返回 <literal>false</literal> .</paragraph>
        <container classes="sphinx-tabs" type="tab-element">
            <div aria-label="Tabbed content" role="tablist">
                <button aria-controls="panel-2-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                <button aria-controls="panel-2-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
            </div>
            <div aria-labelledby="tab-2-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func _process(delta):
    var velocity = Vector2.ZERO # The player's movement vector.
    if Input.is_action_pressed("move_right"):
        velocity.x += 1
    if Input.is_action_pressed("move_left"):
        velocity.x -= 1
    if Input.is_action_pressed("move_down"):
        velocity.y += 1
    if Input.is_action_pressed("move_up"):
        velocity.y -= 1

    if velocity.length() &gt; 0:
        velocity = velocity.normalized() * speed
        $AnimatedSprite2D.play()
    else:
        $AnimatedSprite2D.stop()</literal_block>
            </div>
            <div aria-labelledby="tab-2-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-2-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">public override void _Process(double delta)
{
    var velocity = Vector2.Zero; // The player's movement vector.

    if (Input.IsActionPressed("move_right"))
    {
        velocity.X += 1;
    }

    if (Input.IsActionPressed("move_left"))
    {
        velocity.X -= 1;
    }

    if (Input.IsActionPressed("move_down"))
    {
        velocity.Y += 1;
    }

    if (Input.IsActionPressed("move_up"))
    {
        velocity.Y -= 1;
    }

    var animatedSprite2D = GetNode&lt;AnimatedSprite2D&gt;("AnimatedSprite2D");

    if (velocity.Length() &gt; 0)
    {
        velocity = velocity.Normalized() * Speed;
        animatedSprite2D.Play();
    }
    else
    {
        animatedSprite2D.Stop();
    }
}</literal_block>
            </div>
        </container>
        <paragraph>我们首先将 <literal>velocity</literal> 设置为 <literal>(0, 0)</literal>——默认情况下玩家不应该移动。然后我们检查每个输入并从 <literal>velocity</literal> 中进行加/减以获得总方向。例如，如果你同时按住 <literal>右</literal> 和 <literal>下</literal>，则生成的 <literal>velocity</literal> 向量将为 <literal>(1, 1)</literal>。此时，由于我们同时向水平和垂直两个方向进行移动，玩家斜向移动的速度将会比水平移动要<emphasis>更快</emphasis>。</paragraph>
        <paragraph>只要对速度进行<emphasis>归一化</emphasis>就可以防止这种情况，也就是将速度的<emphasis>长度</emphasis>设置为 <literal>1</literal>，然后乘以想要的速度。这样就不会有过快的斜向运动了。</paragraph>
        <tip>
            <paragraph>如果你以前从未使用过向量数学，或者需要复习，可以在 Godot 中的 <reference internal="True" refuri="../../tutorials/math/vector_math#doc-vector-math"><inline classes="std std-ref">向量数学</inline></reference> 上查看向量用法的解释。最好了解一下，但对于本教程的其余部分而言，这不是必需的。</paragraph>
        </tip>
        <paragraph>我们还会检查玩家是否正在移动，以便在 AnimatedSprite2D 上调用 <literal>play()</literal> 或 <literal>stop()</literal> 。</paragraph>
        <tip>
            <paragraph><literal>$</literal> 是 <literal>get_node()</literal> 的简写。因此在上面的代码中，<literal>$AnimatedSprite2D.play()</literal> 与 <literal>get_node("AnimatedSprite2D").play()</literal> 相同。</paragraph>
            <paragraph>在 GDScript 中， <literal>$</literal> 返回从当前节点开始的相对路径上的节点，如果找不到该节点，则返回 <literal>null</literal> 。当前 AnimatedSprite2D 是该节点子节点，所以可以使用 <literal>$AnimatedSprite2D</literal> 以获取。</paragraph>
        </tip>
        <paragraph>现在我们有了一个运动方向，我们可以更新玩家的位置了。我们也可以使用 <literal>clamp()</literal> 来防止它离开屏幕。 <emphasis>clamp</emphasis> 一个值意味着将其限制在给定范围内。将以下内容添加到 <literal>_process</literal> 函数的底部：</paragraph>
        <container classes="sphinx-tabs" type="tab-element">
            <div aria-label="Tabbed content" role="tablist">
                <button aria-controls="panel-3-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-3-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                <button aria-controls="panel-3-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-3-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
            </div>
            <div aria-labelledby="tab-3-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-3-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">position += velocity * delta
position = position.clamp(Vector2.ZERO, screen_size)</literal_block>
            </div>
            <div aria-labelledby="tab-3-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-3-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">Position += velocity * (float)delta;
Position = new Vector2(
    x: Mathf.Clamp(Position.X, 0, ScreenSize.X),
    y: Mathf.Clamp(Position.Y, 0, ScreenSize.Y)
);</literal_block>
            </div>
        </container>
        <tip>
            <paragraph><title_reference>_process()</title_reference> 函数的 <title_reference>delta</title_reference> 参数是 <emphasis>帧长度</emphasis> ——完成上一帧所花费的时间. 使用这个值的话, 可以保证你的移动不会被帧率的变化所影响.</paragraph>
        </tip>
        <paragraph>Click "Run Current Scene" (<literal classes="kbd">F6</literal>, <literal classes="kbd">Cmd + R</literal> on macOS) and confirm you can move
            the player around the screen in all directions.</paragraph>
        <warning>
            <paragraph>如果在“调试器”面板中出现错误</paragraph>
            <paragraph><literal>Attempt to call function 'play' in base 'null instance' on a null instance</literal>（尝试调用空实例在基类“空实例”上的“play”函数）</paragraph>
            <paragraph>这可能意味着你拼错了 AnimatedSprite2D 节点的名称。节点名称区分大小写，并且 <literal>$NodeName</literal> 必须与你在场景树中看到的名称匹配。</paragraph>
        </warning>
        <section ids="choosing-animations" names="choosing\ animations 选择动画">
            <title>选择动画</title>
            <paragraph>现在玩家可以移动了，我们需要根据方向更改 AnimatedSprite2D 所播放的动画。我们的“walk”动画显示的是玩家向右走。向左移动时就应该使用 <literal>flip_h</literal> 属性将这个动画进行水平翻转。我们还有向上的“up”动画，向下移动时就应该使用 <literal>flip_v</literal> 将其进行垂直翻转。让我们把这段代码放在 <literal>_process()</literal> 函数的末尾：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-4-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-4-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-4-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-4-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-4-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-4-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">if velocity.x != 0:
    $AnimatedSprite2D.animation = "walk"
    $AnimatedSprite2D.flip_v = false
    # See the note below about boolean assignment.
    $AnimatedSprite2D.flip_h = velocity.x &lt; 0
elif velocity.y != 0:
    $AnimatedSprite2D.animation = "up"
    $AnimatedSprite2D.flip_v = velocity.y &gt; 0</literal_block>
                </div>
                <div aria-labelledby="tab-4-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-4-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">if (velocity.X != 0)
{
    animatedSprite2D.Animation = "walk";
    animatedSprite2D.FlipV = false;
    // See the note below about boolean assignment.
    animatedSprite2D.FlipH = velocity.X &lt; 0;
}
else if (velocity.Y != 0)
{
    animatedSprite2D.Animation = "up";
    animatedSprite2D.FlipV = velocity.Y &gt; 0;
}</literal_block>
                </div>
            </container>
            <note>
                <paragraph>上面代码中的布尔赋值是程序员常用的缩写. 在做布尔比较同时, 同时可 <emphasis>赋</emphasis> 一个布尔值. 参考这段代码与上面的单行布尔赋值:</paragraph>
                <container classes="sphinx-tabs" type="tab-element">
                    <div aria-label="Tabbed content" role="tablist">
                        <button aria-controls="panel-5-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-5-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                        <button aria-controls="panel-5-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-5-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                    </div>
                    <div aria-labelledby="tab-5-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-5-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                        <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">if velocity.x &lt; 0:
    $AnimatedSprite2D.flip_h = true
else:
    $AnimatedSprite2D.flip_h = false</literal_block>
                    </div>
                    <div aria-labelledby="tab-5-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-5-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                        <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">if (velocity.X &lt; 0)
{
    animatedSprite2D.FlipH = true;
}
else
{
    animatedSprite2D.FlipH = false;
}</literal_block>
                    </div>
                </container>
            </note>
            <paragraph>再次播放场景并检查每个方向上的动画是否正确.</paragraph>
            <tip>
                <paragraph>这里一个常见错误是打错了动画的名字。“动画帧”面板中的动画名称必须与在代码中键入的内容匹配。如果你将动画命名成了 <literal>"Walk"</literal>，就必须在代码中也使用大写的“W”。</paragraph>
            </tip>
            <paragraph>当你确定移动正常工作时， 请将此行添加到 <literal>_ready()</literal> 中，在游戏开始时隐藏玩家：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-6-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-6-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-6-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-6-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-6-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-6-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">hide()</literal_block>
                </div>
                <div aria-labelledby="tab-6-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-6-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">Hide();</literal_block>
                </div>
            </container>
        </section>
        <section ids="preparing-for-collisions" names="preparing\ for\ collisions 准备碰撞">
            <title>准备碰撞</title>
            <paragraph>我们希望 <literal>Player</literal> 能够检测到何时被敌人击中, 但是我们还没有任何敌人！没关系, 因为我们将使用Godot的 <emphasis>信号</emphasis> 功能来使其正常工作.</paragraph>
            <paragraph>在脚本顶部添加以下内容。如果你使用的是 GDScript，请将其添加到 <literal>extends Area2D</literal> 之后。如果你使用 C#，请将其添加到 <literal>public partial class Player : Area2D</literal> 之后：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-7-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-7-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-7-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-7-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-7-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-7-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">signal hit</literal_block>
                </div>
                <div aria-labelledby="tab-7-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-7-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">// Don't forget to rebuild the project so the editor knows about the new signal.

[Signal]
public delegate void HitEventHandler();</literal_block>
                </div>
            </container>
            <paragraph>这定义了一个叫作“hit”的自定义信号，当玩家与敌人碰撞时，我们会让他发出这个信号。我们将使用 <literal>Area2D</literal> 来检测碰撞。选中 <literal>Player</literal> 节点，然后点击“检查器”选项卡旁边的“节点”选项卡，就可以查看玩家可以发出的信号列表：</paragraph>
            <image candidates="{'*': 'getting_started/first_2d_game/img/player_signals.webp'}" uri="getting_started/first_2d_game/img/player_signals.webp"></image>
            <paragraph>请注意自定义的“hit”信号也在其中！由于敌人将是 <literal>RigidBody2D</literal> 节点，所以需要 <literal>body_entered(body: Node2D)</literal> 信号。当物体接触到玩家时就会发出这个信号。点击“连接...”就会出现“连接信号”窗口。</paragraph>
            <paragraph>Godot 将直接在脚本中为你创建一个具有确切名称的函数。现在你不需要更改默认设置。</paragraph>
            <warning>
                <comment xml:space="preserve">The issue for this bug is #41283</comment>
                <paragraph>如果你使用外部文本编辑器（例如 Visual Studio Code），当前有一个错误会阻止 Godot 执行此操作。你将被送到外部编辑器那边，但在那里并不会有新函数。</paragraph>
                <paragraph>在这种情况下，你需要自己将该函数写入玩家的脚本文件中。</paragraph>
            </warning>
            <image candidates="{'*': 'getting_started/first_2d_game/img/player_signal_connection.webp'}" uri="getting_started/first_2d_game/img/player_signal_connection.webp"></image>
            <paragraph>注意，绿色图标表示信号已连接到此函数；但这并不意味着该函数存在，只是信号将尝试连接到具有该名称的函数。因此请仔细检查该函数的拼写是否能完全匹配上！</paragraph>
            <paragraph>接下来，将此代码添加到函数中：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-8-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-8-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-8-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-8-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-8-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-8-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func _on_body_entered(body):
    hide() # Player disappears after being hit.
    hit.emit()
    # Must be deferred as we can't change physics properties on a physics callback.
    $CollisionShape2D.set_deferred("disabled", true)</literal_block>
                </div>
                <div aria-labelledby="tab-8-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-8-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">private void OnBodyEntered(Node2D body)
{
    Hide(); // Player disappears after being hit.
    EmitSignal(SignalName.Hit);
    // Must be deferred as we can't change physics properties on a physics callback.
    GetNode&lt;CollisionShape2D&gt;("CollisionShape2D").SetDeferred(CollisionShape2D.PropertyName.Disabled, true);
}</literal_block>
                </div>
            </container>
            <paragraph>敌人每次击中 玩家时都会发出一个信号。我们需要禁用玩家的碰撞检测，确保我们不会多次触发 <literal>hit</literal> 信号。</paragraph>
            <note>
                <paragraph>如果在引擎的碰撞处理过程中禁用区域的碰撞形状可能会导致错误。使用 <literal>set_deferred()</literal> 告诉 Godot 等待可以安全地禁用形状时再这样做。</paragraph>
            </note>
            <paragraph>最后再为玩家添加一个函数，用于在开始新游戏时调用来重置玩家。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-9-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-9-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-9-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-9-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-9-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-9-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func start(pos):
    position = pos
    show()
    $CollisionShape2D.disabled = false</literal_block>
                </div>
                <div aria-labelledby="tab-9-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-9-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">public void Start(Vector2 position)
{
    Position = position;
    Show();
    GetNode&lt;CollisionShape2D&gt;("CollisionShape2D").Disabled = false;
}</literal_block>
                </div>
            </container>
            <paragraph>在玩家部分的工作完成后，我们将在下一课中研究敌人。</paragraph>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
