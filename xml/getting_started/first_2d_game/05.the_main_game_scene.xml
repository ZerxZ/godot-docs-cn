<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/getting_started/first_2d_game/05.the_main_game_scene.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-your-first-2d-game-the-main-game-scene"></target>
    <section ids="the-main-game-scene doc-your-first-2d-game-the-main-game-scene" names="the\ main\ game\ scene 游戏主场景 doc_your_first_2d_game_the_main_game_scene">
        <title>游戏主场景</title>
        <paragraph>现在是时候将我们所做的一切整合到一个可玩的游戏场景中了。</paragraph>
        <paragraph>创建新场景并添加一个 <reference internal="True" refuri="../../classes/class_node#class-node"><inline classes="std std-ref">Node</inline></reference> 节点，命名为 <literal>Main</literal>。（我们之所以使用 Node 而不是 Node2D，是因为这个节点会作为处理游戏逻辑的容器使用。本身是不需要 2D 功能的。）</paragraph>
        <paragraph>点击<strong>实例化</strong>按钮（由链条图标表示）并选择保存的 <literal>player.tscn</literal>。</paragraph>
        <image candidates="{'*': 'getting_started/first_2d_game/img/instance_scene.webp'}" uri="getting_started/first_2d_game/img/instance_scene.webp"></image>
        <paragraph>现在, 将以下节点添加为 <literal>Main</literal> 的子节点, 并按如下所示对其进行命名(值以秒为单位):</paragraph>
        <bullet_list bullet="-">
            <list_item>
                <paragraph><reference internal="True" refuri="../../classes/class_timer#class-timer"><inline classes="std std-ref">Timer</inline></reference>（名为 <literal>MobTimer</literal>）——控制怪物产生的频率</paragraph>
            </list_item>
            <list_item>
                <paragraph><reference internal="True" refuri="../../classes/class_timer#class-timer"><inline classes="std std-ref">Timer</inline></reference>（名为 <literal>ScoreTimer</literal>）——每秒增加分数</paragraph>
            </list_item>
            <list_item>
                <paragraph><reference internal="True" refuri="../../classes/class_timer#class-timer"><inline classes="std std-ref">Timer</inline></reference>（名为 <literal>StartTimer</literal>）——在开始之前给出延迟</paragraph>
            </list_item>
            <list_item>
                <paragraph><reference internal="True" refuri="../../classes/class_marker2d#class-marker2d"><inline classes="std std-ref">Marker2D</inline></reference>（名为 <literal>StartPosition</literal>）——表示玩家的起始位置</paragraph>
            </list_item>
        </bullet_list>
        <paragraph>如下设置每个 <literal>Timer</literal> 节点的 <literal>Wait Time</literal> 属性：</paragraph>
        <bullet_list bullet="-">
            <list_item>
                <paragraph><literal>MobTimer</literal>：<literal>0.5</literal></paragraph>
            </list_item>
            <list_item>
                <paragraph><literal>ScoreTimer</literal>：<literal>1</literal></paragraph>
            </list_item>
            <list_item>
                <paragraph><literal>StartTimer</literal>：<literal>2</literal></paragraph>
            </list_item>
        </bullet_list>
        <paragraph>此外，将 <literal>StartTimer</literal> 的 <literal>One Shot</literal> 属性设置为“启用”，并将 <literal>StartPosition</literal> 节点的 <literal>Position</literal> 设置为 <literal>(240, 450)</literal>。</paragraph>
        <section ids="spawning-mobs" names="spawning\ mobs 生成怪物">
            <title>生成怪物</title>
            <paragraph><literal>Main</literal> 节点将产生新的生物, 我们希望它们出现在屏幕边缘的随机位置. 添加一个名为 <literal>MobPath</literal> 的 <reference internal="True" refuri="../../classes/class_path2d#class-path2d"><inline classes="std std-ref">Path2D</inline></reference> 节点作为 <literal>Main</literal> 的子级. 当你选择 <literal>Path2D</literal> 时, 你将在编辑器顶部看到一些新按钮:</paragraph>
            <image candidates="{'*': 'getting_started/first_2d_game/img/path2d_buttons.webp'}" uri="getting_started/first_2d_game/img/path2d_buttons.webp"></image>
            <paragraph>选择添加点按钮，并单击以添加拐角点来绘制路径。可使用网格捕捉和用智能捕捉，使点对齐到网格。</paragraph>
            <image candidates="{'*': 'getting_started/first_2d_game/img/grid_snap_button.webp'}" uri="getting_started/first_2d_game/img/grid_snap_button.webp"></image>
            <important>
                <paragraph>以<emphasis>顺时针</emphasis>的顺序绘制路径，否则小怪会<emphasis>向外</emphasis>而非<emphasis>向内</emphasis>生成！</paragraph>
            </important>
            <image candidates="{'*': 'getting_started/first_2d_game/img/draw_path2d.gif'}" uri="getting_started/first_2d_game/img/draw_path2d.gif"></image>
            <paragraph>在图像上放置点 <literal>4</literal> 后, 点击 <literal>闭合曲线</literal> 按钮, 你的曲线将完成.</paragraph>
            <paragraph>现在已经定义了路径, 添加一个 <reference internal="True" refuri="../../classes/class_pathfollow2d#class-pathfollow2d"><inline classes="std std-ref">PathFollow2D</inline></reference> 节点作为 <literal>MobPath</literal> 的子节点, 并将其命名为 <literal>MobSpawnLocation</literal>. 该节点在移动时, 将自动旋转并沿着该路径, 因此我们可以使用它沿路径来选择随机位置和方向.</paragraph>
            <paragraph>你的场景应如下所示:</paragraph>
            <image candidates="{'*': 'getting_started/first_2d_game/img/main_scene_nodes.webp'}" uri="getting_started/first_2d_game/img/main_scene_nodes.webp"></image>
        </section>
        <section ids="main-script" names="main\ script main\ 脚本">
            <title>Main 脚本</title>
            <paragraph>将脚本添加到 <literal>Main</literal>。在脚本的顶部，我们使用 <literal>@export var mob_scene: PackedScene</literal> 来允许我们选择要实例化的 Mob 场景。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">extends Node

@export var mob_scene: PackedScene
var score</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">using Godot;

public partial class Main : Node
{
    // Don't forget to rebuild the project so the editor knows about the new export variable.

    [Export]
    public PackedScene MobScene { get; set; }

    private int _score;
}</literal_block>
                </div>
            </container>
            <paragraph>Click the <literal>Main</literal> node and you will see the <literal>Mob Scene</literal> property in the Inspector
                under "Main.gd".</paragraph>
            <paragraph>有两种方法来给这个属性赋值:</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>将 <literal>mob.tscn</literal> 从“文件系统”面板拖放到 <strong>Mob Scene</strong> 属性里。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>单击“[空]”旁边的下拉箭头按钮，选择“加载”。选择 <literal>mob.tscn</literal>。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>然后选中“场景”面板中 <literal>Main</literal> 节点下的 <literal>Player</literal> 场景实例，切换到侧边栏的“节点”面板。请确保“节点”面板中的“信号”选项卡处于选中状态。</paragraph>
            <paragraph>你可以看到 <literal>Player</literal> 的信号列表。找到 <literal>hit</literal> 信号并双击（或右键选择 "Connect..."）将会打开信号连接窗口。接下来创建用于在游戏结束时进行一些处理的 <literal>game_over</literal> 函数。在信号连接窗口底部的 “Receiver Method” 框中输入 “game_over”，并点击 “Connect”。 你的目标是从 <literal>Player</literal> 发出 <literal>hit</literal> 信号，并在 <literal>Main</literal> 脚本中进行处理。将以下代码添加到新函数中，以及一个 <literal>new_game</literal> 函数，该函数将为新游戏设置一切：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-1-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-1-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-1-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func game_over():
    $ScoreTimer.stop()
    $MobTimer.stop()

func new_game():
    score = 0
    $Player.start($StartPosition.position)
    $StartTimer.start()</literal_block>
                </div>
                <div aria-labelledby="tab-1-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-1-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">public void GameOver()
{
    GetNode&lt;Timer&gt;("MobTimer").Stop();
    GetNode&lt;Timer&gt;("ScoreTimer").Stop();
}

public void NewGame()
{
    _score = 0;

    var player = GetNode&lt;Player&gt;("Player");
    var startPosition = GetNode&lt;Marker2D&gt;("StartPosition");
    player.Start(startPosition.Position);

    GetNode&lt;Timer&gt;("StartTimer").Start();
}</literal_block>
                </div>
            </container>
            <paragraph>现在将每个 <literal>Timer</literal> 节点（<literal>StartTimer</literal>，<literal>ScoreTimer</literal> 和 <literal>MobTimer</literal>）的 <literal>timeout()</literal> 信号连接到 <literal>main</literal> 脚本。 <literal>StartTimer</literal> 将启动其他两个计时器。 <literal>ScoreTimer</literal> 将使得分加1。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-2-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-2-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-2-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func _on_score_timer_timeout():
    score += 1

func _on_start_timer_timeout():
    $MobTimer.start()
    $ScoreTimer.start()</literal_block>
                </div>
                <div aria-labelledby="tab-2-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-2-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">private void OnScoreTimerTimeout()
{
    _score++;
}

private void OnStartTimerTimeout()
{
    GetNode&lt;Timer&gt;("MobTimer").Start();
    GetNode&lt;Timer&gt;("ScoreTimer").Start();
}</literal_block>
                </div>
            </container>
            <paragraph>在 <literal>_on_mob_timer_timeout()</literal> 中， 我们先创建小怪实例，然后沿着 <literal>Path2D</literal> 路径随机选取起始位置，最后让小怪移动。<literal>PathFollow2D</literal> 节点将沿路径移动，并会自动旋转，所以我们将使用它来选择怪物的方位和朝向。生成小怪后，我们会在 <literal>150.0</literal> 和 <literal>250.0</literal> 之间选取随机值，表示每只小怪的移动速度（如果它们都以相同的速度移动，那么就太无聊了）。</paragraph>
            <paragraph>注意，必须使用 <literal>add_child()</literal> 将新实例添加到场景中。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-3-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-3-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-3-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-3-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-3-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-3-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func _on_mob_timer_timeout():
    # Create a new instance of the Mob scene.
    var mob = mob_scene.instantiate()

    # Choose a random location on Path2D.
    var mob_spawn_location = $MobPath/MobSpawnLocation
    mob_spawn_location.progress_ratio = randf()

    # Set the mob's direction perpendicular to the path direction.
    var direction = mob_spawn_location.rotation + PI / 2

    # Set the mob's position to a random location.
    mob.position = mob_spawn_location.position

    # Add some randomness to the direction.
    direction += randf_range(-PI / 4, PI / 4)
    mob.rotation = direction

    # Choose the velocity for the mob.
    var velocity = Vector2(randf_range(150.0, 250.0), 0.0)
    mob.linear_velocity = velocity.rotated(direction)

    # Spawn the mob by adding it to the Main scene.
    add_child(mob)</literal_block>
                </div>
                <div aria-labelledby="tab-3-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-3-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">private void OnMobTimerTimeout()
{
    // Note: Normally it is best to use explicit types rather than the `var`
    // keyword. However, var is acceptable to use here because the types are
    // obviously Mob and PathFollow2D, since they appear later on the line.

    // Create a new instance of the Mob scene.
    Mob mob = MobScene.Instantiate&lt;Mob&gt;();

    // Choose a random location on Path2D.
    var mobSpawnLocation = GetNode&lt;PathFollow2D&gt;("MobPath/MobSpawnLocation");
    mobSpawnLocation.ProgressRatio = GD.Randf();

    // Set the mob's direction perpendicular to the path direction.
    float direction = mobSpawnLocation.Rotation + Mathf.Pi / 2;

    // Set the mob's position to a random location.
    mob.Position = mobSpawnLocation.Position;

    // Add some randomness to the direction.
    direction += (float)GD.RandRange(-Mathf.Pi / 4, Mathf.Pi / 4);
    mob.Rotation = direction;

    // Choose the velocity.
    var velocity = new Vector2((float)GD.RandRange(150.0, 250.0), 0);
    mob.LinearVelocity = velocity.Rotated(direction);

    // Spawn the mob by adding it to the Main scene.
    AddChild(mob);
}</literal_block>
                </div>
            </container>
            <important>
                <paragraph>为什么要用 <literal>PI</literal>？在需要传入角度的函数中，Godot 使用的是<emphasis>弧度</emphasis>而不是度数。圆周率（Pi）表示转半圈的弧度，约为 <literal>3.1415</literal>（还提供了等于 <literal>2 * PI</literal> 的 <literal>TAU</literal>）。如果你更喜欢使用度数，则需使用 <literal>deg_to_rad()</literal> 和 <literal>rad_to_deg()</literal> 函数在这两种单位之间进行转换。</paragraph>
            </important>
        </section>
        <section ids="testing-the-scene" names="testing\ the\ scene 测试场景">
            <title>测试场景</title>
            <paragraph>让我们测试这个场景，确保一切正常。请将对 <literal>new_game</literal> 的调用添加至 <literal>_ready()</literal>：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-4-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-4-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-4-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-4-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-4-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-4-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func _ready():
    new_game()</literal_block>
                </div>
                <div aria-labelledby="tab-4-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-4-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">public override void _Ready()
{
    NewGame();
}</literal_block>
                </div>
            </container>
            <paragraph>让我们同时指定 <literal>Main</literal> 作为我们的“主场景”——游戏启动时自动运行的场景。按下“运行”按钮，当弹出提示时选择 <literal>main.tscn</literal>。</paragraph>
            <tip>
                <paragraph>如果你已经将别的场景设置为“主场景”了，你可以在“文件系统”面板上右键点击 <literal>main.tscn</literal> 并选择“设为主场景”。</paragraph>
            </tip>
            <paragraph>你应该可以四处移动游戏角色，观察敌人的生成，以及玩家被敌人击中时会消失。</paragraph>
            <paragraph>当你确定一切正常时，在 <literal>_ready()</literal> 中删除对 <literal>new_game()</literal> 的调用，使用 <literal>pass</literal> 替代它。</paragraph>
            <paragraph>我们的游戏还缺点啥？缺用户界面。在下一课中，我们将会添加标题界面并且显示玩家的分数。</paragraph>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
