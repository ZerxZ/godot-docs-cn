<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/getting_started/step_by_step/scripting_languages.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">Intention: only introduce what a script does in general and options for
scripting languages.</comment>
    <target refid="doc-scripting"></target>
    <section ids="scripting-languages doc-scripting" names="scripting\ languages 脚本语言 doc_scripting">
        <title>脚本语言</title>
        <paragraph>本课将向你介绍 Godot 中可用的脚本语言。你将了解每个选项的优点和缺点。在下一部分，你将使用 GDScript 编写你的第一个脚本。</paragraph>
        <paragraph><strong>脚本附加到节点并扩展其行为</strong>。这意味着脚本继承所附加节点的全部函数和属性。</paragraph>
        <paragraph>例如，以一个 Camera2D 节点跟随一艘船的游戏为例。Camera2D 节点默认跟随其父节点。想象一下，当玩家受到伤害时，你希望相机震动。由于此功能未内置在 Godot 中，因此你可以在该 Camera2D 节点上附加脚本并对抖动进行编程。</paragraph>
        <image candidates="{'*': 'getting_started/step_by_step/img/scripting_camera_shake.gif'}" uri="getting_started/step_by_step/img/scripting_camera_shake.gif"></image>
        <section ids="available-scripting-languages" names="available\ scripting\ languages 可用的脚本语言">
            <title>可用的脚本语言</title>
            <paragraph>Godot 提供了<strong>四种游戏编程语言</strong>：GDScript、C# 以及通过 GDExtension 技术提供的 C 和 C++。还有更多社区支持的语言，但这四个是官方语言。</paragraph>
            <paragraph>你可以在一个项目中使用多种语言。例如，在团队中，你可以在 GDScript 中编写游戏逻辑，因为它编写起来很快，并使用 C# 或 C++ 来实现复杂的算法并最大限度地提高其性能。或者你可以使用 GDScript 或 C# 编写所有内容。由你自己决定。</paragraph>
            <paragraph>我们提供这种灵活性以满足不同游戏项目和开发者的需求。</paragraph>
        </section>
        <section ids="which-language-should-i-use" names="which\ language\ should\ i\ use? 我应该使用哪种语言？">
            <title>我应该使用哪种语言？</title>
            <paragraph>如果你是初学者，我们推荐<strong>从 GDScript 入手</strong>。这门语言是我们针对 Godot 和游戏开发者的需求制作的。语法简单直白，与 Godot 结合得最为紧密。</paragraph>
            <image candidates="{'*': 'getting_started/step_by_step/img/scripting_gdscript.png'}" uri="getting_started/step_by_step/img/scripting_gdscript.png"></image>
            <paragraph>使用 C# 时，你需要使用 <reference name="VSCode" refuri="https://code.visualstudio.com/">VSCode</reference><target ids="vscode" names="vscode" refuri="https://code.visualstudio.com/"></target> 或 Visual Studio 等外部编辑器。虽然对 C# 支持目前已经成熟，但相对 GDScript 而言，能找到的学习资源会比较少。因此，我们主要推荐已经熟悉 C# 语言的用户去使用 C#。</paragraph>
            <paragraph>让我们来看看各个语言的特性，以及优缺点。</paragraph>
            <section ids="gdscript" names="gdscript">
                <title>GDScript</title>
                <paragraph><reference internal="True" refuri="../../tutorials/scripting/gdscript/gdscript_basics#doc-gdscript"><inline classes="std std-ref">GDScript</inline></reference> 是一门<reference name="面向对象" refuri="https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1">面向对象</reference><target ids="id1" names="面向对象" refuri="https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1"></target>的<reference name="指令式" refuri="https://zh.wikipedia.org/wiki/%E6%8C%87%E4%BB%A4%E5%BC%8F%E7%B7%A8%E7%A8%8B">指令式</reference><target ids="id2" names="指令式" refuri="https://zh.wikipedia.org/wiki/%E6%8C%87%E4%BB%A4%E5%BC%8F%E7%B7%A8%E7%A8%8B"></target>编程语言，专为 Godot 构建。是游戏开发者为游戏开发者制作的，目的是节省编写游戏代码的时间。它的特性包括：</paragraph>
                <bullet_list bullet="-">
                    <list_item>
                        <paragraph>简单的语法，让文件更短。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>极快的编译和加载速度。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>紧密的编辑器集成，包括节点、信号、所附加场景更多信息的代码补全。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>内置向量和变换类型，让海量线性代数计算更高效，游戏必备。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>支持多线程，与静态类型的语言一样高效。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph>没有<reference name="垃圾回收" refuri="https://zh.wikipedia.org/wiki/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6_(%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8)">垃圾回收</reference><target ids="id1" names="垃圾回收" refuri="https://zh.wikipedia.org/wiki/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6_(%E8%A8%88%E7%AE%97%E6%A9%9F%E7%A7%91%E5%AD%B8)"></target>，因为最终会影响游戏的开发。引擎会默认进行引用计数，在大多数情况下为你管理内存，但你也可以在需要时自行控制内存。</paragraph>
                    </list_item>
                    <list_item>
                        <paragraph><reference name="渐进类型" refuri="https://en.wikipedia.org/wiki/Gradual_typing">渐进类型</reference><target ids="id1" names="渐进类型" refuri="https://en.wikipedia.org/wiki/Gradual_typing"></target>。变量默认是动态类型，但你也可以使用类型提示来做强类型检查。</paragraph>
                    </list_item>
                </bullet_list>
                <paragraph>因为 GDScript 用缩进来做代码块的结构化，所以它看上去像 Python，不过实际上这两者的原理截然不同。GDScript 是从 Squirrel、Lua、Python 等诸多语言中得到的灵感。</paragraph>
                <note>
                    <paragraph>我们为什么不直接使用 Python 或者 Lua？</paragraph>
                    <paragraph>很多年前，Godot 使用过 Python，后来也用过 Lua。这两个语言的集成花费了大量精力，并且还存在局限性。例如，在 Python 中做多线程支持是非常大的挑战。</paragraph>
                    <paragraph>开发专属语言不会花费更多的时间，我们还能针对游戏开发者的需求去量体裁衣。我们现在在做性能优化工作，以及用第三方语言难以实现的特性。</paragraph>
                </note>
            </section>
            <section ids="net-c" names=".net\ /\ c#">
                <title>.NET / C#</title>
                <paragraph>因为微软的 <reference name="C#" refuri="https://en.wikipedia.org/wiki/C_Sharp_(programming_language)">C#</reference><target ids="c" names="c#" refuri="https://en.wikipedia.org/wiki/C_Sharp_(programming_language)"></target> 深受游戏开发者的喜爱，我们对其有官方支持。C# 是一门成熟灵活的语言，拥有大量的库。感谢微软大方的捐助，才使得对其的支持成为可能。</paragraph>
                <image candidates="{'*': 'getting_started/step_by_step/img/scripting_csharp.png'}" uri="getting_started/step_by_step/img/scripting_csharp.png"></image>
                <paragraph>C# 在性能和易用性之间提供了不错的权衡，不过你应该了解它的垃圾回收器。</paragraph>
                <note>
                    <paragraph>你必须使用 .NET版本的 Godot 编辑器才能在项目中使用 C# 进行编程。你可以在 Godot 网站的<reference name="下载" refuri="https://godotengine.org/download/">下载</reference><target ids="id1" names="下载" refuri="https://godotengine.org/download/"></target>页面进行下载。</paragraph>
                </note>
                <paragraph>由于 Godot 使用 .NET 6，因此理论上任何第三方 .NET 库或框架都可用于编写 Godot 脚本，包括任何符合通用语言标准架构的语言，如 F#、Boo、ClojureCLR。然而，C# 是唯一官方支持的 .NET 选项。</paragraph>
                <note>
                    <paragraph>GDScript 代码本身的执行是没有 C# 或 C++ 等编译型语言快的。然而，大多数脚本代码都是在调用引擎中的 C++ 代码快速算法。在许多情况下，使用 GDScript、C#、C++ 编写游戏逻辑并不会有显著的性能区别。</paragraph>
                </note>
                <attention>
                    <paragraph>在 Godot 4 中用 C# 编写的项目目前无法导出到 Web 平台。如果要在该平台上使用 C#，请考虑使用 Godot 3。 （C# 的）Android 和 iOS 平台支持从 Godot 4.2 开始提供，但仍处于实验阶段，并且 <reference internal="True" refuri="../../tutorials/scripting/c_sharp/index#doc-c-sharp-platforms"><inline classes="std std-ref">存在一些限制</inline></reference> 。</paragraph>
                </attention>
            </section>
            <section ids="c-via-gdextension" names="c++\ via\ gdextension 通过\ gdextension\ 使用\ c++">
                <title>通过 GDExtension 使用 C++</title>
                <paragraph>GDExtension 能够让你使用 C++ 编写游戏代码，无需重新编译 Godot。</paragraph>
                <image candidates="{'*': 'getting_started/step_by_step/img/scripting_cpp.png'}" uri="getting_started/step_by_step/img/scripting_cpp.png"></image>
                <paragraph>我们在内部使用 C API 桥接，得益于此，你可以使用任意版本的语言，也可以混用由不同厂牌、不同版本的编译器所生成的共享库。</paragraph>
                <paragraph>GDExtension 是性能上的最佳选择。不需要在整个游戏中都使用，因为其他部分你可以用 GDScript 或 C# 编写。</paragraph>
                <paragraph>当使用 GDExtension 时，可用的类型、函数和属性与 Godot 实际的 C++ API 非常相似。</paragraph>
            </section>
        </section>
        <section ids="summary" names="summary 总结">
            <title>总结</title>
            <paragraph>脚本是包含附加到节点以扩展其功能的代码文件。</paragraph>
            <paragraph>Godot 支持四种官方脚本语言，在性能和易用性之间为你提供灵活性。</paragraph>
            <paragraph>你可以混合语言，例如，用 C 或 C++ 实现高要求的算法，用 GDScript 或 C# 编写大部分的游戏逻辑。</paragraph>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
