<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/getting_started/step_by_step/nodes_and_scenes.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">The goal of this page is to explain more than doc_key_concepts_overview about nodes and scenes,
get the user to create their first concrete scene.</comment>
    <target refid="doc-nodes-and-scenes"></target>
    <section ids="nodes-and-scenes doc-nodes-and-scenes" names="nodes\ and\ scenes 节点与场景 doc_nodes_and_scenes">
        <title>节点与场景</title>
        <paragraph>在 <reference internal="True" refuri="../introduction/key_concepts_overview#doc-key-concepts-overview"><inline classes="std std-ref">Godot 关键概念概述</inline></reference> 中，我们看到 Godot 游戏就是由场景构成的树状结构，而每一个场景又是一个由节点构成的树状结构。在这一节中，我们将更详细地解释这些概念，你还将创建你的第一个场景。</paragraph>
        <section ids="nodes" names="nodes 节点">
            <title>节点</title>
            <paragraph><strong>节点是你的游戏的基本构件</strong>。它们就像食谱里的食材。Godot 引擎包含很多种节点，可以用来显示图像、播放声音、表示摄像机等等。</paragraph>
            <image candidates="{'*': 'getting_started/step_by_step/img/nodes_and_scenes_nodes.webp'}" uri="getting_started/step_by_step/img/nodes_and_scenes_nodes.webp"></image>
            <paragraph>所有节点都具备以下特性：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>名称。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>可编辑的属性。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>每帧都可以接收回调以进行更新。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>你可以使用新的属性和函数来进行扩展。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>你可以将它们添加为其他节点的子节点。</paragraph>
                </list_item>
            </bullet_list>
            <paragraph>最后一个特征很重要。<strong>节点会组成一棵树</strong>，这个功能组织起项目来非常强大。因为不同的节点有不同的功能，将它们组合起来可以产生更复杂的行为。 正如我们之前看到的，你可以用一个 <reference internal="True" refuri="../../classes/class_characterbody2d#class-characterbody2d"><inline classes="std std-ref">CharacterBody2D</inline></reference> 节点、一个 <reference internal="True" refuri="../../classes/class_sprite2d#class-sprite2d"><inline classes="std std-ref">Sprite2D</inline></reference> 节点、一个 <reference internal="True" refuri="../../classes/class_camera2d#class-camera2d"><inline classes="std std-ref">Camera2D</inline></reference> 节点以及一个 <reference internal="True" refuri="../../classes/class_collisionshape2d#class-collisionshape2d"><inline classes="std std-ref">CollisionShape2D</inline></reference> 节点来建立一个摄像机跟随的可玩角色。</paragraph>
            <image candidates="{'*': 'getting_started/step_by_step/img/nodes_and_scenes_character_nodes.webp'}" uri="getting_started/step_by_step/img/nodes_and_scenes_character_nodes.webp"></image>
        </section>
        <section ids="scenes" names="scenes 场景">
            <title>场景</title>
            <paragraph>当你在树中组织节点时，就像我们的角色一样，我们称之为场景构造。保存后，场景的工作方式类似于编辑器中的新节点类型，你可以在其中将它们添加为现有节点的子节点。在这种情况下，场景实例显示为隐藏其内部结构的单个节点。</paragraph>
            <paragraph>场景允许你以你想要的方式来构造你的游戏代码。你可以<strong>组合节点</strong>来创建自定义和复杂的节点类型，比如能跑能跳的游戏角色、生命条、可以互动的箱子等等。</paragraph>
            <image candidates="{'*': 'getting_started/step_by_step/img/nodes_and_scenes_3d_scene_example.png'}" uri="getting_started/step_by_step/img/nodes_and_scenes_3d_scene_example.png"></image>
            <paragraph>本质上，Godot 编辑器就是一个<strong>场景编辑器</strong>。它有很多用于编辑 2D 和 3D 场景以及用户界面的工具。Godot 项目中可以包含任意数量你所需要的场景。引擎只要求将其中之一设为程序的<strong>主场景</strong>。这是你或者玩家运行游戏时，Godot 最初加载的场景。</paragraph>
            <paragraph>除了像节点一样工作之外，场景还具有以下特点：</paragraph>
            <enumerated_list enumtype="arabic" prefix="" suffix=".">
                <list_item>
                    <paragraph>They always have one root node, like the "Player" in our example.</paragraph>
                </list_item>
                <list_item>
                    <paragraph>你可以把它们保存到你的硬盘上，以后再加载。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>你可以根据需要创建任意数量的场景实例。你的游戏中可以有五个或十个角色，这些角色是从角色场景中创建的。</paragraph>
                </list_item>
            </enumerated_list>
        </section>
        <section ids="creating-your-first-scene" names="creating\ your\ first\ scene 创建第一个场景">
            <title>创建第一个场景</title>
            <paragraph>让我们只用一个节点来创建我们的第一个场景吧。首先你需要 <reference internal="True" refuri="../../tutorials/editor/project_manager#doc-creating-and-importing-projects"><inline classes="std std-ref">创建一个新项目</inline></reference> 。在打开项目后，你看到的应该是一个空的编辑器。</paragraph>
            <image candidates="{'*': 'getting_started/step_by_step/img/nodes_and_scenes_01_empty_editor.webp'}" uri="getting_started/step_by_step/img/nodes_and_scenes_01_empty_editor.webp"></image>
            <paragraph>在空场景中，左侧的“场景”停靠面板提供了几个快速添加根节点的选项。“2D 场景”会添加 <reference internal="True" refuri="../../classes/class_node2d#class-node2d"><inline classes="std std-ref">Node2D</inline></reference> 节点，“3D 场景”会添加 <reference internal="True" refuri="../../classes/class_node3d#class-node3d"><inline classes="std std-ref">Node3D</inline></reference> 节点，“用户界面”会添加 <reference internal="True" refuri="../../classes/class_control#class-control"><inline classes="std std-ref">Control</inline></reference> 节点。这些预设是为了提供方便；不是强制选择的。“其他节点”可以选择任何节点作为根节点。在空场景中，“其他节点”等价于点击“场景”停靠面板左上角的“添加子节点”按钮，这个按钮的作用通常是为当前选中的节点添加一个新的子节点。</paragraph>
            <paragraph>我们要往场景中添加一个 <reference internal="True" refuri="../../classes/class_label#class-label"><inline classes="std std-ref">Label</inline></reference> 节点。它的功能是在屏幕上绘制文字。</paragraph>
            <paragraph>点击“添加子节点”按钮或者“其他节点”，创建根节点。</paragraph>
            <image candidates="{'*': 'getting_started/step_by_step/img/nodes_and_scenes_02_scene_dock.webp'}" uri="getting_started/step_by_step/img/nodes_and_scenes_02_scene_dock.webp"></image>
            <paragraph>“新建 Node”对话框打开，展示一大串可用节点。</paragraph>
            <image candidates="{'*': 'getting_started/step_by_step/img/nodes_and_scenes_03_create_node_window.webp'}" uri="getting_started/step_by_step/img/nodes_and_scenes_03_create_node_window.webp"></image>
            <paragraph>选择 Label 节点。你可以输入这个名字来对列表进行过滤。</paragraph>
            <image candidates="{'*': 'getting_started/step_by_step/img/nodes_and_scenes_04_create_label_window.webp'}" uri="getting_started/step_by_step/img/nodes_and_scenes_04_create_label_window.webp"></image>
            <paragraph>点击 Label 节点将其选中，然后点击窗口底部的“创建”按钮。</paragraph>
            <image candidates="{'*': 'getting_started/step_by_step/img/nodes_and_scenes_05_editor_with_label.webp'}" uri="getting_started/step_by_step/img/nodes_and_scenes_05_editor_with_label.webp"></image>
            <paragraph>添加场景中的第一个节点时会发生很多事。场景会切换到 2D 工作区，因为 Label 是 2D 节点类型。该 Label 会以选中的状态出现在视口的左上角。这个节点也会出现在左侧的“场景”面板中，它的属性会书现在右侧的“检查器”面板里。</paragraph>
        </section>
        <section ids="changing-a-node-s-properties" names="changing\ a\ node's\ properties 修改节点的属性">
            <title>修改节点的属性</title>
            <paragraph>下一步是修改 Label 的“Text”属性。我们把它改成“Hello World”。</paragraph>
            <paragraph>前往视口右侧的“检查器”面板。点击 Text 属性下方的字段，然后填入“Hello World”。</paragraph>
            <image candidates="{'*': 'getting_started/step_by_step/img/nodes_and_scenes_06_label_text.webp'}" uri="getting_started/step_by_step/img/nodes_and_scenes_06_label_text.webp"></image>
            <paragraph>在你打字的同时，你会发现视口中也绘制出了这段文字。</paragraph>
            <seealso>
                <paragraph>你可以修改检查器列出的任何属性，正如我们对文本所作的那样。如果想要查看有关检查器面板的完整参考信息，详见 <reference internal="True" refuri="../../tutorials/editor/inspector_dock#doc-editor-inspector-dock"><inline classes="std std-ref">检查器</inline></reference>。</paragraph>
            </seealso>
            <paragraph>选择工具栏上的移动工具，就可以在视口中移动你的 Label 节点。</paragraph>
            <image candidates="{'*': 'getting_started/step_by_step/img/nodes_and_scenes_07_move_tool.webp'}" uri="getting_started/step_by_step/img/nodes_and_scenes_07_move_tool.webp"></image>
            <paragraph>选中 Label，点击并拖拽视口中的任何位置，将它移动到矩形框所表示的视图中心。</paragraph>
            <image candidates="{'*': 'getting_started/step_by_step/img/nodes_and_scenes_08_hello_world_text.webp'}" uri="getting_started/step_by_step/img/nodes_and_scenes_08_hello_world_text.webp"></image>
        </section>
        <section ids="running-the-scene" names="running\ the\ scene 运行场景">
            <title>运行场景</title>
            <paragraph>运行场景一切就绪！请按下屏幕右上角的“运行场景”按钮或 <literal classes="kbd">F6</literal>（macOS 上则是 <literal classes="kbd">Cmd + R</literal>）。</paragraph>
            <image candidates="{'*': 'getting_started/step_by_step/img/nodes_and_scenes_09_play_scene_button.webp'}" uri="getting_started/step_by_step/img/nodes_and_scenes_09_play_scene_button.webp"></image>
            <paragraph>会有一个弹出框请你保存场景，这是运行这个场景前所必须做的。在文件浏览器中点击保存按钮将它另存为 <literal>label.tscn</literal> 。</paragraph>
            <image candidates="{'*': 'getting_started/step_by_step/img/nodes_and_scenes_10_save_scene_as.webp'}" uri="getting_started/step_by_step/img/nodes_and_scenes_10_save_scene_as.webp"></image>
            <note>
                <paragraph>“场景另存为”对话框，和编辑器中的其他文件对话框一样，只允许你将文件保存在项目之中。窗口顶部的 <literal>res://</literal> 路径表示项目的根目录，表示“resource path”（资源路径）。Godot 中文件路径的更多信息请参阅 <reference internal="True" refuri="../../tutorials/scripting/filesystem#doc-filesystem"><inline classes="std std-ref">文件系统</inline></reference>。</paragraph>
            </note>
            <paragraph>程序会打开一个新窗口，显示“Hello World”字样。</paragraph>
            <image candidates="{'*': 'getting_started/step_by_step/img/nodes_and_scenes_11_final_result.webp'}" uri="getting_started/step_by_step/img/nodes_and_scenes_11_final_result.webp"></image>
            <paragraph>关闭窗口或按 <literal classes="kbd">F8</literal> （在 macOS 上是 <literal classes="kbd">Cmd + .</literal> ）就可以退出正在运行的场景。</paragraph>
        </section>
        <section ids="setting-the-main-scene" names="setting\ the\ main\ scene 设置主场景">
            <title>设置主场景</title>
            <paragraph>我们运行测试场景用的是“运行场景”按钮。它旁边的另一个按钮可以用来设置并运行项目的主场景。你也可以按 <literal classes="kbd">F5</literal>（macOS 上则是 <literal classes="kbd">Cmd + B</literal>）达到同样的效果。</paragraph>
            <image candidates="{'*': 'getting_started/step_by_step/img/nodes_and_scenes_12_play_button.webp'}" uri="getting_started/step_by_step/img/nodes_and_scenes_12_play_button.webp"></image>
            <paragraph>出现弹出窗口让你选择主场景。</paragraph>
            <image candidates="{'*': 'getting_started/step_by_step/img/nodes_and_scenes_13_main_scene_popup.webp'}" uri="getting_started/step_by_step/img/nodes_and_scenes_13_main_scene_popup.webp"></image>
            <paragraph>点击“选择”按钮，出现文件对话框，双击 <literal>label.tscn</literal> 。</paragraph>
            <image candidates="{'*': 'getting_started/step_by_step/img/nodes_and_scenes_14_select_main_scene.webp'}" uri="getting_started/step_by_step/img/nodes_and_scenes_14_select_main_scene.webp"></image>
            <paragraph>演示程序又会开始运行。此后，每次你运行项目，Godot 都会使用该场景作为起点。</paragraph>
            <note>
                <paragraph>编辑器会将主场景的路径保存到项目目录的 project.godot 文件中。你能够通过编辑这个文本文件来修改项目设置，但你也可以使用“项目 -&gt; 项目设置”窗口来达到同样的目的。详细请参阅 <reference internal="True" refuri="../../tutorials/editor/project_settings#doc-project-settings"><inline classes="std std-ref">项目设置</inline></reference>。</paragraph>
            </note>
            <paragraph>下一部分中，我们将讨论游戏和 Godot 中的另一个关键概念：创建场景的实例。</paragraph>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
