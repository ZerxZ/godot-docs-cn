<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/getting_started/step_by_step/scripting_first_script.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">Intention:

- Giving a *short* and sweet hands-on intro to GDScript. The page should
  focus on working in the code editor.
- We assume the reader has programming foundations. If you don't, consider
  taking the course we recommend in the :ref:`introduction to Godot page &lt;doc_learning_programming&gt;`.

Techniques:

- Creating a sprite.
- Creating a script.
- _init() and _process().
- Moving an object on screen.</comment>
    <target refid="doc-scripting-first-script"></target>
    <section ids="creating-your-first-script doc-scripting-first-script" names="creating\ your\ first\ script 创建第一个脚本 doc_scripting_first_script">
        <title>创建第一个脚本</title>
        <paragraph>在本课中，你将用 GDScript 编写第一个脚本，使 Godot 图标转圈。正如我们<reference internal="True" refuri="../introduction/index#toc-learn-introduction"><inline classes="std std-ref">在介绍中</inline></reference>提到的，我们假设你有编程基础。方便起见，我们在单独的选项卡中包含了等价的 C# 代码。</paragraph>
        <image candidates="{'*': 'getting_started/step_by_step/img/scripting_first_script_rotating_godot.gif'}" uri="getting_started/step_by_step/img/scripting_first_script_rotating_godot.gif"></image>
        <seealso>
            <paragraph>要了解更多关于GDScript、其关键字和语法的信息，请前往 <reference internal="True" refuri="../../tutorials/scripting/gdscript/gdscript_basics#doc-gdscript"><inline classes="std std-ref">GDScript 参考</inline></reference>。</paragraph>
        </seealso>
        <seealso>
            <paragraph>要了解更多关于 C# 的信息，请前往 <reference internal="True" refuri="../../tutorials/scripting/c_sharp/c_sharp_basics#doc-c-sharp"><inline classes="std std-ref">C# 基础</inline></reference>页面。</paragraph>
        </seealso>
        <section ids="project-setup" names="project\ setup 项目设置">
            <title>项目设置</title>
            <paragraph>请从头开始<reference internal="True" refuri="../../tutorials/editor/project_manager#doc-creating-and-importing-projects"><inline classes="std std-ref">创建一个新项目</inline></reference>。你的项目应该包含一张图片：Godot 图标，我们经常在社区中使用它来制作原型。</paragraph>
            <comment xml:space="preserve">Godot icon</comment>
            <paragraph>我们需要创建一个 Sprite2D 节点来在游戏中显示它。在“场景”面板中，点击“其他节点”按钮。</paragraph>
            <image candidates="{'*': 'getting_started/step_by_step/img/scripting_first_script_click_other_node.webp'}" uri="getting_started/step_by_step/img/scripting_first_script_click_other_node.webp"></image>
            <paragraph>在搜索栏中输入“Sprite2D”来过滤节点，双击 Sprite2D 来创建节点。</paragraph>
            <image candidates="{'*': 'getting_started/step_by_step/img/scripting_first_script_add_sprite_node.webp'}" uri="getting_started/step_by_step/img/scripting_first_script_add_sprite_node.webp"></image>
            <paragraph>你的“场景”选项卡现在应该只有一个 Sprite2D 节点。</paragraph>
            <image candidates="{'*': 'getting_started/step_by_step/img/scripting_first_script_scene_tree.webp'}" uri="getting_started/step_by_step/img/scripting_first_script_scene_tree.webp"></image>
            <paragraph>Sprite2D 节点需要用于显示的纹理。在右边的“检查器”中，你可以看到 Texture（纹理）属性写着“[空]”。要显示 Godot 图标，请点击并拖拽“文件系统”面板中的 <literal>icon.svg</literal> 文件到 Texture 插槽上。</paragraph>
            <image candidates="{'*': 'getting_started/step_by_step/img/scripting_first_script_setting_texture.webp'}" uri="getting_started/step_by_step/img/scripting_first_script_setting_texture.webp"></image>
            <note>
                <paragraph>你可以通过将图像拖放到视口上来自动创建 Sprite2D 节点。</paragraph>
            </note>
            <paragraph>然后，点击并拖动视口中的图标，使其在游戏视图中居中。</paragraph>
            <image candidates="{'*': 'getting_started/step_by_step/img/scripting_first_script_centering_sprite.webp'}" uri="getting_started/step_by_step/img/scripting_first_script_centering_sprite.webp"></image>
        </section>
        <section ids="creating-a-new-script" names="creating\ a\ new\ script 新建脚本">
            <title>新建脚本</title>
            <paragraph>在场景面板的 Sprite2D 上点击右键并选择“添加脚本”，来创建或附加一个新的脚本到我们的节点上。</paragraph>
            <image candidates="{'*': 'getting_started/step_by_step/img/scripting_first_script_attach_script.webp'}" uri="getting_started/step_by_step/img/scripting_first_script_attach_script.webp"></image>
            <paragraph>弹出“附加节点脚本”窗口。你可以选择脚本的语言和文件路径，以及其他选项。</paragraph>
            <paragraph>把模板字段从“Node: Default”改为“Object: Empty”从而得到一个干净的脚本文件。其他选项保持默认，然后点击“创建”按钮来创建脚本。</paragraph>
            <image candidates="{'*': 'getting_started/step_by_step/img/scripting_first_script_attach_node_script.webp'}" uri="getting_started/step_by_step/img/scripting_first_script_attach_node_script.webp"></image>
            <note>
                <paragraph>C# 脚本名称需要与其类名称匹配。在这种情况下，应该将文件命名为 <literal>MySprite2D.cs</literal> 。</paragraph>
            </note>
            <paragraph>此时 Script 工作区将自动打开并显示你新建的 <literal>sprite_2d.gd</literal> 文件，显示以下代码行：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-0-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-0-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-0-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-0-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-0-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">extends Sprite2D</literal_block>
                </div>
                <div aria-labelledby="tab-0-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-0-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">using Godot;

public partial class MySprite2D : Sprite2D
{
}</literal_block>
                </div>
            </container>
            <paragraph>每个 GDScript 文件都是一个隐含的类。<literal>extends</literal> 关键字定义了这个脚本所继承或扩展的类。本例中它是 <literal>Sprite2D</literal>，意味着我们的脚本将获得 Sprite2D 节点的所有属性和函数，包括它继承的 <literal>Node2D</literal>、<literal>CanvasItem</literal>、<literal>Node</literal> 等类。</paragraph>
            <note>
                <paragraph>在GDScript中，如果你没有写带有 <literal>extends</literal> 关键字的一行，你的类将隐式地扩展自 <reference internal="True" refuri="../../classes/class_refcounted#class-refcounted"><inline classes="std std-ref">RefCounted</inline></reference>，Godot使用这个类来管理你的应用程序的内存。</paragraph>
            </note>
            <paragraph>继承的属性包括你可以在“检查器”面板中看到的属性，例如节点的 <literal>texture</literal>。</paragraph>
            <note>
                <paragraph>“检查器”默认使用“Title Case”形式展示节点的属性，将单词的首字母大写、用空格分隔。在 GDScript 代码中，这些属性使用的是“snake_case”，全小写、单词之间使用下划线分隔。</paragraph>
                <paragraph>你可以在检查器中悬停任何属性的名称来查看它的描述和在代码中的标识符。</paragraph>
            </note>
        </section>
        <section ids="hello-world" names="hello,\ world! 你好，世界！">
            <title>你好，世界！</title>
            <paragraph>我们的脚本目前没有做任何事情。让我们开始打印文本“Hello, world!”到底部输出面板。</paragraph>
            <paragraph>往脚本中添加以下代码：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-1-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-1-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-1-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-1-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-1-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func _init():
    print("Hello, world!")</literal_block>
                </div>
                <div aria-labelledby="tab-1-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-1-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">public MySprite2D()
{
    GD.Print("Hello, world!");
}</literal_block>
                </div>
            </container>
            <paragraph>让我们把它分解一下。 <literal>func</literal> 关键字定义了一个名为 <literal>_init</literal> 的新函数。这是类构造函数的一个特殊名称。如果你定义了这个函数，引擎会在内存中创建每个对象或节点时调用 <literal>_init()</literal> 。</paragraph>
            <note>
                <paragraph>GDScript 是基于缩进的语言。行首的制表符是 <literal>print()</literal> 代码正常工作的必要条件。如果你省略了它或者没有正确缩进一行，编辑器将以红色高亮显示，并显示以下错误信息：“Indented block expected”（应有缩进块）。</paragraph>
            </note>
            <paragraph>如果你还没有保存场景为 <literal>sprite_2d.tscn</literal>，请保存，然后按 <literal classes="kbd">F6</literal>（macOS 上为 <literal classes="kbd">Cmd + R</literal>）来运行它。看一下底部展开的<strong>输出</strong>面板。它应该显示“Hello, world!”。</paragraph>
            <image candidates="{'*': 'getting_started/step_by_step/img/scripting_first_script_print_hello_world.webp'}" uri="getting_started/step_by_step/img/scripting_first_script_print_hello_world.webp"></image>
            <paragraph>将 <literal>_init()</literal> 函数删除，这样你就只有一行 <literal>extends Sprite2D</literal> 了。</paragraph>
        </section>
        <section ids="turning-around" names="turning\ around 四处旋转">
            <title>四处旋转</title>
            <paragraph>是时候让我们的节点移动和旋转了。为此，我们将向脚本中添加两个成员变量：以像素每秒为单位的移动速度，和以弧度每秒为单位的角速度。将下述内容添加到 <literal>extends Sprite2D</literal> 行的后面。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-2-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-2-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-2-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-2-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-2-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var speed = 400
var angular_speed = PI</literal_block>
                </div>
                <div aria-labelledby="tab-2-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-2-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">private int _speed = 400;
private float _angularSpeed = Mathf.Pi;</literal_block>
                </div>
            </container>
            <paragraph>成员变量位于脚本的顶部，在“extends”之后、函数之前。附加了此脚本的每个节点实例都将具有自己的 <literal>speed</literal> 和 <literal>angular_speed</literal> 属性副本。</paragraph>
            <note>
                <paragraph>与其他一些引擎一样，Godot 中的角度默认使用弧度为单位，但如果你更喜欢以度为单位计算角度，则可以使用内置函数和属性。</paragraph>
            </note>
            <paragraph>为了移动我们的图标，我们需要在游戏循环中每一帧更新其位置和旋转。我们可以使用 <literal>Node</literal> 类中的虚函数 <literal>_process()</literal> 。如果你在任何扩展自 Node 类的类中定义它，如 Sprite2D，Godot将在每一帧调用该函数，并传递给它一个名为 <literal>delta</literal> 的参数，即从上一帧开始经过的时间。</paragraph>
            <note>
                <paragraph>游戏的工作方式是每秒钟渲染许多图像，每幅图像称为一帧，而且是循环进行的。我们用每秒帧数（FPS）来衡量一个游戏产生图像的速度。大多数游戏的目标是60FPS，尽管你可能会发现在较慢的移动设备上的数字是30FPS，或者是虚拟现实游戏的90至240。</paragraph>
                <paragraph>引擎和游戏开发者尽最大努力以恒定的时间间隔更新游戏世界和渲染图像，但在帧的渲染时间上总是存在着微小的变化。这就是为什么引擎为我们提供了这个delta时间值，使我们的运动与我们的帧速率无关。</paragraph>
            </note>
            <paragraph>在脚本的底部，定义该函数：</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-3-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-3-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-3-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-3-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-3-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-3-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">func _process(delta):
    rotation += angular_speed * delta</literal_block>
                </div>
                <div aria-labelledby="tab-3-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-3-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">public override void _Process(double delta)
{
    Rotation += _angularSpeed * (float)delta;
}</literal_block>
                </div>
            </container>
            <paragraph><literal>func</literal> 关键字定义了一个新函数。在它之后，我们必须在括号里写上函数的名称和它所接受的参数。冒号结束定义，后面的缩进块是函数的内容或指令。</paragraph>
            <note>
                <paragraph>请注意 <literal>_process()</literal> 和 <literal>_init()</literal> 一样都是以下划线开头的。按照约定，这是 Godot 的虚函数，也就是你可以覆盖的与引擎通信的内置函数。</paragraph>
            </note>
            <paragraph>函数内部的那一行 <literal>rotation += angular_speed * delta</literal> 每一帧都会增加我们的精灵的旋转量。这里 <literal>rotation</literal> 是从 <literal>Sprite2D</literal> 所扩展的 <literal>Node2D</literal> 类继承的属性。它可以控制我们节点的旋转，以弧度为单位。</paragraph>
            <tip>
                <paragraph>在代码编辑器中，你可以按住 ctrl 单击任何内置的属性或函数，如 <literal>position</literal>、<literal>rotation</literal>、<literal>_process</literal> 以在新标签页中打开相应的文档。</paragraph>
            </tip>
            <paragraph>运行该场景，可以看到 Godot 的图标在原地转动。</paragraph>
            <image candidates="{'*': 'getting_started/step_by_step/img/scripting_first_script_godot_turning_in_place.gif'}" uri="getting_started/step_by_step/img/scripting_first_script_godot_turning_in_place.gif"></image>
            <note>
                <paragraph>在 C# 中，请注意 <literal>_Process()</literal> 所采用的 <literal>delta</literal> 参数类型是 <literal>double</literal> 。 故当我们将其应用于旋转时，需要将其转换为 <literal>float</literal> 。</paragraph>
            </note>
            <section ids="moving-forward" names="moving\ forward 前进">
                <title>前进</title>
                <paragraph>现在我们来让节点移动。在 <literal>_process()</literal> 函数中添加下面两行代码，确保每一行都和之前的 <literal>rotation += angular_speed * delta</literal> 行的缩进保持一致。</paragraph>
                <container classes="sphinx-tabs" type="tab-element">
                    <div aria-label="Tabbed content" role="tablist">
                        <button aria-controls="panel-4-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-4-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                        <button aria-controls="panel-4-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-4-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                    </div>
                    <div aria-labelledby="tab-4-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-4-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                        <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">var velocity = Vector2.UP.rotated(rotation) * speed

position += velocity * delta</literal_block>
                    </div>
                    <div aria-labelledby="tab-4-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-4-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                        <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">var velocity = Vector2.Up.Rotated(Rotation) * _speed;

Position += velocity * (float)delta;</literal_block>
                    </div>
                </container>
                <paragraph>正如我们所看到的，<literal>var</literal> 关键字可以定义新变量。如果你把它放在脚本顶部，定义的就是类的属性。在函数内部，定义的则是局部变量：只在函数的作用域中存在。</paragraph>
                <paragraph>我们定义一个名为 <literal>velocity</literal> 的局部变量，该变量是用于表示方向和速度的 2D 向量。要让节点向前移动，我们可以从 Vector2 类的常量 <literal>Vector2.UP</literal> 入手，这个向量指向上方，调用 <literal>Vector2</literal> 的 <literal>rotated()</literal> 方法可以将其进行旋转。表达式 <literal>Vector2.UP.rotated(rotation)</literal> 表示的是指向图标前方的向量。用这个方向与我们的 <literal>speed</literal> 属性相乘后，得到的就是用来移动节点的速度。</paragraph>
                <paragraph>我们在节点的 <literal>position</literal> 里加上 <literal>velocity * delta</literal> 来实现移动。位置本身是 <reference internal="True" refuri="../../classes/class_vector2#class-vector2"><inline classes="std std-ref">Vector2</inline></reference> 类型的，是 Godot 用于表示 2D 向量的内置类型。</paragraph>
                <paragraph>运行场景就可以看到 Godot 头像在绕圈圈。</paragraph>
                <image candidates="{'*': 'getting_started/step_by_step/img/scripting_first_script_rotating_godot.gif'}" uri="getting_started/step_by_step/img/scripting_first_script_rotating_godot.gif"></image>
                <note>
                    <paragraph>使用这样的方法不会考虑与墙壁和地面的碰撞。在 <reference internal="True" refuri="../first_2d_game/index#doc-your-first-2d-game"><inline classes="std std-ref">你的第一个 2D 游戏</inline></reference> 中，你会学到另一种移动对象的方法，可以检测碰撞。</paragraph>
                </note>
                <paragraph>我们的节点目前是自行移动的。在下一部分 <reference internal="True" refuri="scripting_player_input#doc-scripting-player-input"><inline classes="std std-ref">监听玩家的输入</inline></reference> 中，我们会让玩家的输入来控制它。</paragraph>
            </section>
        </section>
        <section ids="complete-script" names="complete\ script 完整脚本">
            <title>完整脚本</title>
            <paragraph>这是完整的 <literal>sprite_2d.gd</literal> 文件，仅供参考。</paragraph>
            <container classes="sphinx-tabs" type="tab-element">
                <div aria-label="Tabbed content" role="tablist">
                    <button aria-controls="panel-5-R0RTY3JpcHQ=" aria-selected="true" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-5-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tab" tabindex="0">GDScript</button>
                    <button aria-controls="panel-5-QyM=" aria-selected="false" classes="sphinx-tabs-tab code-tab group-tab" ids="tab-5-QyM=" name="QyM=" role="tab" tabindex="-1">C#</button>
                </div>
                <div aria-labelledby="tab-5-R0RTY3JpcHQ=" classes="sphinx-tabs-panel code-tab group-tab" ids="panel-5-R0RTY3JpcHQ=" name="R0RTY3JpcHQ=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="gdscript" linenos="False" xml:space="preserve">extends Sprite2D

var speed = 400
var angular_speed = PI


func _process(delta):
    rotation += angular_speed * delta

    var velocity = Vector2.UP.rotated(rotation) * speed

    position += velocity * delta</literal_block>
                </div>
                <div aria-labelledby="tab-5-QyM=" classes="sphinx-tabs-panel code-tab group-tab" hidden="true" ids="panel-5-QyM=" name="QyM=" role="tabpanel" tabindex="0">
                    <literal_block force="False" highlight_args="{}" language="csharp" linenos="False" xml:space="preserve">using Godot;

public partial class MySprite2D : Sprite2D
{
    private int _speed = 400;
    private float _angularSpeed = Mathf.Pi;

    public override void _Process(double delta)
    {
        Rotation += _angularSpeed * (float)delta;
        var velocity = Vector2.Up.Rotated(Rotation) * _speed;

        Position += velocity * (float)delta;
    }
}</literal_block>
                </div>
            </container>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
