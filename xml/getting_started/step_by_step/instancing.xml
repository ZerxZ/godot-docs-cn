<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/getting_started/step_by_step/instancing.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-instancing"></target>
    <section ids="creating-instances doc-instancing" names="creating\ instances 创建实例 doc_instancing">
        <title>创建实例</title>
        <paragraph>上一部分中，我们了解到场景是一系列组织成树状结构的节点，其中只有一个节点是根节点。你可以将项目拆分成任意数量的场景。这一特性可以帮你将游戏拆解成不同的组件，并进行组织。</paragraph>
        <paragraph>你可以创建任意数量的场景并将他们保存成扩展名为 <literal>.tscn</literal> （“text scene” 文本场景）的文件。上节课的 <literal>label.tscn</literal> 文件就是一个例子。我们把这些文件叫作“打包的场景”（Packed Scene），因为它们将场景的内容信息进行了打包。</paragraph>
        <paragraph>这有一个小球的例子。它由以下内容组成：一个叫“Ball”的 <reference internal="True" refuri="../../classes/class_rigidbody2d#class-rigidbody2d"><inline classes="std std-ref">RigidBody2D</inline></reference> 节点是根节点，可以让小球下落、在撞墙后反弹；一个 <reference internal="True" refuri="../../classes/class_sprite2d#class-sprite2d"><inline classes="std std-ref">Sprite2D</inline></reference> 节点以及一个 <reference internal="True" refuri="../../classes/class_collisionshape2d#class-collisionshape2d"><inline classes="std std-ref">CollisionShape2D</inline></reference>。</paragraph>
        <image candidates="{'*': 'getting_started/step_by_step/img/instancing_ball_scene.webp'}" uri="getting_started/step_by_step/img/instancing_ball_scene.webp"></image>
        <paragraph>Once you have saved a scene, it works as a blueprint: you can reproduce it in other
            scenes as many times as you'd like. Replicating an object from a template like
            this is called <strong>instancing</strong>.</paragraph>
        <image candidates="{'*': 'getting_started/step_by_step/img/instancing_ball_instances_example.webp'}" uri="getting_started/step_by_step/img/instancing_ball_instances_example.webp"></image>
        <paragraph>我们在上一部分提到过，实例化场景的行为与节点类似：编辑器默认会隐藏其中的内容。实例化 Ball 之后，你只会看到 Ball 节点。请注意制作出的副本，名字是唯一的。</paragraph>
        <paragraph>Ball 场景的实例最开始都和 <literal>ball.tscn</literal> 有相同的结构和属性。不过你也可以单独修改各个实例，比如修改反弹的方式、重量等源场景所暴露的属性。</paragraph>
        <section ids="in-practice" names="in\ practice 实践">
            <title>实践</title>
            <paragraph>让我们来实践一下实例化，看看到底在 Godot 里是如何使用的。我们为你准备了小球的示例项目，欢迎下载：<reference name="instancing_starter.zip" refuri="https://github.com/godotengine/godot-docs-project-starters/releases/download/latest-4.x/instancing_starter.zip">instancing_starter.zip</reference><target ids="instancing-starter-zip" names="instancing_starter.zip" refuri="https://github.com/godotengine/godot-docs-project-starters/releases/download/latest-4.x/instancing_starter.zip"></target>。</paragraph>
            <paragraph>将存档解压到你的计算机里。你需要项目管理器来导入它。通过打开 Godot 来访问项目管理器，或者如果你已经打开了 Godot，请单击 <emphasis>项目 -&gt; 退出到项目列表</emphasis> (<literal classes="kbd">Ctrl + Shift + Q</literal>, macOS 为:kbd:<title_reference>Ctrl + Option + Cmd + Q</title_reference>）</paragraph>
            <paragraph>在项目管理器中点击 <emphasis>导入</emphasis> 按钮来导入这个项目。</paragraph>
            <image candidates="{'*': 'getting_started/step_by_step/img/instancing_import_button.webp'}" uri="getting_started/step_by_step/img/instancing_import_button.webp"></image>
            <paragraph>In the pop-up that appears navigate to the folder you extracted.
                Double-click the <literal>project.godot</literal> file to open it.</paragraph>
            <image candidates="{'*': 'getting_started/step_by_step/img/instancing_import_project_file.webp'}" uri="getting_started/step_by_step/img/instancing_import_project_file.webp"></image>
            <paragraph>最后点击“导入并编辑”按钮。</paragraph>
            <image candidates="{'*': 'getting_started/step_by_step/img/instancing_import_and_edit_button.webp'}" uri="getting_started/step_by_step/img/instancing_import_and_edit_button.webp"></image>
            <paragraph>这个项目里包含两个打包场景：包含了小球会碰撞的墙体的 <literal>main.tscn</literal> ，以及 <literal>ball.tscn</literal> 。而 Main 场景应该会被自动打开。如果你看到的是空的 3D 场景而不是 Main 场景，请单击屏幕顶部的 2D 按钮。</paragraph>
            <image candidates="{'*': 'getting_started/step_by_step/img/instancing_2d_scene_select.webp'}" uri="getting_started/step_by_step/img/instancing_2d_scene_select.webp"></image>
            <image candidates="{'*': 'getting_started/step_by_step/img/instancing_main_scene.webp'}" uri="getting_started/step_by_step/img/instancing_main_scene.webp"></image>
            <paragraph>让我们为 Main 节点添加一个小球作为子节点。在“场景”面板中，选择 Main 节点。然后点击场景面板顶部的链接图标。这个按钮的作用是为当前选中节点添加另一个场景的实例作为子节点。</paragraph>
            <image candidates="{'*': 'getting_started/step_by_step/img/instancing_scene_link_button.webp'}" uri="getting_started/step_by_step/img/instancing_scene_link_button.webp"></image>
            <paragraph>双击小球场景来实例化。</paragraph>
            <image candidates="{'*': 'getting_started/step_by_step/img/instancing_instance_child_window.webp'}" uri="getting_started/step_by_step/img/instancing_instance_child_window.webp"></image>
            <paragraph>小球会出现在视口的左上角。</paragraph>
            <image candidates="{'*': 'getting_started/step_by_step/img/instancing_ball_instanced.webp'}" uri="getting_started/step_by_step/img/instancing_ball_instanced.webp"></image>
            <paragraph>点击它，然后拖拽到视图的中心。</paragraph>
            <image candidates="{'*': 'getting_started/step_by_step/img/instancing_ball_moved.webp'}" uri="getting_started/step_by_step/img/instancing_ball_moved.webp"></image>
            <paragraph>按 <literal classes="kbd">F5</literal> （在macOS上是 <literal classes="kbd">Cmd + B</literal> ）运行游戏。你应该会看到它往下掉。</paragraph>
            <paragraph>现在我们希望创建更多的 Ball 节点实例。保持小球仍处于选中的状态，按下 <literal classes="kbd">Ctrl + D</literal>（macOS 则是 <literal classes="kbd">Cmd + D</literal>）调用制作副本命令。点击并将新的小球拖到别的位置。</paragraph>
            <image candidates="{'*': 'getting_started/step_by_step/img/instancing_ball_duplicated.webp'}" uri="getting_started/step_by_step/img/instancing_ball_duplicated.webp"></image>
            <paragraph>你可以重复这个过程在场景中多建几个。</paragraph>
            <image candidates="{'*': 'getting_started/step_by_step/img/instancing_main_scene_with_balls.webp'}" uri="getting_started/step_by_step/img/instancing_main_scene_with_balls.webp"></image>
            <paragraph>再次运行游戏。现在你应该看到每个小球都各自下落。这就是实例的作用。每一个都是模板场景的独立副本。</paragraph>
        </section>
        <section ids="editing-scenes-and-instances" names="editing\ scenes\ and\ instances 编辑场景和实例">
            <title>编辑场景和实例</title>
            <paragraph>实例还有很多用法。使用这个特性，你可以：</paragraph>
            <enumerated_list enumtype="arabic" prefix="" suffix=".">
                <list_item>
                    <paragraph>使用“检查器”修改一个小球的属性，不影响其他实例。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>打开 <literal>ball.tscn</literal> 场景修改 Ball 节点，从而修改所有 Ball 的默认属性。在保存时，项目中所有 Ball 的实例都会更新其属性值。</paragraph>
                </list_item>
            </enumerated_list>
            <note>
                <paragraph>修改实例上的属性总是会覆盖对应打包场景中的值。</paragraph>
            </note>
            <paragraph>让我们来试一试。打开 <literal>ball.tscn</literal> 然后选中 Ball 节点。在右侧的“检查器”中，点击展开 PhysicsMaterial 属性。</paragraph>
            <image candidates="{'*': 'getting_started/step_by_step/img/instancing_physics_material_expand.webp'}" uri="getting_started/step_by_step/img/instancing_physics_material_expand.webp"></image>
            <paragraph>将其 Bounce（弹力）属性设为 <literal>0.5</literal> ，只要点击对应的数字字段、输入 <literal>0.5</literal> 、然后按 <literal classes="kbd">Enter</literal> 就可以了。</paragraph>
            <image candidates="{'*': 'getting_started/step_by_step/img/instancing_property_bounce_updated.webp'}" uri="getting_started/step_by_step/img/instancing_property_bounce_updated.webp"></image>
            <paragraph>按 <literal classes="kbd">F5</literal> （在 macOS 中使用 <literal classes="kbd">Cmd + B</literal> ） 运行游戏，请注意所有的小球都更有弹性了。因为 Ball 场景是所有实例的模板，对它进行修改并保存，就会导致所有实例同时进行更新。</paragraph>
            <paragraph>现在让我们来调整单个实例。点击视口上方的对应选项卡回到 Main 场景。</paragraph>
            <image candidates="{'*': 'getting_started/step_by_step/img/instancing_scene_tabs.webp'}" uri="getting_started/step_by_step/img/instancing_scene_tabs.webp"></image>
            <paragraph>选择一个 Ball 实例节点，然后“检查器”中将 Gravity Scale（重力缩放）设为 <literal>10</literal>。</paragraph>
            <image candidates="{'*': 'getting_started/step_by_step/img/instancing_property_gravity_scale.png'}" uri="getting_started/step_by_step/img/instancing_property_gravity_scale.png"></image>
            <paragraph>在被调整过的属性旁边就会多一个灰色的“复原”按钮。</paragraph>
            <image candidates="{'*': 'getting_started/step_by_step/img/instancing_property_revert_icon.png'}" uri="getting_started/step_by_step/img/instancing_property_revert_icon.png"></image>
            <paragraph>这个图标表示你覆盖了源打包场景中的值。即使你修改了原始场景中的这个属性，这个覆盖后的值也还是会保留在这个实例中。点击复原图标会将属性恢复成保存场景中的值。</paragraph>
            <paragraph>重新运行游戏，请注意这个小球会比其他小球落得快得多。</paragraph>
            <note>
                <paragraph>你可能注意到了你无法改变小球 <literal>PhysicsMaterial</literal> 的值。这是因为 <literal>PhysicsMaterial</literal> 是一个资源，在你能在一个场景中编辑被原始场景所引用的资源之前，需要先把这个资源唯一化。要让某个实例的资源唯一，请在“检查器”中对其右键，然后在弹出的菜单中选择“唯一化”。</paragraph>
                <paragraph>资源也是 Godot 游戏的关键组件，我们会在后续课程中介绍。</paragraph>
            </note>
        </section>
        <section ids="scene-instances-as-a-design-language" names="scene\ instances\ as\ a\ design\ language 作为设计语言的场景实例">
            <title>作为设计语言的场景实例</title>
            <paragraph>Godot中的实例和场景提供了一种优秀的设计语言，使该引擎与其他引擎不同。我们从一开始就围绕这个概念设计Godot。</paragraph>
            <paragraph>我们建议在使用 Godot 制作游戏时忽略架构代码模式，例如模型-视图-控制器 （MVC） 或实体关系图。相反，你可以从想象玩家将在游戏中看到的元素开始，并围绕它们构建代码。</paragraph>
            <paragraph>例如，你可以这样拆解一个射击游戏：</paragraph>
            <image candidates="{'*': 'getting_started/step_by_step/img/instancing_diagram_shooter.png'}" uri="getting_started/step_by_step/img/instancing_diagram_shooter.png"></image>
            <paragraph>对于几乎任何类型的游戏，都可以想出这样的图表。矩形表示的是从玩家角度可以在游戏中看到的实体，箭头表示的是场景之间的从属关系。</paragraph>
            <paragraph>在得到这样的图之后，建议你为其中的每一个元素都创建一个场景。你可以通过代码或者直接在编辑器里将其实例化来构建你的场景树。</paragraph>
            <paragraph>程序员们乐于花费大量时间来设计抽象的架构，尽力使得组件能够适用于这个架构。基于场景的设计取代了这种方法，使得开发更快、更直接，能够让你去专注于游戏逻辑本身。因为大多数游戏的组件都是直接映射成一个场景，所以使用基于场景实例化的设计意味着需要很少的其他架构代码。</paragraph>
            <paragraph>这里是另一个更复杂的开放世界类游戏的示例，这个示例包括有很多资产和嵌套元素：</paragraph>
            <image candidates="{'*': 'getting_started/step_by_step/img/instancing_diagram_open_world.png'}" uri="getting_started/step_by_step/img/instancing_diagram_open_world.png"></image>
            <paragraph>想象一下，我们从创建房间开始。我们可以制作几个不同的房间场景，在其中有独特的家具安排。后来，我们可以制作一个房屋场景，在内部使用多个房间实例。我们将用许多实例化的房子和一个大的地形来创建一个城堡，我们将把城堡放在这个地形上。每一个场景都将是一个或多个子场景的实例。</paragraph>
            <paragraph>之后，我们可以创建代表守卫的场景，将它们加到城堡之中。也就会间接地加到了游戏世界里。</paragraph>
            <paragraph>使用 Godot，就可以很容易地像这样迭代你的游戏，因为你需要做的就是创建并实例化更多的场景。我们将编辑器设计成了易于程序员、设计师、艺术家使用的形式。一个典型的团队开发过程会涉及 2D 或 3D 美术、关卡设计师、游戏设计师、动画师等，他们都可以用 Godot 编辑器工作。</paragraph>
        </section>
        <section ids="summary" names="summary 总结">
            <title>总结</title>
            <paragraph>实例化，从蓝图生成对象的过程有许多方便的用途。通过场景，它为你提供：</paragraph>
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>能将你的游戏分离成可以重复利用的组件。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>一个构建和封装复杂系统的工具。</paragraph>
                </list_item>
                <list_item>
                    <paragraph>一种以自然方式思考游戏项目结构的语言。</paragraph>
                </list_item>
            </bullet_list>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
