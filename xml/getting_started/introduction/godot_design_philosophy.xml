<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/getting_started/introduction/godot_design_philosophy.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <target refid="doc-godot-design-philosophy"></target>
    <section ids="godot-s-design-philosophy doc-godot-design-philosophy" names="godot's\ design\ philosophy godot\ 的设计理念 doc_godot_design_philosophy">
        <title>Godot 的设计理念</title>
        <paragraph>既然你已经小试身手，让我们谈谈 Godot 的设计。</paragraph>
        <paragraph><strong>游戏引擎各不相同，以满足不同的需求。</strong>它们不仅提供一系列功能，而且每个引擎的设计都是独一无二的。这将导致不同工作流程和项目组织结构。这一切都源于它们各自的设计理念。</paragraph>
        <paragraph>这个页面是为了帮助你通过godot的一些核心功能来理解它的工作原理. 这个页面既不是godot特性的介绍列表, 也不会对各个引擎做比较. 要知道哪一种引擎更适合你的项目, 你需要自己尝试一下并了解各个引擎对设计和局限性.</paragraph>
        <paragraph>如果你在寻找引擎特性的概览，请观看 <reference name="Godot explained in 5 minutes" refuri="https://www.youtube.com/watch?v=KjX5llYZ5eQ">Godot explained in 5 minutes</reference><target ids="godot-explained-in-5-minutes" names="godot\ explained\ in\ 5\ minutes" refuri="https://www.youtube.com/watch?v=KjX5llYZ5eQ"></target>。</paragraph>
        <section ids="object-oriented-design-and-composition" names="object-oriented\ design\ and\ composition 面向对象的设计与组合">
            <title>面向对象的设计与组合</title>
            <paragraph>Godot凭借其灵活的场景系统和节点层次结构, 将面向对象设计作为其核心. 它试图远离严格的编程模式, 以提供直观的方式来构建游戏.</paragraph>
            <paragraph>首先，Godot 可以让你把场景<strong>组合或聚合</strong>起来。这和嵌套的预制件是类似的：你可以创建 BlinkingLight 场景，并创建使用 BlinkingLight 的 BrokenLantern 场景。然后，创建一个充满 BrokenLantern 的城市。更改 BlinkingLight 的颜色、保存，城市中的所有 BrokenLantern 都会立即更新。</paragraph>
            <paragraph>更重要的是，你可以从任何场景<strong>继承</strong>。</paragraph>
            <paragraph>Godot 场景可以是武器、角色、物品、门、关卡、关卡的一部分……任何你能想象的东西。它就像类一样，但也可以使用编辑器，纯代码或同时使用两者来编辑场景。</paragraph>
            <paragraph>和其他几个 3D 引擎的 Prefab（预制体）不同，场景可以通过继承来扩展。你可以创建一个 Magician（魔术师）来扩展你的 Character（角色）。在编辑器中修改 Character 后 Magician 也会更新。这样的设计可以帮你保持项目结构与设计的一致性。</paragraph>
            <paragraph><image alt="image0" candidates="{'*': 'getting_started/introduction/img/engine_design_01.png'}" uri="getting_started/introduction/img/engine_design_01.png"></image></paragraph>
            <paragraph>Godot 还提供了不同类型的对象，称作节点，每种节点都有特定的用途。节点是场景树的一部分，最终继承自 Node 类。尽管引擎提供的碰撞形状等节点确实会被父节点物理实体所使用，但大多数节点都可以独立使用。</paragraph>
            <paragraph>换句话说，Godot的节点并不像其他一些游戏引擎中的组件那样工作。</paragraph>
            <paragraph><image alt="image1" candidates="{'*': 'getting_started/introduction/img/engine_design_02.png'}" uri="getting_started/introduction/img/engine_design_02.png"></image></paragraph>
            <paragraph>Sprite2D 是一个 Node2D，一个 CanvasItem 和一个节点。它具有其三个父类的所有属性和功能，例如变换或使用自定义着色器绘制自定义形状和渲染的能力。</paragraph>
        </section>
        <section ids="all-inclusive-package" names="all-inclusive\ package 完善的工具集">
            <title>完善的工具集</title>
            <paragraph>Godot尝试提供自己的工具来满足最常见的需求. 它具有专用的脚本工作区, 动画编辑器, tilemap编辑器, 着色器编辑器, 调试器, 分析器, 能够在本地和远程等设备上热重载的功能.</paragraph>
            <paragraph><image alt="image2" candidates="{'*': 'getting_started/introduction/img/engine_design_03.png'}" uri="getting_started/introduction/img/engine_design_03.png"></image></paragraph>
            <paragraph>我们的目标是提供一个完整的软件包来创建游戏以及持续的用户体验。只要有对应的导入插件，你就仍然可以使用外部程序进行编辑。或者你可以自己创建一个导入插件，比如 <reference name="Tiled Map 导入器" refuri="https://github.com/vnen/godot-tiled-importer">Tiled Map 导入器</reference>。</paragraph>
            <paragraph>这也是为什么 Godot 会提供自己的编程语言 GDScript 和 C# 的部分原因。GDScript 是为满足游戏开发人员和游戏设计师的需求而设计的，并且被紧密集成在引擎和编辑器中。</paragraph>
            <paragraph>GDScript 使你可以使用基于缩进的语法编写代码，但是它可以检测类型，提供质量接近静态语言的自动补全。它还针对使用 Vector、Color 等内置类型的游戏代码进行了优化。</paragraph>
            <paragraph>请注意，使用 GDExtension，你可以编写出使用类似 C、C++、Rust、D、Haxe、Swift 这类的编译语言编写的高性能代码，并且无需重新编译引擎。</paragraph>
            <paragraph>请注意，3D 工作区不像 2D 工作区那样有那么多工具。你将需要使用外部的程序或插件来编辑地形，给复杂的角色模型制作动画等。Godot 提供了完整的 API，可以直接使用编写游戏的代码来扩展编辑器的功能。参见下面的 <reference name="Godot 编辑器是一个 Godot 游戏" refid="the-godot-editor-is-a-godot-game">Godot 编辑器是一个 Godot 游戏</reference>。</paragraph>
            <paragraph><image alt="image4" candidates="{'*': 'getting_started/introduction/img/engine_design_fsm_plugin.png'}" uri="getting_started/introduction/img/engine_design_fsm_plugin.png"></image></paragraph>
            <paragraph><emphasis>Godot 2 的状态机编辑器插件，由 kubecz3k 开发。它使你可以直观地管理状态和转换。</emphasis></paragraph>
        </section>
        <section ids="open-source" names="open\ source 开源">
            <title>开源</title>
            <paragraph>Godot 源代码采用了 <strong>MIT 许可证</strong>。这意味着它附带的所有技术也必须是自由的（自由使用、修改等）。大部分代码都是由贡献者从头开始开发的。</paragraph>
            <paragraph>任何人都可以根据各自需求添加专有软件——当然它们是不会通过引擎一起提供. 包括Google AdMob或FMOD等, 如果需要可以作为第三方插件来提供.</paragraph>
            <paragraph>另一方面，开放源代码意味着你可以<strong>学习并扩展引擎</strong>。你也可以很容易地调试游戏，因为 Godot 会使用堆栈跟踪打印所有错误，即使这些错误来自引擎本身。</paragraph>
            <note>
                <paragraph><strong>开放源码的协议不会以任何方式影响你用Godot所创作的作品</strong> : 不会有附加条件影响Godot引擎与你用Godot制作的东西.</paragraph>
            </note>
        </section>
        <section ids="community-driven" names="community-driven 社区驱动">
            <title>社区驱动</title>
            <paragraph><strong>Godot开发自社区, 为其社区内外所有游戏开发者创造的.</strong> 由用户需求及公开讨论驱动核心更新. 核心开发人员的新功能通常将重点放在首先让大多数用户受益的方面.</paragraph>
            <paragraph>就是说, 尽管只有少数全职的核心开发者, 但在撰写本文时, 该项目已有超过600位贡献者. 仁慈的程序员致力于完善他们可能需要的功能, 因此在每个主要版本中都能看到引擎各个方面的改进.</paragraph>
        </section>
        <section ids="the-godot-editor-is-a-godot-game" names="the\ godot\ editor\ is\ a\ godot\ game godot\ 编辑器是\ godot\ 游戏">
            <title>Godot 编辑器是 Godot 游戏</title>
            <paragraph>Godot 编辑器是使用游戏引擎运行的，使用的是引擎自己的 UI 系统，可以在测试项目时热重载代码和场景，也可以在编辑器中运行游戏代码。这意味着<strong>相同的代码</strong>既可以用来构建游戏中的场景，又可以用来<strong>构建插件对编辑器进行扩展。</strong></paragraph>
            <paragraph>这带来了非常稳定且灵活的 UI 系统，并且编辑器本身就是由它自身驱动的。使用 <literal>@tool</literal> 注解，你就可以在编辑器中运行任何游戏代码。</paragraph>
            <paragraph><image alt="image5" candidates="{'*': 'getting_started/introduction/img/engine_design_rpg_in_a_box.png'}" uri="getting_started/introduction/img/engine_design_rpg_in_a_box.png"></image></paragraph>
            <paragraph><emphasis>RPG in a Box 是一个用 Godot 2 制作的 RPG 体素编辑器。它使用 Godot 的 UI 工具制作了其基于节点的编程系统和界面的其余部分。</emphasis></paragraph>
            <paragraph>将 <literal>@tool</literal> 注解放在任何 GDScript 文件的顶部，文件将在编辑器中运行。这使你可以导入和导出插件，创建自定义级别编辑器之类的插件，或使用与项目中使用的相同的节点和 API 来创建脚本.</paragraph>
            <note>
                <paragraph>编辑器完全使用 C++ 编写并且静态地编译为二进制文件。这意味着你不能像导入一个拥有 <literal>project.godot</literal> 文件的普通项目一样导入它。</paragraph>
            </note>
        </section>
        <section ids="separate-2d-and-3d-engines" names="separate\ 2d\ and\ 3d\ engines 独立的\ 2d\ 和\ 3d\ 引擎">
            <title>独立的 2D 和 3D 引擎</title>
            <paragraph>Godot 提供了专门的 2D 和 3D 渲染引擎。因此，<strong>2D 场景的基础单位是像素。</strong>尽管引擎是独立的，但你还是可以在 3D 中渲染 2D、在 2D 中渲染 3D，也可以在 3D 世界之上覆盖 2D 精灵和界面。</paragraph>
            <substitution_definition names="image0"><image alt="image0" candidates="{'*': 'getting_started/introduction/img/engine_design_01.png'}" uri="getting_started/introduction/img/engine_design_01.png"></image></substitution_definition>
            <substitution_definition names="image1"><image alt="image1" candidates="{'*': 'getting_started/introduction/img/engine_design_02.png'}" uri="getting_started/introduction/img/engine_design_02.png"></image></substitution_definition>
            <substitution_definition names="image2"><image alt="image2" candidates="{'*': 'getting_started/introduction/img/engine_design_03.png'}" uri="getting_started/introduction/img/engine_design_03.png"></image></substitution_definition>
            <substitution_definition names="image4"><image alt="image4" candidates="{'*': 'getting_started/introduction/img/engine_design_fsm_plugin.png'}" uri="getting_started/introduction/img/engine_design_fsm_plugin.png"></image></substitution_definition>
            <substitution_definition names="image5"><image alt="image5" candidates="{'*': 'getting_started/introduction/img/engine_design_rpg_in_a_box.png'}" uri="getting_started/introduction/img/engine_design_rpg_in_a_box.png"></image></substitution_definition>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
