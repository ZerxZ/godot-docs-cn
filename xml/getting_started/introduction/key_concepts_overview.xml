<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.17.1 -->
<document source="/home/runner/work/godot-docs-cn/godot-docs-cn/godot-docs/docs/getting_started/introduction/key_concepts_overview.rst" xmlns:c="https://www.sphinx-doc.org/" xmlns:changeset="https://www.sphinx-doc.org/" xmlns:citation="https://www.sphinx-doc.org/" xmlns:cpp="https://www.sphinx-doc.org/" xmlns:index="https://www.sphinx-doc.org/" xmlns:js="https://www.sphinx-doc.org/" xmlns:math="https://www.sphinx-doc.org/" xmlns:py="https://www.sphinx-doc.org/" xmlns:rst="https://www.sphinx-doc.org/" xmlns:std="https://www.sphinx-doc.org/">
    <comment xml:space="preserve">Intention: introduce only a handful of key concepts and avoid a big cognitive
load. Readers will then be reminded of the concepts further in the getting
started series, reinforcing their learning.</comment>
    <target refid="doc-key-concepts-overview"></target>
    <section ids="overview-of-godot-s-key-concepts doc-key-concepts-overview" names="overview\ of\ godot's\ key\ concepts godot\ 关键概念概述 doc_key_concepts_overview">
        <title>Godot 关键概念概述</title>
        <paragraph>任何游戏引擎都是围绕着构建程序所用的抽象的。在 Godot 中，游戏就是一棵由<strong>节点</strong>构成的<strong>树</strong>，树又可以结合起来构成<strong>场景</strong>。然后你还可以将这些节点连起来，让它们通过<strong>信号</strong>进行通信。</paragraph>
        <paragraph>这就是你将在这里学习的四个概念。我们将简要地看一下它们，让你对引擎的工作原理有一个了解。在入门系列中，你将在实践中使用它们。</paragraph>
        <section ids="scenes" names="scenes 场景">
            <title>场景</title>
            <paragraph>在 Godot 中，你把你的游戏分解成可重复使用的场景。场景可以是一个角色、一件武器、用户界面中的一个菜单、一座房子、整个关卡，或者任何你能想到的东西。Godot 的场景很灵活，既能够充当预制件（Prefab），又能够用作其他游戏引擎中的场景。</paragraph>
            <image candidates="{'*': 'getting_started/introduction/img/key_concepts_main_menu.webp'}" uri="getting_started/introduction/img/key_concepts_main_menu.webp"></image>
            <paragraph>你还可以嵌套场景。例如，你可以把你的角色放在关卡中，然后拖放一个场景作为它的子级。</paragraph>
            <image candidates="{'*': 'getting_started/introduction/img/key_concepts_scene_example.webp'}" uri="getting_started/introduction/img/key_concepts_scene_example.webp"></image>
        </section>
        <section ids="nodes" names="nodes 节点">
            <title>节点</title>
            <paragraph>场景由若干<strong>节点</strong>组成。节点是你的游戏最小的构件，你将其排列成树状。下面是一个人物节点的例子。</paragraph>
            <image candidates="{'*': 'getting_started/introduction/img/key_concepts_character_nodes.webp'}" uri="getting_started/introduction/img/key_concepts_character_nodes.webp"></image>
            <paragraph>它由名为“Player”的 <literal>CharacterBody2D</literal> 节点、<literal>Camera2D</literal>、<literal>Sprite2D</literal>、<literal>CollisionShape2D</literal> 组成。</paragraph>
            <note>
                <paragraph>节点名称以“2D”结尾，因为这是一个 2D 场景。对应 3D 节点的名称以“3D”结尾。请注意，原本的空间节点“Spatial”从 Godot 4 开始改名成了“Node3D”。</paragraph>
            </note>
            <paragraph>注意节点和场景在编辑器中看起来是一样的。当你把一棵节点树保存为场景时，它就显示为一个单一的节点，其内部结构在编辑器中是隐藏的。</paragraph>
            <paragraph>Godot 提供了丰富的基础节点类型库，你可以通过组合和扩展来建立更强大的节点。无论是 2D、3D 还是用户界面，你都可以用这些节点完成大多数事情。</paragraph>
            <image candidates="{'*': 'getting_started/introduction/img/key_concepts_node_menu.webp'}" uri="getting_started/introduction/img/key_concepts_node_menu.webp"></image>
        </section>
        <section ids="the-scene-tree" names="the\ scene\ tree 场景树">
            <title>场景树</title>
            <paragraph>游戏的所有场景都汇集在<strong>场景树</strong>中，字面意思是一棵场景树。由于场景是节点树，因此场景树也是节点树。但是，从场景的角度来考虑你的游戏更容易，因为它们可以代表角色、武器、门或你的用户界面。</paragraph>
            <image candidates="{'*': 'getting_started/introduction/img/key_concepts_scene_tree.webp'}" uri="getting_started/introduction/img/key_concepts_scene_tree.webp"></image>
            <target refid="doc-key-concepts-signals"></target>
        </section>
        <section ids="signals doc-key-concepts-signals" names="signals 信号 doc_key_concepts_signals">
            <title>信号</title>
            <paragraph>节点在发生某些事件时发出信号。此功能无需在代码中硬连接它们就能让节点相互通信。它为你提供了构建场景的灵活性。</paragraph>
            <image candidates="{'*': 'getting_started/introduction/img/key_concepts_signals.webp'}" uri="getting_started/introduction/img/key_concepts_signals.webp"></image>
            <note>
                <paragraph>信号是 Godot 版的<emphasis>观察者</emphasis>模式。你可以在这里查看更多相关内容：<reference refuri="https://gameprogrammingpatterns.com/observer.html">https://gameprogrammingpatterns.com/observer.html</reference></paragraph>
            </note>
            <paragraph>例如，按钮在按下时会发出信号。你可以连接到此信号以运行代码以响应此事件，例如启动游戏或打开菜单。</paragraph>
            <paragraph>其他内置信号可以告诉你两个对象何时碰撞，角色或怪物何时进入给定区域等等。你还可以针对游戏量身定制新的信号。</paragraph>
        </section>
        <section ids="summary" names="summary 总结">
            <title>总结</title>
            <paragraph>节点、场景、场景树和信号是 Godot 中的四个核心概念，你将一直操纵它们。</paragraph>
            <paragraph>节点是游戏最小的构建块。你把它们组合起来创建场景，再把它们组合起来并嵌套到场景树中。最后，你可以使用信号来使节点对其他节点或不同的场景树分支中的事件做出响应。</paragraph>
            <paragraph>经过这个简短的分解，你可能有很多问题。请耐心等待，你将在整个入门系列中得到更多解答。</paragraph>
            <substitution_definition names="weblate_widget"><reference refuri="https://hosted.weblate.org/engage/godot-engine/zh_CN/?utm_source=widget"><image alt="翻译状态" candidates="{'?': 'https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png'}" height="66" uri="https://hosted.weblate.org/widgets/godot-engine/zh_CN/godot-docs/287x66-white.png" width="287"></image></reference></substitution_definition>
        </section>
    </section>
</document>
