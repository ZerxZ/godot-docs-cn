:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Godot engine sources.
.. Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.
.. XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/AnimationNodeOneShot.xml.

.. _class_AnimationNodeOneShot:

AnimationNodeOneShot
====================

**继承：** :ref:`AnimationNodeSync<class_AnimationNodeSync>` **<** :ref:`AnimationNode<class_AnimationNode>` **<** :ref:`Resource<class_Resource>` **<** :ref:`RefCounted<class_RefCounted>` **<** :ref:`Object<class_Object>`

在 :ref:`AnimationNodeBlendTree<class_AnimationNodeBlendTree>` 中播放一次动画。

.. rst-class:: classref-introduction-group

描述
----

添加到 :ref:`AnimationNodeBlendTree<class_AnimationNodeBlendTree>` 的资源。这个动画节点将执行子动画并在完成后返回。可以自定义淡入和淡出的混合时间以及过滤器。

在设置请求并更改动画播放后，一次性节点会在下一个处理帧中通过将其 ``request`` 值设置为 :ref:`ONE_SHOT_REQUEST_NONE<class_AnimationNodeOneShot_constant_ONE_SHOT_REQUEST_NONE>` 来自动清除请求。


.. tabs::

 .. code-tab:: gdscript

    # 播放连接到 “shot” 端口的子动画。
    animation_tree.set("parameters/OneShot/request", AnimationNodeOneShot.ONE_SHOT_REQUEST_FIRE)
    # 替代语法（与上述结果相同）。
    animation_tree["parameters/OneShot/request"] = AnimationNodeOneShot.ONE_SHOT_REQUEST_FIRE
    
    # 中止连接到 “shot” 端口的子动画。
    animation_tree.set("parameters/OneShot/request", AnimationNodeOneShot.ONE_SHOT_REQUEST_ABORT)
    # 替代语法（与上述结果相同）。
    animation_tree["parameters/OneShot/request"] = AnimationNodeOneShot.ONE_SHOT_REQUEST_FADE_OUT
    
    # 使用淡出的方法中止连接到 “shot”端口的子动画。
    animation_tree.set("parameters/OneShot/request", AnimationNodeOneShot.ONE_SHOT_REQUEST_FADE_OUT)
    # 替代语法（与上述结果相同）。
    animation_tree["parameters/OneShot/request"] = AnimationNodeOneShot.ONE_SHOT_REQUEST_FADE_OUT
    
    # 获取当前状态（只读）。
    animation_tree.get("parameters/OneShot/active"))
    # 替代语法（与上述结果相同）。
    animation_tree["parameters/OneShot/active"]
    
    # 获取当前内部状态（只读）。
    animation_tree.get("parameters/OneShot/internal_active")
    # 替代语法（与上述结果相同）。
    animation_tree["parameters/OneShot/internal_active"]

 .. code-tab:: csharp

    // 播放连接到 “shot” 端口的子动画。
    animationTree.Set("parameters/OneShot/request", (int)AnimationNodeOneShot.OneShotRequest.Fire);
    
    // 中止连接到 “shot” 端口的子动画。
    animationTree.Set("parameters/OneShot/request", (int)AnimationNodeOneShot.OneShotRequest.Abort);
    
    // 使用淡出的方法中止连接到 “shot”端口的子动画。
    animationTree.Set("parameters/OneShot/request", (int)AnimationNodeOneShot.OneShotRequest.FadeOut);
    
    // 获取当前状态（只读）。
    animationTree.Get("parameters/OneShot/active");
    
    // 获取当前内部状态（只读）。
    animationTree.Get("parameters/OneShot/internal_active");



.. rst-class:: classref-introduction-group

教程
----

- :doc:`使用 AnimationTree <../tutorials/animation/animation_tree>`

- `第三人称射击演示 <https://godotengine.org/asset-library/asset/678>`__

.. rst-class:: classref-reftable-group

属性
----

.. table::
   :widths: auto

   +---------------------------------------------------+-----------------------------------------------------------------------------------------------+-----------+
   | :ref:`bool<class_bool>`                           | :ref:`autorestart<class_AnimationNodeOneShot_property_autorestart>`                           | ``false`` |
   +---------------------------------------------------+-----------------------------------------------------------------------------------------------+-----------+
   | :ref:`float<class_float>`                         | :ref:`autorestart_delay<class_AnimationNodeOneShot_property_autorestart_delay>`               | ``1.0``   |
   +---------------------------------------------------+-----------------------------------------------------------------------------------------------+-----------+
   | :ref:`float<class_float>`                         | :ref:`autorestart_random_delay<class_AnimationNodeOneShot_property_autorestart_random_delay>` | ``0.0``   |
   +---------------------------------------------------+-----------------------------------------------------------------------------------------------+-----------+
   | :ref:`Curve<class_Curve>`                         | :ref:`fadein_curve<class_AnimationNodeOneShot_property_fadein_curve>`                         |           |
   +---------------------------------------------------+-----------------------------------------------------------------------------------------------+-----------+
   | :ref:`float<class_float>`                         | :ref:`fadein_time<class_AnimationNodeOneShot_property_fadein_time>`                           | ``0.0``   |
   +---------------------------------------------------+-----------------------------------------------------------------------------------------------+-----------+
   | :ref:`Curve<class_Curve>`                         | :ref:`fadeout_curve<class_AnimationNodeOneShot_property_fadeout_curve>`                       |           |
   +---------------------------------------------------+-----------------------------------------------------------------------------------------------+-----------+
   | :ref:`float<class_float>`                         | :ref:`fadeout_time<class_AnimationNodeOneShot_property_fadeout_time>`                         | ``0.0``   |
   +---------------------------------------------------+-----------------------------------------------------------------------------------------------+-----------+
   | :ref:`MixMode<enum_AnimationNodeOneShot_MixMode>` | :ref:`mix_mode<class_AnimationNodeOneShot_property_mix_mode>`                                 | ``0``     |
   +---------------------------------------------------+-----------------------------------------------------------------------------------------------+-----------+

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

枚举
----

.. _enum_AnimationNodeOneShot_OneShotRequest:

.. rst-class:: classref-enumeration

enum **OneShotRequest**:

.. _class_AnimationNodeOneShot_constant_ONE_SHOT_REQUEST_NONE:

.. rst-class:: classref-enumeration-constant

:ref:`OneShotRequest<enum_AnimationNodeOneShot_OneShotRequest>` **ONE_SHOT_REQUEST_NONE** = ``0``

请求的默认状态。未完成任何操作。

.. _class_AnimationNodeOneShot_constant_ONE_SHOT_REQUEST_FIRE:

.. rst-class:: classref-enumeration-constant

:ref:`OneShotRequest<enum_AnimationNodeOneShot_OneShotRequest>` **ONE_SHOT_REQUEST_FIRE** = ``1``

播放连接到“shot”端口的动画的请求。

.. _class_AnimationNodeOneShot_constant_ONE_SHOT_REQUEST_ABORT:

.. rst-class:: classref-enumeration-constant

:ref:`OneShotRequest<enum_AnimationNodeOneShot_OneShotRequest>` **ONE_SHOT_REQUEST_ABORT** = ``2``

停止连接到“shot”端口的动画的请求。

.. _class_AnimationNodeOneShot_constant_ONE_SHOT_REQUEST_FADE_OUT:

.. rst-class:: classref-enumeration-constant

:ref:`OneShotRequest<enum_AnimationNodeOneShot_OneShotRequest>` **ONE_SHOT_REQUEST_FADE_OUT** = ``3``

淡出连接到“shot”端口的动画的请求。

.. rst-class:: classref-item-separator

----

.. _enum_AnimationNodeOneShot_MixMode:

.. rst-class:: classref-enumeration

enum **MixMode**:

.. _class_AnimationNodeOneShot_constant_MIX_MODE_BLEND:

.. rst-class:: classref-enumeration-constant

:ref:`MixMode<enum_AnimationNodeOneShot_MixMode>` **MIX_MODE_BLEND** = ``0``

混合两个动画。另请参见 :ref:`AnimationNodeBlend2<class_AnimationNodeBlend2>`\ 。

.. _class_AnimationNodeOneShot_constant_MIX_MODE_ADD:

.. rst-class:: classref-enumeration-constant

:ref:`MixMode<enum_AnimationNodeOneShot_MixMode>` **MIX_MODE_ADD** = ``1``

以相加方式混合两个动画。另请参阅 :ref:`AnimationNodeAdd2<class_AnimationNodeAdd2>`\ 。

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

属性说明
--------

.. _class_AnimationNodeOneShot_property_autorestart:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **autorestart** = ``false``

.. rst-class:: classref-property-setget

- void **set_autorestart** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **has_autorestart** **(** **)**

如果为 ``true``\ ，子动画结束后会自动重新开始。

换句话说，要开始自动重启，必须使用 :ref:`ONE_SHOT_REQUEST_FIRE<class_AnimationNodeOneShot_constant_ONE_SHOT_REQUEST_FIRE>` 请求播放一次动画。\ :ref:`ONE_SHOT_REQUEST_ABORT<class_AnimationNodeOneShot_constant_ONE_SHOT_REQUEST_ABORT>` 请求停止自动重启，但它不会禁用 :ref:`autorestart<class_AnimationNodeOneShot_property_autorestart>` 本身。因此，\ :ref:`ONE_SHOT_REQUEST_FIRE<class_AnimationNodeOneShot_constant_ONE_SHOT_REQUEST_FIRE>` 请求将再次开始自动重启。

.. rst-class:: classref-item-separator

----

.. _class_AnimationNodeOneShot_property_autorestart_delay:

.. rst-class:: classref-property

:ref:`float<class_float>` **autorestart_delay** = ``1.0``

.. rst-class:: classref-property-setget

- void **set_autorestart_delay** **(** :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_autorestart_delay** **(** **)**

触发自动重启的延迟时间，以秒为单位。

.. rst-class:: classref-item-separator

----

.. _class_AnimationNodeOneShot_property_autorestart_random_delay:

.. rst-class:: classref-property

:ref:`float<class_float>` **autorestart_random_delay** = ``0.0``

.. rst-class:: classref-property-setget

- void **set_autorestart_random_delay** **(** :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_autorestart_random_delay** **(** **)**

如果 :ref:`autorestart<class_AnimationNodeOneShot_property_autorestart>` 为 ``true``\ ，则介于0和此值之间的随机附加延迟（以秒为单位）将添加到 :ref:`autorestart_delay<class_AnimationNodeOneShot_property_autorestart_delay>`\ 。

.. rst-class:: classref-item-separator

----

.. _class_AnimationNodeOneShot_property_fadein_curve:

.. rst-class:: classref-property

:ref:`Curve<class_Curve>` **fadein_curve**

.. rst-class:: classref-property-setget

- void **set_fadein_curve** **(** :ref:`Curve<class_Curve>` value **)**
- :ref:`Curve<class_Curve>` **get_fadein_curve** **(** **)**

确定如何缓动动画之间的淡入淡出。如果为空，过渡将是线性的。

.. rst-class:: classref-item-separator

----

.. _class_AnimationNodeOneShot_property_fadein_time:

.. rst-class:: classref-property

:ref:`float<class_float>` **fadein_time** = ``0.0``

.. rst-class:: classref-property-setget

- void **set_fadein_time** **(** :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_fadein_time** **(** **)**

淡入持续时间。例如，将此属性设置为 ``1.0``\ ，对于 5 秒长的动画，将在动画期间产生从 0 秒开始到 1 秒结束的交叉淡入淡出。

.. rst-class:: classref-item-separator

----

.. _class_AnimationNodeOneShot_property_fadeout_curve:

.. rst-class:: classref-property

:ref:`Curve<class_Curve>` **fadeout_curve**

.. rst-class:: classref-property-setget

- void **set_fadeout_curve** **(** :ref:`Curve<class_Curve>` value **)**
- :ref:`Curve<class_Curve>` **get_fadeout_curve** **(** **)**

确定如何缓动动画之间的淡入淡出。如果为空，过渡将是线性的。

.. rst-class:: classref-item-separator

----

.. _class_AnimationNodeOneShot_property_fadeout_time:

.. rst-class:: classref-property

:ref:`float<class_float>` **fadeout_time** = ``0.0``

.. rst-class:: classref-property-setget

- void **set_fadeout_time** **(** :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_fadeout_time** **(** **)**

淡出持续时间。例如，将此属性设置为 ``1.0``\ ，对于 5 秒长的动画，将产生从 4 秒开始到 5 秒结束的交叉淡入淡出。

.. rst-class:: classref-item-separator

----

.. _class_AnimationNodeOneShot_property_mix_mode:

.. rst-class:: classref-property

:ref:`MixMode<enum_AnimationNodeOneShot_MixMode>` **mix_mode** = ``0``

.. rst-class:: classref-property-setget

- void **set_mix_mode** **(** :ref:`MixMode<enum_AnimationNodeOneShot_MixMode>` value **)**
- :ref:`MixMode<enum_AnimationNodeOneShot_MixMode>` **get_mix_mode** **(** **)**

混合类型。

.. |virtual| replace:: :abbr:`virtual (本方法通常需要用户覆盖才能生效。)`
.. |const| replace:: :abbr:`const (本方法没有副作用。不会修改该实例的任何成员变量。)`
.. |vararg| replace:: :abbr:`vararg (本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。)`
.. |constructor| replace:: :abbr:`constructor (本方法用于构造某个类型。)`
.. |static| replace:: :abbr:`static (调用本方法无需实例，所以可以直接使用类名调用。)`
.. |operator| replace:: :abbr:`operator (本方法描述的是使用本类型作为左操作数的有效操作符。)`
.. |bitfield| replace:: :abbr:`BitField (这个值是由下列标志构成的位掩码整数。)`
