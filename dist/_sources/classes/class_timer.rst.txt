:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Godot engine sources.
.. Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.
.. XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/Timer.xml.

.. _class_Timer:

Timer
=====

**继承：** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

倒数计时器。

.. rst-class:: classref-introduction-group

描述
----

使用指定的间隔进行倒计时，并在到达 0 时发出信号。可以设置为重复或“一次性”模式。

\ **注意：**\ 计时器会受到 :ref:`Engine.time_scale<class_Engine_property_time_scale>` 的影响，缩放值越高超时越快，反之亦然。

\ **注意：**\ 如果想要创建一次性定时器，不实例化节点，请使用 :ref:`SceneTree.create_timer<class_SceneTree_method_create_timer>`\ 。

.. rst-class:: classref-introduction-group

教程
----

- `2D Dodge The Creeps 演示 <https://godotengine.org/asset-library/asset/515>`__

.. rst-class:: classref-reftable-group

属性
----

.. table::
   :widths: auto

   +--------------------------------------------------------------+----------------------------------------------------------------+-----------+
   | :ref:`bool<class_bool>`                                      | :ref:`autostart<class_Timer_property_autostart>`               | ``false`` |
   +--------------------------------------------------------------+----------------------------------------------------------------+-----------+
   | :ref:`bool<class_bool>`                                      | :ref:`one_shot<class_Timer_property_one_shot>`                 | ``false`` |
   +--------------------------------------------------------------+----------------------------------------------------------------+-----------+
   | :ref:`bool<class_bool>`                                      | :ref:`paused<class_Timer_property_paused>`                     |           |
   +--------------------------------------------------------------+----------------------------------------------------------------+-----------+
   | :ref:`TimerProcessCallback<enum_Timer_TimerProcessCallback>` | :ref:`process_callback<class_Timer_property_process_callback>` | ``1``     |
   +--------------------------------------------------------------+----------------------------------------------------------------+-----------+
   | :ref:`float<class_float>`                                    | :ref:`time_left<class_Timer_property_time_left>`               |           |
   +--------------------------------------------------------------+----------------------------------------------------------------+-----------+
   | :ref:`float<class_float>`                                    | :ref:`wait_time<class_Timer_property_wait_time>`               | ``1.0``   |
   +--------------------------------------------------------------+----------------------------------------------------------------+-----------+

.. rst-class:: classref-reftable-group

方法
----

.. table::
   :widths: auto

   +-------------------------+------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>` | :ref:`is_stopped<class_Timer_method_is_stopped>` **(** **)** |const|                     |
   +-------------------------+------------------------------------------------------------------------------------------+
   | void                    | :ref:`start<class_Timer_method_start>` **(** :ref:`float<class_float>` time_sec=-1 **)** |
   +-------------------------+------------------------------------------------------------------------------------------+
   | void                    | :ref:`stop<class_Timer_method_stop>` **(** **)**                                         |
   +-------------------------+------------------------------------------------------------------------------------------+

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

信号
----

.. _class_Timer_signal_timeout:

.. rst-class:: classref-signal

**timeout** **(** **)**

当计时器到 0 时发出。

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

枚举
----

.. _enum_Timer_TimerProcessCallback:

.. rst-class:: classref-enumeration

enum **TimerProcessCallback**:

.. _class_Timer_constant_TIMER_PROCESS_PHYSICS:

.. rst-class:: classref-enumeration-constant

:ref:`TimerProcessCallback<enum_Timer_TimerProcessCallback>` **TIMER_PROCESS_PHYSICS** = ``0``

计时器的更新发生在物理帧中（见 :ref:`Node.NOTIFICATION_INTERNAL_PHYSICS_PROCESS<class_Node_constant_NOTIFICATION_INTERNAL_PHYSICS_PROCESS>`\ ）。

.. _class_Timer_constant_TIMER_PROCESS_IDLE:

.. rst-class:: classref-enumeration-constant

:ref:`TimerProcessCallback<enum_Timer_TimerProcessCallback>` **TIMER_PROCESS_IDLE** = ``1``

计时器的更新发生在处理帧中（见 :ref:`Node.NOTIFICATION_INTERNAL_PROCESS<class_Node_constant_NOTIFICATION_INTERNAL_PROCESS>`\ ）。

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

属性说明
--------

.. _class_Timer_property_autostart:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **autostart** = ``false``

.. rst-class:: classref-property-setget

- void **set_autostart** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **has_autostart** **(** **)**

如果为 ``true``\ ，定时器将在进入场景树时自动启动。

\ **注意：**\ 在定时器进入场景树并启动后，该属性会自动设置为 ``false``\ 。

.. rst-class:: classref-item-separator

----

.. _class_Timer_property_one_shot:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **one_shot** = ``false``

.. rst-class:: classref-property-setget

- void **set_one_shot** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **is_one_shot** **(** **)**

如果为 ``true``\ ，定时器将在达到 0 时停止。如果为 ``false``\ ，它将重新启动。

.. rst-class:: classref-item-separator

----

.. _class_Timer_property_paused:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **paused**

.. rst-class:: classref-property-setget

- void **set_paused** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **is_paused** **(** **)**

如果为 ``true``\ ，定时器会被暂停，并且不再处理，即使调用 :ref:`start<class_Timer_method_start>`\ ，直到它被取消暂停。

.. rst-class:: classref-item-separator

----

.. _class_Timer_property_process_callback:

.. rst-class:: classref-property

:ref:`TimerProcessCallback<enum_Timer_TimerProcessCallback>` **process_callback** = ``1``

.. rst-class:: classref-property-setget

- void **set_timer_process_callback** **(** :ref:`TimerProcessCallback<enum_Timer_TimerProcessCallback>` value **)**
- :ref:`TimerProcessCallback<enum_Timer_TimerProcessCallback>` **get_timer_process_callback** **(** **)**

处理回调。见 :ref:`TimerProcessCallback<enum_Timer_TimerProcessCallback>`\ 。

.. rst-class:: classref-item-separator

----

.. _class_Timer_property_time_left:

.. rst-class:: classref-property

:ref:`float<class_float>` **time_left**

.. rst-class:: classref-property-setget

- :ref:`float<class_float>` **get_time_left** **(** **)**

计时器的剩余时间，单位是秒。如果定时器处于非激活状态，则返回 0。

\ **注意：**\ 该值是只读的，无法设置。基于的是 :ref:`wait_time<class_Timer_property_wait_time>`\ ，请使用 :ref:`start<class_Timer_method_start>` 设置。

.. rst-class:: classref-item-separator

----

.. _class_Timer_property_wait_time:

.. rst-class:: classref-property

:ref:`float<class_float>` **wait_time** = ``1.0``

.. rst-class:: classref-property-setget

- void **set_wait_time** **(** :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_wait_time** **(** **)**

等待时间，单位为秒。

\ **注意：**\ 计时器在每个渲染帧最多只能发射一次（或者如果 :ref:`process_callback<class_Timer_property_process_callback>` 为 :ref:`TIMER_PROCESS_PHYSICS<class_Timer_constant_TIMER_PROCESS_PHYSICS>`\ ，则是每个物理帧）。这意味着非常短的等待时间（低于 0.05 秒），将根据渲染的帧速率，会有明显不同的表现。对于非常短的等待时间，建议在脚本中使用一个 process 循环，而不是使用 Timer 节点。计时器会受 :ref:`Engine.time_scale<class_Engine_property_time_scale>` 的影响，缩放值越高意味着超时越快，反之亦然。

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

方法说明
--------

.. _class_Timer_method_is_stopped:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **is_stopped** **(** **)** |const|

如果定时器被停止，返回 ``true``\ 。

.. rst-class:: classref-item-separator

----

.. _class_Timer_method_start:

.. rst-class:: classref-method

void **start** **(** :ref:`float<class_float>` time_sec=-1 **)**

启动计时器。如果 ``time_sec > 0``\ ，则会将 :ref:`wait_time<class_Timer_property_wait_time>` 设置为 ``time_sec``\ 。这也会将剩余时间重置为 :ref:`wait_time<class_Timer_property_wait_time>`\ 。

\ **注意：**\ 这个方法不会恢复已暂停的定时器。见 :ref:`paused<class_Timer_property_paused>`\ 。

.. rst-class:: classref-item-separator

----

.. _class_Timer_method_stop:

.. rst-class:: classref-method

void **stop** **(** **)**

停止计时器。

.. |virtual| replace:: :abbr:`virtual (本方法通常需要用户覆盖才能生效。)`
.. |const| replace:: :abbr:`const (本方法没有副作用。不会修改该实例的任何成员变量。)`
.. |vararg| replace:: :abbr:`vararg (本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。)`
.. |constructor| replace:: :abbr:`constructor (本方法用于构造某个类型。)`
.. |static| replace:: :abbr:`static (调用本方法无需实例，所以可以直接使用类名调用。)`
.. |operator| replace:: :abbr:`operator (本方法描述的是使用本类型作为左操作数的有效操作符。)`
.. |bitfield| replace:: :abbr:`BitField (这个值是由下列标志构成的位掩码整数。)`
