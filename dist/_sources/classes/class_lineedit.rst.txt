:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Godot engine sources.
.. Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.
.. XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/LineEdit.xml.

.. _class_LineEdit:

LineEdit
========

**继承：** :ref:`Control<class_Control>` **<** :ref:`CanvasItem<class_CanvasItem>` **<** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

单行文本的输入字段。

.. rst-class:: classref-introduction-group

描述
----

**LineEdit** 提供了一个单行文本的输入字段，提供了许多始终可用的内置快捷键（此处的 :kbd:`Ctrl` 在 macOS 上会映射到 :kbd:`Cmd`\ ）：

- :kbd:`Ctrl + C`\ ：复制

- :kbd:`Ctrl + X`\ ：剪切

- :kbd:`Ctrl + V` 或 :kbd:`Ctrl + Y`\ ：粘贴/“拉扯”n

- :kbd:`Ctrl + Z`\ ：撤销

- :kbd:`Ctrl + ~`\ ：交换输入方向

- :kbd:`Ctrl + Shift + Z`\ ：重做

- :kbd:`Ctrl + U`\ ：删除从文本光标位置到行首的文本

- :kbd:`Ctrl + K`\ ：删除从文本光标位置到行尾的文本

- :kbd:`Ctrl + A`\ ：选择所有文本

- :kbd:`Up Arrow`/:kbd:`Down Arrow`\ ：将文本光标移动到行首/行尾

在 macOS 上，有一些额外的键盘快捷键可用：

- :kbd:`Ctrl + F`\ ：同 :kbd:`Right Arrow`\ ，将文本光标向右移动一个字符

- :kbd:`Ctrl + B`\ ：同 :kbd:`Left Arrow`\ ，将文本光标向左移动一个字符

- :kbd:`Ctrl + P`\ ：同 :kbd:`Up Arrow`\ ，将文本光标移动到上一行

- :kbd:`Ctrl + N`\ ：同 :kbd:`Down Arrow`\ ，将文本光标移动到下一行

- :kbd:`Ctrl + D`\ ：同 :kbd:`Delete`\ ，删除文本光标右侧的字符

- :kbd:`Ctrl + H`\ ：同 :kbd:`Backspace`\ ，删除文本光标左侧的字符

- :kbd:`Ctrl + A`\ ：同 :kbd:`Home`\ ，将文本光标移动到行首

- :kbd:`Ctrl + E`\ ：同 :kbd:`End`\ ，将文本光标移动到行首尾

- :kbd:`Cmd + Left Arrow`\ ：同 :kbd:`Home`\ ，将文本光标移动到行首

- :kbd:`Cmd + Right Arrow`\ ：同 :kbd:`End`\ ，将文本光标移动到行尾

.. rst-class:: classref-reftable-group

属性
----

.. table::
   :widths: auto

   +-------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------+
   | :ref:`HorizontalAlignment<enum_@GlobalScope_HorizontalAlignment>` | :ref:`alignment<class_LineEdit_property_alignment>`                                                         | ``0``                                                                               |
   +-------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                                           | :ref:`caret_blink<class_LineEdit_property_caret_blink>`                                                     | ``false``                                                                           |
   +-------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------+
   | :ref:`float<class_float>`                                         | :ref:`caret_blink_interval<class_LineEdit_property_caret_blink_interval>`                                   | ``0.65``                                                                            |
   +-------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------+
   | :ref:`int<class_int>`                                             | :ref:`caret_column<class_LineEdit_property_caret_column>`                                                   | ``0``                                                                               |
   +-------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                                           | :ref:`caret_force_displayed<class_LineEdit_property_caret_force_displayed>`                                 | ``false``                                                                           |
   +-------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                                           | :ref:`caret_mid_grapheme<class_LineEdit_property_caret_mid_grapheme>`                                       | ``false``                                                                           |
   +-------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                                           | :ref:`clear_button_enabled<class_LineEdit_property_clear_button_enabled>`                                   | ``false``                                                                           |
   +-------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                                           | :ref:`context_menu_enabled<class_LineEdit_property_context_menu_enabled>`                                   | ``true``                                                                            |
   +-------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                                           | :ref:`deselect_on_focus_loss_enabled<class_LineEdit_property_deselect_on_focus_loss_enabled>`               | ``true``                                                                            |
   +-------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                                           | :ref:`drag_and_drop_selection_enabled<class_LineEdit_property_drag_and_drop_selection_enabled>`             | ``true``                                                                            |
   +-------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                                           | :ref:`draw_control_chars<class_LineEdit_property_draw_control_chars>`                                       | ``false``                                                                           |
   +-------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                                           | :ref:`editable<class_LineEdit_property_editable>`                                                           | ``true``                                                                            |
   +-------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                                           | :ref:`expand_to_text_length<class_LineEdit_property_expand_to_text_length>`                                 | ``false``                                                                           |
   +-------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                                           | :ref:`flat<class_LineEdit_property_flat>`                                                                   | ``false``                                                                           |
   +-------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------+
   | :ref:`FocusMode<enum_Control_FocusMode>`                          | focus_mode                                                                                                  | ``2`` (overrides :ref:`Control<class_Control_property_focus_mode>`)                 |
   +-------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------+
   | :ref:`String<class_String>`                                       | :ref:`language<class_LineEdit_property_language>`                                                           | ``""``                                                                              |
   +-------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------+
   | :ref:`int<class_int>`                                             | :ref:`max_length<class_LineEdit_property_max_length>`                                                       | ``0``                                                                               |
   +-------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                                           | :ref:`middle_mouse_paste_enabled<class_LineEdit_property_middle_mouse_paste_enabled>`                       | ``true``                                                                            |
   +-------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------+
   | :ref:`CursorShape<enum_Control_CursorShape>`                      | mouse_default_cursor_shape                                                                                  | ``1`` (overrides :ref:`Control<class_Control_property_mouse_default_cursor_shape>`) |
   +-------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------+
   | :ref:`String<class_String>`                                       | :ref:`placeholder_text<class_LineEdit_property_placeholder_text>`                                           | ``""``                                                                              |
   +-------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------+
   | :ref:`Texture2D<class_Texture2D>`                                 | :ref:`right_icon<class_LineEdit_property_right_icon>`                                                       |                                                                                     |
   +-------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                                           | :ref:`secret<class_LineEdit_property_secret>`                                                               | ``false``                                                                           |
   +-------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------+
   | :ref:`String<class_String>`                                       | :ref:`secret_character<class_LineEdit_property_secret_character>`                                           | ``"•"``                                                                             |
   +-------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                                           | :ref:`select_all_on_focus<class_LineEdit_property_select_all_on_focus>`                                     | ``false``                                                                           |
   +-------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                                           | :ref:`selecting_enabled<class_LineEdit_property_selecting_enabled>`                                         | ``true``                                                                            |
   +-------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                                           | :ref:`shortcut_keys_enabled<class_LineEdit_property_shortcut_keys_enabled>`                                 | ``true``                                                                            |
   +-------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------+
   | :ref:`StructuredTextParser<enum_TextServer_StructuredTextParser>` | :ref:`structured_text_bidi_override<class_LineEdit_property_structured_text_bidi_override>`                 | ``0``                                                                               |
   +-------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------+
   | :ref:`Array<class_Array>`                                         | :ref:`structured_text_bidi_override_options<class_LineEdit_property_structured_text_bidi_override_options>` | ``[]``                                                                              |
   +-------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------+
   | :ref:`String<class_String>`                                       | :ref:`text<class_LineEdit_property_text>`                                                                   | ``""``                                                                              |
   +-------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------+
   | :ref:`TextDirection<enum_Control_TextDirection>`                  | :ref:`text_direction<class_LineEdit_property_text_direction>`                                               | ``0``                                                                               |
   +-------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                                           | :ref:`virtual_keyboard_enabled<class_LineEdit_property_virtual_keyboard_enabled>`                           | ``true``                                                                            |
   +-------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------+
   | :ref:`VirtualKeyboardType<enum_LineEdit_VirtualKeyboardType>`     | :ref:`virtual_keyboard_type<class_LineEdit_property_virtual_keyboard_type>`                                 | ``0``                                                                               |
   +-------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------+

.. rst-class:: classref-reftable-group

方法
----

.. table::
   :widths: auto

   +-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------+
   | void                              | :ref:`clear<class_LineEdit_method_clear>` **(** **)**                                                                                |
   +-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------+
   | void                              | :ref:`delete_char_at_caret<class_LineEdit_method_delete_char_at_caret>` **(** **)**                                                  |
   +-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------+
   | void                              | :ref:`delete_text<class_LineEdit_method_delete_text>` **(** :ref:`int<class_int>` from_column, :ref:`int<class_int>` to_column **)** |
   +-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------+
   | void                              | :ref:`deselect<class_LineEdit_method_deselect>` **(** **)**                                                                          |
   +-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`PopupMenu<class_PopupMenu>` | :ref:`get_menu<class_LineEdit_method_get_menu>` **(** **)** |const|                                                                  |
   +-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`float<class_float>`         | :ref:`get_scroll_offset<class_LineEdit_method_get_scroll_offset>` **(** **)** |const|                                                |
   +-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`String<class_String>`       | :ref:`get_selected_text<class_LineEdit_method_get_selected_text>` **(** **)**                                                        |
   +-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`int<class_int>`             | :ref:`get_selection_from_column<class_LineEdit_method_get_selection_from_column>` **(** **)** |const|                                |
   +-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`int<class_int>`             | :ref:`get_selection_to_column<class_LineEdit_method_get_selection_to_column>` **(** **)** |const|                                    |
   +-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`           | :ref:`has_selection<class_LineEdit_method_has_selection>` **(** **)** |const|                                                        |
   +-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------+
   | void                              | :ref:`insert_text_at_caret<class_LineEdit_method_insert_text_at_caret>` **(** :ref:`String<class_String>` text **)**                 |
   +-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`           | :ref:`is_menu_visible<class_LineEdit_method_is_menu_visible>` **(** **)** |const|                                                    |
   +-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------+
   | void                              | :ref:`menu_option<class_LineEdit_method_menu_option>` **(** :ref:`int<class_int>` option **)**                                       |
   +-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------+
   | void                              | :ref:`select<class_LineEdit_method_select>` **(** :ref:`int<class_int>` from=0, :ref:`int<class_int>` to=-1 **)**                    |
   +-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------+
   | void                              | :ref:`select_all<class_LineEdit_method_select_all>` **(** **)**                                                                      |
   +-----------------------------------+--------------------------------------------------------------------------------------------------------------------------------------+

.. rst-class:: classref-reftable-group

主题属性
--------

.. table::
   :widths: auto

   +-----------------------------------+------------------------------------------------------------------------------------------+-------------------------------------+
   | :ref:`Color<class_Color>`         | :ref:`caret_color<class_LineEdit_theme_color_caret_color>`                               | ``Color(0.95, 0.95, 0.95, 1)``      |
   +-----------------------------------+------------------------------------------------------------------------------------------+-------------------------------------+
   | :ref:`Color<class_Color>`         | :ref:`clear_button_color<class_LineEdit_theme_color_clear_button_color>`                 | ``Color(0.875, 0.875, 0.875, 1)``   |
   +-----------------------------------+------------------------------------------------------------------------------------------+-------------------------------------+
   | :ref:`Color<class_Color>`         | :ref:`clear_button_color_pressed<class_LineEdit_theme_color_clear_button_color_pressed>` | ``Color(1, 1, 1, 1)``               |
   +-----------------------------------+------------------------------------------------------------------------------------------+-------------------------------------+
   | :ref:`Color<class_Color>`         | :ref:`font_color<class_LineEdit_theme_color_font_color>`                                 | ``Color(0.875, 0.875, 0.875, 1)``   |
   +-----------------------------------+------------------------------------------------------------------------------------------+-------------------------------------+
   | :ref:`Color<class_Color>`         | :ref:`font_outline_color<class_LineEdit_theme_color_font_outline_color>`                 | ``Color(1, 1, 1, 1)``               |
   +-----------------------------------+------------------------------------------------------------------------------------------+-------------------------------------+
   | :ref:`Color<class_Color>`         | :ref:`font_placeholder_color<class_LineEdit_theme_color_font_placeholder_color>`         | ``Color(0.875, 0.875, 0.875, 0.6)`` |
   +-----------------------------------+------------------------------------------------------------------------------------------+-------------------------------------+
   | :ref:`Color<class_Color>`         | :ref:`font_selected_color<class_LineEdit_theme_color_font_selected_color>`               | ``Color(1, 1, 1, 1)``               |
   +-----------------------------------+------------------------------------------------------------------------------------------+-------------------------------------+
   | :ref:`Color<class_Color>`         | :ref:`font_uneditable_color<class_LineEdit_theme_color_font_uneditable_color>`           | ``Color(0.875, 0.875, 0.875, 0.5)`` |
   +-----------------------------------+------------------------------------------------------------------------------------------+-------------------------------------+
   | :ref:`Color<class_Color>`         | :ref:`selection_color<class_LineEdit_theme_color_selection_color>`                       | ``Color(0.5, 0.5, 0.5, 1)``         |
   +-----------------------------------+------------------------------------------------------------------------------------------+-------------------------------------+
   | :ref:`int<class_int>`             | :ref:`caret_width<class_LineEdit_theme_constant_caret_width>`                            | ``1``                               |
   +-----------------------------------+------------------------------------------------------------------------------------------+-------------------------------------+
   | :ref:`int<class_int>`             | :ref:`minimum_character_width<class_LineEdit_theme_constant_minimum_character_width>`    | ``4``                               |
   +-----------------------------------+------------------------------------------------------------------------------------------+-------------------------------------+
   | :ref:`int<class_int>`             | :ref:`outline_size<class_LineEdit_theme_constant_outline_size>`                          | ``0``                               |
   +-----------------------------------+------------------------------------------------------------------------------------------+-------------------------------------+
   | :ref:`Font<class_Font>`           | :ref:`font<class_LineEdit_theme_font_font>`                                              |                                     |
   +-----------------------------------+------------------------------------------------------------------------------------------+-------------------------------------+
   | :ref:`int<class_int>`             | :ref:`font_size<class_LineEdit_theme_font_size_font_size>`                               |                                     |
   +-----------------------------------+------------------------------------------------------------------------------------------+-------------------------------------+
   | :ref:`Texture2D<class_Texture2D>` | :ref:`clear<class_LineEdit_theme_icon_clear>`                                            |                                     |
   +-----------------------------------+------------------------------------------------------------------------------------------+-------------------------------------+
   | :ref:`StyleBox<class_StyleBox>`   | :ref:`focus<class_LineEdit_theme_style_focus>`                                           |                                     |
   +-----------------------------------+------------------------------------------------------------------------------------------+-------------------------------------+
   | :ref:`StyleBox<class_StyleBox>`   | :ref:`normal<class_LineEdit_theme_style_normal>`                                         |                                     |
   +-----------------------------------+------------------------------------------------------------------------------------------+-------------------------------------+
   | :ref:`StyleBox<class_StyleBox>`   | :ref:`read_only<class_LineEdit_theme_style_read_only>`                                   |                                     |
   +-----------------------------------+------------------------------------------------------------------------------------------+-------------------------------------+

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

信号
----

.. _class_LineEdit_signal_text_change_rejected:

.. rst-class:: classref-signal

**text_change_rejected** **(** :ref:`String<class_String>` rejected_substring **)**

当追加的文本超过了 :ref:`max_length<class_LineEdit_property_max_length>` 时触发。追加后的文本会被截断以适应 :ref:`max_length<class_LineEdit_property_max_length>`\ ，超出的部分会被作为 ``rejected_substring`` 参数传递。

.. rst-class:: classref-item-separator

----

.. _class_LineEdit_signal_text_changed:

.. rst-class:: classref-signal

**text_changed** **(** :ref:`String<class_String>` new_text **)**

当文本更改时触发。

.. rst-class:: classref-item-separator

----

.. _class_LineEdit_signal_text_submitted:

.. rst-class:: classref-signal

**text_submitted** **(** :ref:`String<class_String>` new_text **)**

当用户在 **LineEdit** 上按 :ref:`@GlobalScope.KEY_ENTER<class_@GlobalScope_constant_KEY_ENTER>` 时触发。

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

枚举
----

.. _enum_LineEdit_MenuItems:

.. rst-class:: classref-enumeration

enum **MenuItems**:

.. _class_LineEdit_constant_MENU_CUT:

.. rst-class:: classref-enumeration-constant

:ref:`MenuItems<enum_LineEdit_MenuItems>` **MENU_CUT** = ``0``

剪切（复制并删除）选中的文本。

.. _class_LineEdit_constant_MENU_COPY:

.. rst-class:: classref-enumeration-constant

:ref:`MenuItems<enum_LineEdit_MenuItems>` **MENU_COPY** = ``1``

复制选中的文本。

.. _class_LineEdit_constant_MENU_PASTE:

.. rst-class:: classref-enumeration-constant

:ref:`MenuItems<enum_LineEdit_MenuItems>` **MENU_PASTE** = ``2``

将剪贴板中的文本粘贴到选中文本之上（或者文本光标位置）。

会使用 :ref:`String.strip_escapes<class_String_method_strip_escapes>` 自动剥离操作系统剪贴板中不可打印的转义字符。

.. _class_LineEdit_constant_MENU_CLEAR:

.. rst-class:: classref-enumeration-constant

:ref:`MenuItems<enum_LineEdit_MenuItems>` **MENU_CLEAR** = ``3``

删除 **LineEdit** 中的全部文本。

.. _class_LineEdit_constant_MENU_SELECT_ALL:

.. rst-class:: classref-enumeration-constant

:ref:`MenuItems<enum_LineEdit_MenuItems>` **MENU_SELECT_ALL** = ``4``

选中 **LineEdit** 中的全部文本。

.. _class_LineEdit_constant_MENU_UNDO:

.. rst-class:: classref-enumeration-constant

:ref:`MenuItems<enum_LineEdit_MenuItems>` **MENU_UNDO** = ``5``

撤销之前的操作。

.. _class_LineEdit_constant_MENU_REDO:

.. rst-class:: classref-enumeration-constant

:ref:`MenuItems<enum_LineEdit_MenuItems>` **MENU_REDO** = ``6``

反转最后一个撤销动作。

.. _class_LineEdit_constant_MENU_SUBMENU_TEXT_DIR:

.. rst-class:: classref-enumeration-constant

:ref:`MenuItems<enum_LineEdit_MenuItems>` **MENU_SUBMENU_TEXT_DIR** = ``7``

“文本书写方向”子菜单的 ID。

.. _class_LineEdit_constant_MENU_DIR_INHERITED:

.. rst-class:: classref-enumeration-constant

:ref:`MenuItems<enum_LineEdit_MenuItems>` **MENU_DIR_INHERITED** = ``8``

将文本方向设置为继承。

.. _class_LineEdit_constant_MENU_DIR_AUTO:

.. rst-class:: classref-enumeration-constant

:ref:`MenuItems<enum_LineEdit_MenuItems>` **MENU_DIR_AUTO** = ``9``

将文本方向设置为自动。

.. _class_LineEdit_constant_MENU_DIR_LTR:

.. rst-class:: classref-enumeration-constant

:ref:`MenuItems<enum_LineEdit_MenuItems>` **MENU_DIR_LTR** = ``10``

将文本方向设置为从左至右。

.. _class_LineEdit_constant_MENU_DIR_RTL:

.. rst-class:: classref-enumeration-constant

:ref:`MenuItems<enum_LineEdit_MenuItems>` **MENU_DIR_RTL** = ``11``

将文本方向设置为从右至左。

.. _class_LineEdit_constant_MENU_DISPLAY_UCC:

.. rst-class:: classref-enumeration-constant

:ref:`MenuItems<enum_LineEdit_MenuItems>` **MENU_DISPLAY_UCC** = ``12``

切换控制字符的显示。

.. _class_LineEdit_constant_MENU_SUBMENU_INSERT_UCC:

.. rst-class:: classref-enumeration-constant

:ref:`MenuItems<enum_LineEdit_MenuItems>` **MENU_SUBMENU_INSERT_UCC** = ``13``

“插入控制字符”子菜单的 ID。

.. _class_LineEdit_constant_MENU_INSERT_LRM:

.. rst-class:: classref-enumeration-constant

:ref:`MenuItems<enum_LineEdit_MenuItems>` **MENU_INSERT_LRM** = ``14``

插入从左至右标志（LRM）字符。

.. _class_LineEdit_constant_MENU_INSERT_RLM:

.. rst-class:: classref-enumeration-constant

:ref:`MenuItems<enum_LineEdit_MenuItems>` **MENU_INSERT_RLM** = ``15``

插入从右至左标志（LRM）字符。

.. _class_LineEdit_constant_MENU_INSERT_LRE:

.. rst-class:: classref-enumeration-constant

:ref:`MenuItems<enum_LineEdit_MenuItems>` **MENU_INSERT_LRE** = ``16``

插入开始从左至右嵌入（LRE）字符。

.. _class_LineEdit_constant_MENU_INSERT_RLE:

.. rst-class:: classref-enumeration-constant

:ref:`MenuItems<enum_LineEdit_MenuItems>` **MENU_INSERT_RLE** = ``17``

插入开始从右至左嵌入（RLE）字符。

.. _class_LineEdit_constant_MENU_INSERT_LRO:

.. rst-class:: classref-enumeration-constant

:ref:`MenuItems<enum_LineEdit_MenuItems>` **MENU_INSERT_LRO** = ``18``

插入开始从左至右强制（LRO）字符。

.. _class_LineEdit_constant_MENU_INSERT_RLO:

.. rst-class:: classref-enumeration-constant

:ref:`MenuItems<enum_LineEdit_MenuItems>` **MENU_INSERT_RLO** = ``19``

插入开始从右至左嵌入（RLE）字符。

.. _class_LineEdit_constant_MENU_INSERT_PDF:

.. rst-class:: classref-enumeration-constant

:ref:`MenuItems<enum_LineEdit_MenuItems>` **MENU_INSERT_PDF** = ``20``

插入退出方向格式化（PDF）字符。

.. _class_LineEdit_constant_MENU_INSERT_ALM:

.. rst-class:: classref-enumeration-constant

:ref:`MenuItems<enum_LineEdit_MenuItems>` **MENU_INSERT_ALM** = ``21``

插入阿拉伯字母标记（ALM）字符。

.. _class_LineEdit_constant_MENU_INSERT_LRI:

.. rst-class:: classref-enumeration-constant

:ref:`MenuItems<enum_LineEdit_MenuItems>` **MENU_INSERT_LRI** = ``22``

插入从左至右隔离（LRI）字符。

.. _class_LineEdit_constant_MENU_INSERT_RLI:

.. rst-class:: classref-enumeration-constant

:ref:`MenuItems<enum_LineEdit_MenuItems>` **MENU_INSERT_RLI** = ``23``

插入从右至左隔离（RLI）字符。

.. _class_LineEdit_constant_MENU_INSERT_FSI:

.. rst-class:: classref-enumeration-constant

:ref:`MenuItems<enum_LineEdit_MenuItems>` **MENU_INSERT_FSI** = ``24``

插入第一个强隔离（FSI）字符。

.. _class_LineEdit_constant_MENU_INSERT_PDI:

.. rst-class:: classref-enumeration-constant

:ref:`MenuItems<enum_LineEdit_MenuItems>` **MENU_INSERT_PDI** = ``25``

插入退出方向隔离（PDI）字符。

.. _class_LineEdit_constant_MENU_INSERT_ZWJ:

.. rst-class:: classref-enumeration-constant

:ref:`MenuItems<enum_LineEdit_MenuItems>` **MENU_INSERT_ZWJ** = ``26``

插入零宽连接符（ZWJ）字符。

.. _class_LineEdit_constant_MENU_INSERT_ZWNJ:

.. rst-class:: classref-enumeration-constant

:ref:`MenuItems<enum_LineEdit_MenuItems>` **MENU_INSERT_ZWNJ** = ``27``

插入零宽非连接符（ZWNJ）字符。

.. _class_LineEdit_constant_MENU_INSERT_WJ:

.. rst-class:: classref-enumeration-constant

:ref:`MenuItems<enum_LineEdit_MenuItems>` **MENU_INSERT_WJ** = ``28``

插入文字连接符（WJ）字符。

.. _class_LineEdit_constant_MENU_INSERT_SHY:

.. rst-class:: classref-enumeration-constant

:ref:`MenuItems<enum_LineEdit_MenuItems>` **MENU_INSERT_SHY** = ``29``

插入软连字符（SHY）字符。

.. _class_LineEdit_constant_MENU_MAX:

.. rst-class:: classref-enumeration-constant

:ref:`MenuItems<enum_LineEdit_MenuItems>` **MENU_MAX** = ``30``

代表 :ref:`MenuItems<enum_LineEdit_MenuItems>` 枚举的大小。

.. rst-class:: classref-item-separator

----

.. _enum_LineEdit_VirtualKeyboardType:

.. rst-class:: classref-enumeration

enum **VirtualKeyboardType**:

.. _class_LineEdit_constant_KEYBOARD_TYPE_DEFAULT:

.. rst-class:: classref-enumeration-constant

:ref:`VirtualKeyboardType<enum_LineEdit_VirtualKeyboardType>` **KEYBOARD_TYPE_DEFAULT** = ``0``

默认文本虚拟键盘。

.. _class_LineEdit_constant_KEYBOARD_TYPE_MULTILINE:

.. rst-class:: classref-enumeration-constant

:ref:`VirtualKeyboardType<enum_LineEdit_VirtualKeyboardType>` **KEYBOARD_TYPE_MULTILINE** = ``1``

多行虚拟键盘。

.. _class_LineEdit_constant_KEYBOARD_TYPE_NUMBER:

.. rst-class:: classref-enumeration-constant

:ref:`VirtualKeyboardType<enum_LineEdit_VirtualKeyboardType>` **KEYBOARD_TYPE_NUMBER** = ``2``

虚拟数字键盘，可用于 PIN 输入。

.. _class_LineEdit_constant_KEYBOARD_TYPE_NUMBER_DECIMAL:

.. rst-class:: classref-enumeration-constant

:ref:`VirtualKeyboardType<enum_LineEdit_VirtualKeyboardType>` **KEYBOARD_TYPE_NUMBER_DECIMAL** = ``3``

虚拟数字键盘，可用于输入小数。

.. _class_LineEdit_constant_KEYBOARD_TYPE_PHONE:

.. rst-class:: classref-enumeration-constant

:ref:`VirtualKeyboardType<enum_LineEdit_VirtualKeyboardType>` **KEYBOARD_TYPE_PHONE** = ``4``

虚拟手机号码键盘。

.. _class_LineEdit_constant_KEYBOARD_TYPE_EMAIL_ADDRESS:

.. rst-class:: classref-enumeration-constant

:ref:`VirtualKeyboardType<enum_LineEdit_VirtualKeyboardType>` **KEYBOARD_TYPE_EMAIL_ADDRESS** = ``5``

带有附加键的虚拟键盘，可帮助输入电子邮件地址。

.. _class_LineEdit_constant_KEYBOARD_TYPE_PASSWORD:

.. rst-class:: classref-enumeration-constant

:ref:`VirtualKeyboardType<enum_LineEdit_VirtualKeyboardType>` **KEYBOARD_TYPE_PASSWORD** = ``6``

用于输入密码的虚拟键盘。在大多数平台上，这应该会禁用自动完成和自动首字母大写功能。

\ **注意：**\ Web 平台不支持。与 :ref:`KEYBOARD_TYPE_DEFAULT<class_LineEdit_constant_KEYBOARD_TYPE_DEFAULT>` 的行为相同。

.. _class_LineEdit_constant_KEYBOARD_TYPE_URL:

.. rst-class:: classref-enumeration-constant

:ref:`VirtualKeyboardType<enum_LineEdit_VirtualKeyboardType>` **KEYBOARD_TYPE_URL** = ``7``

带有附加键的虚拟键盘，可帮助输入 URL。

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

属性说明
--------

.. _class_LineEdit_property_alignment:

.. rst-class:: classref-property

:ref:`HorizontalAlignment<enum_@GlobalScope_HorizontalAlignment>` **alignment** = ``0``

.. rst-class:: classref-property-setget

- void **set_horizontal_alignment** **(** :ref:`HorizontalAlignment<enum_@GlobalScope_HorizontalAlignment>` value **)**
- :ref:`HorizontalAlignment<enum_@GlobalScope_HorizontalAlignment>` **get_horizontal_alignment** **(** **)**

文本对齐方式，由 :ref:`HorizontalAlignment<enum_@GlobalScope_HorizontalAlignment>` 枚举定义。

.. rst-class:: classref-item-separator

----

.. _class_LineEdit_property_caret_blink:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **caret_blink** = ``false``

.. rst-class:: classref-property-setget

- void **set_caret_blink_enabled** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **is_caret_blink_enabled** **(** **)**

如果为 ``true``\ ，则文本光标会闪烁。

.. rst-class:: classref-item-separator

----

.. _class_LineEdit_property_caret_blink_interval:

.. rst-class:: classref-property

:ref:`float<class_float>` **caret_blink_interval** = ``0.65``

.. rst-class:: classref-property-setget

- void **set_caret_blink_interval** **(** :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_caret_blink_interval** **(** **)**

文本光标的闪烁间隔（单位为秒）。

.. rst-class:: classref-item-separator

----

.. _class_LineEdit_property_caret_column:

.. rst-class:: classref-property

:ref:`int<class_int>` **caret_column** = ``0``

.. rst-class:: classref-property-setget

- void **set_caret_column** **(** :ref:`int<class_int>` value **)**
- :ref:`int<class_int>` **get_caret_column** **(** **)**

**LineEdit** 中光标的列位置。设置后文本可能会滚动以适应它。

.. rst-class:: classref-item-separator

----

.. _class_LineEdit_property_caret_force_displayed:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **caret_force_displayed** = ``false``

.. rst-class:: classref-property-setget

- void **set_caret_force_displayed** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **is_caret_force_displayed** **(** **)**

如果为 ``true``\ ，则该 **LineEdit** 会始终显示光标，即使焦点丢失。

.. rst-class:: classref-item-separator

----

.. _class_LineEdit_property_caret_mid_grapheme:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **caret_mid_grapheme** = ``false``

.. rst-class:: classref-property-setget

- void **set_caret_mid_grapheme_enabled** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **is_caret_mid_grapheme_enabled** **(** **)**

允许在单个复合字符的组件中进行移动光标、选中、删除的操作。

\ **注意：**\ 退格键 :kbd:`Backspace` 始终按复合字符的组件删除。

.. rst-class:: classref-item-separator

----

.. _class_LineEdit_property_clear_button_enabled:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **clear_button_enabled** = ``false``

.. rst-class:: classref-property-setget

- void **set_clear_button_enabled** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **is_clear_button_enabled** **(** **)**

如果为 ``true``\ ，\ **LineEdit** 将在 :ref:`text<class_LineEdit_property_text>` 非空时显示清空按钮，可以用来快速清除文本。

.. rst-class:: classref-item-separator

----

.. _class_LineEdit_property_context_menu_enabled:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **context_menu_enabled** = ``true``

.. rst-class:: classref-property-setget

- void **set_context_menu_enabled** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **is_context_menu_enabled** **(** **)**

如果为 ``true``\ ，右键单击将出现上下文菜单。

.. rst-class:: classref-item-separator

----

.. _class_LineEdit_property_deselect_on_focus_loss_enabled:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **deselect_on_focus_loss_enabled** = ``true``

.. rst-class:: classref-property-setget

- void **set_deselect_on_focus_loss_enabled** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **is_deselect_on_focus_loss_enabled** **(** **)**

如果为 ``true``\ ，则在丢失焦点时会取消选中文本。

.. rst-class:: classref-item-separator

----

.. _class_LineEdit_property_drag_and_drop_selection_enabled:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **drag_and_drop_selection_enabled** = ``true``

.. rst-class:: classref-property-setget

- void **set_drag_and_drop_selection_enabled** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **is_drag_and_drop_selection_enabled** **(** **)**

如果为 ``true``\ ，则允许拖放选中的文本。

.. rst-class:: classref-item-separator

----

.. _class_LineEdit_property_draw_control_chars:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **draw_control_chars** = ``false``

.. rst-class:: classref-property-setget

- void **set_draw_control_chars** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **get_draw_control_chars** **(** **)**

如果为 ``true``\ ，则会显示控制字符。

.. rst-class:: classref-item-separator

----

.. _class_LineEdit_property_editable:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **editable** = ``true``

.. rst-class:: classref-property-setget

- void **set_editable** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **is_editable** **(** **)**

如果为 ``false``\ ，则不能修改现在的文本，也不能添加新文本。

.. rst-class:: classref-item-separator

----

.. _class_LineEdit_property_expand_to_text_length:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **expand_to_text_length** = ``false``

.. rst-class:: classref-property-setget

- void **set_expand_to_text_length_enabled** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **is_expand_to_text_length_enabled** **(** **)**

如果为 ``true``\ ，则 **LineEdit** 宽度将增加到比 :ref:`text<class_LineEdit_property_text>` 长。如果 :ref:`text<class_LineEdit_property_text>` 被缩短，它将\ **不**\ 压缩。

.. rst-class:: classref-item-separator

----

.. _class_LineEdit_property_flat:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **flat** = ``false``

.. rst-class:: classref-property-setget

- void **set_flat** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **is_flat** **(** **)**

如果为 ``true``\ ，则 **LineEdit** 不显示装饰。

.. rst-class:: classref-item-separator

----

.. _class_LineEdit_property_language:

.. rst-class:: classref-property

:ref:`String<class_String>` **language** = ``""``

.. rst-class:: classref-property-setget

- void **set_language** **(** :ref:`String<class_String>` value **)**
- :ref:`String<class_String>` **get_language** **(** **)**

语言代码，用于断行和文本塑形算法。如果留空则使用当前区域设置。

.. rst-class:: classref-item-separator

----

.. _class_LineEdit_property_max_length:

.. rst-class:: classref-property

:ref:`int<class_int>` **max_length** = ``0``

.. rst-class:: classref-property-setget

- void **set_max_length** **(** :ref:`int<class_int>` value **)**
- :ref:`int<class_int>` **get_max_length** **(** **)**

**LineEdit** 中可以输入的最大字符数。如果为 ``0``\ ，则没有限制。

定义限制后，将截断超过 :ref:`max_length<class_LineEdit_property_max_length>` 的字符。在设置最大长度时，将适用于现有的 :ref:`text<class_LineEdit_property_text>` 内容，以及在 **LineEdit** 中插入、包括粘贴进来的新文本。如果任何输入文本被截断，\ :ref:`text_change_rejected<class_LineEdit_signal_text_change_rejected>` 信号将以截断的子字符串作为参数发出。

\ **示例：**\ 


.. tabs::

 .. code-tab:: gdscript

    text = "Hello world"
    max_length = 5
    # `text` 变为 "Hello"。
    max_length = 10
    text += " goodbye"
    # `text` 变为 "Hello good"。
    # `text_change_rejected` 以 "bye" 作为参数发出。

 .. code-tab:: csharp

    Text = "Hello world";
    MaxLength = 5;
    // `Text` 变为 "Hello"。
    MaxLength = 10;
    Text += " goodbye";
    // `text` 变为 "Hello good"。
    // `text_change_rejected` 以 "bye" 作为参数发出。



.. rst-class:: classref-item-separator

----

.. _class_LineEdit_property_middle_mouse_paste_enabled:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **middle_mouse_paste_enabled** = ``true``

.. rst-class:: classref-property-setget

- void **set_middle_mouse_paste_enabled** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **is_middle_mouse_paste_enabled** **(** **)**

如果为 ``false``\ ，将禁用鼠标中键粘贴剪贴板。

\ **注意：**\ 这个方法只在 Linux 上实现。

.. rst-class:: classref-item-separator

----

.. _class_LineEdit_property_placeholder_text:

.. rst-class:: classref-property

:ref:`String<class_String>` **placeholder_text** = ``""``

.. rst-class:: classref-property-setget

- void **set_placeholder** **(** :ref:`String<class_String>` value **)**
- :ref:`String<class_String>` **get_placeholder** **(** **)**

当 **LineEdit** 为空时显示的文本。它\ **不是** **LineEdit** 的默认值（见 :ref:`text<class_LineEdit_property_text>`\ ）。

.. rst-class:: classref-item-separator

----

.. _class_LineEdit_property_right_icon:

.. rst-class:: classref-property

:ref:`Texture2D<class_Texture2D>` **right_icon**

.. rst-class:: classref-property-setget

- void **set_right_icon** **(** :ref:`Texture2D<class_Texture2D>` value **)**
- :ref:`Texture2D<class_Texture2D>` **get_right_icon** **(** **)**

设置 **LineEdit** 右端的图标，这个图标会在没有 :ref:`text<class_LineEdit_property_text>` 时出现，如果 :ref:`clear_button_enabled<class_LineEdit_property_clear_button_enabled>` 为 ``false`` 则始终可见。

.. rst-class:: classref-item-separator

----

.. _class_LineEdit_property_secret:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **secret** = ``false``

.. rst-class:: classref-property-setget

- void **set_secret** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **is_secret** **(** **)**

如果为 ``true``\ ，则每个字符都会被替换成密码字符（见 :ref:`secret_character<class_LineEdit_property_secret_character>`\ ）。

.. rst-class:: classref-item-separator

----

.. _class_LineEdit_property_secret_character:

.. rst-class:: classref-property

:ref:`String<class_String>` **secret_character** = ``"•"``

.. rst-class:: classref-property-setget

- void **set_secret_character** **(** :ref:`String<class_String>` value **)**
- :ref:`String<class_String>` **get_secret_character** **(** **)**

用于掩盖秘密输入的字符。只能用单个字符作为秘密字符。如果长度超过一个字符，则仅使用第一个字符。如果为空，则使用空格代替。

.. rst-class:: classref-item-separator

----

.. _class_LineEdit_property_select_all_on_focus:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **select_all_on_focus** = ``false``

.. rst-class:: classref-property-setget

- void **set_select_all_on_focus** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **is_select_all_on_focus** **(** **)**

如果为 ``true``\ ，则在获得焦点时会全选文本。

.. rst-class:: classref-item-separator

----

.. _class_LineEdit_property_selecting_enabled:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **selecting_enabled** = ``true``

.. rst-class:: classref-property-setget

- void **set_selecting_enabled** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **is_selecting_enabled** **(** **)**

如果为 ``false``\ ，则无法用鼠标或键盘选择文本。

.. rst-class:: classref-item-separator

----

.. _class_LineEdit_property_shortcut_keys_enabled:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **shortcut_keys_enabled** = ``true``

.. rst-class:: classref-property-setget

- void **set_shortcut_keys_enabled** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **is_shortcut_keys_enabled** **(** **)**

如果为 ``false``\ ，快捷键将被禁用。

.. rst-class:: classref-item-separator

----

.. _class_LineEdit_property_structured_text_bidi_override:

.. rst-class:: classref-property

:ref:`StructuredTextParser<enum_TextServer_StructuredTextParser>` **structured_text_bidi_override** = ``0``

.. rst-class:: classref-property-setget

- void **set_structured_text_bidi_override** **(** :ref:`StructuredTextParser<enum_TextServer_StructuredTextParser>` value **)**
- :ref:`StructuredTextParser<enum_TextServer_StructuredTextParser>` **get_structured_text_bidi_override** **(** **)**

为结构化文本设置 BiDi 算法覆盖。

.. rst-class:: classref-item-separator

----

.. _class_LineEdit_property_structured_text_bidi_override_options:

.. rst-class:: classref-property

:ref:`Array<class_Array>` **structured_text_bidi_override_options** = ``[]``

.. rst-class:: classref-property-setget

- void **set_structured_text_bidi_override_options** **(** :ref:`Array<class_Array>` value **)**
- :ref:`Array<class_Array>` **get_structured_text_bidi_override_options** **(** **)**

设置 BiDi 覆盖的附加选项。

.. rst-class:: classref-item-separator

----

.. _class_LineEdit_property_text:

.. rst-class:: classref-property

:ref:`String<class_String>` **text** = ``""``

.. rst-class:: classref-property-setget

- void **set_text** **(** :ref:`String<class_String>` value **)**
- :ref:`String<class_String>` **get_text** **(** **)**

**LineEdit** 的字符串值。

\ **注意：**\ 使用这个属性更改文本不会触发 :ref:`text_changed<class_LineEdit_signal_text_changed>` 信号。

.. rst-class:: classref-item-separator

----

.. _class_LineEdit_property_text_direction:

.. rst-class:: classref-property

:ref:`TextDirection<enum_Control_TextDirection>` **text_direction** = ``0``

.. rst-class:: classref-property-setget

- void **set_text_direction** **(** :ref:`TextDirection<enum_Control_TextDirection>` value **)**
- :ref:`TextDirection<enum_Control_TextDirection>` **get_text_direction** **(** **)**

基础文本书写方向。

.. rst-class:: classref-item-separator

----

.. _class_LineEdit_property_virtual_keyboard_enabled:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **virtual_keyboard_enabled** = ``true``

.. rst-class:: classref-property-setget

- void **set_virtual_keyboard_enabled** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **is_virtual_keyboard_enabled** **(** **)**

如果为 ``true``\ ，则在获得焦点时会在支持的平台上显示原生虚拟键盘。

.. rst-class:: classref-item-separator

----

.. _class_LineEdit_property_virtual_keyboard_type:

.. rst-class:: classref-property

:ref:`VirtualKeyboardType<enum_LineEdit_VirtualKeyboardType>` **virtual_keyboard_type** = ``0``

.. rst-class:: classref-property-setget

- void **set_virtual_keyboard_type** **(** :ref:`VirtualKeyboardType<enum_LineEdit_VirtualKeyboardType>` value **)**
- :ref:`VirtualKeyboardType<enum_LineEdit_VirtualKeyboardType>` **get_virtual_keyboard_type** **(** **)**

指定要显示的虚拟键盘的类型。

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

方法说明
--------

.. _class_LineEdit_method_clear:

.. rst-class:: classref-method

void **clear** **(** **)**

擦除 **LineEdit** 的 :ref:`text<class_LineEdit_property_text>`\ 。

.. rst-class:: classref-item-separator

----

.. _class_LineEdit_method_delete_char_at_caret:

.. rst-class:: classref-method

void **delete_char_at_caret** **(** **)**

删除光标当前位置处的一个字符（相当于按 :kbd:`Delete`\ ）。

.. rst-class:: classref-item-separator

----

.. _class_LineEdit_method_delete_text:

.. rst-class:: classref-method

void **delete_text** **(** :ref:`int<class_int>` from_column, :ref:`int<class_int>` to_column **)**

删除 :ref:`text<class_LineEdit_property_text>` 中从起始列 ``from_column`` 到结束列 ``to_column`` 的部分。两个参数都应该在文本的长度之内。

.. rst-class:: classref-item-separator

----

.. _class_LineEdit_method_deselect:

.. rst-class:: classref-method

void **deselect** **(** **)**

清除当前选择。

.. rst-class:: classref-item-separator

----

.. _class_LineEdit_method_get_menu:

.. rst-class:: classref-method

:ref:`PopupMenu<class_PopupMenu>` **get_menu** **(** **)** |const|

返回该 **LineEdit** 的 :ref:`PopupMenu<class_PopupMenu>`\ 。默认情况下，右键点击 **LineEdit** 会显示该菜单。

可以添加自定义菜单项或移除标准菜单项。确保你的 ID 不与标准 ID 冲突（请参阅 :ref:`MenuItems<enum_LineEdit_MenuItems>`\ ）。例如：


.. tabs::

 .. code-tab:: gdscript

    func _ready():
        var menu = get_menu()
        # 在“重做”之后移除所有项目。
        menu.item_count = menu.get_item_index(MENU_REDO) + 1
        # 添加自定义项目。
        menu.add_separator()
        menu.add_item("Insert Date", MENU_MAX + 1)
        # 连接回调。
        menu.id_pressed.connect(_on_item_pressed)
    
    func _on_item_pressed(id):
        if id == MENU_MAX + 1:
            insert_text_at_caret(Time.get_date_string_from_system())

 .. code-tab:: csharp

    public override void _Ready()
    {
        var menu = GetMenu();
        // 在“重做”之后移除所有项目。
        menu.ItemCount = menu.GetItemIndex(LineEdit.MenuItems.Redo) + 1;
        // 添加自定义项目。
        menu.AddSeparator();
        menu.AddItem("Insert Date", LineEdit.MenuItems.Max + 1);
        // 添加事件处理器。
        menu.IdPressed += OnItemPressed;
    }
    
    public void OnItemPressed(int id)
    {
        if (id == LineEdit.MenuItems.Max + 1)
        {
            InsertTextAtCaret(Time.GetDateStringFromSystem());
        }
    }



\ **警告：**\ 这是一个必需的内部节点，移除和释放它可能会导致崩溃。如果希望隐藏它或它的任何子节点，请使用它们的 :ref:`Window.visible<class_Window_property_visible>` 属性。

.. rst-class:: classref-item-separator

----

.. _class_LineEdit_method_get_scroll_offset:

.. rst-class:: classref-method

:ref:`float<class_float>` **get_scroll_offset** **(** **)** |const|

返回 :ref:`caret_column<class_LineEdit_property_caret_column>` 引起的滚动偏移量，单位为字符数。

.. rst-class:: classref-item-separator

----

.. _class_LineEdit_method_get_selected_text:

.. rst-class:: classref-method

:ref:`String<class_String>` **get_selected_text** **(** **)**

返回选择内的文本。

.. rst-class:: classref-item-separator

----

.. _class_LineEdit_method_get_selection_from_column:

.. rst-class:: classref-method

:ref:`int<class_int>` **get_selection_from_column** **(** **)** |const|

返回选择的开始列。

.. rst-class:: classref-item-separator

----

.. _class_LineEdit_method_get_selection_to_column:

.. rst-class:: classref-method

:ref:`int<class_int>` **get_selection_to_column** **(** **)** |const|

返回选择结束列。

.. rst-class:: classref-item-separator

----

.. _class_LineEdit_method_has_selection:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **has_selection** **(** **)** |const|

如果用户选中了文本，则返回 ``true``\ 。

.. rst-class:: classref-item-separator

----

.. _class_LineEdit_method_insert_text_at_caret:

.. rst-class:: classref-method

void **insert_text_at_caret** **(** :ref:`String<class_String>` text **)**

在光标处插入文本 ``text``\ 。如果最终值比 :ref:`max_length<class_LineEdit_property_max_length>` 长，则不会发生任何事情。

.. rst-class:: classref-item-separator

----

.. _class_LineEdit_method_is_menu_visible:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **is_menu_visible** **(** **)** |const|

返回菜单是否可见。请使用这个方法来代替 ``get_menu().visible``\ ，可以提高性能（因为避免了菜单的创建）。

.. rst-class:: classref-item-separator

----

.. _class_LineEdit_method_menu_option:

.. rst-class:: classref-method

void **menu_option** **(** :ref:`int<class_int>` option **)**

执行 :ref:`MenuItems<enum_LineEdit_MenuItems>` 枚举中定义的给定操作。

.. rst-class:: classref-item-separator

----

.. _class_LineEdit_method_select:

.. rst-class:: classref-method

void **select** **(** :ref:`int<class_int>` from=0, :ref:`int<class_int>` to=-1 **)**

选择 **LineEdit** 内介于 ``from`` 和 ``to`` 之间的字符。默认情况下，\ ``from`` 位于开头，\ ``to`` 位于结尾。


.. tabs::

 .. code-tab:: gdscript

    text = "Welcome"
    select() # 将选择“Welcome”。
    select(4) # 将选择“ome”。
    select(2, 5) # 将选择“lco”。

 .. code-tab:: csharp

    Text = "Welcome";
    Select(); // 将选择“Welcome”。
    Select(4); // 将选择“ome”。
    Select(2, 5); // 将选择“lco”。



.. rst-class:: classref-item-separator

----

.. _class_LineEdit_method_select_all:

.. rst-class:: classref-method

void **select_all** **(** **)**

选中整个 :ref:`String<class_String>`\ 。

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

主题属性说明
------------

.. _class_LineEdit_theme_color_caret_color:

.. rst-class:: classref-themeproperty

:ref:`Color<class_Color>` **caret_color** = ``Color(0.95, 0.95, 0.95, 1)``

**LineEdit** 的插入符号（文本光标）的颜色。可以设置为完全透明的颜色，从而完全隐藏光标。

.. rst-class:: classref-item-separator

----

.. _class_LineEdit_theme_color_clear_button_color:

.. rst-class:: classref-themeproperty

:ref:`Color<class_Color>` **clear_button_color** = ``Color(0.875, 0.875, 0.875, 1)``

用作清除按钮默认色调的颜色。

.. rst-class:: classref-item-separator

----

.. _class_LineEdit_theme_color_clear_button_color_pressed:

.. rst-class:: classref-themeproperty

:ref:`Color<class_Color>` **clear_button_color_pressed** = ``Color(1, 1, 1, 1)``

按下清除按钮时使用的颜色。

.. rst-class:: classref-item-separator

----

.. _class_LineEdit_theme_color_font_color:

.. rst-class:: classref-themeproperty

:ref:`Color<class_Color>` **font_color** = ``Color(0.875, 0.875, 0.875, 1)``

默认字体颜色。

.. rst-class:: classref-item-separator

----

.. _class_LineEdit_theme_color_font_outline_color:

.. rst-class:: classref-themeproperty

:ref:`Color<class_Color>` **font_outline_color** = ``Color(1, 1, 1, 1)``

**LineEdit** 文本轮廓的色调。

.. rst-class:: classref-item-separator

----

.. _class_LineEdit_theme_color_font_placeholder_color:

.. rst-class:: classref-themeproperty

:ref:`Color<class_Color>` **font_placeholder_color** = ``Color(0.875, 0.875, 0.875, 0.6)``

:ref:`placeholder_text<class_LineEdit_property_placeholder_text>` 的字体颜色。

.. rst-class:: classref-item-separator

----

.. _class_LineEdit_theme_color_font_selected_color:

.. rst-class:: classref-themeproperty

:ref:`Color<class_Color>` **font_selected_color** = ``Color(1, 1, 1, 1)``

选定文本的字体颜色（在选择矩形内）。

.. rst-class:: classref-item-separator

----

.. _class_LineEdit_theme_color_font_uneditable_color:

.. rst-class:: classref-themeproperty

:ref:`Color<class_Color>` **font_uneditable_color** = ``Color(0.875, 0.875, 0.875, 0.5)``

禁用编辑时的字体颜色。

.. rst-class:: classref-item-separator

----

.. _class_LineEdit_theme_color_selection_color:

.. rst-class:: classref-themeproperty

:ref:`Color<class_Color>` **selection_color** = ``Color(0.5, 0.5, 0.5, 1)``

选择矩形的颜色。

.. rst-class:: classref-item-separator

----

.. _class_LineEdit_theme_constant_caret_width:

.. rst-class:: classref-themeproperty

:ref:`int<class_int>` **caret_width** = ``1``

文本光标的像素宽度。使用较大的数值可以提高可访问性，使文本光标更加显眼，或者确保文本与较大字体尺寸的一致性。

.. rst-class:: classref-item-separator

----

.. _class_LineEdit_theme_constant_minimum_character_width:

.. rst-class:: classref-themeproperty

:ref:`int<class_int>` **minimum_character_width** = ``4``

文本的最小水平空间（不包括清除按钮和内容边距）。这个值以“M”字符的数量来衡量（即能够在不滚动的情况下显示这么多个“M”字符）。

.. rst-class:: classref-item-separator

----

.. _class_LineEdit_theme_constant_outline_size:

.. rst-class:: classref-themeproperty

:ref:`int<class_int>` **outline_size** = ``0``

文字轮廓的大小。

\ **注意：**\ 如果使用启用了 :ref:`FontFile.multichannel_signed_distance_field<class_FontFile_property_multichannel_signed_distance_field>` 的字体，其 :ref:`FontFile.msdf_pixel_range<class_FontFile_property_msdf_pixel_range>` 必须至少设置为 :ref:`outline_size<class_LineEdit_theme_constant_outline_size>` 的\ *两倍*\ ，轮廓渲染才能看起来正确。否则，轮廓可能会比预期的更早被切断。

.. rst-class:: classref-item-separator

----

.. _class_LineEdit_theme_font_font:

.. rst-class:: classref-themeproperty

:ref:`Font<class_Font>` **font**

文本使用的字体。

.. rst-class:: classref-item-separator

----

.. _class_LineEdit_theme_font_size_font_size:

.. rst-class:: classref-themeproperty

:ref:`int<class_int>` **font_size**

该 **LineEdit** 文本的字体大小。

.. rst-class:: classref-item-separator

----

.. _class_LineEdit_theme_icon_clear:

.. rst-class:: classref-themeproperty

:ref:`Texture2D<class_Texture2D>` **clear**

“清除”按钮的纹理。见 :ref:`clear_button_enabled<class_LineEdit_property_clear_button_enabled>`\ 。

.. rst-class:: classref-item-separator

----

.. _class_LineEdit_theme_style_focus:

.. rst-class:: classref-themeproperty

:ref:`StyleBox<class_StyleBox>` **focus**

**LineEdit** 拥有 GUI 焦点时使用的背景。\ :ref:`focus<class_LineEdit_theme_style_focus>` :ref:`StyleBox<class_StyleBox>` 显示在基础 :ref:`StyleBox<class_StyleBox>` *之上*\ ，所以应该使用部分透明的 :ref:`StyleBox<class_StyleBox>`\ ，确保基础 :ref:`StyleBox<class_StyleBox>` 仍然可见。代表轮廓或下划线的 :ref:`StyleBox<class_StyleBox>` 可以很好地实现这个目的。要禁用聚焦的视觉效果，请指定 :ref:`StyleBoxEmpty<class_StyleBoxEmpty>` 资源。请注意，禁用聚焦的视觉效果会影响使用键盘/手柄进行导航的可用性，所以出于可访问性的原因，不建议这样做。

.. rst-class:: classref-item-separator

----

.. _class_LineEdit_theme_style_normal:

.. rst-class:: classref-themeproperty

:ref:`StyleBox<class_StyleBox>` **normal**

该 **LineEdit** 的默认背景。

.. rst-class:: classref-item-separator

----

.. _class_LineEdit_theme_style_read_only:

.. rst-class:: classref-themeproperty

:ref:`StyleBox<class_StyleBox>` **read_only**

该 **LineEdit** 处于只读模式时使用的背景（\ :ref:`editable<class_LineEdit_property_editable>` 为 ``false``\ ）。

.. |virtual| replace:: :abbr:`virtual (本方法通常需要用户覆盖才能生效。)`
.. |const| replace:: :abbr:`const (本方法没有副作用。不会修改该实例的任何成员变量。)`
.. |vararg| replace:: :abbr:`vararg (本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。)`
.. |constructor| replace:: :abbr:`constructor (本方法用于构造某个类型。)`
.. |static| replace:: :abbr:`static (调用本方法无需实例，所以可以直接使用类名调用。)`
.. |operator| replace:: :abbr:`operator (本方法描述的是使用本类型作为左操作数的有效操作符。)`
.. |bitfield| replace:: :abbr:`BitField (这个值是由下列标志构成的位掩码整数。)`
