:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Godot engine sources.
.. Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.
.. XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/ImageTextureLayered.xml.

.. _class_ImageTextureLayered:

ImageTextureLayered
===================

**继承：** :ref:`TextureLayered<class_TextureLayered>` **<** :ref:`Texture<class_Texture>` **<** :ref:`Resource<class_Resource>` **<** :ref:`RefCounted<class_RefCounted>` **<** :ref:`Object<class_Object>`

**派生：** :ref:`Cubemap<class_Cubemap>`, :ref:`CubemapArray<class_CubemapArray>`, :ref:`Texture2DArray<class_Texture2DArray>`

纹理类型的基类，包含多个 :ref:`ImageTexture<class_ImageTexture>` 的数据。各个图像具有相同的大小和格式。

.. rst-class:: classref-introduction-group

描述
----

:ref:`Texture2DArray<class_Texture2DArray>`\ 、\ :ref:`Cubemap<class_Cubemap>` 和 :ref:`CubemapArray<class_CubemapArray>` 的基类。不能直接使用，但包含了访问派生资源类型所需的所有函数。另请参阅 :ref:`Texture3D<class_Texture3D>`\ 。

.. rst-class:: classref-reftable-group

方法
----

.. table::
   :widths: auto

   +---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Error<enum_@GlobalScope_Error>` | :ref:`create_from_images<class_ImageTextureLayered_method_create_from_images>` **(** :ref:`Image[]<class_Image>` images **)**               |
   +---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                  | :ref:`update_layer<class_ImageTextureLayered_method_update_layer>` **(** :ref:`Image<class_Image>` image, :ref:`int<class_int>` layer **)** |
   +---------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------+

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

方法说明
--------

.. _class_ImageTextureLayered_method_create_from_images:

.. rst-class:: classref-method

:ref:`Error<enum_@GlobalScope_Error>` **create_from_images** **(** :ref:`Image[]<class_Image>` images **)**

从一组 :ref:`Image<class_Image>` 创建一个 **ImageTextureLayered**\ 。有关预期的数据格式，请参阅 :ref:`Image.create<class_Image_method_create>`\ 。第一张图像决定宽度、高度、图像格式和 mipmapping 设置。其他图像\ *必须*\ 具有相同的宽度、高度、图像格式和 mipmapping 设置。

每个 :ref:`Image<class_Image>` 代表一个 ``layer``\ 。

.. rst-class:: classref-item-separator

----

.. _class_ImageTextureLayered_method_update_layer:

.. rst-class:: classref-method

void **update_layer** **(** :ref:`Image<class_Image>` image, :ref:`int<class_int>` layer **)**

用这个新图像替换给定 ``layer`` 的现有 :ref:`Image<class_Image>` 数据。

给定的 :ref:`Image<class_Image>` 必须与其余引用的图像具有相同的宽度、高度、图像格式、和多级渐远纹理标志。

如果图像格式不受支持，它将被解压缩并转换为一个相似且受支持的 :ref:`Format<enum_Image_Format>`\ 。

更新是即时的：它与绘制同步。

.. |virtual| replace:: :abbr:`virtual (本方法通常需要用户覆盖才能生效。)`
.. |const| replace:: :abbr:`const (本方法没有副作用。不会修改该实例的任何成员变量。)`
.. |vararg| replace:: :abbr:`vararg (本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。)`
.. |constructor| replace:: :abbr:`constructor (本方法用于构造某个类型。)`
.. |static| replace:: :abbr:`static (调用本方法无需实例，所以可以直接使用类名调用。)`
.. |operator| replace:: :abbr:`operator (本方法描述的是使用本类型作为左操作数的有效操作符。)`
.. |bitfield| replace:: :abbr:`BitField (这个值是由下列标志构成的位掩码整数。)`
