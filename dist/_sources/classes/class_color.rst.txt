:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Godot engine sources.
.. Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.
.. XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/Color.xml.

.. _class_Color:

Color
=====

以 RGBA 格式表示的颜色。

.. rst-class:: classref-introduction-group

描述
----

由红（\ :ref:`r<class_Color_property_r>`\ ）、绿（\ :ref:`g<class_Color_property_g>`\ ）、蓝（\ :ref:`b<class_Color_property_b>`\ ）和 alpha（\ :ref:`a<class_Color_property_a>`\ ）分量表示的 RGBA 格式的颜色。每个分量都是一个 16 位浮点值，通常介于 ``0.0`` 到 ``1.0`` 之间。某些属性（例如 :ref:`CanvasItem.modulate<class_CanvasItem_property_modulate>`\ ）可能支持大于 ``1.0`` 的值，用于表示过亮或 HDR（High Dynamic Range，高动态范围）颜色。

创建颜色的方法有很多：可以使用 **Color** 的各种构造函数，\ :ref:`from_hsv<class_Color_method_from_hsv>` 等静态方法，以及使用基于 `X11 颜色名称 <https://en.wikipedia.org/wiki/X11_color_names>`__\ 的标准化颜色集外加 :ref:`TRANSPARENT<class_Color_constant_TRANSPARENT>`\ 。GDScript 还提供了 :ref:`@GDScript.Color8<class_@GDScript_method_Color8>`\ ，使用的是 ``0`` 到 ``255`` 之间的整数，且不支持过亮的颜色。

\ **注意：**\ 在布尔上下文中，等于 ``Color(0, 0, 0, 1)``\ （不透明的黑色）的 Color 将被评估为 ``false``\ 。否则，Color 将始终被评估为 ``true``\ 。

\ `Color 常量速查表 <https://raw.githubusercontent.com/godotengine/godot-docs/master/img/color_constants.png>`__

.. note::

	通过 C# 使用这个 API 时有显著的不同。详见 :ref:`doc_c_sharp_differences`\ 。

.. rst-class:: classref-introduction-group

教程
----

- `2D GD 画图演示 <https://godotengine.org/asset-library/asset/517>`__

- `Tween 演示 <https://godotengine.org/asset-library/asset/146>`__

- `GUI 拖放演示 <https://godotengine.org/asset-library/asset/133>`__

.. rst-class:: classref-reftable-group

属性
----

.. table::
   :widths: auto

   +---------------------------+------------------------------------+---------+
   | :ref:`float<class_float>` | :ref:`a<class_Color_property_a>`   | ``1.0`` |
   +---------------------------+------------------------------------+---------+
   | :ref:`int<class_int>`     | :ref:`a8<class_Color_property_a8>` | ``255`` |
   +---------------------------+------------------------------------+---------+
   | :ref:`float<class_float>` | :ref:`b<class_Color_property_b>`   | ``0.0`` |
   +---------------------------+------------------------------------+---------+
   | :ref:`int<class_int>`     | :ref:`b8<class_Color_property_b8>` | ``0``   |
   +---------------------------+------------------------------------+---------+
   | :ref:`float<class_float>` | :ref:`g<class_Color_property_g>`   | ``0.0`` |
   +---------------------------+------------------------------------+---------+
   | :ref:`int<class_int>`     | :ref:`g8<class_Color_property_g8>` | ``0``   |
   +---------------------------+------------------------------------+---------+
   | :ref:`float<class_float>` | :ref:`h<class_Color_property_h>`   | ``0.0`` |
   +---------------------------+------------------------------------+---------+
   | :ref:`float<class_float>` | :ref:`r<class_Color_property_r>`   | ``0.0`` |
   +---------------------------+------------------------------------+---------+
   | :ref:`int<class_int>`     | :ref:`r8<class_Color_property_r8>` | ``0``   |
   +---------------------------+------------------------------------+---------+
   | :ref:`float<class_float>` | :ref:`s<class_Color_property_s>`   | ``0.0`` |
   +---------------------------+------------------------------------+---------+
   | :ref:`float<class_float>` | :ref:`v<class_Color_property_v>`   | ``0.0`` |
   +---------------------------+------------------------------------+---------+

.. rst-class:: classref-reftable-group

构造函数
--------

.. table::
   :widths: auto

   +---------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Color<class_Color>` | :ref:`Color<class_Color_constructor_Color>` **(** **)**                                                                                                                    |
   +---------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Color<class_Color>` | :ref:`Color<class_Color_constructor_Color>` **(** :ref:`Color<class_Color>` from, :ref:`float<class_float>` alpha **)**                                                    |
   +---------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Color<class_Color>` | :ref:`Color<class_Color_constructor_Color>` **(** :ref:`Color<class_Color>` from **)**                                                                                     |
   +---------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Color<class_Color>` | :ref:`Color<class_Color_constructor_Color>` **(** :ref:`String<class_String>` code **)**                                                                                   |
   +---------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Color<class_Color>` | :ref:`Color<class_Color_constructor_Color>` **(** :ref:`String<class_String>` code, :ref:`float<class_float>` alpha **)**                                                  |
   +---------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Color<class_Color>` | :ref:`Color<class_Color_constructor_Color>` **(** :ref:`float<class_float>` r, :ref:`float<class_float>` g, :ref:`float<class_float>` b **)**                              |
   +---------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Color<class_Color>` | :ref:`Color<class_Color_constructor_Color>` **(** :ref:`float<class_float>` r, :ref:`float<class_float>` g, :ref:`float<class_float>` b, :ref:`float<class_float>` a **)** |
   +---------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

.. rst-class:: classref-reftable-group

方法
----

.. table::
   :widths: auto

   +-----------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Color<class_Color>`   | :ref:`blend<class_Color_method_blend>` **(** :ref:`Color<class_Color>` over **)** |const|                                                                                                          |
   +-----------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Color<class_Color>`   | :ref:`clamp<class_Color_method_clamp>` **(** :ref:`Color<class_Color>` min=Color(0, 0, 0, 0), :ref:`Color<class_Color>` max=Color(1, 1, 1, 1) **)** |const|                                        |
   +-----------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Color<class_Color>`   | :ref:`darkened<class_Color_method_darkened>` **(** :ref:`float<class_float>` amount **)** |const|                                                                                                  |
   +-----------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Color<class_Color>`   | :ref:`from_hsv<class_Color_method_from_hsv>` **(** :ref:`float<class_float>` h, :ref:`float<class_float>` s, :ref:`float<class_float>` v, :ref:`float<class_float>` alpha=1.0 **)** |static|       |
   +-----------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Color<class_Color>`   | :ref:`from_ok_hsl<class_Color_method_from_ok_hsl>` **(** :ref:`float<class_float>` h, :ref:`float<class_float>` s, :ref:`float<class_float>` l, :ref:`float<class_float>` alpha=1.0 **)** |static| |
   +-----------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Color<class_Color>`   | :ref:`from_rgbe9995<class_Color_method_from_rgbe9995>` **(** :ref:`int<class_int>` rgbe **)** |static|                                                                                             |
   +-----------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Color<class_Color>`   | :ref:`from_string<class_Color_method_from_string>` **(** :ref:`String<class_String>` str, :ref:`Color<class_Color>` default **)** |static|                                                         |
   +-----------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`float<class_float>`   | :ref:`get_luminance<class_Color_method_get_luminance>` **(** **)** |const|                                                                                                                         |
   +-----------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Color<class_Color>`   | :ref:`hex<class_Color_method_hex>` **(** :ref:`int<class_int>` hex **)** |static|                                                                                                                  |
   +-----------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Color<class_Color>`   | :ref:`hex64<class_Color_method_hex64>` **(** :ref:`int<class_int>` hex **)** |static|                                                                                                              |
   +-----------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Color<class_Color>`   | :ref:`html<class_Color_method_html>` **(** :ref:`String<class_String>` rgba **)** |static|                                                                                                         |
   +-----------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`     | :ref:`html_is_valid<class_Color_method_html_is_valid>` **(** :ref:`String<class_String>` color **)** |static|                                                                                      |
   +-----------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Color<class_Color>`   | :ref:`inverted<class_Color_method_inverted>` **(** **)** |const|                                                                                                                                   |
   +-----------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`     | :ref:`is_equal_approx<class_Color_method_is_equal_approx>` **(** :ref:`Color<class_Color>` to **)** |const|                                                                                        |
   +-----------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Color<class_Color>`   | :ref:`lerp<class_Color_method_lerp>` **(** :ref:`Color<class_Color>` to, :ref:`float<class_float>` weight **)** |const|                                                                            |
   +-----------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Color<class_Color>`   | :ref:`lightened<class_Color_method_lightened>` **(** :ref:`float<class_float>` amount **)** |const|                                                                                                |
   +-----------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Color<class_Color>`   | :ref:`linear_to_srgb<class_Color_method_linear_to_srgb>` **(** **)** |const|                                                                                                                       |
   +-----------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Color<class_Color>`   | :ref:`srgb_to_linear<class_Color_method_srgb_to_linear>` **(** **)** |const|                                                                                                                       |
   +-----------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`int<class_int>`       | :ref:`to_abgr32<class_Color_method_to_abgr32>` **(** **)** |const|                                                                                                                                 |
   +-----------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`int<class_int>`       | :ref:`to_abgr64<class_Color_method_to_abgr64>` **(** **)** |const|                                                                                                                                 |
   +-----------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`int<class_int>`       | :ref:`to_argb32<class_Color_method_to_argb32>` **(** **)** |const|                                                                                                                                 |
   +-----------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`int<class_int>`       | :ref:`to_argb64<class_Color_method_to_argb64>` **(** **)** |const|                                                                                                                                 |
   +-----------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`String<class_String>` | :ref:`to_html<class_Color_method_to_html>` **(** :ref:`bool<class_bool>` with_alpha=true **)** |const|                                                                                             |
   +-----------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`int<class_int>`       | :ref:`to_rgba32<class_Color_method_to_rgba32>` **(** **)** |const|                                                                                                                                 |
   +-----------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`int<class_int>`       | :ref:`to_rgba64<class_Color_method_to_rgba64>` **(** **)** |const|                                                                                                                                 |
   +-----------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

.. rst-class:: classref-reftable-group

操作符
------

.. table::
   :widths: auto

   +---------------------------+------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`   | :ref:`operator !=<class_Color_operator_neq_Color>` **(** :ref:`Color<class_Color>` right **)** |
   +---------------------------+------------------------------------------------------------------------------------------------+
   | :ref:`Color<class_Color>` | :ref:`operator *<class_Color_operator_mul_Color>` **(** :ref:`Color<class_Color>` right **)**  |
   +---------------------------+------------------------------------------------------------------------------------------------+
   | :ref:`Color<class_Color>` | :ref:`operator *<class_Color_operator_mul_float>` **(** :ref:`float<class_float>` right **)**  |
   +---------------------------+------------------------------------------------------------------------------------------------+
   | :ref:`Color<class_Color>` | :ref:`operator *<class_Color_operator_mul_int>` **(** :ref:`int<class_int>` right **)**        |
   +---------------------------+------------------------------------------------------------------------------------------------+
   | :ref:`Color<class_Color>` | :ref:`operator +<class_Color_operator_sum_Color>` **(** :ref:`Color<class_Color>` right **)**  |
   +---------------------------+------------------------------------------------------------------------------------------------+
   | :ref:`Color<class_Color>` | :ref:`operator -<class_Color_operator_dif_Color>` **(** :ref:`Color<class_Color>` right **)**  |
   +---------------------------+------------------------------------------------------------------------------------------------+
   | :ref:`Color<class_Color>` | :ref:`operator /<class_Color_operator_div_Color>` **(** :ref:`Color<class_Color>` right **)**  |
   +---------------------------+------------------------------------------------------------------------------------------------+
   | :ref:`Color<class_Color>` | :ref:`operator /<class_Color_operator_div_float>` **(** :ref:`float<class_float>` right **)**  |
   +---------------------------+------------------------------------------------------------------------------------------------+
   | :ref:`Color<class_Color>` | :ref:`operator /<class_Color_operator_div_int>` **(** :ref:`int<class_int>` right **)**        |
   +---------------------------+------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`   | :ref:`operator ==<class_Color_operator_eq_Color>` **(** :ref:`Color<class_Color>` right **)**  |
   +---------------------------+------------------------------------------------------------------------------------------------+
   | :ref:`float<class_float>` | :ref:`operator []<class_Color_operator_idx_int>` **(** :ref:`int<class_int>` index **)**       |
   +---------------------------+------------------------------------------------------------------------------------------------+
   | :ref:`Color<class_Color>` | :ref:`operator unary+<class_Color_operator_unplus>` **(** **)**                                |
   +---------------------------+------------------------------------------------------------------------------------------------+
   | :ref:`Color<class_Color>` | :ref:`operator unary-<class_Color_operator_unminus>` **(** **)**                               |
   +---------------------------+------------------------------------------------------------------------------------------------+

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

常量
----

.. _class_Color_constant_ALICE_BLUE:

.. rst-class:: classref-constant

**ALICE_BLUE** = ``Color(0.941176, 0.972549, 1, 1)``

爱丽丝蓝。

.. _class_Color_constant_ANTIQUE_WHITE:

.. rst-class:: classref-constant

**ANTIQUE_WHITE** = ``Color(0.980392, 0.921569, 0.843137, 1)``

古董白。

.. _class_Color_constant_AQUA:

.. rst-class:: classref-constant

**AQUA** = ``Color(0, 1, 1, 1)``

水色。

.. _class_Color_constant_AQUAMARINE:

.. rst-class:: classref-constant

**AQUAMARINE** = ``Color(0.498039, 1, 0.831373, 1)``

海蓝色。

.. _class_Color_constant_AZURE:

.. rst-class:: classref-constant

**AZURE** = ``Color(0.941176, 1, 1, 1)``

天蓝色。

.. _class_Color_constant_BEIGE:

.. rst-class:: classref-constant

**BEIGE** = ``Color(0.960784, 0.960784, 0.862745, 1)``

米黄色。

.. _class_Color_constant_BISQUE:

.. rst-class:: classref-constant

**BISQUE** = ``Color(1, 0.894118, 0.768627, 1)``

橘黄色。

.. _class_Color_constant_BLACK:

.. rst-class:: classref-constant

**BLACK** = ``Color(0, 0, 0, 1)``

黑色。在 GDScript 中，这是所有颜色的默认值。

.. _class_Color_constant_BLANCHED_ALMOND:

.. rst-class:: classref-constant

**BLANCHED_ALMOND** = ``Color(1, 0.921569, 0.803922, 1)``

杏仁白色。

.. _class_Color_constant_BLUE:

.. rst-class:: classref-constant

**BLUE** = ``Color(0, 0, 1, 1)``

蓝色。

.. _class_Color_constant_BLUE_VIOLET:

.. rst-class:: classref-constant

**BLUE_VIOLET** = ``Color(0.541176, 0.168627, 0.886275, 1)``

蓝紫色的颜色。

.. _class_Color_constant_BROWN:

.. rst-class:: classref-constant

**BROWN** = ``Color(0.647059, 0.164706, 0.164706, 1)``

棕色。

.. _class_Color_constant_BURLYWOOD:

.. rst-class:: classref-constant

**BURLYWOOD** = ``Color(0.870588, 0.721569, 0.529412, 1)``

硬木色。

.. _class_Color_constant_CADET_BLUE:

.. rst-class:: classref-constant

**CADET_BLUE** = ``Color(0.372549, 0.619608, 0.627451, 1)``

军服蓝。

.. _class_Color_constant_CHARTREUSE:

.. rst-class:: classref-constant

**CHARTREUSE** = ``Color(0.498039, 1, 0, 1)``

黄褐色。

.. _class_Color_constant_CHOCOLATE:

.. rst-class:: classref-constant

**CHOCOLATE** = ``Color(0.823529, 0.411765, 0.117647, 1)``

巧克力色。

.. _class_Color_constant_CORAL:

.. rst-class:: classref-constant

**CORAL** = ``Color(1, 0.498039, 0.313726, 1)``

珊瑚色。

.. _class_Color_constant_CORNFLOWER_BLUE:

.. rst-class:: classref-constant

**CORNFLOWER_BLUE** = ``Color(0.392157, 0.584314, 0.929412, 1)``

矢车菊蓝色。

.. _class_Color_constant_CORNSILK:

.. rst-class:: classref-constant

**CORNSILK** = ``Color(1, 0.972549, 0.862745, 1)``

玉米须色。

.. _class_Color_constant_CRIMSON:

.. rst-class:: classref-constant

**CRIMSON** = ``Color(0.862745, 0.0784314, 0.235294, 1)``

绯红的颜色。

.. _class_Color_constant_CYAN:

.. rst-class:: classref-constant

**CYAN** = ``Color(0, 1, 1, 1)``

青色。

.. _class_Color_constant_DARK_BLUE:

.. rst-class:: classref-constant

**DARK_BLUE** = ``Color(0, 0, 0.545098, 1)``

深蓝色。

.. _class_Color_constant_DARK_CYAN:

.. rst-class:: classref-constant

**DARK_CYAN** = ``Color(0, 0.545098, 0.545098, 1)``

深青色。

.. _class_Color_constant_DARK_GOLDENROD:

.. rst-class:: classref-constant

**DARK_GOLDENROD** = ``Color(0.721569, 0.52549, 0.0431373, 1)``

深色菊科植物的颜色。

.. _class_Color_constant_DARK_GRAY:

.. rst-class:: classref-constant

**DARK_GRAY** = ``Color(0.662745, 0.662745, 0.662745, 1)``

深灰色。

.. _class_Color_constant_DARK_GREEN:

.. rst-class:: classref-constant

**DARK_GREEN** = ``Color(0, 0.392157, 0, 1)``

深绿色。

.. _class_Color_constant_DARK_KHAKI:

.. rst-class:: classref-constant

**DARK_KHAKI** = ``Color(0.741176, 0.717647, 0.419608, 1)``

深卡其色。

.. _class_Color_constant_DARK_MAGENTA:

.. rst-class:: classref-constant

**DARK_MAGENTA** = ``Color(0.545098, 0, 0.545098, 1)``

深洋红色。

.. _class_Color_constant_DARK_OLIVE_GREEN:

.. rst-class:: classref-constant

**DARK_OLIVE_GREEN** = ``Color(0.333333, 0.419608, 0.184314, 1)``

深橄榄绿色。

.. _class_Color_constant_DARK_ORANGE:

.. rst-class:: classref-constant

**DARK_ORANGE** = ``Color(1, 0.54902, 0, 1)``

深橙色。

.. _class_Color_constant_DARK_ORCHID:

.. rst-class:: classref-constant

**DARK_ORCHID** = ``Color(0.6, 0.196078, 0.8, 1)``

深色的兰花色。

.. _class_Color_constant_DARK_RED:

.. rst-class:: classref-constant

**DARK_RED** = ``Color(0.545098, 0, 0, 1)``

深红色。

.. _class_Color_constant_DARK_SALMON:

.. rst-class:: classref-constant

**DARK_SALMON** = ``Color(0.913725, 0.588235, 0.478431, 1)``

深鲑鱼色。

.. _class_Color_constant_DARK_SEA_GREEN:

.. rst-class:: classref-constant

**DARK_SEA_GREEN** = ``Color(0.560784, 0.737255, 0.560784, 1)``

深海绿色。

.. _class_Color_constant_DARK_SLATE_BLUE:

.. rst-class:: classref-constant

**DARK_SLATE_BLUE** = ``Color(0.282353, 0.239216, 0.545098, 1)``

深板蓝的颜色。

.. _class_Color_constant_DARK_SLATE_GRAY:

.. rst-class:: classref-constant

**DARK_SLATE_GRAY** = ``Color(0.184314, 0.309804, 0.309804, 1)``

暗石板灰色。

.. _class_Color_constant_DARK_TURQUOISE:

.. rst-class:: classref-constant

**DARK_TURQUOISE** = ``Color(0, 0.807843, 0.819608, 1)``

深绿松石色。

.. _class_Color_constant_DARK_VIOLET:

.. rst-class:: classref-constant

**DARK_VIOLET** = ``Color(0.580392, 0, 0.827451, 1)``

深紫罗兰色。

.. _class_Color_constant_DEEP_PINK:

.. rst-class:: classref-constant

**DEEP_PINK** = ``Color(1, 0.0784314, 0.576471, 1)``

深粉色。

.. _class_Color_constant_DEEP_SKY_BLUE:

.. rst-class:: classref-constant

**DEEP_SKY_BLUE** = ``Color(0, 0.74902, 1, 1)``

深邃的天蓝色。

.. _class_Color_constant_DIM_GRAY:

.. rst-class:: classref-constant

**DIM_GRAY** = ``Color(0.411765, 0.411765, 0.411765, 1)``

暗灰色。

.. _class_Color_constant_DODGER_BLUE:

.. rst-class:: classref-constant

**DODGER_BLUE** = ``Color(0.117647, 0.564706, 1, 1)``

道奇蓝色。

.. _class_Color_constant_FIREBRICK:

.. rst-class:: classref-constant

**FIREBRICK** = ``Color(0.698039, 0.133333, 0.133333, 1)``

耐火砖红色。

.. _class_Color_constant_FLORAL_WHITE:

.. rst-class:: classref-constant

**FLORAL_WHITE** = ``Color(1, 0.980392, 0.941176, 1)``

花白色。

.. _class_Color_constant_FOREST_GREEN:

.. rst-class:: classref-constant

**FOREST_GREEN** = ``Color(0.133333, 0.545098, 0.133333, 1)``

森林绿色。

.. _class_Color_constant_FUCHSIA:

.. rst-class:: classref-constant

**FUCHSIA** = ``Color(1, 0, 1, 1)``

洋红色。

.. _class_Color_constant_GAINSBORO:

.. rst-class:: classref-constant

**GAINSBORO** = ``Color(0.862745, 0.862745, 0.862745, 1)``

庚斯伯勒灰色。

.. _class_Color_constant_GHOST_WHITE:

.. rst-class:: classref-constant

**GHOST_WHITE** = ``Color(0.972549, 0.972549, 1, 1)``

幽灵白颜色。

.. _class_Color_constant_GOLD:

.. rst-class:: classref-constant

**GOLD** = ``Color(1, 0.843137, 0, 1)``

金色。

.. _class_Color_constant_GOLDENROD:

.. rst-class:: classref-constant

**GOLDENROD** = ``Color(0.854902, 0.647059, 0.12549, 1)``

金菊色。

.. _class_Color_constant_GRAY:

.. rst-class:: classref-constant

**GRAY** = ``Color(0.745098, 0.745098, 0.745098, 1)``

灰色。

.. _class_Color_constant_GREEN:

.. rst-class:: classref-constant

**GREEN** = ``Color(0, 1, 0, 1)``

绿色。

.. _class_Color_constant_GREEN_YELLOW:

.. rst-class:: classref-constant

**GREEN_YELLOW** = ``Color(0.678431, 1, 0.184314, 1)``

绿黄色。

.. _class_Color_constant_HONEYDEW:

.. rst-class:: classref-constant

**HONEYDEW** = ``Color(0.941176, 1, 0.941176, 1)``

蜜露色。

.. _class_Color_constant_HOT_PINK:

.. rst-class:: classref-constant

**HOT_PINK** = ``Color(1, 0.411765, 0.705882, 1)``

亮粉色。

.. _class_Color_constant_INDIAN_RED:

.. rst-class:: classref-constant

**INDIAN_RED** = ``Color(0.803922, 0.360784, 0.360784, 1)``

印度红色。

.. _class_Color_constant_INDIGO:

.. rst-class:: classref-constant

**INDIGO** = ``Color(0.294118, 0, 0.509804, 1)``

靛青色。

.. _class_Color_constant_IVORY:

.. rst-class:: classref-constant

**IVORY** = ``Color(1, 1, 0.941176, 1)``

象牙色。

.. _class_Color_constant_KHAKI:

.. rst-class:: classref-constant

**KHAKI** = ``Color(0.941176, 0.901961, 0.54902, 1)``

卡其色。

.. _class_Color_constant_LAVENDER:

.. rst-class:: classref-constant

**LAVENDER** = ``Color(0.901961, 0.901961, 0.980392, 1)``

薰衣草色。

.. _class_Color_constant_LAVENDER_BLUSH:

.. rst-class:: classref-constant

**LAVENDER_BLUSH** = ``Color(1, 0.941176, 0.960784, 1)``

薰衣草紫红色。

.. _class_Color_constant_LAWN_GREEN:

.. rst-class:: classref-constant

**LAWN_GREEN** = ``Color(0.486275, 0.988235, 0, 1)``

草坪绿色。

.. _class_Color_constant_LEMON_CHIFFON:

.. rst-class:: classref-constant

**LEMON_CHIFFON** = ``Color(1, 0.980392, 0.803922, 1)``

柠檬雪纺色。

.. _class_Color_constant_LIGHT_BLUE:

.. rst-class:: classref-constant

**LIGHT_BLUE** = ``Color(0.678431, 0.847059, 0.901961, 1)``

浅蓝色。

.. _class_Color_constant_LIGHT_CORAL:

.. rst-class:: classref-constant

**LIGHT_CORAL** = ``Color(0.941176, 0.501961, 0.501961, 1)``

浅珊瑚色。

.. _class_Color_constant_LIGHT_CYAN:

.. rst-class:: classref-constant

**LIGHT_CYAN** = ``Color(0.878431, 1, 1, 1)``

淡青色。

.. _class_Color_constant_LIGHT_GOLDENROD:

.. rst-class:: classref-constant

**LIGHT_GOLDENROD** = ``Color(0.980392, 0.980392, 0.823529, 1)``

亮金菊黄色。

.. _class_Color_constant_LIGHT_GRAY:

.. rst-class:: classref-constant

**LIGHT_GRAY** = ``Color(0.827451, 0.827451, 0.827451, 1)``

浅灰色。

.. _class_Color_constant_LIGHT_GREEN:

.. rst-class:: classref-constant

**LIGHT_GREEN** = ``Color(0.564706, 0.933333, 0.564706, 1)``

浅绿色。

.. _class_Color_constant_LIGHT_PINK:

.. rst-class:: classref-constant

**LIGHT_PINK** = ``Color(1, 0.713726, 0.756863, 1)``

浅粉色。

.. _class_Color_constant_LIGHT_SALMON:

.. rst-class:: classref-constant

**LIGHT_SALMON** = ``Color(1, 0.627451, 0.478431, 1)``

浅鲑鱼色。

.. _class_Color_constant_LIGHT_SEA_GREEN:

.. rst-class:: classref-constant

**LIGHT_SEA_GREEN** = ``Color(0.12549, 0.698039, 0.666667, 1)``

浅海绿色。

.. _class_Color_constant_LIGHT_SKY_BLUE:

.. rst-class:: classref-constant

**LIGHT_SKY_BLUE** = ``Color(0.529412, 0.807843, 0.980392, 1)``

浅天蓝色。

.. _class_Color_constant_LIGHT_SLATE_GRAY:

.. rst-class:: classref-constant

**LIGHT_SLATE_GRAY** = ``Color(0.466667, 0.533333, 0.6, 1)``

浅板岩灰色。

.. _class_Color_constant_LIGHT_STEEL_BLUE:

.. rst-class:: classref-constant

**LIGHT_STEEL_BLUE** = ``Color(0.690196, 0.768627, 0.870588, 1)``

浅钢蓝色。

.. _class_Color_constant_LIGHT_YELLOW:

.. rst-class:: classref-constant

**LIGHT_YELLOW** = ``Color(1, 1, 0.878431, 1)``

浅黄色。

.. _class_Color_constant_LIME:

.. rst-class:: classref-constant

**LIME** = ``Color(0, 1, 0, 1)``

青柠色。

.. _class_Color_constant_LIME_GREEN:

.. rst-class:: classref-constant

**LIME_GREEN** = ``Color(0.196078, 0.803922, 0.196078, 1)``

石灰绿色。

.. _class_Color_constant_LINEN:

.. rst-class:: classref-constant

**LINEN** = ``Color(0.980392, 0.941176, 0.901961, 1)``

亚麻色。

.. _class_Color_constant_MAGENTA:

.. rst-class:: classref-constant

**MAGENTA** = ``Color(1, 0, 1, 1)``

洋红色。

.. _class_Color_constant_MAROON:

.. rst-class:: classref-constant

**MAROON** = ``Color(0.690196, 0.188235, 0.376471, 1)``

栗色。

.. _class_Color_constant_MEDIUM_AQUAMARINE:

.. rst-class:: classref-constant

**MEDIUM_AQUAMARINE** = ``Color(0.4, 0.803922, 0.666667, 1)``

中等海蓝宝石色。

.. _class_Color_constant_MEDIUM_BLUE:

.. rst-class:: classref-constant

**MEDIUM_BLUE** = ``Color(0, 0, 0.803922, 1)``

中蓝色。

.. _class_Color_constant_MEDIUM_ORCHID:

.. rst-class:: classref-constant

**MEDIUM_ORCHID** = ``Color(0.729412, 0.333333, 0.827451, 1)``

中等兰色。

.. _class_Color_constant_MEDIUM_PURPLE:

.. rst-class:: classref-constant

**MEDIUM_PURPLE** = ``Color(0.576471, 0.439216, 0.858824, 1)``

中等紫色。

.. _class_Color_constant_MEDIUM_SEA_GREEN:

.. rst-class:: classref-constant

**MEDIUM_SEA_GREEN** = ``Color(0.235294, 0.701961, 0.443137, 1)``

中海绿色。

.. _class_Color_constant_MEDIUM_SLATE_BLUE:

.. rst-class:: classref-constant

**MEDIUM_SLATE_BLUE** = ``Color(0.482353, 0.407843, 0.933333, 1)``

中等板岩蓝色。

.. _class_Color_constant_MEDIUM_SPRING_GREEN:

.. rst-class:: classref-constant

**MEDIUM_SPRING_GREEN** = ``Color(0, 0.980392, 0.603922, 1)``

中等春天绿色。

.. _class_Color_constant_MEDIUM_TURQUOISE:

.. rst-class:: classref-constant

**MEDIUM_TURQUOISE** = ``Color(0.282353, 0.819608, 0.8, 1)``

中等绿松石色。

.. _class_Color_constant_MEDIUM_VIOLET_RED:

.. rst-class:: classref-constant

**MEDIUM_VIOLET_RED** = ``Color(0.780392, 0.0823529, 0.521569, 1)``

中等紫红色。

.. _class_Color_constant_MIDNIGHT_BLUE:

.. rst-class:: classref-constant

**MIDNIGHT_BLUE** = ``Color(0.0980392, 0.0980392, 0.439216, 1)``

午夜蓝色。

.. _class_Color_constant_MINT_CREAM:

.. rst-class:: classref-constant

**MINT_CREAM** = ``Color(0.960784, 1, 0.980392, 1)``

薄荷奶油色。

.. _class_Color_constant_MISTY_ROSE:

.. rst-class:: classref-constant

**MISTY_ROSE** = ``Color(1, 0.894118, 0.882353, 1)``

朦胧的玫瑰色。

.. _class_Color_constant_MOCCASIN:

.. rst-class:: classref-constant

**MOCCASIN** = ``Color(1, 0.894118, 0.709804, 1)``

鹿皮鞋颜色。

.. _class_Color_constant_NAVAJO_WHITE:

.. rst-class:: classref-constant

**NAVAJO_WHITE** = ``Color(1, 0.870588, 0.678431, 1)``

纳瓦白。

.. _class_Color_constant_NAVY_BLUE:

.. rst-class:: classref-constant

**NAVY_BLUE** = ``Color(0, 0, 0.501961, 1)``

藏青色。

.. _class_Color_constant_OLD_LACE:

.. rst-class:: classref-constant

**OLD_LACE** = ``Color(0.992157, 0.960784, 0.901961, 1)``

旧蕾丝色。

.. _class_Color_constant_OLIVE:

.. rst-class:: classref-constant

**OLIVE** = ``Color(0.501961, 0.501961, 0, 1)``

橄榄色。

.. _class_Color_constant_OLIVE_DRAB:

.. rst-class:: classref-constant

**OLIVE_DRAB** = ``Color(0.419608, 0.556863, 0.137255, 1)``

暗淡橄榄色。

.. _class_Color_constant_ORANGE:

.. rst-class:: classref-constant

**ORANGE** = ``Color(1, 0.647059, 0, 1)``

橙色。

.. _class_Color_constant_ORANGE_RED:

.. rst-class:: classref-constant

**ORANGE_RED** = ``Color(1, 0.270588, 0, 1)``

橘红色。

.. _class_Color_constant_ORCHID:

.. rst-class:: classref-constant

**ORCHID** = ``Color(0.854902, 0.439216, 0.839216, 1)``

兰花色。

.. _class_Color_constant_PALE_GOLDENROD:

.. rst-class:: classref-constant

**PALE_GOLDENROD** = ``Color(0.933333, 0.909804, 0.666667, 1)``

淡金色。

.. _class_Color_constant_PALE_GREEN:

.. rst-class:: classref-constant

**PALE_GREEN** = ``Color(0.596078, 0.984314, 0.596078, 1)``

淡绿色。

.. _class_Color_constant_PALE_TURQUOISE:

.. rst-class:: classref-constant

**PALE_TURQUOISE** = ``Color(0.686275, 0.933333, 0.933333, 1)``

淡绿松石色。

.. _class_Color_constant_PALE_VIOLET_RED:

.. rst-class:: classref-constant

**PALE_VIOLET_RED** = ``Color(0.858824, 0.439216, 0.576471, 1)``

淡紫红色。

.. _class_Color_constant_PAPAYA_WHIP:

.. rst-class:: classref-constant

**PAPAYA_WHIP** = ``Color(1, 0.937255, 0.835294, 1)``

木瓜鞭色。

.. _class_Color_constant_PEACH_PUFF:

.. rst-class:: classref-constant

**PEACH_PUFF** = ``Color(1, 0.854902, 0.72549, 1)``

桃花粉。

.. _class_Color_constant_PERU:

.. rst-class:: classref-constant

**PERU** = ``Color(0.803922, 0.521569, 0.247059, 1)``

秘鲁色。

.. _class_Color_constant_PINK:

.. rst-class:: classref-constant

**PINK** = ``Color(1, 0.752941, 0.796078, 1)``

粉红色。

.. _class_Color_constant_PLUM:

.. rst-class:: classref-constant

**PLUM** = ``Color(0.866667, 0.627451, 0.866667, 1)``

梅花色。

.. _class_Color_constant_POWDER_BLUE:

.. rst-class:: classref-constant

**POWDER_BLUE** = ``Color(0.690196, 0.878431, 0.901961, 1)``

浅蓝色。

.. _class_Color_constant_PURPLE:

.. rst-class:: classref-constant

**PURPLE** = ``Color(0.627451, 0.12549, 0.941176, 1)``

紫色。

.. _class_Color_constant_REBECCA_PURPLE:

.. rst-class:: classref-constant

**REBECCA_PURPLE** = ``Color(0.4, 0.2, 0.6, 1)``

丽贝卡紫色。

.. _class_Color_constant_RED:

.. rst-class:: classref-constant

**RED** = ``Color(1, 0, 0, 1)``

红色。

.. _class_Color_constant_ROSY_BROWN:

.. rst-class:: classref-constant

**ROSY_BROWN** = ``Color(0.737255, 0.560784, 0.560784, 1)``

玫瑰棕。

.. _class_Color_constant_ROYAL_BLUE:

.. rst-class:: classref-constant

**ROYAL_BLUE** = ``Color(0.254902, 0.411765, 0.882353, 1)``

宝蓝色。

.. _class_Color_constant_SADDLE_BROWN:

.. rst-class:: classref-constant

**SADDLE_BROWN** = ``Color(0.545098, 0.270588, 0.0745098, 1)``

鞍棕色。

.. _class_Color_constant_SALMON:

.. rst-class:: classref-constant

**SALMON** = ``Color(0.980392, 0.501961, 0.447059, 1)``

鲑鱼色。

.. _class_Color_constant_SANDY_BROWN:

.. rst-class:: classref-constant

**SANDY_BROWN** = ``Color(0.956863, 0.643137, 0.376471, 1)``

沙褐色。

.. _class_Color_constant_SEA_GREEN:

.. rst-class:: classref-constant

**SEA_GREEN** = ``Color(0.180392, 0.545098, 0.341176, 1)``

海绿色。

.. _class_Color_constant_SEASHELL:

.. rst-class:: classref-constant

**SEASHELL** = ``Color(1, 0.960784, 0.933333, 1)``

贝壳色。

.. _class_Color_constant_SIENNA:

.. rst-class:: classref-constant

**SIENNA** = ``Color(0.627451, 0.321569, 0.176471, 1)``

西恩娜色。

.. _class_Color_constant_SILVER:

.. rst-class:: classref-constant

**SILVER** = ``Color(0.752941, 0.752941, 0.752941, 1)``

银色。

.. _class_Color_constant_SKY_BLUE:

.. rst-class:: classref-constant

**SKY_BLUE** = ``Color(0.529412, 0.807843, 0.921569, 1)``

天蓝色。

.. _class_Color_constant_SLATE_BLUE:

.. rst-class:: classref-constant

**SLATE_BLUE** = ``Color(0.415686, 0.352941, 0.803922, 1)``

石板蓝色。

.. _class_Color_constant_SLATE_GRAY:

.. rst-class:: classref-constant

**SLATE_GRAY** = ``Color(0.439216, 0.501961, 0.564706, 1)``

石板灰。

.. _class_Color_constant_SNOW:

.. rst-class:: classref-constant

**SNOW** = ``Color(1, 0.980392, 0.980392, 1)``

雪白。

.. _class_Color_constant_SPRING_GREEN:

.. rst-class:: classref-constant

**SPRING_GREEN** = ``Color(0, 1, 0.498039, 1)``

春绿。

.. _class_Color_constant_STEEL_BLUE:

.. rst-class:: classref-constant

**STEEL_BLUE** = ``Color(0.27451, 0.509804, 0.705882, 1)``

钢蓝色。

.. _class_Color_constant_TAN:

.. rst-class:: classref-constant

**TAN** = ``Color(0.823529, 0.705882, 0.54902, 1)``

棕褐色。

.. _class_Color_constant_TEAL:

.. rst-class:: classref-constant

**TEAL** = ``Color(0, 0.501961, 0.501961, 1)``

青色。

.. _class_Color_constant_THISTLE:

.. rst-class:: classref-constant

**THISTLE** = ``Color(0.847059, 0.74902, 0.847059, 1)``

蓟色。

.. _class_Color_constant_TOMATO:

.. rst-class:: classref-constant

**TOMATO** = ``Color(1, 0.388235, 0.278431, 1)``

番茄色。

.. _class_Color_constant_TRANSPARENT:

.. rst-class:: classref-constant

**TRANSPARENT** = ``Color(1, 1, 1, 0)``

透明色（Alpha 为零的白色）。

.. _class_Color_constant_TURQUOISE:

.. rst-class:: classref-constant

**TURQUOISE** = ``Color(0.25098, 0.878431, 0.815686, 1)``

松石绿。

.. _class_Color_constant_VIOLET:

.. rst-class:: classref-constant

**VIOLET** = ``Color(0.933333, 0.509804, 0.933333, 1)``

紫罗兰色。

.. _class_Color_constant_WEB_GRAY:

.. rst-class:: classref-constant

**WEB_GRAY** = ``Color(0.501961, 0.501961, 0.501961, 1)``

网格灰。

.. _class_Color_constant_WEB_GREEN:

.. rst-class:: classref-constant

**WEB_GREEN** = ``Color(0, 0.501961, 0, 1)``

网络绿。

.. _class_Color_constant_WEB_MAROON:

.. rst-class:: classref-constant

**WEB_MAROON** = ``Color(0.501961, 0, 0, 1)``

网络栗。

.. _class_Color_constant_WEB_PURPLE:

.. rst-class:: classref-constant

**WEB_PURPLE** = ``Color(0.501961, 0, 0.501961, 1)``

网络紫。

.. _class_Color_constant_WHEAT:

.. rst-class:: classref-constant

**WHEAT** = ``Color(0.960784, 0.870588, 0.701961, 1)``

小麦色。

.. _class_Color_constant_WHITE:

.. rst-class:: classref-constant

**WHITE** = ``Color(1, 1, 1, 1)``

白色。

.. _class_Color_constant_WHITE_SMOKE:

.. rst-class:: classref-constant

**WHITE_SMOKE** = ``Color(0.960784, 0.960784, 0.960784, 1)``

白烟色。

.. _class_Color_constant_YELLOW:

.. rst-class:: classref-constant

**YELLOW** = ``Color(1, 1, 0, 1)``

黄色。

.. _class_Color_constant_YELLOW_GREEN:

.. rst-class:: classref-constant

**YELLOW_GREEN** = ``Color(0.603922, 0.803922, 0.196078, 1)``

黄绿色。

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

属性说明
--------

.. _class_Color_property_a:

.. rst-class:: classref-property

:ref:`float<class_float>` **a** = ``1.0``

颜色的 Alpha 分量，一般在 0 到 1 的范围内。0 表示该颜色完全透明。1 表示该颜色完全不透明。

.. rst-class:: classref-item-separator

----

.. _class_Color_property_a8:

.. rst-class:: classref-property

:ref:`int<class_int>` **a8** = ``255``

对 :ref:`a<class_Color_property_a>` 的封装，使用 0 到 255 的范围而不是 0 到 1。

.. rst-class:: classref-item-separator

----

.. _class_Color_property_b:

.. rst-class:: classref-property

:ref:`float<class_float>` **b** = ``0.0``

颜色的蓝色分量，一般在 0 到 1 的范围内。

.. rst-class:: classref-item-separator

----

.. _class_Color_property_b8:

.. rst-class:: classref-property

:ref:`int<class_int>` **b8** = ``0``

对 :ref:`b<class_Color_property_b>` 的封装，使用 0 到 255 的范围而不是 0 到 1。

.. rst-class:: classref-item-separator

----

.. _class_Color_property_g:

.. rst-class:: classref-property

:ref:`float<class_float>` **g** = ``0.0``

颜色的绿色分量，一般在 0 到 1 的范围内。

.. rst-class:: classref-item-separator

----

.. _class_Color_property_g8:

.. rst-class:: classref-property

:ref:`int<class_int>` **g8** = ``0``

对 :ref:`g<class_Color_property_g>` 的封装，使用 0 到 255 的范围而不是 0 到 1。

.. rst-class:: classref-item-separator

----

.. _class_Color_property_h:

.. rst-class:: classref-property

:ref:`float<class_float>` **h** = ``0.0``

这个颜色的 HSV 色相，范围是 0 到 1。

.. rst-class:: classref-item-separator

----

.. _class_Color_property_r:

.. rst-class:: classref-property

:ref:`float<class_float>` **r** = ``0.0``

颜色的红色分量，通常在 0 到 1 的范围内。

.. rst-class:: classref-item-separator

----

.. _class_Color_property_r8:

.. rst-class:: classref-property

:ref:`int<class_int>` **r8** = ``0``

对 :ref:`r<class_Color_property_r>` 的封装，使用 0 到 255 的范围而不是 0 到 1。

.. rst-class:: classref-item-separator

----

.. _class_Color_property_s:

.. rst-class:: classref-property

:ref:`float<class_float>` **s** = ``0.0``

这个颜色的 HSV 饱和度，范围为 0 到 1。

.. rst-class:: classref-item-separator

----

.. _class_Color_property_v:

.. rst-class:: classref-property

:ref:`float<class_float>` **v** = ``0.0``

这个颜色的 HSV 值（亮度），范围为 0 至 1。

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

构造函数说明
------------

.. _class_Color_constructor_Color:

.. rst-class:: classref-constructor

:ref:`Color<class_Color>` **Color** **(** **)**

用不透明的黑色构造默认的 **Color**\ ，与 :ref:`BLACK<class_Color_constant_BLACK>` 相同。

\ **注意：**\ 在 C# 中构造的空颜色，其所有分量都为 ``0.0``\ （透明黑）。

.. rst-class:: classref-item-separator

----

.. rst-class:: classref-constructor

:ref:`Color<class_Color>` **Color** **(** :ref:`Color<class_Color>` from, :ref:`float<class_float>` alpha **)**

从现有的颜色构造 **Color**\ ，\ :ref:`a<class_Color_property_a>` 设置为给定的 ``alpha`` 值。


.. tabs::

 .. code-tab:: gdscript

    var red = Color(Color.RED, 0.2) # 20% 不透明红色。

 .. code-tab:: csharp

    var red = new Color(Colors.Red, 0.2f); // 20% 不透明红色。



.. rst-class:: classref-item-separator

----

.. rst-class:: classref-constructor

:ref:`Color<class_Color>` **Color** **(** :ref:`Color<class_Color>` from **)**

构造给定 **Color** 的副本。

.. rst-class:: classref-item-separator

----

.. rst-class:: classref-constructor

:ref:`Color<class_Color>` **Color** **(** :ref:`String<class_String>` code **)**

从 HTML 颜色代码或标准化的颜色名称中构建 **Color**\ 。支持的颜色名称与常量名相同。

.. rst-class:: classref-item-separator

----

.. rst-class:: classref-constructor

:ref:`Color<class_Color>` **Color** **(** :ref:`String<class_String>` code, :ref:`float<class_float>` alpha **)**

从 HTML 颜色代码或标准化的颜色名称中构建 **Color**\ ，\ ``alpha`` 的范围为 0.0 到 1.0。支持的颜色名称与常量名相同。

.. rst-class:: classref-item-separator

----

.. rst-class:: classref-constructor

:ref:`Color<class_Color>` **Color** **(** :ref:`float<class_float>` r, :ref:`float<class_float>` g, :ref:`float<class_float>` b **)**

从通常介于 0.0 和 1.0 之间的 RGB 值构造一个 **Color**\ 。\ :ref:`a<class_Color_property_a>` 被设置为 1.0。


.. tabs::

 .. code-tab:: gdscript

    var color = Color(0.2, 1.0, 0.7) # 类似于 `Color8(51, 255, 178, 255)`

 .. code-tab:: csharp

    var color = new Color(0.2f, 1.0f, 0.7f); // 类似于 `Color.Color8(51, 255, 178, 255)`



.. rst-class:: classref-item-separator

----

.. rst-class:: classref-constructor

:ref:`Color<class_Color>` **Color** **(** :ref:`float<class_float>` r, :ref:`float<class_float>` g, :ref:`float<class_float>` b, :ref:`float<class_float>` a **)**

从通常介于 0.0 和 1.0 之间的 RGBA 值构造一个 **Color**\ 。


.. tabs::

 .. code-tab:: gdscript

    var color = Color(0.2, 1.0, 0.7, 0.8) # 类似于 `Color8(51, 255, 178, 204)`

 .. code-tab:: csharp

    var color = new Color(0.2f, 1.0f, 0.7f, 0.8f); // 类似于 `Color.Color8(51, 255, 178, 255, 204)`



.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

方法说明
--------

.. _class_Color_method_blend:

.. rst-class:: classref-method

:ref:`Color<class_Color>` **blend** **(** :ref:`Color<class_Color>` over **)** |const|

返回将该颜色混合到给定颜色上所产生的新颜色。在绘画程序中，你可以将其想象为在该颜色（包括 alpha）上绘制的 ``over`` 颜色。


.. tabs::

 .. code-tab:: gdscript

    var bg = Color(0.0, 1.0, 0.0, 0.5) # 50% 不透明的绿色
    var fg = Color(1.0, 0.0, 0.0, 0.5) # 50% 不透明的红色
    var blended_color = bg.blend(fg) # 75% 不透明的棕色

 .. code-tab:: csharp

    var bg = new Color(0.0f, 1.0f, 0.0f, 0.5f); // 50% 不透明的绿色
    var fg = new Color(1.0f, 0.0f, 0.0f, 0.5f); // 50% 不透明的红色
    Color blendedColor = bg.Blend(fg); // 75% 不透明的棕色



.. rst-class:: classref-item-separator

----

.. _class_Color_method_clamp:

.. rst-class:: classref-method

:ref:`Color<class_Color>` **clamp** **(** :ref:`Color<class_Color>` min=Color(0, 0, 0, 0), :ref:`Color<class_Color>` max=Color(1, 1, 1, 1) **)** |const|

通过在每个分量上运行 :ref:`@GlobalScope.clamp<class_@GlobalScope_method_clamp>`\ ，返回一种新颜色，其中所有分量都被钳制在 ``min`` 和 ``max`` 的分量之间。

.. rst-class:: classref-item-separator

----

.. _class_Color_method_darkened:

.. rst-class:: classref-method

:ref:`Color<class_Color>` **darkened** **(** :ref:`float<class_float>` amount **)** |const|

返回通过指定 ``amount``\ （从 0.0 到 1.0 的比率）使该颜色变暗而产生的新颜色。另见 :ref:`lightened<class_Color_method_lightened>`\ 。


.. tabs::

 .. code-tab:: gdscript

    var green = Color(0.0, 1.0, 0.0)
    var darkgreen = green.darkened(0.2) # 比普通的绿色深 20%

 .. code-tab:: csharp

    var green = new Color(0.0f, 1.0f, 0.0f);
    Color darkgreen = green.Darkened(0.2f); // 比普通的绿色深 20%



.. rst-class:: classref-item-separator

----

.. _class_Color_method_from_hsv:

.. rst-class:: classref-method

:ref:`Color<class_Color>` **from_hsv** **(** :ref:`float<class_float>` h, :ref:`float<class_float>` s, :ref:`float<class_float>` v, :ref:`float<class_float>` alpha=1.0 **)** |static|

根据 `HSV 配置 <https://zh.wikipedia.org/wiki/HSL%E5%92%8CHSV%E8%89%B2%E5%BD%A9%E7%A9%BA%E9%97%B4>`__\ 构建颜色。色相（\ ``h``\ ）、饱和度（\ ``s``\ ）和值（\ ``v``\ ）通常在 0.0 和 1.0 之间。


.. tabs::

 .. code-tab:: gdscript

    var color = Color.from_hsv(0.58, 0.5, 0.79, 0.8)

 .. code-tab:: csharp

    var color = Color.FromHsv(0.58f, 0.5f, 0.79f, 0.8f);



.. rst-class:: classref-item-separator

----

.. _class_Color_method_from_ok_hsl:

.. rst-class:: classref-method

:ref:`Color<class_Color>` **from_ok_hsl** **(** :ref:`float<class_float>` h, :ref:`float<class_float>` s, :ref:`float<class_float>` l, :ref:`float<class_float>` alpha=1.0 **)** |static|

根据 `OK HSL 配置 <https://bottosson.github.io/posts/colorpicker/>`__\ 构建颜色。色相（\ ``h``\ ）、饱和度（\ ``s``\ ）和亮度（\ ``l``\ ）通常在 0.0 和 1.0 之间。


.. tabs::

 .. code-tab:: gdscript

    var color = Color.from_ok_hsl(0.58, 0.5, 0.79, 0.8)

 .. code-tab:: csharp

    var color = Color.FromOkHsl(0.58f, 0.5f, 0.79f, 0.8f);



.. rst-class:: classref-item-separator

----

.. _class_Color_method_from_rgbe9995:

.. rst-class:: classref-method

:ref:`Color<class_Color>` **from_rgbe9995** **(** :ref:`int<class_int>` rgbe **)** |static|

从 RGBE9995 格式的整数解码 **Color**\ 。见 :ref:`Image.FORMAT_RGBE9995<class_Image_constant_FORMAT_RGBE9995>`\ 。

.. rst-class:: classref-item-separator

----

.. _class_Color_method_from_string:

.. rst-class:: classref-method

:ref:`Color<class_Color>` **from_string** **(** :ref:`String<class_String>` str, :ref:`Color<class_Color>` default **)** |static|

从给定的字符串创建 **Color**\ ，该字符串可以是 HTML 颜色代码，也可以是颜色名称（不区分大小写）。如果无法从字符串中推断出颜色，则返回 ``default``\ 。

.. rst-class:: classref-item-separator

----

.. _class_Color_method_get_luminance:

.. rst-class:: classref-method

:ref:`float<class_float>` **get_luminance** **(** **)** |const|

将颜色的光照强度返回为一个介于 0.0 和 1.0（包含）之间的值。这在确定浅色或深色时很有用。亮度小于 0.5 的颜色通常可以认为是深色。

\ **注意：**\ :ref:`get_luminance<class_Color_method_get_luminance>` 依赖于线性色彩空间中的颜色，以返回准确的相对亮度值。如果颜色在 sRGB 色彩空间，请先使用 :ref:`srgb_to_linear<class_Color_method_srgb_to_linear>` 将其转换为线性色彩空间。

.. rst-class:: classref-item-separator

----

.. _class_Color_method_hex:

.. rst-class:: classref-method

:ref:`Color<class_Color>` **hex** **(** :ref:`int<class_int>` hex **)** |static|

返回与提供的整数 ``hex`` 相关联的 **Color**\ ，使用 32 位 RGBA 格式（每通道 8 位）。

在 GDScript 和 C# 中，展示该 :ref:`int<class_int>` 的最好方法是十六进制表示法（使用 ``"0x"`` 前缀，得到 ``"0xRRGGBBAA"``\ ）。


.. tabs::

 .. code-tab:: gdscript

    var red = Color.hex(0xff0000ff)
    var dark_cyan = Color.hex(0x008b8bff)
    var my_color = Color.hex(0xbbefd2a4)

 .. code-tab:: csharp

    var red = new Color(0xff0000ff);
    var dark_cyan = new Color(0x008b8bff);
    var my_color = new Color(0xbbefd2a4);



.. rst-class:: classref-item-separator

----

.. _class_Color_method_hex64:

.. rst-class:: classref-method

:ref:`Color<class_Color>` **hex64** **(** :ref:`int<class_int>` hex **)** |static|

返回与提供的整数 ``hex`` 相关联的 **Color**\ ，使用 64 位 RGBA 格式（每通道 8 位）。

在 GDScript 和 C# 中，展示该 :ref:`int<class_int>` 的最好方法是十六进制表示法（使用 ``"0x"`` 前缀，得到 ``"0xRRRRGGGGBBBBAAAA"``\ ）。

.. rst-class:: classref-item-separator

----

.. _class_Color_method_html:

.. rst-class:: classref-method

:ref:`Color<class_Color>` **html** **(** :ref:`String<class_String>` rgba **)** |static|

从 HTML 十六进制颜色字符串 ``rgba`` 返回一个新颜色。\ ``rgba`` 不区分大小写，可以使用哈希符号（\ ``#``\ ）作为前缀。

\ ``rgba`` 必须是有效的三位或六位十六进制颜色字符串，并且可以包含 alpha 通道值。如果 ``rgba`` 不包含 alpha 通道值，则应用 alpha 通道值 1.0。如果 ``rgba`` 无效，则返回一个空颜色。


.. tabs::

 .. code-tab:: gdscript

    var blue = Color.html("#0000ff") # blue 为 Color(0.0, 0.0, 1.0, 1.0)
    var green = Color.html("#0F0")   # green 为 Color(0.0, 1.0, 0.0, 1.0)
    var col = Color.html("663399cc") # col 为 Color(0.4, 0.2, 0.6, 0.8)

 .. code-tab:: csharp

    var blue = Color.FromHtml("#0000ff"); // blue 为 Color(0.0, 0.0, 1.0, 1.0)
    var green = Color.FromHtml("#0F0");   // green 为 Color(0.0, 1.0, 0.0, 1.0)
    var col = Color.FromHtml("663399cc"); // col 为 Color(0.4, 0.2, 0.6, 0.8)



.. rst-class:: classref-item-separator

----

.. _class_Color_method_html_is_valid:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **html_is_valid** **(** :ref:`String<class_String>` color **)** |static|

如果 ``color`` 是一个有效的 HTML 十六进制颜色字符串，则返回 ``true``\ 。该字符串必须是一个由 3、4、6 或 8 位数字组成的十六进制值（不区分大小写），并且可以以井号 (``#``) 作为前缀。该方法与 :ref:`String.is_valid_html_color<class_String_method_is_valid_html_color>` 相同。


.. tabs::

 .. code-tab:: gdscript

    Color.html_is_valid("#55aaFF")   # 返回 true
    Color.html_is_valid("#55AAFF20") # 返回 true
    Color.html_is_valid("55AAFF")    # 返回 true
    Color.html_is_valid("#F2C")      # 返回 true
    
    Color.html_is_valid("#AABBC")     # 返回 false
    Color.html_is_valid("#55aaFF5")  # 返回 false

 .. code-tab:: csharp

    Color.HtmlIsValid("#55AAFF");   // 返回 true
    Color.HtmlIsValid("#55AAFF20"); // 返回 true
    Color.HtmlIsValid("55AAFF");    // 返回 true
    Color.HtmlIsValid("#F2C");      // 返回 true
    
    Color.HtmlIsValid("#AABBC");    // 返回 false
    Color.HtmlIsValid("#55aaFF5");  // 返回 false



.. rst-class:: classref-item-separator

----

.. _class_Color_method_inverted:

.. rst-class:: classref-method

:ref:`Color<class_Color>` **inverted** **(** **)** |const|

返回将 :ref:`r<class_Color_property_r>`\ 、\ :ref:`g<class_Color_property_g>`\ 、\ :ref:`b<class_Color_property_b>` 分量翻转后的颜色（\ ``(1 - r, 1 - g, 1 - b, a)``\ ）。


.. tabs::

 .. code-tab:: gdscript

    var black = Color.WHITE.inverted()
    var color = Color(0.3, 0.4, 0.9)
    var inverted_color = color.inverted() # 等价于 `Color(0.7, 0.6, 0.1)`

 .. code-tab:: csharp

    var black = Colors.White.Inverted();
    var color = new Color(0.3f, 0.4f, 0.9f);
    Color invertedColor = color.Inverted(); // 等价于 `new Color(0.7f, 0.6f, 0.1f)`



.. rst-class:: classref-item-separator

----

.. _class_Color_method_is_equal_approx:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **is_equal_approx** **(** :ref:`Color<class_Color>` to **)** |const|

如果该颜色和 ``to`` 近似相等，则返回 ``true``\ ，判断近似相等的方法是通过在每个分量上运行 :ref:`@GlobalScope.is_equal_approx<class_@GlobalScope_method_is_equal_approx>`\ 。

.. rst-class:: classref-item-separator

----

.. _class_Color_method_lerp:

.. rst-class:: classref-method

:ref:`Color<class_Color>` **lerp** **(** :ref:`Color<class_Color>` to, :ref:`float<class_float>` weight **)** |const|

返回将该颜色的分量和 ``to`` 的分量进行线性插值的结果。插值系数 ``weight`` 应该在 0.0 和 1.0 之间（闭区间）。另请参阅 :ref:`@GlobalScope.lerp<class_@GlobalScope_method_lerp>`\ 。


.. tabs::

 .. code-tab:: gdscript

    var red = Color(1.0, 0.0, 0.0)
    var aqua = Color(0.0, 1.0, 0.8)
    
    red.lerp(aqua, 0.2) # 返回 Color(0.8, 0.2, 0.16)
    red.lerp(aqua, 0.5) # 返回 Color(0.5, 0.5, 0.4)
    red.lerp(aqua, 1.0) # 返回 Color(0.0, 1.0, 0.8)

 .. code-tab:: csharp

    var red = new Color(1.0f, 0.0f, 0.0f);
    var aqua = new Color(0.0f, 1.0f, 0.8f);
    
    red.Lerp(aqua, 0.2f); // 返回 Color(0.8f, 0.2f, 0.16f)
    red.Lerp(aqua, 0.5f); // 返回 Color(0.5f, 0.5f, 0.4f)
    red.Lerp(aqua, 1.0f); // 返回 Color(0.0f, 1.0f, 0.8f)



.. rst-class:: classref-item-separator

----

.. _class_Color_method_lightened:

.. rst-class:: classref-method

:ref:`Color<class_Color>` **lightened** **(** :ref:`float<class_float>` amount **)** |const|

返回通过指定 ``amount``\ （从 0.0 到 1.0 的比率）使该颜色变亮而产生的新颜色。另见 :ref:`darkened<class_Color_method_darkened>`\ 。


.. tabs::

 .. code-tab:: gdscript

    var green = Color(0.0, 1.0, 0.0)
    var light_green = green.lightened(0.2) # 比普通的绿色要淡 20%

 .. code-tab:: csharp

    var green = new Color(0.0f, 1.0f, 0.0f);
    Color lightGreen = green.Lightened(0.2f); // 比普通的绿色要淡 20%



.. rst-class:: classref-item-separator

----

.. _class_Color_method_linear_to_srgb:

.. rst-class:: classref-method

:ref:`Color<class_Color>` **linear_to_srgb** **(** **)** |const|

返回转换到 `sRGB <https://en.wikipedia.org/wiki/SRGB>`__ 色彩空间的颜色。该方法假定原始颜色位于线性色彩空间中。另请参阅执行相反操作的 :ref:`srgb_to_linear<class_Color_method_srgb_to_linear>`\ 。

.. rst-class:: classref-item-separator

----

.. _class_Color_method_srgb_to_linear:

.. rst-class:: classref-method

:ref:`Color<class_Color>` **srgb_to_linear** **(** **)** |const|

返回转换到线性色彩空间的颜色。该方法假定原始颜色已经在 sRGB 色彩空间中。另请参见执行相反操作的 :ref:`linear_to_srgb<class_Color_method_linear_to_srgb>`\ 。

.. rst-class:: classref-item-separator

----

.. _class_Color_method_to_abgr32:

.. rst-class:: classref-method

:ref:`int<class_int>` **to_abgr32** **(** **)** |const|

返回转换为 ABGR 格式（每个分量为 8 位）的 32 位整数的颜色。ABGR 是默认 RGBA 格式的反转版本。


.. tabs::

 .. code-tab:: gdscript

    var color = Color(1, 0.5, 0.2)
    print(color.to_abgr32()) # 输出 4281565439

 .. code-tab:: csharp

    var color = new Color(1.0f, 0.5f, 0.2f);
    GD.Print(color.ToAbgr32()); // 输出 4281565439



.. rst-class:: classref-item-separator

----

.. _class_Color_method_to_abgr64:

.. rst-class:: classref-method

:ref:`int<class_int>` **to_abgr64** **(** **)** |const|

返回转换为 ABGR 格式（每个分量为 16 位）的 64 位整数的颜色。ABGR 是默认 RGBA 格式的反转版本。


.. tabs::

 .. code-tab:: gdscript

    var color = Color(1, 0.5, 0.2)
    print(color.to_abgr64()) # 输出 -225178692812801

 .. code-tab:: csharp

    var color = new Color(1.0f, 0.5f, 0.2f);
    GD.Print(color.ToAbgr64()); // 输出 -225178692812801



.. rst-class:: classref-item-separator

----

.. _class_Color_method_to_argb32:

.. rst-class:: classref-method

:ref:`int<class_int>` **to_argb32** **(** **)** |const|

返回转换为 ARGB 格式（每个分量为 8 位）的 32 位整数的颜色。ARGB 与 DirectX 更兼容。


.. tabs::

 .. code-tab:: gdscript

    var color = Color(1, 0.5, 0.2)
    print(color.to_argb32()) # 输出 4294934323

 .. code-tab:: csharp

    var color = new Color(1.0f, 0.5f, 0.2f);
    GD.Print(color.ToArgb32()); // 输出 4294934323



.. rst-class:: classref-item-separator

----

.. _class_Color_method_to_argb64:

.. rst-class:: classref-method

:ref:`int<class_int>` **to_argb64** **(** **)** |const|

返回转换为 ARGB 格式（每个分量为 16 位）的 64 位整数的颜色。ARGB 与 DirectX 更兼容。


.. tabs::

 .. code-tab:: gdscript

    var color = Color(1, 0.5, 0.2)
    print(color.to_argb64()) # 输出 -2147470541

 .. code-tab:: csharp

    var color = new Color(1.0f, 0.5f, 0.2f);
    GD.Print(color.ToArgb64()); // 输出 -2147470541



.. rst-class:: classref-item-separator

----

.. _class_Color_method_to_html:

.. rst-class:: classref-method

:ref:`String<class_String>` **to_html** **(** :ref:`bool<class_bool>` with_alpha=true **)** |const|

返回将该颜色转换为 RGBA 格式的 HTML 十六进制颜色 :ref:`String<class_String>`\ ，不带（\ ``#``\ ）前缀。

将 ``with_alpha`` 设置为 ``false``\ ，会从十六进制字符串中排除 alpha，使用 RGB 格式而不是 RGBA 格式。


.. tabs::

 .. code-tab:: gdscript

    var white = Color(1, 1, 1, 0.5)
    var with_alpha = white.to_html() # 返回 "ffffff7f"
    var without_alpha = white.to_html(false) # 返回 "ffffff"

 .. code-tab:: csharp

    var white = new Color(1, 1, 1, 0.5f);
    string withAlpha = white.ToHtml(); // 返回 "ffffff7f"
    string withoutAlpha = white.ToHtml(false); // 返回 "ffffff"



.. rst-class:: classref-item-separator

----

.. _class_Color_method_to_rgba32:

.. rst-class:: classref-method

:ref:`int<class_int>` **to_rgba32** **(** **)** |const|

返回转换为 RGBA 格式（每个分量为 8 位）的 32 位整数的颜色。RGBA 是 Godot 的默认格式。


.. tabs::

 .. code-tab:: gdscript

    var color = Color(1, 0.5, 0.2)
    print(color.to_rgba32()) # 输出 4286526463

 .. code-tab:: csharp

    var color = new Color(1, 0.5f, 0.2f);
    GD.Print(color.ToRgba32()); // 输出 4286526463



.. rst-class:: classref-item-separator

----

.. _class_Color_method_to_rgba64:

.. rst-class:: classref-method

:ref:`int<class_int>` **to_rgba64** **(** **)** |const|

返回转换为 RGBA 格式（每个分量为 16 位）的 64 位整数的颜色。RGBA 是 Godot 的默认格式。


.. tabs::

 .. code-tab:: gdscript

    var color = Color(1, 0.5, 0.2)
    print(color.to_rgba64()) # 输出 -140736629309441

 .. code-tab:: csharp

    var color = new Color(1, 0.5f, 0.2f);
    GD.Print(color.ToRgba64()); // 输出 -140736629309441



.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

操作符说明
----------

.. _class_Color_operator_neq_Color:

.. rst-class:: classref-operator

:ref:`bool<class_bool>` **operator !=** **(** :ref:`Color<class_Color>` right **)**

如果颜色不完全相等，则返回 ``true``\ 。

\ **注意：**\ 由于浮点数精度误差，请考虑改用 :ref:`is_equal_approx<class_Color_method_is_equal_approx>`\ ，会更可靠。

.. rst-class:: classref-item-separator

----

.. _class_Color_operator_mul_Color:

.. rst-class:: classref-operator

:ref:`Color<class_Color>` **operator *** **(** :ref:`Color<class_Color>` right **)**

将该 **Color** 的每个分量乘以给定 **Color** 的对应分量。

.. rst-class:: classref-item-separator

----

.. _class_Color_operator_mul_float:

.. rst-class:: classref-operator

:ref:`Color<class_Color>` **operator *** **(** :ref:`float<class_float>` right **)**

将该 **Color** 的每个分量乘以给定的 :ref:`float<class_float>`\ 。

.. rst-class:: classref-item-separator

----

.. _class_Color_operator_mul_int:

.. rst-class:: classref-operator

:ref:`Color<class_Color>` **operator *** **(** :ref:`int<class_int>` right **)**

将该 **Color** 的每个分量乘以给定的 :ref:`int<class_int>`\ 。

.. rst-class:: classref-item-separator

----

.. _class_Color_operator_sum_Color:

.. rst-class:: classref-operator

:ref:`Color<class_Color>` **operator +** **(** :ref:`Color<class_Color>` right **)**

将该 **Color** 的每个分量加上给定 **Color** 的对应分量。

.. rst-class:: classref-item-separator

----

.. _class_Color_operator_dif_Color:

.. rst-class:: classref-operator

:ref:`Color<class_Color>` **operator -** **(** :ref:`Color<class_Color>` right **)**

将该 **Color** 的每个分量减去给定 **Color** 的对应分量。

.. rst-class:: classref-item-separator

----

.. _class_Color_operator_div_Color:

.. rst-class:: classref-operator

:ref:`Color<class_Color>` **operator /** **(** :ref:`Color<class_Color>` right **)**

将该 **Color** 的每个分量除以给定 **Color** 的每个分量。

.. rst-class:: classref-item-separator

----

.. _class_Color_operator_div_float:

.. rst-class:: classref-operator

:ref:`Color<class_Color>` **operator /** **(** :ref:`float<class_float>` right **)**

将该 **Color** 的每个分量除以给定的 :ref:`float<class_float>`\ 。

.. rst-class:: classref-item-separator

----

.. _class_Color_operator_div_int:

.. rst-class:: classref-operator

:ref:`Color<class_Color>` **operator /** **(** :ref:`int<class_int>` right **)**

将该 **Color** 的每个分量除以给定的 :ref:`int<class_int>`\ 。

.. rst-class:: classref-item-separator

----

.. _class_Color_operator_eq_Color:

.. rst-class:: classref-operator

:ref:`bool<class_bool>` **operator ==** **(** :ref:`Color<class_Color>` right **)**

如果颜色完全相同，则返回 ``true``\ 。

\ **注意：**\ 由于浮点精度误差，请考虑改用更可靠的 :ref:`is_equal_approx<class_Color_method_is_equal_approx>`\ 。

.. rst-class:: classref-item-separator

----

.. _class_Color_operator_idx_int:

.. rst-class:: classref-operator

:ref:`float<class_float>` **operator []** **(** :ref:`int<class_int>` index **)**

使用索引访问颜色分量。\ ``[0]`` 相当于 :ref:`r<class_Color_property_r>`\ ，\ ``[1]`` 相当于 :ref:`g<class_Color_property_g>`\ ，\ ``[2]`` 相当于 :ref:`b<class_Color_property_b>`\ ，\ ``[3]`` 相当于 :ref:`a<class_Color_property_a>`.

.. rst-class:: classref-item-separator

----

.. _class_Color_operator_unplus:

.. rst-class:: classref-operator

:ref:`Color<class_Color>` **operator unary+** **(** **)**

返回与 ``+`` 不存在时相同的值。单目 ``+`` 没有作用，但有时可以使你的代码更具可读性。

.. rst-class:: classref-item-separator

----

.. _class_Color_operator_unminus:

.. rst-class:: classref-operator

:ref:`Color<class_Color>` **operator unary-** **(** **)**

反转给定的颜色。这相当于 ``Color.WHITE - c`` 或 ``Color(1 - c.r, 1 - c.g, 1 - c.b, 1 - c.a)``\ 。与 :ref:`inverted<class_Color_method_inverted>` 不同，\ :ref:`a<class_Color_property_a>` 分量也将被反转。

.. |virtual| replace:: :abbr:`virtual (本方法通常需要用户覆盖才能生效。)`
.. |const| replace:: :abbr:`const (本方法没有副作用。不会修改该实例的任何成员变量。)`
.. |vararg| replace:: :abbr:`vararg (本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。)`
.. |constructor| replace:: :abbr:`constructor (本方法用于构造某个类型。)`
.. |static| replace:: :abbr:`static (调用本方法无需实例，所以可以直接使用类名调用。)`
.. |operator| replace:: :abbr:`operator (本方法描述的是使用本类型作为左操作数的有效操作符。)`
.. |bitfield| replace:: :abbr:`BitField (这个值是由下列标志构成的位掩码整数。)`
