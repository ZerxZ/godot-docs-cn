:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Godot engine sources.
.. Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.
.. XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/ResourcePreloader.xml.

.. _class_ResourcePreloader:

ResourcePreloader
=================

**继承：** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

用于预加载场景子资源的节点。

.. rst-class:: classref-introduction-group

描述
----

这个节点可以预加载场景中的子资源，这样场景加载完成时，所有的资源就都处于就绪可用状态，可以从预加载器获取。选中该节点后，可以使用 ResourcePreloader 选项卡来添加资源。

GDScript 提供了简化的 :ref:`@GDScript.preload<class_@GDScript_method_preload>` 内置方法，可以在大多数场景使用，\ **ResourcePreloader** 则可用于更高阶的场合。

.. rst-class:: classref-reftable-group

方法
----

.. table::
   :widths: auto

   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                              | :ref:`add_resource<class_ResourcePreloader_method_add_resource>` **(** :ref:`StringName<class_StringName>` name, :ref:`Resource<class_Resource>` resource **)**          |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Resource<class_Resource>`                   | :ref:`get_resource<class_ResourcePreloader_method_get_resource>` **(** :ref:`StringName<class_StringName>` name **)** |const|                                            |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`PackedStringArray<class_PackedStringArray>` | :ref:`get_resource_list<class_ResourcePreloader_method_get_resource_list>` **(** **)** |const|                                                                           |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                           | :ref:`has_resource<class_ResourcePreloader_method_has_resource>` **(** :ref:`StringName<class_StringName>` name **)** |const|                                            |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                              | :ref:`remove_resource<class_ResourcePreloader_method_remove_resource>` **(** :ref:`StringName<class_StringName>` name **)**                                              |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                              | :ref:`rename_resource<class_ResourcePreloader_method_rename_resource>` **(** :ref:`StringName<class_StringName>` name, :ref:`StringName<class_StringName>` newname **)** |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

方法说明
--------

.. _class_ResourcePreloader_method_add_resource:

.. rst-class:: classref-method

void **add_resource** **(** :ref:`StringName<class_StringName>` name, :ref:`Resource<class_Resource>` resource **)**

将资源以给定的名称 ``name`` 添加至预加载器。如果已存在名为 ``name`` 的资源，则新资源会被重命名为 "``name`` N"，这里的 N 是从 2 开始递增的数字。

.. rst-class:: classref-item-separator

----

.. _class_ResourcePreloader_method_get_resource:

.. rst-class:: classref-method

:ref:`Resource<class_Resource>` **get_resource** **(** :ref:`StringName<class_StringName>` name **)** |const|

返回与 ``name`` 关联的资源。

.. rst-class:: classref-item-separator

----

.. _class_ResourcePreloader_method_get_resource_list:

.. rst-class:: classref-method

:ref:`PackedStringArray<class_PackedStringArray>` **get_resource_list** **(** **)** |const|

返回预加载器内的资源列表。

.. rst-class:: classref-item-separator

----

.. _class_ResourcePreloader_method_has_resource:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **has_resource** **(** :ref:`StringName<class_StringName>` name **)** |const|

如果预加载器包含一个与 ``name`` 关联的资源，则返回 ``true``\ 。

.. rst-class:: classref-item-separator

----

.. _class_ResourcePreloader_method_remove_resource:

.. rst-class:: classref-method

void **remove_resource** **(** :ref:`StringName<class_StringName>` name **)**

从预加载器中删除与 ``name`` 关联的资源。

.. rst-class:: classref-item-separator

----

.. _class_ResourcePreloader_method_rename_resource:

.. rst-class:: classref-method

void **rename_resource** **(** :ref:`StringName<class_StringName>` name, :ref:`StringName<class_StringName>` newname **)**

将预加载器中的资源从 ``name`` 重命名为 ``newname``\ 。

.. |virtual| replace:: :abbr:`virtual (本方法通常需要用户覆盖才能生效。)`
.. |const| replace:: :abbr:`const (本方法没有副作用。不会修改该实例的任何成员变量。)`
.. |vararg| replace:: :abbr:`vararg (本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。)`
.. |constructor| replace:: :abbr:`constructor (本方法用于构造某个类型。)`
.. |static| replace:: :abbr:`static (调用本方法无需实例，所以可以直接使用类名调用。)`
.. |operator| replace:: :abbr:`operator (本方法描述的是使用本类型作为左操作数的有效操作符。)`
.. |bitfield| replace:: :abbr:`BitField (这个值是由下列标志构成的位掩码整数。)`
