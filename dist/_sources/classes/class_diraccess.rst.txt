:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Godot engine sources.
.. Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.
.. XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/DirAccess.xml.

.. _class_DirAccess:

DirAccess
=========

**继承：** :ref:`RefCounted<class_RefCounted>` **<** :ref:`Object<class_Object>`

提供管理目录及其内容的方法。

.. rst-class:: classref-introduction-group

描述
----

这个类可以用来管理目录及其内容，不限于项目文件夹。

\ **DirAccess** 无法直接实例化。请使用接受要打开的路径的静态方法创建。

大多数方法都有静态备选项，无需创建 **DirAccess** 即可使用。静态方法仅支持绝对路径（包含 ``res://`` 和 ``user://``\ ）。

::

    # 标准
    var dir = DirAccess.open("user://levels")
    dir.make_dir("world1")
    # 静态
    DirAccess.make_dir_absolute("user://levels/world1")

\ **注意：**\ 很多资源类型是经过导入的（例如纹理和声音文件），因为在游戏中只会用到导入后的版本，所以导出后的游戏中不包含对应的源资产。请使用 :ref:`ResourceLoader<class_ResourceLoader>` 访问导入的资源。

以下是遍历目录中文件的示例：


.. tabs::

 .. code-tab:: gdscript

    func dir_contents(path):
        var dir = DirAccess.open(path)
        if dir:
            dir.list_dir_begin()
            var file_name = dir.get_next()
            while file_name != "":
                if dir.current_is_dir():
                    print("发现目录：" + file_name)
                else:
                    print("发现文件：" + file_name)
                file_name = dir.get_next()
        else:
            print("尝试访问路径时出错。")

 .. code-tab:: csharp

    public void DirContents(string path)
    {
        using var dir = DirAccess.Open(path);
        if (dir != null)
        {
            dir.ListDirBegin();
            string fileName = dir.GetNext();
            while (fileName != "")
            {
                if (dir.CurrentIsDir())
                {
                    GD.Print($"发现目录：{fileName}");
                }
                else
                {
                    GD.Print($"发现文件：{fileName}");
                }
                fileName = dir.GetNext();
            }
        }
        else
        {
            GD.Print("尝试访问路径时出错。");
        }
    }



.. rst-class:: classref-introduction-group

教程
----

- :doc:`文件系统 <../tutorials/scripting/filesystem>`

.. rst-class:: classref-reftable-group

属性
----

.. table::
   :widths: auto

   +-------------------------+----------------------------------------------------------------------------+
   | :ref:`bool<class_bool>` | :ref:`include_hidden<class_DirAccess_property_include_hidden>`             |
   +-------------------------+----------------------------------------------------------------------------+
   | :ref:`bool<class_bool>` | :ref:`include_navigational<class_DirAccess_property_include_navigational>` |
   +-------------------------+----------------------------------------------------------------------------+

.. rst-class:: classref-reftable-group

方法
----

.. table::
   :widths: auto

   +---------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Error<enum_@GlobalScope_Error>`             | :ref:`change_dir<class_DirAccess_method_change_dir>` **(** :ref:`String<class_String>` to_dir **)**                                                                                    |
   +---------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Error<enum_@GlobalScope_Error>`             | :ref:`copy<class_DirAccess_method_copy>` **(** :ref:`String<class_String>` from, :ref:`String<class_String>` to, :ref:`int<class_int>` chmod_flags=-1 **)**                            |
   +---------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Error<enum_@GlobalScope_Error>`             | :ref:`copy_absolute<class_DirAccess_method_copy_absolute>` **(** :ref:`String<class_String>` from, :ref:`String<class_String>` to, :ref:`int<class_int>` chmod_flags=-1 **)** |static| |
   +---------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                           | :ref:`current_is_dir<class_DirAccess_method_current_is_dir>` **(** **)** |const|                                                                                                       |
   +---------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                           | :ref:`dir_exists<class_DirAccess_method_dir_exists>` **(** :ref:`String<class_String>` path **)**                                                                                      |
   +---------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                           | :ref:`dir_exists_absolute<class_DirAccess_method_dir_exists_absolute>` **(** :ref:`String<class_String>` path **)** |static|                                                           |
   +---------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                           | :ref:`file_exists<class_DirAccess_method_file_exists>` **(** :ref:`String<class_String>` path **)**                                                                                    |
   +---------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`String<class_String>`                       | :ref:`get_current_dir<class_DirAccess_method_get_current_dir>` **(** :ref:`bool<class_bool>` include_drive=true **)** |const|                                                          |
   +---------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`int<class_int>`                             | :ref:`get_current_drive<class_DirAccess_method_get_current_drive>` **(** **)**                                                                                                         |
   +---------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`PackedStringArray<class_PackedStringArray>` | :ref:`get_directories<class_DirAccess_method_get_directories>` **(** **)**                                                                                                             |
   +---------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`PackedStringArray<class_PackedStringArray>` | :ref:`get_directories_at<class_DirAccess_method_get_directories_at>` **(** :ref:`String<class_String>` path **)** |static|                                                             |
   +---------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`int<class_int>`                             | :ref:`get_drive_count<class_DirAccess_method_get_drive_count>` **(** **)** |static|                                                                                                    |
   +---------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`String<class_String>`                       | :ref:`get_drive_name<class_DirAccess_method_get_drive_name>` **(** :ref:`int<class_int>` idx **)** |static|                                                                            |
   +---------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`PackedStringArray<class_PackedStringArray>` | :ref:`get_files<class_DirAccess_method_get_files>` **(** **)**                                                                                                                         |
   +---------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`PackedStringArray<class_PackedStringArray>` | :ref:`get_files_at<class_DirAccess_method_get_files_at>` **(** :ref:`String<class_String>` path **)** |static|                                                                         |
   +---------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`String<class_String>`                       | :ref:`get_next<class_DirAccess_method_get_next>` **(** **)**                                                                                                                           |
   +---------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Error<enum_@GlobalScope_Error>`             | :ref:`get_open_error<class_DirAccess_method_get_open_error>` **(** **)** |static|                                                                                                      |
   +---------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`int<class_int>`                             | :ref:`get_space_left<class_DirAccess_method_get_space_left>` **(** **)**                                                                                                               |
   +---------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                           | :ref:`is_case_sensitive<class_DirAccess_method_is_case_sensitive>` **(** :ref:`String<class_String>` path **)** |const|                                                                |
   +---------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Error<enum_@GlobalScope_Error>`             | :ref:`list_dir_begin<class_DirAccess_method_list_dir_begin>` **(** **)**                                                                                                               |
   +---------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                              | :ref:`list_dir_end<class_DirAccess_method_list_dir_end>` **(** **)**                                                                                                                   |
   +---------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Error<enum_@GlobalScope_Error>`             | :ref:`make_dir<class_DirAccess_method_make_dir>` **(** :ref:`String<class_String>` path **)**                                                                                          |
   +---------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Error<enum_@GlobalScope_Error>`             | :ref:`make_dir_absolute<class_DirAccess_method_make_dir_absolute>` **(** :ref:`String<class_String>` path **)** |static|                                                               |
   +---------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Error<enum_@GlobalScope_Error>`             | :ref:`make_dir_recursive<class_DirAccess_method_make_dir_recursive>` **(** :ref:`String<class_String>` path **)**                                                                      |
   +---------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Error<enum_@GlobalScope_Error>`             | :ref:`make_dir_recursive_absolute<class_DirAccess_method_make_dir_recursive_absolute>` **(** :ref:`String<class_String>` path **)** |static|                                           |
   +---------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`DirAccess<class_DirAccess>`                 | :ref:`open<class_DirAccess_method_open>` **(** :ref:`String<class_String>` path **)** |static|                                                                                         |
   +---------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Error<enum_@GlobalScope_Error>`             | :ref:`remove<class_DirAccess_method_remove>` **(** :ref:`String<class_String>` path **)**                                                                                              |
   +---------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Error<enum_@GlobalScope_Error>`             | :ref:`remove_absolute<class_DirAccess_method_remove_absolute>` **(** :ref:`String<class_String>` path **)** |static|                                                                   |
   +---------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Error<enum_@GlobalScope_Error>`             | :ref:`rename<class_DirAccess_method_rename>` **(** :ref:`String<class_String>` from, :ref:`String<class_String>` to **)**                                                              |
   +---------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Error<enum_@GlobalScope_Error>`             | :ref:`rename_absolute<class_DirAccess_method_rename_absolute>` **(** :ref:`String<class_String>` from, :ref:`String<class_String>` to **)** |static|                                   |
   +---------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

属性说明
--------

.. _class_DirAccess_property_include_hidden:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **include_hidden**

.. rst-class:: classref-property-setget

- void **set_include_hidden** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **get_include_hidden** **(** **)**

如果为 ``true``\ ，则在导航目录时包含隐藏文件。

影响 :ref:`list_dir_begin<class_DirAccess_method_list_dir_begin>`\ 、\ :ref:`get_directories<class_DirAccess_method_get_directories>`\ 、\ :ref:`get_files<class_DirAccess_method_get_files>`\ 。

.. rst-class:: classref-item-separator

----

.. _class_DirAccess_property_include_navigational:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **include_navigational**

.. rst-class:: classref-property-setget

- void **set_include_navigational** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **get_include_navigational** **(** **)**

如果为 ``true``\ ，则在导航目录时包含 ``.`` 和 ``..``\ 。

影响 :ref:`list_dir_begin<class_DirAccess_method_list_dir_begin>` 和 :ref:`get_directories<class_DirAccess_method_get_directories>`\ 。

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

方法说明
--------

.. _class_DirAccess_method_change_dir:

.. rst-class:: classref-method

:ref:`Error<enum_@GlobalScope_Error>` **change_dir** **(** :ref:`String<class_String>` to_dir **)**

将当前打开的目录改为作为参数传递的目录。该参数可以是相对于当前目录的（例如 ``newdir`` 或 ``../newdir``\ ），也可以是绝对路径（例如 ``/tmp/newdir`` 或 ``res://somedir/newdir``\ ）。

返回 :ref:`Error<enum_@GlobalScope_Error>` 错误码常量之一（成功时为 :ref:`@GlobalScope.OK<class_@GlobalScope_constant_OK>`\ ）。

\ **注意：**\ 新目录必须在相同范围内，例如当在 ``res://`` 中打开目录时，无法将其更改为 ``user://`` 目录。如果需要在另一个访问范围中打开目录，请使用 :ref:`open<class_DirAccess_method_open>` 创建一个新实例。

.. rst-class:: classref-item-separator

----

.. _class_DirAccess_method_copy:

.. rst-class:: classref-method

:ref:`Error<enum_@GlobalScope_Error>` **copy** **(** :ref:`String<class_String>` from, :ref:`String<class_String>` to, :ref:`int<class_int>` chmod_flags=-1 **)**

将 ``from`` 文件复制到 ``to`` 目标位置。两个参数都应该是文件的路径，可以是相对路径，也可以是绝对路径。如果目标文件存在并且没有访问保护，则它将被覆盖。

如果 ``chmod_flags`` 不同于 ``-1``\ ，且如果在当前操作系统上可用，目标路径的 Unix 权限将设置为提供的值。

返回 :ref:`Error<enum_@GlobalScope_Error>` 错误码常量之一（成功时为 :ref:`@GlobalScope.OK<class_@GlobalScope_constant_OK>`\ ）。

.. rst-class:: classref-item-separator

----

.. _class_DirAccess_method_copy_absolute:

.. rst-class:: classref-method

:ref:`Error<enum_@GlobalScope_Error>` **copy_absolute** **(** :ref:`String<class_String>` from, :ref:`String<class_String>` to, :ref:`int<class_int>` chmod_flags=-1 **)** |static|

静态版本的 :ref:`copy<class_DirAccess_method_copy>`\ 。仅支持绝对路径。

.. rst-class:: classref-item-separator

----

.. _class_DirAccess_method_current_is_dir:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **current_is_dir** **(** **)** |const|

返回上一次 :ref:`get_next<class_DirAccess_method_get_next>` 调用处理的当前项目是否为目录（\ ``.`` 和 ``.`` 属于目录）。

.. rst-class:: classref-item-separator

----

.. _class_DirAccess_method_dir_exists:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **dir_exists** **(** :ref:`String<class_String>` path **)**

返回目标目录是否存在。参数可以是相对于当前目录的路径，也可以是绝对路径。

.. rst-class:: classref-item-separator

----

.. _class_DirAccess_method_dir_exists_absolute:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **dir_exists_absolute** **(** :ref:`String<class_String>` path **)** |static|

静态版本的 :ref:`dir_exists<class_DirAccess_method_dir_exists>`\ 。仅支持绝对路径。

.. rst-class:: classref-item-separator

----

.. _class_DirAccess_method_file_exists:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **file_exists** **(** :ref:`String<class_String>` path **)**

返回目标文件是否存在。参数可以是相对于当前目录的路径，也可以是绝对路径。

对于静态等效项，请使用 :ref:`FileAccess.file_exists<class_FileAccess_method_file_exists>`\ 。

.. rst-class:: classref-item-separator

----

.. _class_DirAccess_method_get_current_dir:

.. rst-class:: classref-method

:ref:`String<class_String>` **get_current_dir** **(** :ref:`bool<class_bool>` include_drive=true **)** |const|

返回当前打开目录的绝对路径（例如 ``res://文件夹`` 或 ``C:\tmp\文件夹``\ ）。

.. rst-class:: classref-item-separator

----

.. _class_DirAccess_method_get_current_drive:

.. rst-class:: classref-method

:ref:`int<class_int>` **get_current_drive** **(** **)**

返回当前打开目录的驱动器索引。要将返回的索引转换为驱动器名称，请参阅 :ref:`get_drive_name<class_DirAccess_method_get_drive_name>`\ 。

.. rst-class:: classref-item-separator

----

.. _class_DirAccess_method_get_directories:

.. rst-class:: classref-method

:ref:`PackedStringArray<class_PackedStringArray>` **get_directories** **(** **)**

返回该目录内容的文件名 :ref:`PackedStringArray<class_PackedStringArray>`\ ，不含文件。该数组按字母排序。

受 :ref:`include_hidden<class_DirAccess_property_include_hidden>` 和 :ref:`include_navigational<class_DirAccess_property_include_navigational>` 的影响。

.. rst-class:: classref-item-separator

----

.. _class_DirAccess_method_get_directories_at:

.. rst-class:: classref-method

:ref:`PackedStringArray<class_PackedStringArray>` **get_directories_at** **(** :ref:`String<class_String>` path **)** |static|

返回位于给定路径 ``path`` 的目录内容的文件名 :ref:`PackedStringArray<class_PackedStringArray>`\ ，不含文件。该数组按字母排序。

如果你想要对包括的内容有更多的控制，请使用 :ref:`get_directories<class_DirAccess_method_get_directories>`\ 。

.. rst-class:: classref-item-separator

----

.. _class_DirAccess_method_get_drive_count:

.. rst-class:: classref-method

:ref:`int<class_int>` **get_drive_count** **(** **)** |static|

在 Windows 上，返回挂载在当前文件系统上的驱动器（分区）数量。

在 macOS 上，返回挂载卷的数量。

在 Linux 上，返回挂载卷与 GTK 3 书签的数量。

在其他平台上，该方法返回 0。

.. rst-class:: classref-item-separator

----

.. _class_DirAccess_method_get_drive_name:

.. rst-class:: classref-method

:ref:`String<class_String>` **get_drive_name** **(** :ref:`int<class_int>` idx **)** |static|

在 Windows 上，返回作为参数传递的驱动器（分区）的名称（例如 ``C:``\ ）。

在 macOS 上，返回作为参数传递的挂载卷的路径。

在 Linux 上，返回作为参数传递的挂载卷或 GTK 3 书签的路径。

在其他平台上，或者当请求的驱动器不存在时，该方法会返回空的 String。

.. rst-class:: classref-item-separator

----

.. _class_DirAccess_method_get_files:

.. rst-class:: classref-method

:ref:`PackedStringArray<class_PackedStringArray>` **get_files** **(** **)**

返回目录内容的文件名 :ref:`PackedStringArray<class_PackedStringArray>`\ ，不含目录。该数组按字母排序。

受 :ref:`include_hidden<class_DirAccess_property_include_hidden>` 的影响。

\ **注意：**\ 在导出后的项目中对 ``res://`` 使用时，只会返回确实在 PCK 的给定文件夹中存在的文件。在实践中，导入后的资源是存放在顶层的 ``.godot`` 文件夹中的，因此只会返回 ``*.gd`` 和 ``*.import`` 文件的路径（以及 ``project.godot`` 或者 ``project.binary`` 和项目图标等文件）。导出后的项目中，返回的列表也会因为 :ref:`ProjectSettings.editor/export/convert_text_resources_to_binary<class_ProjectSettings_property_editor/export/convert_text_resources_to_binary>` 是否为 ``true`` 而变化。

.. rst-class:: classref-item-separator

----

.. _class_DirAccess_method_get_files_at:

.. rst-class:: classref-method

:ref:`PackedStringArray<class_PackedStringArray>` **get_files_at** **(** :ref:`String<class_String>` path **)** |static|

返回位于给定路径 ``path`` 的目录内容的文件名 :ref:`PackedStringArray<class_PackedStringArray>`\ ，不含目录。该数组按字母排序。

如果你想要对包括的内容有更多的控制，请使用 :ref:`get_files<class_DirAccess_method_get_files>`\ 。

.. rst-class:: classref-item-separator

----

.. _class_DirAccess_method_get_next:

.. rst-class:: classref-method

:ref:`String<class_String>` **get_next** **(** **)**

返回当前目录中的下一个元素（文件或目录）。

返回的是文件或目录的名称（不是完整路径）。完全处理完流之后，该方法会返回空 :ref:`String<class_String>` 并自动将流关闭（即此时不必再调用 :ref:`list_dir_end<class_DirAccess_method_list_dir_end>`\ ）。

.. rst-class:: classref-item-separator

----

.. _class_DirAccess_method_get_open_error:

.. rst-class:: classref-method

:ref:`Error<enum_@GlobalScope_Error>` **get_open_error** **(** **)** |static|

返回当前线程中最后一次 :ref:`open<class_DirAccess_method_open>` 调用的结果。

.. rst-class:: classref-item-separator

----

.. _class_DirAccess_method_get_space_left:

.. rst-class:: classref-method

:ref:`int<class_int>` **get_space_left** **(** **)**

返回当前目录所在磁盘的可用空间，单位为字节。如果该平台查询可用空间的方法失败，则返回 ``0``\ 。

.. rst-class:: classref-item-separator

----

.. _class_DirAccess_method_is_case_sensitive:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **is_case_sensitive** **(** :ref:`String<class_String>` path **)** |const|

如果文件系统或目录使用区分大小写的文件名，则返回 ``true``\ 。

\ **注意：**\ 该方法在 macOS、Linux（仅对于 EXT4 和 F2FS 文件系统）和 Windows 上实现。在其他平台上，它始终返回 ``true``\ 。

.. rst-class:: classref-item-separator

----

.. _class_DirAccess_method_list_dir_begin:

.. rst-class:: classref-method

:ref:`Error<enum_@GlobalScope_Error>` **list_dir_begin** **(** **)**

初始化流，用于使用 :ref:`get_next<class_DirAccess_method_get_next>` 函数列出所有文件和目录，如果需要还会关闭目前打开的流。处理完流之后，一般应使用 :ref:`list_dir_end<class_DirAccess_method_list_dir_end>` 关闭。

受 :ref:`include_hidden<class_DirAccess_property_include_hidden>` 和 :ref:`include_navigational<class_DirAccess_property_include_navigational>` 的影响。

\ **注意：**\ 该方法返回的文件和目录顺序是不确定的，不同操作系统也可能不同。如果你想要获取按字母排序的文件或文件夹列表，请使用 :ref:`get_files<class_DirAccess_method_get_files>` 或 :ref:`get_directories<class_DirAccess_method_get_directories>`\ 。

.. rst-class:: classref-item-separator

----

.. _class_DirAccess_method_list_dir_end:

.. rst-class:: classref-method

void **list_dir_end** **(** **)**

关闭用 :ref:`list_dir_begin<class_DirAccess_method_list_dir_begin>` 打开的当前流（并不关注是否已经用 :ref:`get_next<class_DirAccess_method_get_next>` 完成处理）。

.. rst-class:: classref-item-separator

----

.. _class_DirAccess_method_make_dir:

.. rst-class:: classref-method

:ref:`Error<enum_@GlobalScope_Error>` **make_dir** **(** :ref:`String<class_String>` path **)**

创建目录。参数可以相对于当前目录，也可以是绝对路径。目标目录应该位于已经存在的目录中（递归创建完整的路径请参阅 :ref:`make_dir_recursive<class_DirAccess_method_make_dir_recursive>`\ ）。

返回 :ref:`Error<enum_@GlobalScope_Error>` 错误码常量（成功时为 :ref:`@GlobalScope.OK<class_@GlobalScope_constant_OK>`\ ）。

.. rst-class:: classref-item-separator

----

.. _class_DirAccess_method_make_dir_absolute:

.. rst-class:: classref-method

:ref:`Error<enum_@GlobalScope_Error>` **make_dir_absolute** **(** :ref:`String<class_String>` path **)** |static|

静态版本的 :ref:`make_dir<class_DirAccess_method_make_dir>`\ 。仅支持绝对路径。

.. rst-class:: classref-item-separator

----

.. _class_DirAccess_method_make_dir_recursive:

.. rst-class:: classref-method

:ref:`Error<enum_@GlobalScope_Error>` **make_dir_recursive** **(** :ref:`String<class_String>` path **)**

递归调用 :ref:`make_dir<class_DirAccess_method_make_dir>` 方法，创建目标目录及其路径中所有必要的中间目录。参数可以相对于当前目录，也可以是绝对路径。

返回 :ref:`Error<enum_@GlobalScope_Error>` 错误码常量（成功时为 :ref:`@GlobalScope.OK<class_@GlobalScope_constant_OK>`\ ）。

.. rst-class:: classref-item-separator

----

.. _class_DirAccess_method_make_dir_recursive_absolute:

.. rst-class:: classref-method

:ref:`Error<enum_@GlobalScope_Error>` **make_dir_recursive_absolute** **(** :ref:`String<class_String>` path **)** |static|

静态版本的 :ref:`make_dir_recursive<class_DirAccess_method_make_dir_recursive>`\ 。仅支持绝对路径。

.. rst-class:: classref-item-separator

----

.. _class_DirAccess_method_open:

.. rst-class:: classref-method

:ref:`DirAccess<class_DirAccess>` **open** **(** :ref:`String<class_String>` path **)** |static|

新建 **DirAccess** 对象并打开文件系统中的某个现存目录。\ ``path`` 参数可以是在项目树中（\ ``res://folder``\ ）、用户目录中（\ ``user://folder``\ ），也可以是用户文件系统的绝对路径（例如 ``/tmp/folder`` 或 ``C:\tmp\folder``\ ）。

如果打开目录失败，则返回 ``null``\ 。你可以使用 :ref:`get_open_error<class_DirAccess_method_get_open_error>` 来查看发生的错误。

.. rst-class:: classref-item-separator

----

.. _class_DirAccess_method_remove:

.. rst-class:: classref-method

:ref:`Error<enum_@GlobalScope_Error>` **remove** **(** :ref:`String<class_String>` path **)**

将目标文件或空目录永久删除。参数可以相对于当前目录，也可以是绝对路径。如果目标目录非空，则操作失败。

如果你不想永久删除该文件/目录，请改用 :ref:`OS.move_to_trash<class_OS_method_move_to_trash>`\ 。

返回 :ref:`Error<enum_@GlobalScope_Error>` 错误码常量（成功时为 :ref:`@GlobalScope.OK<class_@GlobalScope_constant_OK>`\ ）。

.. rst-class:: classref-item-separator

----

.. _class_DirAccess_method_remove_absolute:

.. rst-class:: classref-method

:ref:`Error<enum_@GlobalScope_Error>` **remove_absolute** **(** :ref:`String<class_String>` path **)** |static|

静态版本的 :ref:`remove<class_DirAccess_method_remove>`\ 。仅支持绝对路径。

.. rst-class:: classref-item-separator

----

.. _class_DirAccess_method_rename:

.. rst-class:: classref-method

:ref:`Error<enum_@GlobalScope_Error>` **rename** **(** :ref:`String<class_String>` from, :ref:`String<class_String>` to **)**

将 ``from`` 文件或目录重命名为（移动至）\ ``to`` 目标。两个参数都应该是文件或目录的路径，可以是相对路径也可以是绝对路径。如果目标文件或目录已存在，并且没有写保护，则会被覆盖。

返回 :ref:`Error<enum_@GlobalScope_Error>` 错误码常量（成功时为 :ref:`@GlobalScope.OK<class_@GlobalScope_constant_OK>`\ ）。

.. rst-class:: classref-item-separator

----

.. _class_DirAccess_method_rename_absolute:

.. rst-class:: classref-method

:ref:`Error<enum_@GlobalScope_Error>` **rename_absolute** **(** :ref:`String<class_String>` from, :ref:`String<class_String>` to **)** |static|

静态版本的 :ref:`rename<class_DirAccess_method_rename>`\ 。仅支持绝对路径。

.. |virtual| replace:: :abbr:`virtual (本方法通常需要用户覆盖才能生效。)`
.. |const| replace:: :abbr:`const (本方法没有副作用。不会修改该实例的任何成员变量。)`
.. |vararg| replace:: :abbr:`vararg (本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。)`
.. |constructor| replace:: :abbr:`constructor (本方法用于构造某个类型。)`
.. |static| replace:: :abbr:`static (调用本方法无需实例，所以可以直接使用类名调用。)`
.. |operator| replace:: :abbr:`operator (本方法描述的是使用本类型作为左操作数的有效操作符。)`
.. |bitfield| replace:: :abbr:`BitField (这个值是由下列标志构成的位掩码整数。)`
