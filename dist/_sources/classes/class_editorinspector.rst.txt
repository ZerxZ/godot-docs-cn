:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Godot engine sources.
.. Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.
.. XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/EditorInspector.xml.

.. _class_EditorInspector:

EditorInspector
===============

**继承：** :ref:`ScrollContainer<class_ScrollContainer>` **<** :ref:`Container<class_Container>` **<** :ref:`Control<class_Control>` **<** :ref:`CanvasItem<class_CanvasItem>` **<** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

用于编辑对象属性的控件。

.. rst-class:: classref-introduction-group

描述
----

这是为编辑器的“设置”对话框、“检查器”面板等实现属性编辑的控件。要获取编辑器的“检查器”面板中所使用的 **EditorInspector**\ ，请使用 :ref:`EditorInterface.get_inspector<class_EditorInterface_method_get_inspector>`\ 。

\ **EditorInspector** 展示属性的顺序与 :ref:`Object.get_property_list<class_Object_method_get_property_list>` 返回的数组一致。

如果属性的名称为路径形式（即包含正斜杠），\ **EditorInspector** 会为该路径上的各个“目录”创建嵌套的部分。例如，如果某个属性名为 ``highlighting/gdscript/node_path_color``\ ，那么就会显示为“Node Path Color”，位于嵌套在“Highlighting”部分的“GDScript”部分中。

如果属性包含 :ref:`@GlobalScope.PROPERTY_USAGE_GROUP<class_@GlobalScope_constant_PROPERTY_USAGE_GROUP>` 用法，就会将其后续属性中，名称以其提示字符串开头的属性合为一组。如果遇到不以该提示字符串开头的属性，或者开始了一个新的分组，那么这个分组就会结束。分组名称为空的效果为结束当前分组。\ **EditorInspector** 会为每个分组都创建一个顶层的部分。例如，如果有个包含分组用法的属性名叫 ``Collide With``\ ，其提示字符串为 ``collide_with_``\ ，那么后续的 ``collide_with_area`` 属性就会以“Area”的名称出现在“Collide With”部分中。另外还有一种特殊情况：提示字符串包含属性名称时，该属性也会被划入该分组。这样做的目的是将类似 ``font``\ 、\ ``font_color``\ 、\ ``font_size`` 的属性分在一起（使用 ``font_`` 提示字符串）

如果属性包含 :ref:`@GlobalScope.PROPERTY_USAGE_SUBGROUP<class_@GlobalScope_constant_PROPERTY_USAGE_SUBGROUP>` 用法，就会用和分组一样的方法创建子分组，每个子分组都会创建一个二级部分。

\ **注意：**\ 与根据路径形式的名称而创建的部分不同，\ **EditorInspector** 不会对根据分组创建的部分的名称进行首字母大写。因此，包含分组用法的属性通常使用首字母大写的名称，而不是 snake_case。

.. rst-class:: classref-reftable-group

属性
----

.. table::
   :widths: auto

   +----------------------------------------------------+------------------------+-------------------------------------------------------------------------------------------------+
   | :ref:`ScrollMode<enum_ScrollContainer_ScrollMode>` | horizontal_scroll_mode | ``0`` (overrides :ref:`ScrollContainer<class_ScrollContainer_property_horizontal_scroll_mode>`) |
   +----------------------------------------------------+------------------------+-------------------------------------------------------------------------------------------------+

.. rst-class:: classref-reftable-group

方法
----

.. table::
   :widths: auto

   +-----------------------------+----------------------------------------------------------------------------------------------+
   | :ref:`Object<class_Object>` | :ref:`get_edited_object<class_EditorInspector_method_get_edited_object>` **(** **)**         |
   +-----------------------------+----------------------------------------------------------------------------------------------+
   | :ref:`String<class_String>` | :ref:`get_selected_path<class_EditorInspector_method_get_selected_path>` **(** **)** |const| |
   +-----------------------------+----------------------------------------------------------------------------------------------+

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

信号
----

.. _class_EditorInspector_signal_edited_object_changed:

.. rst-class:: classref-signal

**edited_object_changed** **(** **)**

当检查器正在编辑的对象发生更改时触发。

.. rst-class:: classref-item-separator

----

.. _class_EditorInspector_signal_object_id_selected:

.. rst-class:: classref-signal

**object_id_selected** **(** :ref:`int<class_int>` id **)**

在检查器中按下 :ref:`Object<class_Object>` 的“编辑”按钮时发出。这主要用于远程场景树检查器。

.. rst-class:: classref-item-separator

----

.. _class_EditorInspector_signal_property_deleted:

.. rst-class:: classref-signal

**property_deleted** **(** :ref:`String<class_String>` property **)**

当从检查器中移除属性时触发。

.. rst-class:: classref-item-separator

----

.. _class_EditorInspector_signal_property_edited:

.. rst-class:: classref-signal

**property_edited** **(** :ref:`String<class_String>` property **)**

在检查器中编辑属性时触发。

.. rst-class:: classref-item-separator

----

.. _class_EditorInspector_signal_property_keyed:

.. rst-class:: classref-signal

**property_keyed** **(** :ref:`String<class_String>` property, :ref:`Variant<class_Variant>` value, :ref:`bool<class_bool>` advance **)**

当属性在检查器中被键入时触发。当动画面板打开时，可通过点击属性旁边的“钥匙”图标为属性添加关键帧。

.. rst-class:: classref-item-separator

----

.. _class_EditorInspector_signal_property_selected:

.. rst-class:: classref-signal

**property_selected** **(** :ref:`String<class_String>` property **)**

在检查器中选择属性时触发。

.. rst-class:: classref-item-separator

----

.. _class_EditorInspector_signal_property_toggled:

.. rst-class:: classref-signal

**property_toggled** **(** :ref:`String<class_String>` property, :ref:`bool<class_bool>` checked **)**

在检查器中切换布尔属性时发出。

\ **注意：**\ 如果启用了内部 ``autoclear`` 属性，则该信号永远不会触发。由于该属性在编辑器检查器中始终处于启用状态，因此编辑器本身绝不会发出该信号。

.. rst-class:: classref-item-separator

----

.. _class_EditorInspector_signal_resource_selected:

.. rst-class:: classref-signal

**resource_selected** **(** :ref:`Resource<class_Resource>` resource, :ref:`String<class_String>` path **)**

在检查器中选择资源时触发。

.. rst-class:: classref-item-separator

----

.. _class_EditorInspector_signal_restart_requested:

.. rst-class:: classref-signal

**restart_requested** **(** **)**

在检查器中编辑需要重启应用的属性时触发。仅在项目设置和编辑器设置中使用。

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

方法说明
--------

.. _class_EditorInspector_method_get_edited_object:

.. rst-class:: classref-method

:ref:`Object<class_Object>` **get_edited_object** **(** **)**

返回当前在该检查器中选择的对象。

.. rst-class:: classref-item-separator

----

.. _class_EditorInspector_method_get_selected_path:

.. rst-class:: classref-method

:ref:`String<class_String>` **get_selected_path** **(** **)** |const|

获取当前选定属性的路径。

.. |virtual| replace:: :abbr:`virtual (本方法通常需要用户覆盖才能生效。)`
.. |const| replace:: :abbr:`const (本方法没有副作用。不会修改该实例的任何成员变量。)`
.. |vararg| replace:: :abbr:`vararg (本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。)`
.. |constructor| replace:: :abbr:`constructor (本方法用于构造某个类型。)`
.. |static| replace:: :abbr:`static (调用本方法无需实例，所以可以直接使用类名调用。)`
.. |operator| replace:: :abbr:`operator (本方法描述的是使用本类型作为左操作数的有效操作符。)`
.. |bitfield| replace:: :abbr:`BitField (这个值是由下列标志构成的位掩码整数。)`
