:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Godot engine sources.
.. Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.
.. XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/InputEventMIDI.xml.

.. _class_InputEventMIDI:

InputEventMIDI
==============

**继承：** :ref:`InputEvent<class_InputEvent>` **<** :ref:`Resource<class_Resource>` **<** :ref:`RefCounted<class_RefCounted>` **<** :ref:`Object<class_Object>`

代表来自 MIDI 设备的输入事件，例如钢琴。

.. rst-class:: classref-introduction-group

描述
----

InputEventMIDI 允许从钢琴等 MIDI（Musical Instrument Digital Interface）设备接收输入事件。

MIDI 信号可以通过 5 针 MIDI 连接器或 USB 发送，如果你的设备支持这两种方式，请务必检查设备中的设置以查看它使用的是哪种输出。

要从 MIDI 设备接收输入事件，需要调用 :ref:`OS.open_midi_inputs<class_OS_method_open_midi_inputs>`\ 。可以使用 :ref:`OS.get_connected_midi_inputs<class_OS_method_get_connected_midi_inputs>` 检查检测到哪些设备。


.. tabs::

 .. code-tab:: gdscript

    func _ready():
        OS.open_midi_inputs()
        print(OS.get_connected_midi_inputs())
    
    func _input(input_event):
        if input_event is InputEventMIDI:
            _print_midi_info(input_event)
    
    func _print_midi_info(midi_event: InputEventMIDI):
        print(midi_event)
        print("Channel " + str(midi_event.channel))
        print("Message " + str(midi_event.message))
        print("Pitch " + str(midi_event.pitch))
        print("Velocity " + str(midi_event.velocity))
        print("Instrument " + str(midi_event.instrument))
        print("Pressure " + str(midi_event.pressure))
        print("Controller number: " + str(midi_event.controller_number))
        print("Controller value: " + str(midi_event.controller_value))

 .. code-tab:: csharp

    public override void _Ready()
    {
        OS.OpenMidiInputs();
        GD.Print(OS.GetConnectedMidiInputs());
    }
    
    public override void _Input(InputEvent @event)
    {
        if (@event is InputEventMIDI midiEvent)
        {
            PrintMIDIInfo(midiEvent);
        }
    }
    
    private void PrintMIDIInfo(InputEventMIDI midiEvent)
    {
        GD.Print(midiEvent);
        GD.Print($"Channel {midiEvent.Channel}");
        GD.Print($"Message {midiEvent.Message}");
        GD.Print($"Pitch {midiEvent.Pitch}");
        GD.Print($"Velocity {midiEvent.Velocity}");
        GD.Print($"Instrument {midiEvent.Instrument}");
        GD.Print($"Pressure {midiEvent.Pressure}");
        GD.Print($"Controller number: {midiEvent.ControllerNumber}");
        GD.Print($"Controller value: {midiEvent.ControllerValue}");
    }



请注意，Godot 目前不支持 MIDI 输出，因此无法从 Godot 发出 MIDI 信号。只有 MIDI 输入有效。

.. rst-class:: classref-introduction-group

教程
----

- `MIDI 消息状态字节列表 <https://www.midi.org/specifications-old/item/table-2-expanded-messages-list-status-bytes>`__

- `维基百科通用 MIDI 乐器列表 <https://en.wikipedia.org/wiki/General_MIDI#Program_change_events>`__

- `维基百科钢琴琴键频率列表 <https://en.wikipedia.org/wiki/Piano_key_frequencies#List>`__

.. rst-class:: classref-reftable-group

属性
----

.. table::
   :widths: auto

   +---------------------------------------------------+---------------------------------------------------------------------------+-------+
   | :ref:`int<class_int>`                             | :ref:`channel<class_InputEventMIDI_property_channel>`                     | ``0`` |
   +---------------------------------------------------+---------------------------------------------------------------------------+-------+
   | :ref:`int<class_int>`                             | :ref:`controller_number<class_InputEventMIDI_property_controller_number>` | ``0`` |
   +---------------------------------------------------+---------------------------------------------------------------------------+-------+
   | :ref:`int<class_int>`                             | :ref:`controller_value<class_InputEventMIDI_property_controller_value>`   | ``0`` |
   +---------------------------------------------------+---------------------------------------------------------------------------+-------+
   | :ref:`int<class_int>`                             | :ref:`instrument<class_InputEventMIDI_property_instrument>`               | ``0`` |
   +---------------------------------------------------+---------------------------------------------------------------------------+-------+
   | :ref:`MIDIMessage<enum_@GlobalScope_MIDIMessage>` | :ref:`message<class_InputEventMIDI_property_message>`                     | ``0`` |
   +---------------------------------------------------+---------------------------------------------------------------------------+-------+
   | :ref:`int<class_int>`                             | :ref:`pitch<class_InputEventMIDI_property_pitch>`                         | ``0`` |
   +---------------------------------------------------+---------------------------------------------------------------------------+-------+
   | :ref:`int<class_int>`                             | :ref:`pressure<class_InputEventMIDI_property_pressure>`                   | ``0`` |
   +---------------------------------------------------+---------------------------------------------------------------------------+-------+
   | :ref:`int<class_int>`                             | :ref:`velocity<class_InputEventMIDI_property_velocity>`                   | ``0`` |
   +---------------------------------------------------+---------------------------------------------------------------------------+-------+

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

属性说明
--------

.. _class_InputEventMIDI_property_channel:

.. rst-class:: classref-property

:ref:`int<class_int>` **channel** = ``0``

.. rst-class:: classref-property-setget

- void **set_channel** **(** :ref:`int<class_int>` value **)**
- :ref:`int<class_int>` **get_channel** **(** **)**

这个输入事件的 MIDI 通道。总共有 16 个通道，所以这个值的范围是 0 到 15。MIDI 通道 9 是为打击乐器保留的，其余通道供非打击乐器使用。

.. rst-class:: classref-item-separator

----

.. _class_InputEventMIDI_property_controller_number:

.. rst-class:: classref-property

:ref:`int<class_int>` **controller_number** = ``0``

.. rst-class:: classref-property-setget

- void **set_controller_number** **(** :ref:`int<class_int>` value **)**
- :ref:`int<class_int>` **get_controller_number** **(** **)**

如果消息是 :ref:`@GlobalScope.MIDI_MESSAGE_CONTROL_CHANGE<class_@GlobalScope_constant_MIDI_MESSAGE_CONTROL_CHANGE>`\ ，则表示控制器号，否则为零。控制器包含踏板、推杆等设备。

.. rst-class:: classref-item-separator

----

.. _class_InputEventMIDI_property_controller_value:

.. rst-class:: classref-property

:ref:`int<class_int>` **controller_value** = ``0``

.. rst-class:: classref-property-setget

- void **set_controller_value** **(** :ref:`int<class_int>` value **)**
- :ref:`int<class_int>` **get_controller_value** **(** **)**

如果消息是 :ref:`@GlobalScope.MIDI_MESSAGE_CONTROL_CHANGE<class_@GlobalScope_constant_MIDI_MESSAGE_CONTROL_CHANGE>`\ ，则表示控制器值，否则为零。控制器包含踏板、推杆等设备。

.. rst-class:: classref-item-separator

----

.. _class_InputEventMIDI_property_instrument:

.. rst-class:: classref-property

:ref:`int<class_int>` **instrument** = ``0``

.. rst-class:: classref-property-setget

- void **set_instrument** **(** :ref:`int<class_int>` value **)**
- :ref:`int<class_int>` **get_instrument** **(** **)**

这个输入事件的乐器。这个值的范围是 0 到 127。乐器列表请参考维基百科的 `General MIDI <https://zh.wikipedia.org/zh-cn/General_MIDI#%E9%9F%B3%E8%89%B2%E8%BD%89%E6%8F%9B%E4%BA%8B%E4%BB%B6%EF%BC%88Program_change_events%EF%BC%89>`__ 文中的乐器列表，不过这个值是从 0 开始的，所以请把那张表中的数字都减一。标准钢琴的乐器号为 0。

.. rst-class:: classref-item-separator

----

.. _class_InputEventMIDI_property_message:

.. rst-class:: classref-property

:ref:`MIDIMessage<enum_@GlobalScope_MIDIMessage>` **message** = ``0``

.. rst-class:: classref-property-setget

- void **set_message** **(** :ref:`MIDIMessage<enum_@GlobalScope_MIDIMessage>` value **)**
- :ref:`MIDIMessage<enum_@GlobalScope_MIDIMessage>` **get_message** **(** **)**

返回表示这个 MIDI 信号类型的值，是 :ref:`MIDIMessage<enum_@GlobalScope_MIDIMessage>` 枚举的成员。

对于在 0x80 和 0xEF 之间的 MIDI 消息，这个值返回的是左半部分的比特位，另一半是通道（例：0x94 会变成 0x9）。对于在 0xF0 到 0xFF 之间的 MIDI 消息，这个值是原样返回的。

激活音符时会返回 :ref:`@GlobalScope.MIDI_MESSAGE_NOTE_ON<class_@GlobalScope_constant_MIDI_MESSAGE_NOTE_ON>`\ ，但失活时并不一定会返回 :ref:`@GlobalScope.MIDI_MESSAGE_NOTE_OFF<class_@GlobalScope_constant_MIDI_MESSAGE_NOTE_OFF>`\ ，因此你的代码应该在经过一段时间后将输入处理为停止。

有些 MIDI 设备可能发送速度为零的 :ref:`@GlobalScope.MIDI_MESSAGE_NOTE_ON<class_@GlobalScope_constant_MIDI_MESSAGE_NOTE_ON>` 来代替 :ref:`@GlobalScope.MIDI_MESSAGE_NOTE_OFF<class_@GlobalScope_constant_MIDI_MESSAGE_NOTE_OFF>`\ 。

更多消息请参阅 :ref:`velocity<class_InputEventMIDI_property_velocity>` 中的备注，以及上面链接的 MIDI 消息状态字节列表。

.. rst-class:: classref-item-separator

----

.. _class_InputEventMIDI_property_pitch:

.. rst-class:: classref-property

:ref:`int<class_int>` **pitch** = ``0``

.. rst-class:: classref-property-setget

- void **set_pitch** **(** :ref:`int<class_int>` value **)**
- :ref:`int<class_int>` **get_pitch** **(** **)**

这个 MIDI 信号的音高索引号。这个值的范围为 0 到 127。在钢琴上，中央 C 是 60，而 A440 是 69，更多信息请参阅维基百科钢琴琴键频率表的“MIDI 音符”列。

.. rst-class:: classref-item-separator

----

.. _class_InputEventMIDI_property_pressure:

.. rst-class:: classref-property

:ref:`int<class_int>` **pressure** = ``0``

.. rst-class:: classref-property-setget

- void **set_pressure** **(** :ref:`int<class_int>` value **)**
- :ref:`int<class_int>` **get_pressure** **(** **)**

MIDI 信号的压力。这个值在 0 到 127 之间。对于很多设备，这个值总是 0。

.. rst-class:: classref-item-separator

----

.. _class_InputEventMIDI_property_velocity:

.. rst-class:: classref-property

:ref:`int<class_int>` **velocity** = ``0``

.. rst-class:: classref-property-setget

- void **set_velocity** **(** :ref:`int<class_int>` value **)**
- :ref:`int<class_int>` **get_velocity** **(** **)**

MIDI 信号的速度。这个值在 0 到 127 之间。对于钢琴，这对应的是按键有多快，实际很少超过 110。

\ **注意：**\ 部分 MIDI 设备可能会发送速度为零的 :ref:`@GlobalScope.MIDI_MESSAGE_NOTE_ON<class_@GlobalScope_constant_MIDI_MESSAGE_NOTE_ON>` 并期望进行和 :ref:`@GlobalScope.MIDI_MESSAGE_NOTE_OFF<class_@GlobalScope_constant_MIDI_MESSAGE_NOTE_OFF>` 一样的处理，但因设备实现而异，所以 Godot 会原样汇报事件数据。根据硬件和游戏/应用的需求的不同，可以用几行脚本来可靠地处理这种 MIDI 特质（检查 :ref:`@GlobalScope.MIDI_MESSAGE_NOTE_ON<class_@GlobalScope_constant_MIDI_MESSAGE_NOTE_ON>` 的速度是否为零）。

.. |virtual| replace:: :abbr:`virtual (本方法通常需要用户覆盖才能生效。)`
.. |const| replace:: :abbr:`const (本方法没有副作用。不会修改该实例的任何成员变量。)`
.. |vararg| replace:: :abbr:`vararg (本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。)`
.. |constructor| replace:: :abbr:`constructor (本方法用于构造某个类型。)`
.. |static| replace:: :abbr:`static (调用本方法无需实例，所以可以直接使用类名调用。)`
.. |operator| replace:: :abbr:`operator (本方法描述的是使用本类型作为左操作数的有效操作符。)`
.. |bitfield| replace:: :abbr:`BitField (这个值是由下列标志构成的位掩码整数。)`
