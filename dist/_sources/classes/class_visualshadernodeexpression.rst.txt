:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Godot engine sources.
.. Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.
.. XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/VisualShaderNodeExpression.xml.

.. _class_VisualShaderNodeExpression:

VisualShaderNodeExpression
==========================

**继承：** :ref:`VisualShaderNodeGroupBase<class_VisualShaderNodeGroupBase>` **<** :ref:`VisualShaderNodeResizableBase<class_VisualShaderNodeResizableBase>` **<** :ref:`VisualShaderNode<class_VisualShaderNode>` **<** :ref:`Resource<class_Resource>` **<** :ref:`RefCounted<class_RefCounted>` **<** :ref:`Object<class_Object>`

**派生：** :ref:`VisualShaderNodeGlobalExpression<class_VisualShaderNodeGlobalExpression>`

用Godot着色语言编写的自定义可视化着色器图形表达式。

.. rst-class:: classref-introduction-group

描述
----

自定义 Godot 着色器语言表达式，有自定义数量的输入和输出端口。

所提供的代码会直接注入到着色器图中匹配的着色器函数中（\ ``vertex``\ 、\ ``fragment`` 或 ``light``\ ），所以不能用于声明函数、varying、uniform 或全局常量。这种全局定义见 :ref:`VisualShaderNodeGlobalExpression<class_VisualShaderNodeGlobalExpression>`\ 。

.. rst-class:: classref-reftable-group

属性
----

.. table::
   :widths: auto

   +-----------------------------+-------------------------------------------------------------------------+--------+
   | :ref:`String<class_String>` | :ref:`expression<class_VisualShaderNodeExpression_property_expression>` | ``""`` |
   +-----------------------------+-------------------------------------------------------------------------+--------+

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

属性说明
--------

.. _class_VisualShaderNodeExpression_property_expression:

.. rst-class:: classref-property

:ref:`String<class_String>` **expression** = ``""``

.. rst-class:: classref-property-setget

- void **set_expression** **(** :ref:`String<class_String>` value **)**
- :ref:`String<class_String>` **get_expression** **(** **)**

Godot 着色器语言中的表达式，它将被注入到图形匹配的着色器函数（\ ``vertex``\ 、\ ``fragment`` 或 ``light``\ ）的开头，因此不能用于声明函数、varying、uniform 或全局常量。

.. |virtual| replace:: :abbr:`virtual (本方法通常需要用户覆盖才能生效。)`
.. |const| replace:: :abbr:`const (本方法没有副作用。不会修改该实例的任何成员变量。)`
.. |vararg| replace:: :abbr:`vararg (本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。)`
.. |constructor| replace:: :abbr:`constructor (本方法用于构造某个类型。)`
.. |static| replace:: :abbr:`static (调用本方法无需实例，所以可以直接使用类名调用。)`
.. |operator| replace:: :abbr:`operator (本方法描述的是使用本类型作为左操作数的有效操作符。)`
.. |bitfield| replace:: :abbr:`BitField (这个值是由下列标志构成的位掩码整数。)`
