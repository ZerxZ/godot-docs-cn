:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Godot engine sources.
.. Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.
.. XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/float.xml.

.. _class_float:

float
=====

浮点数内置类型。

.. rst-class:: classref-introduction-group

描述
----

**float** 内置类型是 64 位双精度浮点数，相当于 C++ 中的 ``double``\ 。这个类型有 14 个可靠的十进制小数位精度。\ **float** 的最大值约为 ``1.79769e308``\ ，最小值约为 ``-1.79769e308``\ 。

不过引擎中的许多方法和属性默认使用的都是 32 位单精度浮点数，相当于 C++ 中的 ``float``\ ，有 6 位可靠的十进制小数位精度。Godot 在 :ref:`Vector2<class_Vector2>` 和 :ref:`Vector3<class_Vector3>` 等数据结构中默认使用 32 位浮点数，但如果 Godot 编译时使用了 ``precision=double`` 选项，就会改为 64 位的 double。

使用 **float** 类型进行的数学运算无法保证精确与稳定，经常会产生较小的误差。你通常应该使用 :ref:`@GlobalScope.is_equal_approx<class_@GlobalScope_method_is_equal_approx>` 和 :ref:`@GlobalScope.is_zero_approx<class_@GlobalScope_method_is_zero_approx>` 方法来比较 **float** 值是否相等，不应该用 ``==``\ 。

.. rst-class:: classref-introduction-group

教程
----

- `维基百科：双精度浮点数格式 <https://en.wikipedia.org/wiki/Double-precision_floating-point_format>`__

- `维基百科：单精度浮点数格式 <https://en.wikipedia.org/wiki/Single-precision_floating-point_format>`__

.. rst-class:: classref-reftable-group

构造函数
--------

.. table::
   :widths: auto

   +---------------------------+------------------------------------------------------------------------------------------+
   | :ref:`float<class_float>` | :ref:`float<class_float_constructor_float>` **(** **)**                                  |
   +---------------------------+------------------------------------------------------------------------------------------+
   | :ref:`float<class_float>` | :ref:`float<class_float_constructor_float>` **(** :ref:`float<class_float>` from **)**   |
   +---------------------------+------------------------------------------------------------------------------------------+
   | :ref:`float<class_float>` | :ref:`float<class_float_constructor_float>` **(** :ref:`String<class_String>` from **)** |
   +---------------------------+------------------------------------------------------------------------------------------+
   | :ref:`float<class_float>` | :ref:`float<class_float_constructor_float>` **(** :ref:`bool<class_bool>` from **)**     |
   +---------------------------+------------------------------------------------------------------------------------------+
   | :ref:`float<class_float>` | :ref:`float<class_float_constructor_float>` **(** :ref:`int<class_int>` from **)**       |
   +---------------------------+------------------------------------------------------------------------------------------+

.. rst-class:: classref-reftable-group

操作符
------

.. table::
   :widths: auto

   +-------------------------------------+--------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`             | :ref:`operator !=<class_float_operator_neq_float>` **(** :ref:`float<class_float>` right **)**               |
   +-------------------------------------+--------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`             | :ref:`operator !=<class_float_operator_neq_int>` **(** :ref:`int<class_int>` right **)**                     |
   +-------------------------------------+--------------------------------------------------------------------------------------------------------------+
   | :ref:`Color<class_Color>`           | :ref:`operator *<class_float_operator_mul_Color>` **(** :ref:`Color<class_Color>` right **)**                |
   +-------------------------------------+--------------------------------------------------------------------------------------------------------------+
   | :ref:`Quaternion<class_Quaternion>` | :ref:`operator *<class_float_operator_mul_Quaternion>` **(** :ref:`Quaternion<class_Quaternion>` right **)** |
   +-------------------------------------+--------------------------------------------------------------------------------------------------------------+
   | :ref:`Vector2<class_Vector2>`       | :ref:`operator *<class_float_operator_mul_Vector2>` **(** :ref:`Vector2<class_Vector2>` right **)**          |
   +-------------------------------------+--------------------------------------------------------------------------------------------------------------+
   | :ref:`Vector2<class_Vector2>`       | :ref:`operator *<class_float_operator_mul_Vector2i>` **(** :ref:`Vector2i<class_Vector2i>` right **)**       |
   +-------------------------------------+--------------------------------------------------------------------------------------------------------------+
   | :ref:`Vector3<class_Vector3>`       | :ref:`operator *<class_float_operator_mul_Vector3>` **(** :ref:`Vector3<class_Vector3>` right **)**          |
   +-------------------------------------+--------------------------------------------------------------------------------------------------------------+
   | :ref:`Vector3<class_Vector3>`       | :ref:`operator *<class_float_operator_mul_Vector3i>` **(** :ref:`Vector3i<class_Vector3i>` right **)**       |
   +-------------------------------------+--------------------------------------------------------------------------------------------------------------+
   | :ref:`Vector4<class_Vector4>`       | :ref:`operator *<class_float_operator_mul_Vector4>` **(** :ref:`Vector4<class_Vector4>` right **)**          |
   +-------------------------------------+--------------------------------------------------------------------------------------------------------------+
   | :ref:`Vector4<class_Vector4>`       | :ref:`operator *<class_float_operator_mul_Vector4i>` **(** :ref:`Vector4i<class_Vector4i>` right **)**       |
   +-------------------------------------+--------------------------------------------------------------------------------------------------------------+
   | :ref:`float<class_float>`           | :ref:`operator *<class_float_operator_mul_float>` **(** :ref:`float<class_float>` right **)**                |
   +-------------------------------------+--------------------------------------------------------------------------------------------------------------+
   | :ref:`float<class_float>`           | :ref:`operator *<class_float_operator_mul_int>` **(** :ref:`int<class_int>` right **)**                      |
   +-------------------------------------+--------------------------------------------------------------------------------------------------------------+
   | :ref:`float<class_float>`           | :ref:`operator **<class_float_operator_pow_float>` **(** :ref:`float<class_float>` right **)**               |
   +-------------------------------------+--------------------------------------------------------------------------------------------------------------+
   | :ref:`float<class_float>`           | :ref:`operator **<class_float_operator_pow_int>` **(** :ref:`int<class_int>` right **)**                     |
   +-------------------------------------+--------------------------------------------------------------------------------------------------------------+
   | :ref:`float<class_float>`           | :ref:`operator +<class_float_operator_sum_float>` **(** :ref:`float<class_float>` right **)**                |
   +-------------------------------------+--------------------------------------------------------------------------------------------------------------+
   | :ref:`float<class_float>`           | :ref:`operator +<class_float_operator_sum_int>` **(** :ref:`int<class_int>` right **)**                      |
   +-------------------------------------+--------------------------------------------------------------------------------------------------------------+
   | :ref:`float<class_float>`           | :ref:`operator -<class_float_operator_dif_float>` **(** :ref:`float<class_float>` right **)**                |
   +-------------------------------------+--------------------------------------------------------------------------------------------------------------+
   | :ref:`float<class_float>`           | :ref:`operator -<class_float_operator_dif_int>` **(** :ref:`int<class_int>` right **)**                      |
   +-------------------------------------+--------------------------------------------------------------------------------------------------------------+
   | :ref:`float<class_float>`           | :ref:`operator /<class_float_operator_div_float>` **(** :ref:`float<class_float>` right **)**                |
   +-------------------------------------+--------------------------------------------------------------------------------------------------------------+
   | :ref:`float<class_float>`           | :ref:`operator /<class_float_operator_div_int>` **(** :ref:`int<class_int>` right **)**                      |
   +-------------------------------------+--------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`             | :ref:`operator \<<class_float_operator_lt_float>` **(** :ref:`float<class_float>` right **)**                |
   +-------------------------------------+--------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`             | :ref:`operator \<<class_float_operator_lt_int>` **(** :ref:`int<class_int>` right **)**                      |
   +-------------------------------------+--------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`             | :ref:`operator \<=<class_float_operator_lte_float>` **(** :ref:`float<class_float>` right **)**              |
   +-------------------------------------+--------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`             | :ref:`operator \<=<class_float_operator_lte_int>` **(** :ref:`int<class_int>` right **)**                    |
   +-------------------------------------+--------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`             | :ref:`operator ==<class_float_operator_eq_float>` **(** :ref:`float<class_float>` right **)**                |
   +-------------------------------------+--------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`             | :ref:`operator ==<class_float_operator_eq_int>` **(** :ref:`int<class_int>` right **)**                      |
   +-------------------------------------+--------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`             | :ref:`operator ><class_float_operator_gt_float>` **(** :ref:`float<class_float>` right **)**                 |
   +-------------------------------------+--------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`             | :ref:`operator ><class_float_operator_gt_int>` **(** :ref:`int<class_int>` right **)**                       |
   +-------------------------------------+--------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`             | :ref:`operator >=<class_float_operator_gte_float>` **(** :ref:`float<class_float>` right **)**               |
   +-------------------------------------+--------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`             | :ref:`operator >=<class_float_operator_gte_int>` **(** :ref:`int<class_int>` right **)**                     |
   +-------------------------------------+--------------------------------------------------------------------------------------------------------------+
   | :ref:`float<class_float>`           | :ref:`operator unary+<class_float_operator_unplus>` **(** **)**                                              |
   +-------------------------------------+--------------------------------------------------------------------------------------------------------------+
   | :ref:`float<class_float>`           | :ref:`operator unary-<class_float_operator_unminus>` **(** **)**                                             |
   +-------------------------------------+--------------------------------------------------------------------------------------------------------------+

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

构造函数说明
------------

.. _class_float_constructor_float:

.. rst-class:: classref-constructor

:ref:`float<class_float>` **float** **(** **)**

构造默认初始化的 **float**\ ，会被设为 ``0.0``\ 。

.. rst-class:: classref-item-separator

----

.. rst-class:: classref-constructor

:ref:`float<class_float>` **float** **(** :ref:`float<class_float>` from **)**

构造给定 **float** 的副本。

.. rst-class:: classref-item-separator

----

.. rst-class:: classref-constructor

:ref:`float<class_float>` **float** **(** :ref:`String<class_String>` from **)**

将 :ref:`String<class_String>` 转换为 **float**\ ，遵循与 :ref:`String.to_float<class_String_method_to_float>` 相同的规则。

.. rst-class:: classref-item-separator

----

.. rst-class:: classref-constructor

:ref:`float<class_float>` **float** **(** :ref:`bool<class_bool>` from **)**

将 :ref:`bool<class_bool>` 值转换为浮点值，\ ``float(true)`` 将等于 1.0，\ ``float(false)`` 将等于 0.0。

.. rst-class:: classref-item-separator

----

.. rst-class:: classref-constructor

:ref:`float<class_float>` **float** **(** :ref:`int<class_int>` from **)**

将 :ref:`int<class_int>` 值转换为浮点值，\ ``float(1)`` 将等于 ``1.0``\ 。

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

操作符说明
----------

.. _class_float_operator_neq_float:

.. rst-class:: classref-operator

:ref:`bool<class_bool>` **operator !=** **(** :ref:`float<class_float>` right **)**

如果两个浮点数彼此不同，则返回 ``true``\ 。

\ **注意：**\ :ref:`@GDScript.NAN<class_@GDScript_constant_NAN>` 的行为与其他数字不同。因此，如果包含 NaN，则这个方法的结果可能不准确。

.. rst-class:: classref-item-separator

----

.. _class_float_operator_neq_int:

.. rst-class:: classref-operator

:ref:`bool<class_bool>` **operator !=** **(** :ref:`int<class_int>` right **)**

如果整数的值与浮点数不同，则返回 ``true``\ 。

.. rst-class:: classref-item-separator

----

.. _class_float_operator_mul_Color:

.. rst-class:: classref-operator

:ref:`Color<class_Color>` **operator *** **(** :ref:`Color<class_Color>` right **)**

将该 :ref:`Color<class_Color>` 的每个分量乘以给定的 **float**\ ，包括 Alpha。

::

    print(1.5 * Color(0.5, 0.5, 0.5)) # 输出“(0.75, 0.75, 0.75, 1.5)”

.. rst-class:: classref-item-separator

----

.. _class_float_operator_mul_Quaternion:

.. rst-class:: classref-operator

:ref:`Quaternion<class_Quaternion>` **operator *** **(** :ref:`Quaternion<class_Quaternion>` right **)**

将该 :ref:`Quaternion<class_Quaternion>` 的每个分量乘以给定的 **float**\ 。此操作本身没有意义，但可以用作更大表达式的一部分。

.. rst-class:: classref-item-separator

----

.. _class_float_operator_mul_Vector2:

.. rst-class:: classref-operator

:ref:`Vector2<class_Vector2>` **operator *** **(** :ref:`Vector2<class_Vector2>` right **)**

将该 :ref:`Vector2<class_Vector2>` 的每个分量乘以给定的 **float**\ 。

::

    print(2.5 * Vector2(1, 3)) # 输出 "(2.5, 7.5)"

.. rst-class:: classref-item-separator

----

.. _class_float_operator_mul_Vector2i:

.. rst-class:: classref-operator

:ref:`Vector2<class_Vector2>` **operator *** **(** :ref:`Vector2i<class_Vector2i>` right **)**

将该 :ref:`Vector2i<class_Vector2i>` 的每个分量乘以给定的 **float**\ 。返回的是 :ref:`Vector2<class_Vector2>`\ 。

::

    print(0.9 * Vector2i(10, 15)) # 输出 "(9, 13.5)"

.. rst-class:: classref-item-separator

----

.. _class_float_operator_mul_Vector3:

.. rst-class:: classref-operator

:ref:`Vector3<class_Vector3>` **operator *** **(** :ref:`Vector3<class_Vector3>` right **)**

将该 :ref:`Vector3<class_Vector3>` 的每个分量乘以给定的 **float**\ 。

.. rst-class:: classref-item-separator

----

.. _class_float_operator_mul_Vector3i:

.. rst-class:: classref-operator

:ref:`Vector3<class_Vector3>` **operator *** **(** :ref:`Vector3i<class_Vector3i>` right **)**

将该 :ref:`Vector3i<class_Vector3i>` 的每个分量乘以给定的 **float**\ 。返回的是 :ref:`Vector3<class_Vector3>`\ 。

::

    print(0.9 * Vector3i(10, 15, 20)) # 输出 "(9, 13.5, 18)"

.. rst-class:: classref-item-separator

----

.. _class_float_operator_mul_Vector4:

.. rst-class:: classref-operator

:ref:`Vector4<class_Vector4>` **operator *** **(** :ref:`Vector4<class_Vector4>` right **)**

将该 :ref:`Vector4<class_Vector4>` 的每个分量乘以给定的 **float**\ 。

.. rst-class:: classref-item-separator

----

.. _class_float_operator_mul_Vector4i:

.. rst-class:: classref-operator

:ref:`Vector4<class_Vector4>` **operator *** **(** :ref:`Vector4i<class_Vector4i>` right **)**

将该 :ref:`Vector4i<class_Vector4i>` 的每个分量乘以给定的 **float**\ 。返回的是 :ref:`Vector4<class_Vector4>`\ 。

::

    print(0.9 * Vector4i(10, 15, 20, -10))# 输出 "(9, 13.5, 18, -9)"

.. rst-class:: classref-item-separator

----

.. _class_float_operator_mul_float:

.. rst-class:: classref-operator

:ref:`float<class_float>` **operator *** **(** :ref:`float<class_float>` right **)**

将两个 **float** 相乘。

.. rst-class:: classref-item-separator

----

.. _class_float_operator_mul_int:

.. rst-class:: classref-operator

:ref:`float<class_float>` **operator *** **(** :ref:`int<class_int>` right **)**

将 **float** 和 :ref:`int<class_int>` 相乘。结果是 **float**\ 。

.. rst-class:: classref-item-separator

----

.. _class_float_operator_pow_float:

.. rst-class:: classref-operator

:ref:`float<class_float>` **operator **** **(** :ref:`float<class_float>` right **)**

将 **float** 提升到 **float** 次幂。

::

    print(39.0625**0.25) # 2.5

.. rst-class:: classref-item-separator

----

.. _class_float_operator_pow_int:

.. rst-class:: classref-operator

:ref:`float<class_float>` **operator **** **(** :ref:`int<class_int>` right **)**

将 **float** 提升到 :ref:`int<class_int>` 次幂。结果为 **float**\ 。

::

    print(0.9**3) # 0.729

.. rst-class:: classref-item-separator

----

.. _class_float_operator_sum_float:

.. rst-class:: classref-operator

:ref:`float<class_float>` **operator +** **(** :ref:`float<class_float>` right **)**

将两个浮点数相加。

.. rst-class:: classref-item-separator

----

.. _class_float_operator_sum_int:

.. rst-class:: classref-operator

:ref:`float<class_float>` **operator +** **(** :ref:`int<class_int>` right **)**

将 **float** 加上 :ref:`int<class_int>`\ 。结果为 **float**\ 。

.. rst-class:: classref-item-separator

----

.. _class_float_operator_dif_float:

.. rst-class:: classref-operator

:ref:`float<class_float>` **operator -** **(** :ref:`float<class_float>` right **)**

将一个浮点数减去另一个浮点数。

.. rst-class:: classref-item-separator

----

.. _class_float_operator_dif_int:

.. rst-class:: classref-operator

:ref:`float<class_float>` **operator -** **(** :ref:`int<class_int>` right **)**

将 **float** 减去 :ref:`int<class_int>`\ 。结果为 **float**\ 。

.. rst-class:: classref-item-separator

----

.. _class_float_operator_div_float:

.. rst-class:: classref-operator

:ref:`float<class_float>` **operator /** **(** :ref:`float<class_float>` right **)**

将两个浮点数相除。

.. rst-class:: classref-item-separator

----

.. _class_float_operator_div_int:

.. rst-class:: classref-operator

:ref:`float<class_float>` **operator /** **(** :ref:`int<class_int>` right **)**

将 **float** 除以 :ref:`int<class_int>`\ 。结果是 **float**\ 。

.. rst-class:: classref-item-separator

----

.. _class_float_operator_lt_float:

.. rst-class:: classref-operator

:ref:`bool<class_bool>` **operator <** **(** :ref:`float<class_float>` right **)**

如果左侧的浮点数小于右侧的，则返回 ``true``\ 。

\ **注意：**\ :ref:`@GDScript.NAN<class_@GDScript_constant_NAN>` 的行为与其他数字不同。因此，如果包含 NaN，则这个方法的结果可能不准确。

.. rst-class:: classref-item-separator

----

.. _class_float_operator_lt_int:

.. rst-class:: classref-operator

:ref:`bool<class_bool>` **operator <** **(** :ref:`int<class_int>` right **)**

如果该 **float** 小于给定的 :ref:`int<class_int>`\ ，则返回 ``true``\ 。

.. rst-class:: classref-item-separator

----

.. _class_float_operator_lte_float:

.. rst-class:: classref-operator

:ref:`bool<class_bool>` **operator <=** **(** :ref:`float<class_float>` right **)**

如果左侧的浮点数小于等于右侧的，则返回 ``true``\ 。

\ **注意：**\ :ref:`@GDScript.NAN<class_@GDScript_constant_NAN>` 的行为与其他数字不同。因此，如果包含 NaN，则这个方法的结果可能不准确。

.. rst-class:: classref-item-separator

----

.. _class_float_operator_lte_int:

.. rst-class:: classref-operator

:ref:`bool<class_bool>` **operator <=** **(** :ref:`int<class_int>` right **)**

如果该 **float** 小于等于给定的 :ref:`int<class_int>`\ ，则返回 ``true``\ 。

.. rst-class:: classref-item-separator

----

.. _class_float_operator_eq_float:

.. rst-class:: classref-operator

:ref:`bool<class_bool>` **operator ==** **(** :ref:`float<class_float>` right **)**

如果两个浮点数完全相等，则返回 ``true``\ 。

\ **注意：**\ 由于浮点精度误差，考虑改用更可靠的 :ref:`@GlobalScope.is_equal_approx<class_@GlobalScope_method_is_equal_approx>` 或 :ref:`@GlobalScope.is_zero_approx<class_@GlobalScope_method_is_zero_approx>`\ 。

\ **注意：**\ :ref:`@GDScript.NAN<class_@GDScript_constant_NAN>` 的行为与其他数字不同。因此，如果包含 NaN，则这个方法的结果可能不准确。

.. rst-class:: classref-item-separator

----

.. _class_float_operator_eq_int:

.. rst-class:: classref-operator

:ref:`bool<class_bool>` **operator ==** **(** :ref:`int<class_int>` right **)**

如果该 **float** 等于给定的 :ref:`int<class_int>`\ ，则返回 ``true``\ 。

.. rst-class:: classref-item-separator

----

.. _class_float_operator_gt_float:

.. rst-class:: classref-operator

:ref:`bool<class_bool>` **operator >** **(** :ref:`float<class_float>` right **)**

如果左侧的浮点数大于右侧的，则返回 ``true``\ 。

\ **注意：**\ :ref:`@GDScript.NAN<class_@GDScript_constant_NAN>` 的行为与其他数字不同。因此，如果包含 NaN，则这个方法的结果可能不准确。

.. rst-class:: classref-item-separator

----

.. _class_float_operator_gt_int:

.. rst-class:: classref-operator

:ref:`bool<class_bool>` **operator >** **(** :ref:`int<class_int>` right **)**

如果该 **float** 大于给定的 :ref:`int<class_int>`\ ，则返回 ``true``\ 。

.. rst-class:: classref-item-separator

----

.. _class_float_operator_gte_float:

.. rst-class:: classref-operator

:ref:`bool<class_bool>` **operator >=** **(** :ref:`float<class_float>` right **)**

如果左侧的浮点数大于等于右侧的，则返回 ``true``\ 。

\ **注意：**\ :ref:`@GDScript.NAN<class_@GDScript_constant_NAN>` 的行为与其他数字不同。因此，如果包含 NaN，则这个方法的结果可能不准确。

.. rst-class:: classref-item-separator

----

.. _class_float_operator_gte_int:

.. rst-class:: classref-operator

:ref:`bool<class_bool>` **operator >=** **(** :ref:`int<class_int>` right **)**

如果该 **float** 大于等于给定的 :ref:`int<class_int>`\ ，则返回 ``true``\ 。

.. rst-class:: classref-item-separator

----

.. _class_float_operator_unplus:

.. rst-class:: classref-operator

:ref:`float<class_float>` **operator unary+** **(** **)**

返回与 ``+`` 不存在时相同的值。单目 ``+`` 没有作用，但有时可以使你的代码更具可读性。

.. rst-class:: classref-item-separator

----

.. _class_float_operator_unminus:

.. rst-class:: classref-operator

:ref:`float<class_float>` **operator unary-** **(** **)**

返回该 **float** 的相反数。如果为正数，则将该数变为负数。如果为负数，则将该数变为正数。对于浮点数，数字零既可以是正数，也可以是负数。

.. |virtual| replace:: :abbr:`virtual (本方法通常需要用户覆盖才能生效。)`
.. |const| replace:: :abbr:`const (本方法没有副作用。不会修改该实例的任何成员变量。)`
.. |vararg| replace:: :abbr:`vararg (本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。)`
.. |constructor| replace:: :abbr:`constructor (本方法用于构造某个类型。)`
.. |static| replace:: :abbr:`static (调用本方法无需实例，所以可以直接使用类名调用。)`
.. |operator| replace:: :abbr:`operator (本方法描述的是使用本类型作为左操作数的有效操作符。)`
.. |bitfield| replace:: :abbr:`BitField (这个值是由下列标志构成的位掩码整数。)`
