:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Godot engine sources.
.. Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.
.. XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/Node3D.xml.

.. _class_Node3D:

Node3D
======

**继承：** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

**派生：** :ref:`AudioListener3D<class_AudioListener3D>`, :ref:`AudioStreamPlayer3D<class_AudioStreamPlayer3D>`, :ref:`BoneAttachment3D<class_BoneAttachment3D>`, :ref:`Camera3D<class_Camera3D>`, :ref:`CollisionObject3D<class_CollisionObject3D>`, :ref:`CollisionPolygon3D<class_CollisionPolygon3D>`, :ref:`CollisionShape3D<class_CollisionShape3D>`, :ref:`GridMap<class_GridMap>`, :ref:`ImporterMeshInstance3D<class_ImporterMeshInstance3D>`, :ref:`Joint3D<class_Joint3D>`, :ref:`LightmapProbe<class_LightmapProbe>`, :ref:`Marker3D<class_Marker3D>`, :ref:`NavigationLink3D<class_NavigationLink3D>`, :ref:`NavigationObstacle3D<class_NavigationObstacle3D>`, :ref:`NavigationRegion3D<class_NavigationRegion3D>`, :ref:`OccluderInstance3D<class_OccluderInstance3D>`, :ref:`OpenXRHand<class_OpenXRHand>`, :ref:`Path3D<class_Path3D>`, :ref:`PathFollow3D<class_PathFollow3D>`, :ref:`RayCast3D<class_RayCast3D>`, :ref:`RemoteTransform3D<class_RemoteTransform3D>`, :ref:`ShapeCast3D<class_ShapeCast3D>`, :ref:`Skeleton3D<class_Skeleton3D>`, :ref:`SpringArm3D<class_SpringArm3D>`, :ref:`VehicleWheel3D<class_VehicleWheel3D>`, :ref:`VisualInstance3D<class_VisualInstance3D>`, :ref:`XRNode3D<class_XRNode3D>`, :ref:`XROrigin3D<class_XROrigin3D>`

最基本的 3D 游戏对象，所有 3D 相关节点的父类。

.. rst-class:: classref-introduction-group

描述
----

最基本的 3D 游戏对象，具有 :ref:`Transform3D<class_Transform3D>` 和可见性设置。所有其他的 3D 游戏对象都继承自 **Node3D**\ 。在 3D 项目中，请使用 **Node3D** 作为父节点对子节点进行移动、缩放、旋转和显示/隐藏。

除非该 **Node3D** 对象被设置为顶层，否则仿射操作（旋转、缩放、平移）会在父节点的本地坐标系中进行。在这个坐标系中的仿射操作对应于对 **Node3D** 变换的直接仿射运算。下文中的本地一词指的就是这个坐标系。附加到 **Node3D** 对象本身的坐标系被称为对象本地坐标系。

\ **注意：**\ 除非另有规定，所有有角度参数的方法必须将角度指定为\ *弧度*\ 。请使用 :ref:`@GlobalScope.deg_to_rad<class_@GlobalScope_method_deg_to_rad>` 将度数转换为弧度。

\ **注意：**\ 请注意，从 Godot 4 开始，“Spatial”节点现在被称为“Node3D”。Godot 3.x 中指的“Spatial”节点，均指的是 Godot 4 中的“Node3D”。

.. rst-class:: classref-introduction-group

教程
----

- :doc:`3D 简介 <../tutorials/3d/introduction_to_3d>`

- `所有 3D 演示 <https://github.com/godotengine/godot-demo-projects/tree/master/3d>`__

.. rst-class:: classref-reftable-group

属性
----

.. table::
   :widths: auto

   +-------------------------------------------------------+-------------------------------------------------------------------------------+-----------------------------------------------------+
   | :ref:`Basis<class_Basis>`                             | :ref:`basis<class_Node3D_property_basis>`                                     |                                                     |
   +-------------------------------------------------------+-------------------------------------------------------------------------------+-----------------------------------------------------+
   | :ref:`Basis<class_Basis>`                             | :ref:`global_basis<class_Node3D_property_global_basis>`                       |                                                     |
   +-------------------------------------------------------+-------------------------------------------------------------------------------+-----------------------------------------------------+
   | :ref:`Vector3<class_Vector3>`                         | :ref:`global_position<class_Node3D_property_global_position>`                 |                                                     |
   +-------------------------------------------------------+-------------------------------------------------------------------------------+-----------------------------------------------------+
   | :ref:`Vector3<class_Vector3>`                         | :ref:`global_rotation<class_Node3D_property_global_rotation>`                 |                                                     |
   +-------------------------------------------------------+-------------------------------------------------------------------------------+-----------------------------------------------------+
   | :ref:`Vector3<class_Vector3>`                         | :ref:`global_rotation_degrees<class_Node3D_property_global_rotation_degrees>` |                                                     |
   +-------------------------------------------------------+-------------------------------------------------------------------------------+-----------------------------------------------------+
   | :ref:`Transform3D<class_Transform3D>`                 | :ref:`global_transform<class_Node3D_property_global_transform>`               |                                                     |
   +-------------------------------------------------------+-------------------------------------------------------------------------------+-----------------------------------------------------+
   | :ref:`Vector3<class_Vector3>`                         | :ref:`position<class_Node3D_property_position>`                               | ``Vector3(0, 0, 0)``                                |
   +-------------------------------------------------------+-------------------------------------------------------------------------------+-----------------------------------------------------+
   | :ref:`Quaternion<class_Quaternion>`                   | :ref:`quaternion<class_Node3D_property_quaternion>`                           |                                                     |
   +-------------------------------------------------------+-------------------------------------------------------------------------------+-----------------------------------------------------+
   | :ref:`Vector3<class_Vector3>`                         | :ref:`rotation<class_Node3D_property_rotation>`                               | ``Vector3(0, 0, 0)``                                |
   +-------------------------------------------------------+-------------------------------------------------------------------------------+-----------------------------------------------------+
   | :ref:`Vector3<class_Vector3>`                         | :ref:`rotation_degrees<class_Node3D_property_rotation_degrees>`               |                                                     |
   +-------------------------------------------------------+-------------------------------------------------------------------------------+-----------------------------------------------------+
   | :ref:`RotationEditMode<enum_Node3D_RotationEditMode>` | :ref:`rotation_edit_mode<class_Node3D_property_rotation_edit_mode>`           | ``0``                                               |
   +-------------------------------------------------------+-------------------------------------------------------------------------------+-----------------------------------------------------+
   | :ref:`EulerOrder<enum_@GlobalScope_EulerOrder>`       | :ref:`rotation_order<class_Node3D_property_rotation_order>`                   | ``2``                                               |
   +-------------------------------------------------------+-------------------------------------------------------------------------------+-----------------------------------------------------+
   | :ref:`Vector3<class_Vector3>`                         | :ref:`scale<class_Node3D_property_scale>`                                     | ``Vector3(1, 1, 1)``                                |
   +-------------------------------------------------------+-------------------------------------------------------------------------------+-----------------------------------------------------+
   | :ref:`bool<class_bool>`                               | :ref:`top_level<class_Node3D_property_top_level>`                             | ``false``                                           |
   +-------------------------------------------------------+-------------------------------------------------------------------------------+-----------------------------------------------------+
   | :ref:`Transform3D<class_Transform3D>`                 | :ref:`transform<class_Node3D_property_transform>`                             | ``Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0)`` |
   +-------------------------------------------------------+-------------------------------------------------------------------------------+-----------------------------------------------------+
   | :ref:`NodePath<class_NodePath>`                       | :ref:`visibility_parent<class_Node3D_property_visibility_parent>`             | ``NodePath("")``                                    |
   +-------------------------------------------------------+-------------------------------------------------------------------------------+-----------------------------------------------------+
   | :ref:`bool<class_bool>`                               | :ref:`visible<class_Node3D_property_visible>`                                 | ``true``                                            |
   +-------------------------------------------------------+-------------------------------------------------------------------------------+-----------------------------------------------------+

.. rst-class:: classref-reftable-group

方法
----

.. table::
   :widths: auto

   +-----------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                    | :ref:`add_gizmo<class_Node3D_method_add_gizmo>` **(** :ref:`Node3DGizmo<class_Node3DGizmo>` gizmo **)**                                                                                                                                                            |
   +-----------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                    | :ref:`clear_gizmos<class_Node3D_method_clear_gizmos>` **(** **)**                                                                                                                                                                                                  |
   +-----------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                    | :ref:`clear_subgizmo_selection<class_Node3D_method_clear_subgizmo_selection>` **(** **)**                                                                                                                                                                          |
   +-----------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                    | :ref:`force_update_transform<class_Node3D_method_force_update_transform>` **(** **)**                                                                                                                                                                              |
   +-----------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Node3DGizmo[]<class_Node3DGizmo>` | :ref:`get_gizmos<class_Node3D_method_get_gizmos>` **(** **)** |const|                                                                                                                                                                                              |
   +-----------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Node3D<class_Node3D>`             | :ref:`get_parent_node_3d<class_Node3D_method_get_parent_node_3d>` **(** **)** |const|                                                                                                                                                                              |
   +-----------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`World3D<class_World3D>`           | :ref:`get_world_3d<class_Node3D_method_get_world_3d>` **(** **)** |const|                                                                                                                                                                                          |
   +-----------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                    | :ref:`global_rotate<class_Node3D_method_global_rotate>` **(** :ref:`Vector3<class_Vector3>` axis, :ref:`float<class_float>` angle **)**                                                                                                                            |
   +-----------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                    | :ref:`global_scale<class_Node3D_method_global_scale>` **(** :ref:`Vector3<class_Vector3>` scale **)**                                                                                                                                                              |
   +-----------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                    | :ref:`global_translate<class_Node3D_method_global_translate>` **(** :ref:`Vector3<class_Vector3>` offset **)**                                                                                                                                                     |
   +-----------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                    | :ref:`hide<class_Node3D_method_hide>` **(** **)**                                                                                                                                                                                                                  |
   +-----------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                 | :ref:`is_local_transform_notification_enabled<class_Node3D_method_is_local_transform_notification_enabled>` **(** **)** |const|                                                                                                                                    |
   +-----------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                 | :ref:`is_scale_disabled<class_Node3D_method_is_scale_disabled>` **(** **)** |const|                                                                                                                                                                                |
   +-----------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                 | :ref:`is_transform_notification_enabled<class_Node3D_method_is_transform_notification_enabled>` **(** **)** |const|                                                                                                                                                |
   +-----------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                 | :ref:`is_visible_in_tree<class_Node3D_method_is_visible_in_tree>` **(** **)** |const|                                                                                                                                                                              |
   +-----------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                    | :ref:`look_at<class_Node3D_method_look_at>` **(** :ref:`Vector3<class_Vector3>` target, :ref:`Vector3<class_Vector3>` up=Vector3(0, 1, 0), :ref:`bool<class_bool>` use_model_front=false **)**                                                                     |
   +-----------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                    | :ref:`look_at_from_position<class_Node3D_method_look_at_from_position>` **(** :ref:`Vector3<class_Vector3>` position, :ref:`Vector3<class_Vector3>` target, :ref:`Vector3<class_Vector3>` up=Vector3(0, 1, 0), :ref:`bool<class_bool>` use_model_front=false **)** |
   +-----------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                    | :ref:`orthonormalize<class_Node3D_method_orthonormalize>` **(** **)**                                                                                                                                                                                              |
   +-----------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                    | :ref:`rotate<class_Node3D_method_rotate>` **(** :ref:`Vector3<class_Vector3>` axis, :ref:`float<class_float>` angle **)**                                                                                                                                          |
   +-----------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                    | :ref:`rotate_object_local<class_Node3D_method_rotate_object_local>` **(** :ref:`Vector3<class_Vector3>` axis, :ref:`float<class_float>` angle **)**                                                                                                                |
   +-----------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                    | :ref:`rotate_x<class_Node3D_method_rotate_x>` **(** :ref:`float<class_float>` angle **)**                                                                                                                                                                          |
   +-----------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                    | :ref:`rotate_y<class_Node3D_method_rotate_y>` **(** :ref:`float<class_float>` angle **)**                                                                                                                                                                          |
   +-----------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                    | :ref:`rotate_z<class_Node3D_method_rotate_z>` **(** :ref:`float<class_float>` angle **)**                                                                                                                                                                          |
   +-----------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                    | :ref:`scale_object_local<class_Node3D_method_scale_object_local>` **(** :ref:`Vector3<class_Vector3>` scale **)**                                                                                                                                                  |
   +-----------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                    | :ref:`set_disable_scale<class_Node3D_method_set_disable_scale>` **(** :ref:`bool<class_bool>` disable **)**                                                                                                                                                        |
   +-----------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                    | :ref:`set_identity<class_Node3D_method_set_identity>` **(** **)**                                                                                                                                                                                                  |
   +-----------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                    | :ref:`set_ignore_transform_notification<class_Node3D_method_set_ignore_transform_notification>` **(** :ref:`bool<class_bool>` enabled **)**                                                                                                                        |
   +-----------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                    | :ref:`set_notify_local_transform<class_Node3D_method_set_notify_local_transform>` **(** :ref:`bool<class_bool>` enable **)**                                                                                                                                       |
   +-----------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                    | :ref:`set_notify_transform<class_Node3D_method_set_notify_transform>` **(** :ref:`bool<class_bool>` enable **)**                                                                                                                                                   |
   +-----------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                    | :ref:`set_subgizmo_selection<class_Node3D_method_set_subgizmo_selection>` **(** :ref:`Node3DGizmo<class_Node3DGizmo>` gizmo, :ref:`int<class_int>` id, :ref:`Transform3D<class_Transform3D>` transform **)**                                                       |
   +-----------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                    | :ref:`show<class_Node3D_method_show>` **(** **)**                                                                                                                                                                                                                  |
   +-----------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Vector3<class_Vector3>`           | :ref:`to_global<class_Node3D_method_to_global>` **(** :ref:`Vector3<class_Vector3>` local_point **)** |const|                                                                                                                                                      |
   +-----------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Vector3<class_Vector3>`           | :ref:`to_local<class_Node3D_method_to_local>` **(** :ref:`Vector3<class_Vector3>` global_point **)** |const|                                                                                                                                                       |
   +-----------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                    | :ref:`translate<class_Node3D_method_translate>` **(** :ref:`Vector3<class_Vector3>` offset **)**                                                                                                                                                                   |
   +-----------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                    | :ref:`translate_object_local<class_Node3D_method_translate_object_local>` **(** :ref:`Vector3<class_Vector3>` offset **)**                                                                                                                                         |
   +-----------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                    | :ref:`update_gizmos<class_Node3D_method_update_gizmos>` **(** **)**                                                                                                                                                                                                |
   +-----------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

信号
----

.. _class_Node3D_signal_visibility_changed:

.. rst-class:: classref-signal

**visibility_changed** **(** **)**

当节点可见性更改时触发。

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

枚举
----

.. _enum_Node3D_RotationEditMode:

.. rst-class:: classref-enumeration

enum **RotationEditMode**:

.. _class_Node3D_constant_ROTATION_EDIT_MODE_EULER:

.. rst-class:: classref-enumeration-constant

:ref:`RotationEditMode<enum_Node3D_RotationEditMode>` **ROTATION_EDIT_MODE_EULER** = ``0``

旋转量以 :ref:`Vector3<class_Vector3>` 欧拉角的形式编辑。

.. _class_Node3D_constant_ROTATION_EDIT_MODE_QUATERNION:

.. rst-class:: classref-enumeration-constant

:ref:`RotationEditMode<enum_Node3D_RotationEditMode>` **ROTATION_EDIT_MODE_QUATERNION** = ``1``

旋转量以 :ref:`Quaternion<class_Quaternion>` 的形式编辑。

.. _class_Node3D_constant_ROTATION_EDIT_MODE_BASIS:

.. rst-class:: classref-enumeration-constant

:ref:`RotationEditMode<enum_Node3D_RotationEditMode>` **ROTATION_EDIT_MODE_BASIS** = ``2``

旋转量以 :ref:`Basis<class_Basis>` 的形式编辑。此模式下无法单独编辑 :ref:`scale<class_Node3D_property_scale>`\ 。

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

常量
----

.. _class_Node3D_constant_NOTIFICATION_TRANSFORM_CHANGED:

.. rst-class:: classref-constant

**NOTIFICATION_TRANSFORM_CHANGED** = ``2000``

**Node3D** 节点在自己的全局变换发生改变时，会收到这个通知。这意味着当前节点或者某个父节点的变换发生了改变。

用户需要使用 :ref:`set_notify_transform<class_Node3D_method_set_notify_transform>` 手动申请才能够收到 :ref:`NOTIFICATION_TRANSFORM_CHANGED<class_Node3D_constant_NOTIFICATION_TRANSFORM_CHANGED>`\ 。如果该节点在编辑器环境中，并且拥有至少一个有效的小工具，则也会发送这个通知。

.. _class_Node3D_constant_NOTIFICATION_ENTER_WORLD:

.. rst-class:: classref-constant

**NOTIFICATION_ENTER_WORLD** = ``41``

**Node3D** 节点在注册到新的 :ref:`World3D<class_World3D>` 资源时，会收到这个通知。

.. _class_Node3D_constant_NOTIFICATION_EXIT_WORLD:

.. rst-class:: classref-constant

**NOTIFICATION_EXIT_WORLD** = ``42``

**Node3D** 节点从当前的 :ref:`World3D<class_World3D>` 资源中取消注册时，会收到这个通知。

.. _class_Node3D_constant_NOTIFICATION_VISIBILITY_CHANGED:

.. rst-class:: classref-constant

**NOTIFICATION_VISIBILITY_CHANGED** = ``43``

**Node3D** 节点在其可见性发生变化时，会收到该通知。

.. _class_Node3D_constant_NOTIFICATION_LOCAL_TRANSFORM_CHANGED:

.. rst-class:: classref-constant

**NOTIFICATION_LOCAL_TRANSFORM_CHANGED** = ``44``

**Node3D** 节点在其局部变换发生改变时，会收到这个通知。父节点的变换发生改变时不会收到这个通知。

为了使 :ref:`NOTIFICATION_LOCAL_TRANSFORM_CHANGED<class_Node3D_constant_NOTIFICATION_LOCAL_TRANSFORM_CHANGED>` 起作用，用户首先需要使用 :ref:`set_notify_local_transform<class_Node3D_method_set_notify_local_transform>` 请求它。

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

属性说明
--------

.. _class_Node3D_property_basis:

.. rst-class:: classref-property

:ref:`Basis<class_Basis>` **basis**

.. rst-class:: classref-property-setget

- void **set_basis** **(** :ref:`Basis<class_Basis>` value **)**
- :ref:`Basis<class_Basis>` **get_basis** **(** **)**

直接访问 :ref:`transform<class_Node3D_property_transform>` 属性的 3x3 基。

.. rst-class:: classref-item-separator

----

.. _class_Node3D_property_global_basis:

.. rst-class:: classref-property

:ref:`Basis<class_Basis>` **global_basis**

.. rst-class:: classref-property-setget

- void **set_global_basis** **(** :ref:`Basis<class_Basis>` value **)**
- :ref:`Basis<class_Basis>` **get_global_basis** **(** **)**

这个节点的全局基。与 ``global_transform.basis`` 等价。

.. rst-class:: classref-item-separator

----

.. _class_Node3D_property_global_position:

.. rst-class:: classref-property

:ref:`Vector3<class_Vector3>` **global_position**

.. rst-class:: classref-property-setget

- void **set_global_position** **(** :ref:`Vector3<class_Vector3>` value **)**
- :ref:`Vector3<class_Vector3>` **get_global_position** **(** **)**

这个节点的全局位置。与 ``global_transform.origin`` 等价。

.. rst-class:: classref-item-separator

----

.. _class_Node3D_property_global_rotation:

.. rst-class:: classref-property

:ref:`Vector3<class_Vector3>` **global_rotation**

.. rst-class:: classref-property-setget

- void **set_global_rotation** **(** :ref:`Vector3<class_Vector3>` value **)**
- :ref:`Vector3<class_Vector3>` **get_global_rotation** **(** **)**

全局变换的旋转部分，单位为弧度，以 YXZ 欧拉角的形式表示（X 角、Y 角、Z 角）。

\ **注意：**\ 在数学意义上，旋转是一个矩阵而不是一个向量。这三个欧拉角是旋转矩阵欧拉角参数化的三个独立参数，存储在 :ref:`Vector3<class_Vector3>` 数据结构中并不是因为旋转是一个矢量，而是因为 :ref:`Vector3<class_Vector3>` 是一种方便存储 3 个浮点数的数据结构。因此，对旋转“向量”应用仿射操作是没有意义的。

.. rst-class:: classref-item-separator

----

.. _class_Node3D_property_global_rotation_degrees:

.. rst-class:: classref-property

:ref:`Vector3<class_Vector3>` **global_rotation_degrees**

.. rst-class:: classref-property-setget

- void **set_global_rotation_degrees** **(** :ref:`Vector3<class_Vector3>` value **)**
- :ref:`Vector3<class_Vector3>` **get_global_rotation_degrees** **(** **)**

辅助属性，用于按度数访问 :ref:`global_rotation<class_Node3D_property_global_rotation>` 而不是弧度数。

.. rst-class:: classref-item-separator

----

.. _class_Node3D_property_global_transform:

.. rst-class:: classref-property

:ref:`Transform3D<class_Transform3D>` **global_transform**

.. rst-class:: classref-property-setget

- void **set_global_transform** **(** :ref:`Transform3D<class_Transform3D>` value **)**
- :ref:`Transform3D<class_Transform3D>` **get_global_transform** **(** **)**

该节点在 World3D 空间的（全局）\ :ref:`Transform3D<class_Transform3D>`\ 。

.. rst-class:: classref-item-separator

----

.. _class_Node3D_property_position:

.. rst-class:: classref-property

:ref:`Vector3<class_Vector3>` **position** = ``Vector3(0, 0, 0)``

.. rst-class:: classref-property-setget

- void **set_position** **(** :ref:`Vector3<class_Vector3>` value **)**
- :ref:`Vector3<class_Vector3>` **get_position** **(** **)**

该节点相对于父节点的局部位置或平移。相当于 ``transform.origin``\ 。

.. rst-class:: classref-item-separator

----

.. _class_Node3D_property_quaternion:

.. rst-class:: classref-property

:ref:`Quaternion<class_Quaternion>` **quaternion**

.. rst-class:: classref-property-setget

- void **set_quaternion** **(** :ref:`Quaternion<class_Quaternion>` value **)**
- :ref:`Quaternion<class_Quaternion>` **get_quaternion** **(** **)**

以一个 :ref:`Quaternion<class_Quaternion>` 的形式访问该节点的旋转。该属性非常适合补间复杂的旋转。

.. rst-class:: classref-item-separator

----

.. _class_Node3D_property_rotation:

.. rst-class:: classref-property

:ref:`Vector3<class_Vector3>` **rotation** = ``Vector3(0, 0, 0)``

.. rst-class:: classref-property-setget

- void **set_rotation** **(** :ref:`Vector3<class_Vector3>` value **)**
- :ref:`Vector3<class_Vector3>` **get_rotation** **(** **)**

以弧度为单位的，局部变换的旋转部分，根据欧拉角指定。角度按照 :ref:`rotation_order<class_Node3D_property_rotation_order>` 属性指定的顺序，构造一个旋转。

\ **注意：**\ 在数学意义上，旋转是一个矩阵，而不是一个向量。三个欧拉角，即旋转矩阵的欧拉角参数化的三个独立参数，存储在一个 :ref:`Vector3<class_Vector3>` 数据结构中，并不是因为旋转是一个向量，而是因为 :ref:`Vector3<class_Vector3>` 是一个方便存储 3 个浮点数的数据结构。因此，对旋转“向量”，应用仿射操作是没有意义的。

\ **注意：**\ 该属性在检查器中以度为单位进行编辑。如果要在脚本中使用度数，请使用 :ref:`rotation_degrees<class_Node3D_property_rotation_degrees>`\ 。

.. rst-class:: classref-item-separator

----

.. _class_Node3D_property_rotation_degrees:

.. rst-class:: classref-property

:ref:`Vector3<class_Vector3>` **rotation_degrees**

.. rst-class:: classref-property-setget

- void **set_rotation_degrees** **(** :ref:`Vector3<class_Vector3>` value **)**
- :ref:`Vector3<class_Vector3>` **get_rotation_degrees** **(** **)**

辅助属性，用于按度数访问 :ref:`rotation<class_Node3D_property_rotation>` 而不是弧度数。

.. rst-class:: classref-item-separator

----

.. _class_Node3D_property_rotation_edit_mode:

.. rst-class:: classref-property

:ref:`RotationEditMode<enum_Node3D_RotationEditMode>` **rotation_edit_mode** = ``0``

.. rst-class:: classref-property-setget

- void **set_rotation_edit_mode** **(** :ref:`RotationEditMode<enum_Node3D_RotationEditMode>` value **)**
- :ref:`RotationEditMode<enum_Node3D_RotationEditMode>` **get_rotation_edit_mode** **(** **)**

指定旋转（和缩放）在编辑器中的显示方式。

.. rst-class:: classref-item-separator

----

.. _class_Node3D_property_rotation_order:

.. rst-class:: classref-property

:ref:`EulerOrder<enum_@GlobalScope_EulerOrder>` **rotation_order** = ``2``

.. rst-class:: classref-property-setget

- void **set_rotation_order** **(** :ref:`EulerOrder<enum_@GlobalScope_EulerOrder>` value **)**
- :ref:`EulerOrder<enum_@GlobalScope_EulerOrder>` **get_rotation_order** **(** **)**

指定 :ref:`rotation<class_Node3D_property_rotation>` 属性的轴旋转顺序。最终的方向是通过按该属性指定的顺序旋转欧拉角来构建的。

.. rst-class:: classref-item-separator

----

.. _class_Node3D_property_scale:

.. rst-class:: classref-property

:ref:`Vector3<class_Vector3>` **scale** = ``Vector3(1, 1, 1)``

.. rst-class:: classref-property-setget

- void **set_scale** **(** :ref:`Vector3<class_Vector3>` value **)**
- :ref:`Vector3<class_Vector3>` **get_scale** **(** **)**

局部变换的缩放部分。

\ **注意：**\ 3D 中，变换矩阵是无法分解出正负混合的缩放的。由于 Godot 中使用变换矩阵来表示缩放，得到的缩放值要么全正、要么全负。

\ **注意：**\ 并不是所有节点的外观都会被 :ref:`scale<class_Node3D_property_scale>` 属性缩放。例如，\ :ref:`Light3D<class_Light3D>` 的外观就不受 :ref:`scale<class_Node3D_property_scale>` 影响。

.. rst-class:: classref-item-separator

----

.. _class_Node3D_property_top_level:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **top_level** = ``false``

.. rst-class:: classref-property-setget

- void **set_as_top_level** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **is_set_as_top_level** **(** **)**

如果为 ``true``\ ，则该节点将不会从其父节点继承其变换。节点变换仅在全局空间中。

.. rst-class:: classref-item-separator

----

.. _class_Node3D_property_transform:

.. rst-class:: classref-property

:ref:`Transform3D<class_Transform3D>` **transform** = ``Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0)``

.. rst-class:: classref-property-setget

- void **set_transform** **(** :ref:`Transform3D<class_Transform3D>` value **)**
- :ref:`Transform3D<class_Transform3D>` **get_transform** **(** **)**

该节点的局部空间 :ref:`Transform3D<class_Transform3D>`\ ，相对于父节点。

.. rst-class:: classref-item-separator

----

.. _class_Node3D_property_visibility_parent:

.. rst-class:: classref-property

:ref:`NodePath<class_NodePath>` **visibility_parent** = ``NodePath("")``

.. rst-class:: classref-property-setget

- void **set_visibility_parent** **(** :ref:`NodePath<class_NodePath>` value **)**
- :ref:`NodePath<class_NodePath>` **get_visibility_parent** **(** **)**

定义该节点及其子树的可见性范围父级。可见性父级必须是一个 GeometryInstance3D。仅当可见性父级（及其所有可见性祖先）通过比其自身 :ref:`GeometryInstance3D.visibility_range_begin<class_GeometryInstance3D_property_visibility_range_begin>` 更靠近相机而被隐藏时，任何视觉实例才会可见。通过 :ref:`visible<class_Node3D_property_visible>` 属性隐藏的节点，基本上可以从可见性依赖树中移除，因此依赖实例不会考虑隐藏节点或其祖先。

.. rst-class:: classref-item-separator

----

.. _class_Node3D_property_visible:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **visible** = ``true``

.. rst-class:: classref-property-setget

- void **set_visible** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **is_visible** **(** **)**

如果为 ``true``\ ，这个节点就会被画出来。只有当它的所有前项也是可见的时候，这个节点才是可见的（换句话说，\ :ref:`is_visible_in_tree<class_Node3D_method_is_visible_in_tree>` 必须返回 ``true``\ ）。

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

方法说明
--------

.. _class_Node3D_method_add_gizmo:

.. rst-class:: classref-method

void **add_gizmo** **(** :ref:`Node3DGizmo<class_Node3DGizmo>` gizmo **)**

将编辑器小工具附加到该 **Node3D**\ 。

\ **注意：**\ 小工具对象通常是 :ref:`EditorNode3DGizmo<class_EditorNode3DGizmo>` 的一个实例，但参数类型保持通用以避免在 **Node3D** 中创建对编辑器类的依赖。

.. rst-class:: classref-item-separator

----

.. _class_Node3D_method_clear_gizmos:

.. rst-class:: classref-method

void **clear_gizmos** **(** **)**

清除附加于该 **Node3D** 的所有小工具。

.. rst-class:: classref-item-separator

----

.. _class_Node3D_method_clear_subgizmo_selection:

.. rst-class:: classref-method

void **clear_subgizmo_selection** **(** **)**

在编辑器中，清除该节点的子小工具选择。在一个属性更改后，子小工具 ID 变得无效时很有用。

.. rst-class:: classref-item-separator

----

.. _class_Node3D_method_force_update_transform:

.. rst-class:: classref-method

void **force_update_transform** **(** **)**

强制更新变换。由于性能原因，物理中的变换改变不是即时的。变换是在累积后再设置。如果你在进行物理操作时需要最新的变换，请使用此功能。

.. rst-class:: classref-item-separator

----

.. _class_Node3D_method_get_gizmos:

.. rst-class:: classref-method

:ref:`Node3DGizmo[]<class_Node3DGizmo>` **get_gizmos** **(** **)** |const|

返回附加到该 **Node3D** 的所有小工具。

.. rst-class:: classref-item-separator

----

.. _class_Node3D_method_get_parent_node_3d:

.. rst-class:: classref-method

:ref:`Node3D<class_Node3D>` **get_parent_node_3d** **(** **)** |const|

返回父节点 **Node3D**\ ，如果不存在父节点，或父节点不是 **Node3D** 类型，则返回空的 :ref:`Object<class_Object>`\ 。

.. rst-class:: classref-item-separator

----

.. _class_Node3D_method_get_world_3d:

.. rst-class:: classref-method

:ref:`World3D<class_World3D>` **get_world_3d** **(** **)** |const|

返回此 **Node3D** 节点所注册的当前 :ref:`World3D<class_World3D>` 资源。

.. rst-class:: classref-item-separator

----

.. _class_Node3D_method_global_rotate:

.. rst-class:: classref-method

void **global_rotate** **(** :ref:`Vector3<class_Vector3>` axis, :ref:`float<class_float>` angle **)**

将全局（世界）变换围绕某个轴（单位 :ref:`Vector3<class_Vector3>`\ ）旋转指定的弧度。旋转轴使用全局坐标系。

.. rst-class:: classref-item-separator

----

.. _class_Node3D_method_global_scale:

.. rst-class:: classref-method

void **global_scale** **(** :ref:`Vector3<class_Vector3>` scale **)**

将全局（世界）变换按照给定的 :ref:`Vector3<class_Vector3>` 缩放因子进行缩放。

.. rst-class:: classref-item-separator

----

.. _class_Node3D_method_global_translate:

.. rst-class:: classref-method

void **global_translate** **(** :ref:`Vector3<class_Vector3>` offset **)**

将全局（世界）变换按照 :ref:`Vector3<class_Vector3>` 偏移量进行移动。偏移量使用全局坐标系。

.. rst-class:: classref-item-separator

----

.. _class_Node3D_method_hide:

.. rst-class:: classref-method

void **hide** **(** **)**

禁用该节点的渲染。会将 :ref:`visible<class_Node3D_property_visible>` 改为 ``false``\ 。

.. rst-class:: classref-item-separator

----

.. _class_Node3D_method_is_local_transform_notification_enabled:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **is_local_transform_notification_enabled** **(** **)** |const|

返回该节点是否通知其局部变换的更改。\ **Node3D** 默认不会传播此属性。

.. rst-class:: classref-item-separator

----

.. _class_Node3D_method_is_scale_disabled:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **is_scale_disabled** **(** **)** |const|

返回该节点是否使用 ``(1, 1, 1)`` 的比例或其本地变换比例。

.. rst-class:: classref-item-separator

----

.. _class_Node3D_method_is_transform_notification_enabled:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **is_transform_notification_enabled** **(** **)** |const|

返回该节点是否通知其全局和局部变换的更改。\ **Node3D** 默认不会传播此属性。

.. rst-class:: classref-item-separator

----

.. _class_Node3D_method_is_visible_in_tree:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **is_visible_in_tree** **(** **)** |const|

如果该节点位于 :ref:`SceneTree<class_SceneTree>` 中，并且其 :ref:`visible<class_Node3D_property_visible>` 属性为 ``true``\ ，并且其所有上层节点也均可见，则返回 ``true``\ 。如果任何上层节点被隐藏，则该节点在场景树中将不可见。

.. rst-class:: classref-item-separator

----

.. _class_Node3D_method_look_at:

.. rst-class:: classref-method

void **look_at** **(** :ref:`Vector3<class_Vector3>` target, :ref:`Vector3<class_Vector3>` up=Vector3(0, 1, 0), :ref:`bool<class_bool>` use_model_front=false **)**

旋转该节点，让局部向前的轴（-Z，\ :ref:`Vector3.FORWARD<class_Vector3_constant_FORWARD>`\ ）指向 ``target`` 的位置。

局部向上的轴（+Y）在保持与局部向前的轴垂直的前提下，尽可能接近 ``up`` 向量。最终的变换是正交变换，并且保留了原有缩放。非统一缩放可能无法正常工作。

\ ``target`` 位置不能和该节点的位置相同，\ ``up`` 向量不能为零，从节点的位置到 ``target`` 的向量不能与 ``up`` 平行。

操作发生在全局空间，也就是说该节点必须位于场景树中。

如果 ``use_model_front`` 为 ``true``\ ，则会将 +Z 轴（资产正面）作为向前的轴（此时 +X 为左），指向 ``target`` 的位置。默认情况下会将 -Z 轴（相机前方）作为向前的轴（此时 +X 为右）。

.. rst-class:: classref-item-separator

----

.. _class_Node3D_method_look_at_from_position:

.. rst-class:: classref-method

void **look_at_from_position** **(** :ref:`Vector3<class_Vector3>` position, :ref:`Vector3<class_Vector3>` target, :ref:`Vector3<class_Vector3>` up=Vector3(0, 1, 0), :ref:`bool<class_bool>` use_model_front=false **)**

将节点移动到指定的 ``position``\ ，然后根据 :ref:`look_at<class_Node3D_method_look_at>` 旋转该节点以指向 ``target``\ 。操作发生在全局空间中。

.. rst-class:: classref-item-separator

----

.. _class_Node3D_method_orthonormalize:

.. rst-class:: classref-method

void **orthonormalize** **(** **)**

通过在该节点的 :ref:`Transform3D<class_Transform3D>` 上执行 Gram-Schmidt 正交归一化，重置该节点的变换（如缩放、倾斜和锥度），以保留其旋转和平移。

.. rst-class:: classref-item-separator

----

.. _class_Node3D_method_rotate:

.. rst-class:: classref-method

void **rotate** **(** :ref:`Vector3<class_Vector3>` axis, :ref:`float<class_float>` angle **)**

围绕轴（单位 :ref:`Vector3<class_Vector3>`\ ）旋转局部变换，指定角度（弧度）。

.. rst-class:: classref-item-separator

----

.. _class_Node3D_method_rotate_object_local:

.. rst-class:: classref-method

void **rotate_object_local** **(** :ref:`Vector3<class_Vector3>` axis, :ref:`float<class_float>` angle **)**

围绕轴（单位 :ref:`Vector3<class_Vector3>`\ ）旋转局部变换，指定角度（弧度）。旋转轴是在物体的本地坐标系中。

.. rst-class:: classref-item-separator

----

.. _class_Node3D_method_rotate_x:

.. rst-class:: classref-method

void **rotate_x** **(** :ref:`float<class_float>` angle **)**

围绕 X 轴旋转局部变换，旋转角度为弧度。

.. rst-class:: classref-item-separator

----

.. _class_Node3D_method_rotate_y:

.. rst-class:: classref-method

void **rotate_y** **(** :ref:`float<class_float>` angle **)**

围绕 Y 轴旋转局部变换，旋转角度为弧度。

.. rst-class:: classref-item-separator

----

.. _class_Node3D_method_rotate_z:

.. rst-class:: classref-method

void **rotate_z** **(** :ref:`float<class_float>` angle **)**

围绕 Z 轴旋转局部变换，旋转角度为弧度。

.. rst-class:: classref-item-separator

----

.. _class_Node3D_method_scale_object_local:

.. rst-class:: classref-method

void **scale_object_local** **(** :ref:`Vector3<class_Vector3>` scale **)**

在物体局部坐标系中，通过给定的 3D 比例因子来缩放局部变换。

.. rst-class:: classref-item-separator

----

.. _class_Node3D_method_set_disable_scale:

.. rst-class:: classref-method

void **set_disable_scale** **(** :ref:`bool<class_bool>` disable **)**

设置节点是否使用 ``(1, 1, 1)`` 的比例或其本地变换比例。对本地变换比例的改变会被保留下来。

.. rst-class:: classref-item-separator

----

.. _class_Node3D_method_set_identity:

.. rst-class:: classref-method

void **set_identity** **(** **)**

重置此节点的所有变换（将其 :ref:`Transform3D<class_Transform3D>` 设置为单位矩阵）。

.. rst-class:: classref-item-separator

----

.. _class_Node3D_method_set_ignore_transform_notification:

.. rst-class:: classref-method

void **set_ignore_transform_notification** **(** :ref:`bool<class_bool>` enabled **)**

设置该节点是否忽略其转换（全局或局部）改变的通知。

.. rst-class:: classref-item-separator

----

.. _class_Node3D_method_set_notify_local_transform:

.. rst-class:: classref-method

void **set_notify_local_transform** **(** :ref:`bool<class_bool>` enable **)**

设置该节点是否通知其局部变换的更改。\ **Node3D** 默认不会传播此属性。

.. rst-class:: classref-item-separator

----

.. _class_Node3D_method_set_notify_transform:

.. rst-class:: classref-method

void **set_notify_transform** **(** :ref:`bool<class_bool>` enable **)**

设置该节点是否通知其全局和局部变换的更改。\ **Node3D** 默认不会传播此属性，除非位于编辑器上下文中，并且存在有效的小工具。

.. rst-class:: classref-item-separator

----

.. _class_Node3D_method_set_subgizmo_selection:

.. rst-class:: classref-method

void **set_subgizmo_selection** **(** :ref:`Node3DGizmo<class_Node3DGizmo>` gizmo, :ref:`int<class_int>` id, :ref:`Transform3D<class_Transform3D>` transform **)**

在编辑器中为该节点设置子小工具选区。

\ **注意：**\ 小工具对象通常是 :ref:`EditorNode3DGizmo<class_EditorNode3DGizmo>` 的一个实例，但参数类型保持通用以避免在 **Node3D** 中创建对编辑器类的依赖。

.. rst-class:: classref-item-separator

----

.. _class_Node3D_method_show:

.. rst-class:: classref-method

void **show** **(** **)**

启用此节点的呈现。将 :ref:`visible<class_Node3D_property_visible>` 更改为 ``true``\ 。

.. rst-class:: classref-item-separator

----

.. _class_Node3D_method_to_global:

.. rst-class:: classref-method

:ref:`Vector3<class_Vector3>` **to_global** **(** :ref:`Vector3<class_Vector3>` local_point **)** |const|

将 ``local_point`` 从这个节点的局部空间转换为世界空间。

.. rst-class:: classref-item-separator

----

.. _class_Node3D_method_to_local:

.. rst-class:: classref-method

:ref:`Vector3<class_Vector3>` **to_local** **(** :ref:`Vector3<class_Vector3>` global_point **)** |const|

将 ``global_point`` 从世界空间转换到这个节点的局部空间。

.. rst-class:: classref-item-separator

----

.. _class_Node3D_method_translate:

.. rst-class:: classref-method

void **translate** **(** :ref:`Vector3<class_Vector3>` offset **)**

通过给定的偏移量 :ref:`Vector3<class_Vector3>` 更改该节点的位置。

请注意，平移 ``offset`` 受节点缩放的影响，因此如果按例如 ``(10, 1, 1)`` 的比例缩放，那么偏移 ``(2, 0, 0)`` 的平移，实际上会在 X 坐标上增加 20（\ ``2 * 10``\ ）。

.. rst-class:: classref-item-separator

----

.. _class_Node3D_method_translate_object_local:

.. rst-class:: classref-method

void **translate_object_local** **(** :ref:`Vector3<class_Vector3>` offset **)**

通过给定的局部空间偏移量 :ref:`Vector3<class_Vector3>` 改变该节点的位置。

.. rst-class:: classref-item-separator

----

.. _class_Node3D_method_update_gizmos:

.. rst-class:: classref-method

void **update_gizmos** **(** **)**

更新附加于该节点的所有 **Node3D** 小工具。

.. |virtual| replace:: :abbr:`virtual (本方法通常需要用户覆盖才能生效。)`
.. |const| replace:: :abbr:`const (本方法没有副作用。不会修改该实例的任何成员变量。)`
.. |vararg| replace:: :abbr:`vararg (本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。)`
.. |constructor| replace:: :abbr:`constructor (本方法用于构造某个类型。)`
.. |static| replace:: :abbr:`static (调用本方法无需实例，所以可以直接使用类名调用。)`
.. |operator| replace:: :abbr:`operator (本方法描述的是使用本类型作为左操作数的有效操作符。)`
.. |bitfield| replace:: :abbr:`BitField (这个值是由下列标志构成的位掩码整数。)`
