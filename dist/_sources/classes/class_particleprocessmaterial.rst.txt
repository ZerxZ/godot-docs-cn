:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Godot engine sources.
.. Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.
.. XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/ParticleProcessMaterial.xml.

.. _class_ParticleProcessMaterial:

ParticleProcessMaterial
=======================

**继承：** :ref:`Material<class_Material>` **<** :ref:`Resource<class_Resource>` **<** :ref:`RefCounted<class_RefCounted>` **<** :ref:`Object<class_Object>`

保存用于 :ref:`GPUParticles2D<class_GPUParticles2D>` 或 :ref:`GPUParticles3D<class_GPUParticles3D>` 节点的粒子配置。

.. rst-class:: classref-introduction-group

描述
----

**ParticleProcessMaterial** 定义了粒子的属性和行为。\ :ref:`GPUParticles3D<class_GPUParticles3D>` 和 :ref:`GPUParticles2D<class_GPUParticles2D>` 节点的 ``process_material`` 会使用这种材质。这种材质的有些属性是在粒子发射时应用的，有些则会应用 :ref:`CurveTexture<class_CurveTexture>` 或 :ref:`GradientTexture1D<class_GradientTexture1D>` 让数值或颜色值在粒子的生命周期中不断变化。

.. rst-class:: classref-reftable-group

属性
----

.. table::
   :widths: auto

   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Texture2D<class_Texture2D>`                                  | :ref:`alpha_curve<class_ParticleProcessMaterial_property_alpha_curve>`                                                 |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Texture2D<class_Texture2D>`                                  | :ref:`angle_curve<class_ParticleProcessMaterial_property_angle_curve>`                                                 |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`angle_max<class_ParticleProcessMaterial_property_angle_max>`                                                     | ``0.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`angle_min<class_ParticleProcessMaterial_property_angle_min>`                                                     | ``0.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Texture2D<class_Texture2D>`                                  | :ref:`angular_velocity_curve<class_ParticleProcessMaterial_property_angular_velocity_curve>`                           |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`angular_velocity_max<class_ParticleProcessMaterial_property_angular_velocity_max>`                               | ``0.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`angular_velocity_min<class_ParticleProcessMaterial_property_angular_velocity_min>`                               | ``0.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Texture2D<class_Texture2D>`                                  | :ref:`anim_offset_curve<class_ParticleProcessMaterial_property_anim_offset_curve>`                                     |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`anim_offset_max<class_ParticleProcessMaterial_property_anim_offset_max>`                                         | ``0.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`anim_offset_min<class_ParticleProcessMaterial_property_anim_offset_min>`                                         | ``0.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Texture2D<class_Texture2D>`                                  | :ref:`anim_speed_curve<class_ParticleProcessMaterial_property_anim_speed_curve>`                                       |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`anim_speed_max<class_ParticleProcessMaterial_property_anim_speed_max>`                                           | ``0.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`anim_speed_min<class_ParticleProcessMaterial_property_anim_speed_min>`                                           | ``0.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`bool<class_bool>`                                            | :ref:`attractor_interaction_enabled<class_ParticleProcessMaterial_property_attractor_interaction_enabled>`             | ``true``                |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`collision_bounce<class_ParticleProcessMaterial_property_collision_bounce>`                                       |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`collision_friction<class_ParticleProcessMaterial_property_collision_friction>`                                   |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`CollisionMode<enum_ParticleProcessMaterial_CollisionMode>`   | :ref:`collision_mode<class_ParticleProcessMaterial_property_collision_mode>`                                           | ``0``                   |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`bool<class_bool>`                                            | :ref:`collision_use_scale<class_ParticleProcessMaterial_property_collision_use_scale>`                                 | ``false``               |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Color<class_Color>`                                          | :ref:`color<class_ParticleProcessMaterial_property_color>`                                                             | ``Color(1, 1, 1, 1)``   |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Texture2D<class_Texture2D>`                                  | :ref:`color_initial_ramp<class_ParticleProcessMaterial_property_color_initial_ramp>`                                   |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Texture2D<class_Texture2D>`                                  | :ref:`color_ramp<class_ParticleProcessMaterial_property_color_ramp>`                                                   |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Texture2D<class_Texture2D>`                                  | :ref:`damping_curve<class_ParticleProcessMaterial_property_damping_curve>`                                             |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`damping_max<class_ParticleProcessMaterial_property_damping_max>`                                                 | ``0.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`damping_min<class_ParticleProcessMaterial_property_damping_min>`                                                 | ``0.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Vector3<class_Vector3>`                                      | :ref:`direction<class_ParticleProcessMaterial_property_direction>`                                                     | ``Vector3(1, 0, 0)``    |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Texture2D<class_Texture2D>`                                  | :ref:`directional_velocity_curve<class_ParticleProcessMaterial_property_directional_velocity_curve>`                   |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`directional_velocity_max<class_ParticleProcessMaterial_property_directional_velocity_max>`                       |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`directional_velocity_min<class_ParticleProcessMaterial_property_directional_velocity_min>`                       |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Vector3<class_Vector3>`                                      | :ref:`emission_box_extents<class_ParticleProcessMaterial_property_emission_box_extents>`                               |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Texture2D<class_Texture2D>`                                  | :ref:`emission_color_texture<class_ParticleProcessMaterial_property_emission_color_texture>`                           |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Texture2D<class_Texture2D>`                                  | :ref:`emission_curve<class_ParticleProcessMaterial_property_emission_curve>`                                           |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Texture2D<class_Texture2D>`                                  | :ref:`emission_normal_texture<class_ParticleProcessMaterial_property_emission_normal_texture>`                         |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`int<class_int>`                                              | :ref:`emission_point_count<class_ParticleProcessMaterial_property_emission_point_count>`                               |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Texture2D<class_Texture2D>`                                  | :ref:`emission_point_texture<class_ParticleProcessMaterial_property_emission_point_texture>`                           |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Vector3<class_Vector3>`                                      | :ref:`emission_ring_axis<class_ParticleProcessMaterial_property_emission_ring_axis>`                                   |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`emission_ring_height<class_ParticleProcessMaterial_property_emission_ring_height>`                               |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`emission_ring_inner_radius<class_ParticleProcessMaterial_property_emission_ring_inner_radius>`                   |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`emission_ring_radius<class_ParticleProcessMaterial_property_emission_ring_radius>`                               |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`EmissionShape<enum_ParticleProcessMaterial_EmissionShape>`   | :ref:`emission_shape<class_ParticleProcessMaterial_property_emission_shape>`                                           | ``0``                   |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Vector3<class_Vector3>`                                      | :ref:`emission_shape_offset<class_ParticleProcessMaterial_property_emission_shape_offset>`                             | ``Vector3(0, 0, 0)``    |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Vector3<class_Vector3>`                                      | :ref:`emission_shape_scale<class_ParticleProcessMaterial_property_emission_shape_scale>`                               | ``Vector3(1, 1, 1)``    |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`emission_sphere_radius<class_ParticleProcessMaterial_property_emission_sphere_radius>`                           |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`flatness<class_ParticleProcessMaterial_property_flatness>`                                                       | ``0.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Vector3<class_Vector3>`                                      | :ref:`gravity<class_ParticleProcessMaterial_property_gravity>`                                                         | ``Vector3(0, -9.8, 0)`` |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Texture2D<class_Texture2D>`                                  | :ref:`hue_variation_curve<class_ParticleProcessMaterial_property_hue_variation_curve>`                                 |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`hue_variation_max<class_ParticleProcessMaterial_property_hue_variation_max>`                                     | ``0.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`hue_variation_min<class_ParticleProcessMaterial_property_hue_variation_min>`                                     | ``0.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`inherit_velocity_ratio<class_ParticleProcessMaterial_property_inherit_velocity_ratio>`                           | ``0.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`initial_velocity_max<class_ParticleProcessMaterial_property_initial_velocity_max>`                               | ``0.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`initial_velocity_min<class_ParticleProcessMaterial_property_initial_velocity_min>`                               | ``0.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`lifetime_randomness<class_ParticleProcessMaterial_property_lifetime_randomness>`                                 | ``0.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Texture2D<class_Texture2D>`                                  | :ref:`linear_accel_curve<class_ParticleProcessMaterial_property_linear_accel_curve>`                                   |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`linear_accel_max<class_ParticleProcessMaterial_property_linear_accel_max>`                                       | ``0.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`linear_accel_min<class_ParticleProcessMaterial_property_linear_accel_min>`                                       | ``0.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Texture2D<class_Texture2D>`                                  | :ref:`orbit_velocity_curve<class_ParticleProcessMaterial_property_orbit_velocity_curve>`                               |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`orbit_velocity_max<class_ParticleProcessMaterial_property_orbit_velocity_max>`                                   | ``0.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`orbit_velocity_min<class_ParticleProcessMaterial_property_orbit_velocity_min>`                                   | ``0.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`bool<class_bool>`                                            | :ref:`particle_flag_align_y<class_ParticleProcessMaterial_property_particle_flag_align_y>`                             | ``false``               |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`bool<class_bool>`                                            | :ref:`particle_flag_damping_as_friction<class_ParticleProcessMaterial_property_particle_flag_damping_as_friction>`     | ``false``               |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`bool<class_bool>`                                            | :ref:`particle_flag_disable_z<class_ParticleProcessMaterial_property_particle_flag_disable_z>`                         | ``false``               |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`bool<class_bool>`                                            | :ref:`particle_flag_rotate_y<class_ParticleProcessMaterial_property_particle_flag_rotate_y>`                           | ``false``               |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Texture2D<class_Texture2D>`                                  | :ref:`radial_accel_curve<class_ParticleProcessMaterial_property_radial_accel_curve>`                                   |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`radial_accel_max<class_ParticleProcessMaterial_property_radial_accel_max>`                                       | ``0.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`radial_accel_min<class_ParticleProcessMaterial_property_radial_accel_min>`                                       | ``0.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Texture2D<class_Texture2D>`                                  | :ref:`radial_velocity_curve<class_ParticleProcessMaterial_property_radial_velocity_curve>`                             |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`radial_velocity_max<class_ParticleProcessMaterial_property_radial_velocity_max>`                                 | ``0.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`radial_velocity_min<class_ParticleProcessMaterial_property_radial_velocity_min>`                                 | ``0.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Texture2D<class_Texture2D>`                                  | :ref:`scale_curve<class_ParticleProcessMaterial_property_scale_curve>`                                                 |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`scale_max<class_ParticleProcessMaterial_property_scale_max>`                                                     | ``1.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`scale_min<class_ParticleProcessMaterial_property_scale_min>`                                                     | ``1.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Texture2D<class_Texture2D>`                                  | :ref:`scale_over_velocity_curve<class_ParticleProcessMaterial_property_scale_over_velocity_curve>`                     |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`scale_over_velocity_max<class_ParticleProcessMaterial_property_scale_over_velocity_max>`                         | ``0.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`scale_over_velocity_min<class_ParticleProcessMaterial_property_scale_over_velocity_min>`                         | ``0.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`spread<class_ParticleProcessMaterial_property_spread>`                                                           | ``45.0``                |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`int<class_int>`                                              | :ref:`sub_emitter_amount_at_collision<class_ParticleProcessMaterial_property_sub_emitter_amount_at_collision>`         |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`int<class_int>`                                              | :ref:`sub_emitter_amount_at_end<class_ParticleProcessMaterial_property_sub_emitter_amount_at_end>`                     |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`sub_emitter_frequency<class_ParticleProcessMaterial_property_sub_emitter_frequency>`                             |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`bool<class_bool>`                                            | :ref:`sub_emitter_keep_velocity<class_ParticleProcessMaterial_property_sub_emitter_keep_velocity>`                     | ``false``               |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`SubEmitterMode<enum_ParticleProcessMaterial_SubEmitterMode>` | :ref:`sub_emitter_mode<class_ParticleProcessMaterial_property_sub_emitter_mode>`                                       | ``0``                   |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Texture2D<class_Texture2D>`                                  | :ref:`tangential_accel_curve<class_ParticleProcessMaterial_property_tangential_accel_curve>`                           |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`tangential_accel_max<class_ParticleProcessMaterial_property_tangential_accel_max>`                               | ``0.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`tangential_accel_min<class_ParticleProcessMaterial_property_tangential_accel_min>`                               | ``0.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`bool<class_bool>`                                            | :ref:`turbulence_enabled<class_ParticleProcessMaterial_property_turbulence_enabled>`                                   | ``false``               |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`turbulence_influence_max<class_ParticleProcessMaterial_property_turbulence_influence_max>`                       | ``0.1``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`turbulence_influence_min<class_ParticleProcessMaterial_property_turbulence_influence_min>`                       | ``0.1``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Texture2D<class_Texture2D>`                                  | :ref:`turbulence_influence_over_life<class_ParticleProcessMaterial_property_turbulence_influence_over_life>`           |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`turbulence_initial_displacement_max<class_ParticleProcessMaterial_property_turbulence_initial_displacement_max>` | ``0.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`turbulence_initial_displacement_min<class_ParticleProcessMaterial_property_turbulence_initial_displacement_min>` | ``0.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`turbulence_noise_scale<class_ParticleProcessMaterial_property_turbulence_noise_scale>`                           | ``9.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Vector3<class_Vector3>`                                      | :ref:`turbulence_noise_speed<class_ParticleProcessMaterial_property_turbulence_noise_speed>`                           | ``Vector3(0, 0, 0)``    |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`turbulence_noise_speed_random<class_ParticleProcessMaterial_property_turbulence_noise_speed_random>`             | ``0.2``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`float<class_float>`                                          | :ref:`turbulence_noise_strength<class_ParticleProcessMaterial_property_turbulence_noise_strength>`                     | ``1.0``                 |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Texture2D<class_Texture2D>`                                  | :ref:`velocity_limit_curve<class_ParticleProcessMaterial_property_velocity_limit_curve>`                               |                         |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+
   | :ref:`Vector3<class_Vector3>`                                      | :ref:`velocity_pivot<class_ParticleProcessMaterial_property_velocity_pivot>`                                           | ``Vector3(0, 0, 0)``    |
   +--------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------+-------------------------+

.. rst-class:: classref-reftable-group

方法
----

.. table::
   :widths: auto

   +-----------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`float<class_float>`         | :ref:`get_param_max<class_ParticleProcessMaterial_method_get_param_max>` **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param **)** |const|                                                 |
   +-----------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`float<class_float>`         | :ref:`get_param_min<class_ParticleProcessMaterial_method_get_param_min>` **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param **)** |const|                                                 |
   +-----------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Texture2D<class_Texture2D>` | :ref:`get_param_texture<class_ParticleProcessMaterial_method_get_param_texture>` **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param **)** |const|                                         |
   +-----------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`           | :ref:`get_particle_flag<class_ParticleProcessMaterial_method_get_particle_flag>` **(** :ref:`ParticleFlags<enum_ParticleProcessMaterial_ParticleFlags>` particle_flag **)** |const|                         |
   +-----------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                              | :ref:`set_param_max<class_ParticleProcessMaterial_method_set_param_max>` **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param, :ref:`float<class_float>` value **)**                        |
   +-----------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                              | :ref:`set_param_min<class_ParticleProcessMaterial_method_set_param_min>` **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param, :ref:`float<class_float>` value **)**                        |
   +-----------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                              | :ref:`set_param_texture<class_ParticleProcessMaterial_method_set_param_texture>` **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param, :ref:`Texture2D<class_Texture2D>` texture **)**      |
   +-----------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                              | :ref:`set_particle_flag<class_ParticleProcessMaterial_method_set_particle_flag>` **(** :ref:`ParticleFlags<enum_ParticleProcessMaterial_ParticleFlags>` particle_flag, :ref:`bool<class_bool>` enable **)** |
   +-----------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

枚举
----

.. _enum_ParticleProcessMaterial_Parameter:

.. rst-class:: classref-enumeration

enum **Parameter**:

.. _class_ParticleProcessMaterial_constant_PARAM_INITIAL_LINEAR_VELOCITY:

.. rst-class:: classref-enumeration-constant

:ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` **PARAM_INITIAL_LINEAR_VELOCITY** = ``0``

与 :ref:`set_param_min<class_ParticleProcessMaterial_method_set_param_min>`\ 、\ :ref:`set_param_max<class_ParticleProcessMaterial_method_set_param_max>` 和 :ref:`set_param_texture<class_ParticleProcessMaterial_method_set_param_texture>` 一起使用，设置初始速度属性。

.. _class_ParticleProcessMaterial_constant_PARAM_ANGULAR_VELOCITY:

.. rst-class:: classref-enumeration-constant

:ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` **PARAM_ANGULAR_VELOCITY** = ``1``

与 :ref:`set_param_min<class_ParticleProcessMaterial_method_set_param_min>`\ 、\ :ref:`set_param_max<class_ParticleProcessMaterial_method_set_param_max>` 和 :ref:`set_param_texture<class_ParticleProcessMaterial_method_set_param_texture>` 一起使用，设置角速度属性。

.. _class_ParticleProcessMaterial_constant_PARAM_ORBIT_VELOCITY:

.. rst-class:: classref-enumeration-constant

:ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` **PARAM_ORBIT_VELOCITY** = ``2``

与 :ref:`set_param_min<class_ParticleProcessMaterial_method_set_param_min>`\ 、\ :ref:`set_param_max<class_ParticleProcessMaterial_method_set_param_max>` 和 :ref:`set_param_texture<class_ParticleProcessMaterial_method_set_param_texture>` 一起使用，设置轨道速度属性。

.. _class_ParticleProcessMaterial_constant_PARAM_LINEAR_ACCEL:

.. rst-class:: classref-enumeration-constant

:ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` **PARAM_LINEAR_ACCEL** = ``3``

与 :ref:`set_param_min<class_ParticleProcessMaterial_method_set_param_min>`\ 、\ :ref:`set_param_max<class_ParticleProcessMaterial_method_set_param_max>` 和 :ref:`set_param_texture<class_ParticleProcessMaterial_method_set_param_texture>` 一起使用，设置线速度属性。

.. _class_ParticleProcessMaterial_constant_PARAM_RADIAL_ACCEL:

.. rst-class:: classref-enumeration-constant

:ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` **PARAM_RADIAL_ACCEL** = ``4``

与 :ref:`set_param_min<class_ParticleProcessMaterial_method_set_param_min>`\ 、\ :ref:`set_param_max<class_ParticleProcessMaterial_method_set_param_max>` 和 :ref:`set_param_texture<class_ParticleProcessMaterial_method_set_param_texture>` 一起使用，设置径向加速度属性。

.. _class_ParticleProcessMaterial_constant_PARAM_TANGENTIAL_ACCEL:

.. rst-class:: classref-enumeration-constant

:ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` **PARAM_TANGENTIAL_ACCEL** = ``5``

与 :ref:`set_param_min<class_ParticleProcessMaterial_method_set_param_min>`\ 、\ :ref:`set_param_max<class_ParticleProcessMaterial_method_set_param_max>` 和 :ref:`set_param_texture<class_ParticleProcessMaterial_method_set_param_texture>` 一起使用，设置切向加速度属性。

.. _class_ParticleProcessMaterial_constant_PARAM_DAMPING:

.. rst-class:: classref-enumeration-constant

:ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` **PARAM_DAMPING** = ``6``

与 :ref:`set_param_min<class_ParticleProcessMaterial_method_set_param_min>`\ 、\ :ref:`set_param_max<class_ParticleProcessMaterial_method_set_param_max>` 和 :ref:`set_param_texture<class_ParticleProcessMaterial_method_set_param_texture>` 一起使用，设置阻尼属性。

.. _class_ParticleProcessMaterial_constant_PARAM_ANGLE:

.. rst-class:: classref-enumeration-constant

:ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` **PARAM_ANGLE** = ``7``

与 :ref:`set_param_min<class_ParticleProcessMaterial_method_set_param_min>`\ 、\ :ref:`set_param_max<class_ParticleProcessMaterial_method_set_param_max>` 和 :ref:`set_param_texture<class_ParticleProcessMaterial_method_set_param_texture>` 一起使用，设置角度属性。

.. _class_ParticleProcessMaterial_constant_PARAM_SCALE:

.. rst-class:: classref-enumeration-constant

:ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` **PARAM_SCALE** = ``8``

与 :ref:`set_param_min<class_ParticleProcessMaterial_method_set_param_min>`\ 、\ :ref:`set_param_max<class_ParticleProcessMaterial_method_set_param_max>` 和 :ref:`set_param_texture<class_ParticleProcessMaterial_method_set_param_texture>` 一起使用，设置缩放属性。

.. _class_ParticleProcessMaterial_constant_PARAM_HUE_VARIATION:

.. rst-class:: classref-enumeration-constant

:ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` **PARAM_HUE_VARIATION** = ``9``

与 :ref:`set_param_min<class_ParticleProcessMaterial_method_set_param_min>`\ 、\ :ref:`set_param_max<class_ParticleProcessMaterial_method_set_param_max>` 和 :ref:`set_param_texture<class_ParticleProcessMaterial_method_set_param_texture>` 一起使用，设置色相变化属性。

.. _class_ParticleProcessMaterial_constant_PARAM_ANIM_SPEED:

.. rst-class:: classref-enumeration-constant

:ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` **PARAM_ANIM_SPEED** = ``10``

与 :ref:`set_param_min<class_ParticleProcessMaterial_method_set_param_min>`\ 、\ :ref:`set_param_max<class_ParticleProcessMaterial_method_set_param_max>` 和 :ref:`set_param_texture<class_ParticleProcessMaterial_method_set_param_texture>` 一起使用，设置动画速度属性。

.. _class_ParticleProcessMaterial_constant_PARAM_ANIM_OFFSET:

.. rst-class:: classref-enumeration-constant

:ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` **PARAM_ANIM_OFFSET** = ``11``

与 :ref:`set_param_min<class_ParticleProcessMaterial_method_set_param_min>`\ 、\ :ref:`set_param_max<class_ParticleProcessMaterial_method_set_param_max>` 和 :ref:`set_param_texture<class_ParticleProcessMaterial_method_set_param_texture>` 一起使用，设置动画偏移属性。

.. _class_ParticleProcessMaterial_constant_PARAM_RADIAL_VELOCITY:

.. rst-class:: classref-enumeration-constant

:ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` **PARAM_RADIAL_VELOCITY** = ``15``

与 :ref:`set_param_min<class_ParticleProcessMaterial_method_set_param_min>`\ 、\ :ref:`set_param_max<class_ParticleProcessMaterial_method_set_param_max>` 和 :ref:`set_param_texture<class_ParticleProcessMaterial_method_set_param_texture>` 一起使用来设置径向速度属性。

.. _class_ParticleProcessMaterial_constant_PARAM_DIRECTIONAL_VELOCITY:

.. rst-class:: classref-enumeration-constant

:ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` **PARAM_DIRECTIONAL_VELOCITY** = ``16``

与 :ref:`set_param_min<class_ParticleProcessMaterial_method_set_param_min>`\ 、\ :ref:`set_param_max<class_ParticleProcessMaterial_method_set_param_max>` 和 :ref:`set_param_texture<class_ParticleProcessMaterial_method_set_param_texture>` 一起使用来设置定向速度属性。

.. _class_ParticleProcessMaterial_constant_PARAM_SCALE_OVER_VELOCITY:

.. rst-class:: classref-enumeration-constant

:ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` **PARAM_SCALE_OVER_VELOCITY** = ``17``

与 :ref:`set_param_min<class_ParticleProcessMaterial_method_set_param_min>`\ 、\ :ref:`set_param_max<class_ParticleProcessMaterial_method_set_param_max>` 和 :ref:`set_param_texture<class_ParticleProcessMaterial_method_set_param_texture>` 一起使用来设置速度属性的缩放。

.. _class_ParticleProcessMaterial_constant_PARAM_MAX:

.. rst-class:: classref-enumeration-constant

:ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` **PARAM_MAX** = ``18``

代表 :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` 枚举的大小。

.. _class_ParticleProcessMaterial_constant_PARAM_TURB_VEL_INFLUENCE:

.. rst-class:: classref-enumeration-constant

:ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` **PARAM_TURB_VEL_INFLUENCE** = ``13``

与 :ref:`set_param_min<class_ParticleProcessMaterial_method_set_param_min>` 和 :ref:`set_param_max<class_ParticleProcessMaterial_method_set_param_max>` 一起使用，以设置湍流对每个粒子速度的最小和最大影响。

.. _class_ParticleProcessMaterial_constant_PARAM_TURB_INIT_DISPLACEMENT:

.. rst-class:: classref-enumeration-constant

:ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` **PARAM_TURB_INIT_DISPLACEMENT** = ``14``

与 :ref:`set_param_min<class_ParticleProcessMaterial_method_set_param_min>` 和 :ref:`set_param_max<class_ParticleProcessMaterial_method_set_param_max>` 一起使用，以设置粒子出生位置的湍流最小和最大位移。

.. _class_ParticleProcessMaterial_constant_PARAM_TURB_INFLUENCE_OVER_LIFE:

.. rst-class:: classref-enumeration-constant

:ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` **PARAM_TURB_INFLUENCE_OVER_LIFE** = ``12``

与 :ref:`set_param_texture<class_ParticleProcessMaterial_method_set_param_texture>` 一起使用，以设置湍流对粒子寿命的影响。

.. rst-class:: classref-item-separator

----

.. _enum_ParticleProcessMaterial_ParticleFlags:

.. rst-class:: classref-enumeration

enum **ParticleFlags**:

.. _class_ParticleProcessMaterial_constant_PARTICLE_FLAG_ALIGN_Y_TO_VELOCITY:

.. rst-class:: classref-enumeration-constant

:ref:`ParticleFlags<enum_ParticleProcessMaterial_ParticleFlags>` **PARTICLE_FLAG_ALIGN_Y_TO_VELOCITY** = ``0``

与 :ref:`set_particle_flag<class_ParticleProcessMaterial_method_set_particle_flag>` 一起使用，设置 :ref:`particle_flag_align_y<class_ParticleProcessMaterial_property_particle_flag_align_y>`\ 。

.. _class_ParticleProcessMaterial_constant_PARTICLE_FLAG_ROTATE_Y:

.. rst-class:: classref-enumeration-constant

:ref:`ParticleFlags<enum_ParticleProcessMaterial_ParticleFlags>` **PARTICLE_FLAG_ROTATE_Y** = ``1``

与 :ref:`set_particle_flag<class_ParticleProcessMaterial_method_set_particle_flag>` 一起使用，设置 :ref:`particle_flag_rotate_y<class_ParticleProcessMaterial_property_particle_flag_rotate_y>`\ 。

.. _class_ParticleProcessMaterial_constant_PARTICLE_FLAG_DISABLE_Z:

.. rst-class:: classref-enumeration-constant

:ref:`ParticleFlags<enum_ParticleProcessMaterial_ParticleFlags>` **PARTICLE_FLAG_DISABLE_Z** = ``2``

与 :ref:`set_particle_flag<class_ParticleProcessMaterial_method_set_particle_flag>` 一起使用，设置\ :ref:`particle_flag_disable_z<class_ParticleProcessMaterial_property_particle_flag_disable_z>`\ 。

.. _class_ParticleProcessMaterial_constant_PARTICLE_FLAG_DAMPING_AS_FRICTION:

.. rst-class:: classref-enumeration-constant

:ref:`ParticleFlags<enum_ParticleProcessMaterial_ParticleFlags>` **PARTICLE_FLAG_DAMPING_AS_FRICTION** = ``3``



.. _class_ParticleProcessMaterial_constant_PARTICLE_FLAG_MAX:

.. rst-class:: classref-enumeration-constant

:ref:`ParticleFlags<enum_ParticleProcessMaterial_ParticleFlags>` **PARTICLE_FLAG_MAX** = ``4``

代表 :ref:`ParticleFlags<enum_ParticleProcessMaterial_ParticleFlags>` 枚举的大小。

.. rst-class:: classref-item-separator

----

.. _enum_ParticleProcessMaterial_EmissionShape:

.. rst-class:: classref-enumeration

enum **EmissionShape**:

.. _class_ParticleProcessMaterial_constant_EMISSION_SHAPE_POINT:

.. rst-class:: classref-enumeration-constant

:ref:`EmissionShape<enum_ParticleProcessMaterial_EmissionShape>` **EMISSION_SHAPE_POINT** = ``0``

所有粒子将从单个点发射。

.. _class_ParticleProcessMaterial_constant_EMISSION_SHAPE_SPHERE:

.. rst-class:: classref-enumeration-constant

:ref:`EmissionShape<enum_ParticleProcessMaterial_EmissionShape>` **EMISSION_SHAPE_SPHERE** = ``1``

粒子将在球体的体积中发射。

.. _class_ParticleProcessMaterial_constant_EMISSION_SHAPE_SPHERE_SURFACE:

.. rst-class:: classref-enumeration-constant

:ref:`EmissionShape<enum_ParticleProcessMaterial_EmissionShape>` **EMISSION_SHAPE_SPHERE_SURFACE** = ``2``

粒子将在球体表面发射。

.. _class_ParticleProcessMaterial_constant_EMISSION_SHAPE_BOX:

.. rst-class:: classref-enumeration-constant

:ref:`EmissionShape<enum_ParticleProcessMaterial_EmissionShape>` **EMISSION_SHAPE_BOX** = ``3``

粒子将在盒子的体积中发射。

.. _class_ParticleProcessMaterial_constant_EMISSION_SHAPE_POINTS:

.. rst-class:: classref-enumeration-constant

:ref:`EmissionShape<enum_ParticleProcessMaterial_EmissionShape>` **EMISSION_SHAPE_POINTS** = ``4``

粒子将在 :ref:`emission_point_texture<class_ParticleProcessMaterial_property_emission_point_texture>` 上随机采样点所决定的位置发射。粒子颜色将由 :ref:`emission_color_texture<class_ParticleProcessMaterial_property_emission_color_texture>` 调节。

.. _class_ParticleProcessMaterial_constant_EMISSION_SHAPE_DIRECTED_POINTS:

.. rst-class:: classref-enumeration-constant

:ref:`EmissionShape<enum_ParticleProcessMaterial_EmissionShape>` **EMISSION_SHAPE_DIRECTED_POINTS** = ``5``

粒子将在 :ref:`emission_point_texture<class_ParticleProcessMaterial_property_emission_point_texture>` 上随机采样点所决定的位置发射。粒子速度和旋转将基于 :ref:`emission_normal_texture<class_ParticleProcessMaterial_property_emission_normal_texture>` 进行设置。粒子颜色将由 :ref:`emission_color_texture<class_ParticleProcessMaterial_property_emission_color_texture>` 调节。

.. _class_ParticleProcessMaterial_constant_EMISSION_SHAPE_RING:

.. rst-class:: classref-enumeration-constant

:ref:`EmissionShape<enum_ParticleProcessMaterial_EmissionShape>` **EMISSION_SHAPE_RING** = ``6``

粒子将以环形或圆柱的形式发射出来。

.. _class_ParticleProcessMaterial_constant_EMISSION_SHAPE_MAX:

.. rst-class:: classref-enumeration-constant

:ref:`EmissionShape<enum_ParticleProcessMaterial_EmissionShape>` **EMISSION_SHAPE_MAX** = ``7``

代表 :ref:`EmissionShape<enum_ParticleProcessMaterial_EmissionShape>` 枚举的大小。

.. rst-class:: classref-item-separator

----

.. _enum_ParticleProcessMaterial_SubEmitterMode:

.. rst-class:: classref-enumeration

enum **SubEmitterMode**:

.. _class_ParticleProcessMaterial_constant_SUB_EMITTER_DISABLED:

.. rst-class:: classref-enumeration-constant

:ref:`SubEmitterMode<enum_ParticleProcessMaterial_SubEmitterMode>` **SUB_EMITTER_DISABLED** = ``0``



.. _class_ParticleProcessMaterial_constant_SUB_EMITTER_CONSTANT:

.. rst-class:: classref-enumeration-constant

:ref:`SubEmitterMode<enum_ParticleProcessMaterial_SubEmitterMode>` **SUB_EMITTER_CONSTANT** = ``1``



.. _class_ParticleProcessMaterial_constant_SUB_EMITTER_AT_END:

.. rst-class:: classref-enumeration-constant

:ref:`SubEmitterMode<enum_ParticleProcessMaterial_SubEmitterMode>` **SUB_EMITTER_AT_END** = ``2``



.. _class_ParticleProcessMaterial_constant_SUB_EMITTER_AT_COLLISION:

.. rst-class:: classref-enumeration-constant

:ref:`SubEmitterMode<enum_ParticleProcessMaterial_SubEmitterMode>` **SUB_EMITTER_AT_COLLISION** = ``3``



.. _class_ParticleProcessMaterial_constant_SUB_EMITTER_MAX:

.. rst-class:: classref-enumeration-constant

:ref:`SubEmitterMode<enum_ParticleProcessMaterial_SubEmitterMode>` **SUB_EMITTER_MAX** = ``4``

代表 :ref:`SubEmitterMode<enum_ParticleProcessMaterial_SubEmitterMode>` 枚举的大小。

.. rst-class:: classref-item-separator

----

.. _enum_ParticleProcessMaterial_CollisionMode:

.. rst-class:: classref-enumeration

enum **CollisionMode**:

.. _class_ParticleProcessMaterial_constant_COLLISION_DISABLED:

.. rst-class:: classref-enumeration-constant

:ref:`CollisionMode<enum_ParticleProcessMaterial_CollisionMode>` **COLLISION_DISABLED** = ``0``

粒子没有碰撞。粒子会穿过 :ref:`GPUParticlesCollision3D<class_GPUParticlesCollision3D>` 节点。

.. _class_ParticleProcessMaterial_constant_COLLISION_RIGID:

.. rst-class:: classref-enumeration-constant

:ref:`CollisionMode<enum_ParticleProcessMaterial_CollisionMode>` **COLLISION_RIGID** = ``1``

为使用 :ref:`GPUParticlesCollision3D<class_GPUParticlesCollision3D>` 节点的粒子设置 :ref:`RigidBody3D<class_RigidBody3D>` 风格的碰撞。

.. _class_ParticleProcessMaterial_constant_COLLISION_HIDE_ON_CONTACT:

.. rst-class:: classref-enumeration-constant

:ref:`CollisionMode<enum_ParticleProcessMaterial_CollisionMode>` **COLLISION_HIDE_ON_CONTACT** = ``2``

与 :ref:`GPUParticlesCollision3D<class_GPUParticlesCollision3D>` 节点碰撞时立即隐藏粒子。可以和使用 :ref:`COLLISION_RIGID<class_ParticleProcessMaterial_constant_COLLISION_RIGID>` 碰撞模式的子发射器组合，在撞击时将父粒子“替换”为子发射器。

.. _class_ParticleProcessMaterial_constant_COLLISION_MAX:

.. rst-class:: classref-enumeration-constant

:ref:`CollisionMode<enum_ParticleProcessMaterial_CollisionMode>` **COLLISION_MAX** = ``3``

代表 :ref:`CollisionMode<enum_ParticleProcessMaterial_CollisionMode>` 枚举的大小。

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

属性说明
--------

.. _class_ParticleProcessMaterial_property_alpha_curve:

.. rst-class:: classref-property

:ref:`Texture2D<class_Texture2D>` **alpha_curve**

.. rst-class:: classref-property-setget

- void **set_alpha_curve** **(** :ref:`Texture2D<class_Texture2D>` value **)**
- :ref:`Texture2D<class_Texture2D>` **get_alpha_curve** **(** **)**

每个粒子颜色的 alpha 值将在其生命周期内乘以该 :ref:`CurveTexture<class_CurveTexture>`\ 。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_angle_curve:

.. rst-class:: classref-property

:ref:`Texture2D<class_Texture2D>` **angle_curve**

.. rst-class:: classref-property-setget

- void **set_param_texture** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param, :ref:`Texture2D<class_Texture2D>` texture **)**
- :ref:`Texture2D<class_Texture2D>` **get_param_texture** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param **)** |const|

每个粒子的旋转将沿着这个 :ref:`CurveTexture<class_CurveTexture>` 动画。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_angle_max:

.. rst-class:: classref-property

:ref:`float<class_float>` **angle_max** = ``0.0``

.. rst-class:: classref-property-setget

- void **set_param_max** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param, :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_param_max** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param **)** |const|

应用于每个粒子的最大初始旋转，以度为单位。

仅在 :ref:`particle_flag_disable_z<class_ParticleProcessMaterial_property_particle_flag_disable_z>` 或 :ref:`particle_flag_rotate_y<class_ParticleProcessMaterial_property_particle_flag_rotate_y>` 为 ``true``\ ，或 :ref:`BaseMaterial3D<class_BaseMaterial3D>` 使用 :ref:`BaseMaterial3D.BILLBOARD_PARTICLES<class_BaseMaterial3D_constant_BILLBOARD_PARTICLES>` 绘制粒子时应用。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_angle_min:

.. rst-class:: classref-property

:ref:`float<class_float>` **angle_min** = ``0.0``

.. rst-class:: classref-property-setget

- void **set_param_min** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param, :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_param_min** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param **)** |const|

:ref:`angle_max<class_ParticleProcessMaterial_property_angle_max>` 的对应最小值。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_angular_velocity_curve:

.. rst-class:: classref-property

:ref:`Texture2D<class_Texture2D>` **angular_velocity_curve**

.. rst-class:: classref-property-setget

- void **set_param_texture** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param, :ref:`Texture2D<class_Texture2D>` texture **)**
- :ref:`Texture2D<class_Texture2D>` **get_param_texture** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param **)** |const|

在每个粒子生命周期内，其角速度（旋转速度）将沿着此 :ref:`CurveTexture<class_CurveTexture>` 变化。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_angular_velocity_max:

.. rst-class:: classref-property

:ref:`float<class_float>` **angular_velocity_max** = ``0.0``

.. rst-class:: classref-property-setget

- void **set_param_max** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param, :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_param_max** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param **)** |const|

应用于每个粒子的最大初始角速度（旋转速度），以\ *度*\ 每秒为单位。

仅在 :ref:`particle_flag_disable_z<class_ParticleProcessMaterial_property_particle_flag_disable_z>` 或 :ref:`particle_flag_rotate_y<class_ParticleProcessMaterial_property_particle_flag_rotate_y>` 为 ``true``\ ，或 :ref:`BaseMaterial3D<class_BaseMaterial3D>` 使用 :ref:`BaseMaterial3D.BILLBOARD_PARTICLES<class_BaseMaterial3D_constant_BILLBOARD_PARTICLES>` 绘制粒子时应用。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_angular_velocity_min:

.. rst-class:: classref-property

:ref:`float<class_float>` **angular_velocity_min** = ``0.0``

.. rst-class:: classref-property-setget

- void **set_param_min** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param, :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_param_min** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param **)** |const|

:ref:`angular_velocity_max<class_ParticleProcessMaterial_property_angular_velocity_max>` 的对应最小值。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_anim_offset_curve:

.. rst-class:: classref-property

:ref:`Texture2D<class_Texture2D>` **anim_offset_curve**

.. rst-class:: classref-property-setget

- void **set_param_texture** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param, :ref:`Texture2D<class_Texture2D>` texture **)**
- :ref:`Texture2D<class_Texture2D>` **get_param_texture** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param **)** |const|

每个粒子的动画偏移将沿着这个 :ref:`CurveTexture<class_CurveTexture>` 变化。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_anim_offset_max:

.. rst-class:: classref-property

:ref:`float<class_float>` **anim_offset_max** = ``0.0``

.. rst-class:: classref-property-setget

- void **set_param_max** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param, :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_param_max** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param **)** |const|

与纹理中的帧索引相对应的最大动画偏移量。\ ``0`` 是第一帧，\ ``1`` 是最后一帧。参见 :ref:`CanvasItemMaterial.particles_animation<class_CanvasItemMaterial_property_particles_animation>`\ 。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_anim_offset_min:

.. rst-class:: classref-property

:ref:`float<class_float>` **anim_offset_min** = ``0.0``

.. rst-class:: classref-property-setget

- void **set_param_min** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param, :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_param_min** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param **)** |const|

:ref:`anim_offset_max<class_ParticleProcessMaterial_property_anim_offset_max>` 的对应最小值。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_anim_speed_curve:

.. rst-class:: classref-property

:ref:`Texture2D<class_Texture2D>` **anim_speed_curve**

.. rst-class:: classref-property-setget

- void **set_param_texture** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param, :ref:`Texture2D<class_Texture2D>` texture **)**
- :ref:`Texture2D<class_Texture2D>` **get_param_texture** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param **)** |const|

每个粒子的动画速度将沿着这个 :ref:`CurveTexture<class_CurveTexture>` 变化。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_anim_speed_max:

.. rst-class:: classref-property

:ref:`float<class_float>` **anim_speed_max** = ``0.0``

.. rst-class:: classref-property-setget

- void **set_param_max** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param, :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_param_max** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param **)** |const|

最大粒子动画速度。\ ``1`` 的动画速度是指粒子在生命周期内会做完整的 ``0`` 到 ``1`` 的偏移循环，\ ``2`` 则表示 ``2`` 个循环，如此等等。

当动画速度大于 ``1`` 时，如果希望动画重复，请记住启用 :ref:`CanvasItemMaterial.particles_anim_loop<class_CanvasItemMaterial_property_particles_anim_loop>` 属性。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_anim_speed_min:

.. rst-class:: classref-property

:ref:`float<class_float>` **anim_speed_min** = ``0.0``

.. rst-class:: classref-property-setget

- void **set_param_min** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param, :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_param_min** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param **)** |const|

:ref:`anim_speed_max<class_ParticleProcessMaterial_property_anim_speed_max>` 的对应最小值。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_attractor_interaction_enabled:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **attractor_interaction_enabled** = ``true``

.. rst-class:: classref-property-setget

- void **set_attractor_interaction_enabled** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **is_attractor_interaction_enabled** **(** **)**

如果为 ``true``\ ，则启用与粒子吸引器的交互。在 3D 中，吸引力仅发生在 :ref:`GPUParticles3D<class_GPUParticles3D>` 节点的 :ref:`GPUParticles3D.visibility_aabb<class_GPUParticles3D_property_visibility_aabb>` 定义的区域内。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_collision_bounce:

.. rst-class:: classref-property

:ref:`float<class_float>` **collision_bounce**

.. rst-class:: classref-property-setget

- void **set_collision_bounce** **(** :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_collision_bounce** **(** **)**

粒子的弹性。值范围从 ``0``\ （无弹跳）到 ``1``\ （完全弹跳）。仅当 :ref:`collision_mode<class_ParticleProcessMaterial_property_collision_mode>` 为 :ref:`COLLISION_RIGID<class_ParticleProcessMaterial_constant_COLLISION_RIGID>` 时有效。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_collision_friction:

.. rst-class:: classref-property

:ref:`float<class_float>` **collision_friction**

.. rst-class:: classref-property-setget

- void **set_collision_friction** **(** :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_collision_friction** **(** **)**

粒子的摩擦。值范围从 ``0``\ （无摩擦）到 ``1``\ （最大摩擦）。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_collision_mode:

.. rst-class:: classref-property

:ref:`CollisionMode<enum_ParticleProcessMaterial_CollisionMode>` **collision_mode** = ``0``

.. rst-class:: classref-property-setget

- void **set_collision_mode** **(** :ref:`CollisionMode<enum_ParticleProcessMaterial_CollisionMode>` value **)**
- :ref:`CollisionMode<enum_ParticleProcessMaterial_CollisionMode>` **get_collision_mode** **(** **)**

粒子的碰撞模式。

\ **注意：**\ 3D 粒子只能与 :ref:`GPUParticlesCollision3D<class_GPUParticlesCollision3D>` 节点碰撞，无法与 :ref:`PhysicsBody3D<class_PhysicsBody3D>` 节点碰撞。要使粒子与不同的物体碰撞，可以将 :ref:`GPUParticlesCollision3D<class_GPUParticlesCollision3D>` 节点添加为 :ref:`PhysicsBody3D<class_PhysicsBody3D>` 节点的子节点。在 3D 中，碰撞仅发生在 :ref:`GPUParticles3D<class_GPUParticles3D>` 节点的 :ref:`GPUParticles3D.visibility_aabb<class_GPUParticles3D_property_visibility_aabb>` 定义的区域内。

\ **注意：**\ 2D 粒子只能与 :ref:`LightOccluder2D<class_LightOccluder2D>` 节点碰撞，无法与 :ref:`PhysicsBody2D<class_PhysicsBody2D>` 节点碰撞。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_collision_use_scale:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **collision_use_scale** = ``false``

.. rst-class:: classref-property-setget

- void **set_collision_use_scale** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **is_collision_using_scale** **(** **)**

如果为 ``true``\ ，\ :ref:`GPUParticles3D.collision_base_size<class_GPUParticles3D_property_collision_base_size>` 乘以粒子的有效缩放（请参阅 :ref:`scale_min<class_ParticleProcessMaterial_property_scale_min>`\ 、\ :ref:`scale_max<class_ParticleProcessMaterial_property_scale_max>`\ 、\ :ref:`scale_curve<class_ParticleProcessMaterial_property_scale_curve>`\ 、和 :ref:`scale_over_velocity_curve<class_ParticleProcessMaterial_property_scale_over_velocity_curve>`\ ）。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_color:

.. rst-class:: classref-property

:ref:`Color<class_Color>` **color** = ``Color(1, 1, 1, 1)``

.. rst-class:: classref-property-setget

- void **set_color** **(** :ref:`Color<class_Color>` value **)**
- :ref:`Color<class_Color>` **get_color** **(** **)**

每个粒子的初始颜色。如果定义了 :ref:`GPUParticles2D<class_GPUParticles2D>` 的 ``texture``\ ，它将乘以该颜色。

\ **注意：**\ :ref:`color<class_ParticleProcessMaterial_property_color>` 乘以粒子网格的顶点颜色。要在 :ref:`BaseMaterial3D<class_BaseMaterial3D>` 上产生可见效果，\ :ref:`BaseMaterial3D.vertex_color_use_as_albedo<class_BaseMaterial3D_property_vertex_color_use_as_albedo>` *必须*\ 为 ``true``\ 。对于 :ref:`ShaderMaterial<class_ShaderMaterial>`\ ，必须在着色器的 ``fragment()`` 函数中插入 ``ALBEDO *= COLOR.rgb;``\ 。否则，\ :ref:`color<class_ParticleProcessMaterial_property_color>` 将没有可见效果。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_color_initial_ramp:

.. rst-class:: classref-property

:ref:`Texture2D<class_Texture2D>` **color_initial_ramp**

.. rst-class:: classref-property-setget

- void **set_color_initial_ramp** **(** :ref:`Texture2D<class_Texture2D>` value **)**
- :ref:`Texture2D<class_Texture2D>` **get_color_initial_ramp** **(** **)**

每个粒子的初始颜色将沿着该 :ref:`GradientTexture1D<class_GradientTexture1D>`\ （乘以 :ref:`color<class_ParticleProcessMaterial_property_color>`\ ）而变化。

\ **注意：**\ :ref:`color_initial_ramp<class_ParticleProcessMaterial_property_color_initial_ramp>` 乘以粒子网格的顶点颜色。要在 :ref:`BaseMaterial3D<class_BaseMaterial3D>` 上产生可见效果，\ :ref:`BaseMaterial3D.vertex_color_use_as_albedo<class_BaseMaterial3D_property_vertex_color_use_as_albedo>` *必须*\ 为 ``true``\ 。对于 :ref:`ShaderMaterial<class_ShaderMaterial>`\ ，必须在着色器的 ``fragment()`` 函数中插入 ``ALBEDO *= COLOR.rgb;``\ 。否则，\ :ref:`color_initial_ramp<class_ParticleProcessMaterial_property_color_initial_ramp>` 将没有可见效果。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_color_ramp:

.. rst-class:: classref-property

:ref:`Texture2D<class_Texture2D>` **color_ramp**

.. rst-class:: classref-property-setget

- void **set_color_ramp** **(** :ref:`Texture2D<class_Texture2D>` value **)**
- :ref:`Texture2D<class_Texture2D>` **get_color_ramp** **(** **)**

每个粒子的颜色将在其生命周期内沿该 :ref:`GradientTexture1D<class_GradientTexture1D>` 变化（乘以 :ref:`color<class_ParticleProcessMaterial_property_color>`\ ）。

\ **注意：**\ :ref:`color_ramp<class_ParticleProcessMaterial_property_color_ramp>` 乘以粒子网格的顶点颜色。要在 :ref:`BaseMaterial3D<class_BaseMaterial3D>` 上产生可见效果，\ :ref:`BaseMaterial3D.vertex_color_use_as_albedo<class_BaseMaterial3D_property_vertex_color_use_as_albedo>` *必须*\ 为 ``true``\ 。对于 :ref:`ShaderMaterial<class_ShaderMaterial>`\ ，必须在着色器的 ``fragment()`` 函数中插入 ``ALBEDO *= COLOR.rgb;``\ 。否则，\ :ref:`color_ramp<class_ParticleProcessMaterial_property_color_ramp>` 将没有可见效果。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_damping_curve:

.. rst-class:: classref-property

:ref:`Texture2D<class_Texture2D>` **damping_curve**

.. rst-class:: classref-property-setget

- void **set_param_texture** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param, :ref:`Texture2D<class_Texture2D>` texture **)**
- :ref:`Texture2D<class_Texture2D>` **get_param_texture** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param **)** |const|

阻尼将沿着这个 :ref:`CurveTexture<class_CurveTexture>` 变化。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_damping_max:

.. rst-class:: classref-property

:ref:`float<class_float>` **damping_max** = ``0.0``

.. rst-class:: classref-property-setget

- void **set_param_max** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param, :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_param_max** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param **)** |const|

粒子失去速度的最大速率。例如 ``100`` 的值表示粒子将在 ``1`` 秒内，速度从 ``100`` 变为 ``0``\ 。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_damping_min:

.. rst-class:: classref-property

:ref:`float<class_float>` **damping_min** = ``0.0``

.. rst-class:: classref-property-setget

- void **set_param_min** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param, :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_param_min** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param **)** |const|

:ref:`damping_max<class_ParticleProcessMaterial_property_damping_max>` 的对应最小值。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_direction:

.. rst-class:: classref-property

:ref:`Vector3<class_Vector3>` **direction** = ``Vector3(1, 0, 0)``

.. rst-class:: classref-property-setget

- void **set_direction** **(** :ref:`Vector3<class_Vector3>` value **)**
- :ref:`Vector3<class_Vector3>` **get_direction** **(** **)**

指定粒子发射方向的单位向量。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_directional_velocity_curve:

.. rst-class:: classref-property

:ref:`Texture2D<class_Texture2D>` **directional_velocity_curve**

.. rst-class:: classref-property-setget

- void **set_param_texture** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param, :ref:`Texture2D<class_Texture2D>` texture **)**
- :ref:`Texture2D<class_Texture2D>` **get_param_texture** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param **)** |const|

一条曲线，指定粒子系统在其生命周期内沿每个轴的速度。

\ **注意：**\ 动画速度不会受到阻尼的影响，请使用 :ref:`velocity_limit_curve<class_ParticleProcessMaterial_property_velocity_limit_curve>` 代替。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_directional_velocity_max:

.. rst-class:: classref-property

:ref:`float<class_float>` **directional_velocity_max**

.. rst-class:: classref-property-setget

- void **set_param_max** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param, :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_param_max** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param **)** |const|

最大方向速度值，乘以 :ref:`directional_velocity_curve<class_ParticleProcessMaterial_property_directional_velocity_curve>`\ 。

\ **注意：**\ 动画速度不会受到阻尼的影响，请使用 :ref:`velocity_limit_curve<class_ParticleProcessMaterial_property_velocity_limit_curve>` 代替。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_directional_velocity_min:

.. rst-class:: classref-property

:ref:`float<class_float>` **directional_velocity_min**

.. rst-class:: classref-property-setget

- void **set_param_min** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param, :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_param_min** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param **)** |const|

最小方向速度值，乘以 :ref:`directional_velocity_curve<class_ParticleProcessMaterial_property_directional_velocity_curve>`\ 。

\ **注意：**\ 动画速度不会受到阻尼的影响，请使用 :ref:`velocity_limit_curve<class_ParticleProcessMaterial_property_velocity_limit_curve>` 代替。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_emission_box_extents:

.. rst-class:: classref-property

:ref:`Vector3<class_Vector3>` **emission_box_extents**

.. rst-class:: classref-property-setget

- void **set_emission_box_extents** **(** :ref:`Vector3<class_Vector3>` value **)**
- :ref:`Vector3<class_Vector3>` **get_emission_box_extents** **(** **)**

:ref:`emission_shape<class_ParticleProcessMaterial_property_emission_shape>` 被设置为 :ref:`EMISSION_SHAPE_BOX<class_ParticleProcessMaterial_constant_EMISSION_SHAPE_BOX>` 时，该框的范围。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_emission_color_texture:

.. rst-class:: classref-property

:ref:`Texture2D<class_Texture2D>` **emission_color_texture**

.. rst-class:: classref-property-setget

- void **set_emission_color_texture** **(** :ref:`Texture2D<class_Texture2D>` value **)**
- :ref:`Texture2D<class_Texture2D>` **get_emission_color_texture** **(** **)**

粒子颜色将被调制，调制使用的颜色将通过对该纹理在与 :ref:`emission_point_texture<class_ParticleProcessMaterial_property_emission_point_texture>` 相同的点处进行采样来确定。

\ **注意：**\ :ref:`emission_color_texture<class_ParticleProcessMaterial_property_emission_color_texture>` 乘以粒子网格的顶点颜色。要在 :ref:`BaseMaterial3D<class_BaseMaterial3D>` 上产生可见效果，\ :ref:`BaseMaterial3D.vertex_color_use_as_albedo<class_BaseMaterial3D_property_vertex_color_use_as_albedo>` *必须*\ 为 ``true``\ 。对于 :ref:`ShaderMaterial<class_ShaderMaterial>`\ ，必须在着色器的 ``fragment()`` 函数中插入 ``ALBEDO *= COLOR.rgb;``\ 。否则，\ :ref:`emission_color_texture<class_ParticleProcessMaterial_property_emission_color_texture>` 将没有可见效果。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_emission_curve:

.. rst-class:: classref-property

:ref:`Texture2D<class_Texture2D>` **emission_curve**

.. rst-class:: classref-property-setget

- void **set_emission_curve** **(** :ref:`Texture2D<class_Texture2D>` value **)**
- :ref:`Texture2D<class_Texture2D>` **get_emission_curve** **(** **)**

每个粒子的颜色将在其生命周期内乘以该 :ref:`CurveTexture<class_CurveTexture>`\ 。

\ **注意：**\ 除非渲染材质被标记为无阴影，否则该属性不会产生可见效果。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_emission_normal_texture:

.. rst-class:: classref-property

:ref:`Texture2D<class_Texture2D>` **emission_normal_texture**

.. rst-class:: classref-property-setget

- void **set_emission_normal_texture** **(** :ref:`Texture2D<class_Texture2D>` value **)**
- :ref:`Texture2D<class_Texture2D>` **get_emission_normal_texture** **(** **)**

粒子的速度和旋转将通过在与\ :ref:`emission_point_texture<class_ParticleProcessMaterial_property_emission_point_texture>`\ 相同的点上对该纹理进行采样来设置。仅在\ :ref:`EMISSION_SHAPE_DIRECTED_POINTS<class_ParticleProcessMaterial_constant_EMISSION_SHAPE_DIRECTED_POINTS>`\ 中使用。可以通过选择工具栏中 "粒子 "工具下的 "从网格/节点创建发射点"，从网格或节点自动创建。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_emission_point_count:

.. rst-class:: classref-property

:ref:`int<class_int>` **emission_point_count**

.. rst-class:: classref-property-setget

- void **set_emission_point_count** **(** :ref:`int<class_int>` value **)**
- :ref:`int<class_int>` **get_emission_point_count** **(** **)**

:ref:`emission_shape<class_ParticleProcessMaterial_property_emission_shape>` 被设置为 :ref:`EMISSION_SHAPE_POINTS<class_ParticleProcessMaterial_constant_EMISSION_SHAPE_POINTS>` 或 :ref:`EMISSION_SHAPE_DIRECTED_POINTS<class_ParticleProcessMaterial_constant_EMISSION_SHAPE_DIRECTED_POINTS>` 时，发射点的数量。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_emission_point_texture:

.. rst-class:: classref-property

:ref:`Texture2D<class_Texture2D>` **emission_point_texture**

.. rst-class:: classref-property-setget

- void **set_emission_point_texture** **(** :ref:`Texture2D<class_Texture2D>` value **)**
- :ref:`Texture2D<class_Texture2D>` **get_emission_point_texture** **(** **)**

粒子将被发射到由随机采样纹理所决定的位置。与\ :ref:`EMISSION_SHAPE_POINTS<class_ParticleProcessMaterial_constant_EMISSION_SHAPE_POINTS>`\ 和\ :ref:`EMISSION_SHAPE_DIRECTED_POINTS<class_ParticleProcessMaterial_constant_EMISSION_SHAPE_DIRECTED_POINTS>`\ 一起使用。可以通过选择工具栏中的“粒子”工具下的“从网格/节点中创建发射点”自动创建网格或节点。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_emission_ring_axis:

.. rst-class:: classref-property

:ref:`Vector3<class_Vector3>` **emission_ring_axis**

.. rst-class:: classref-property-setget

- void **set_emission_ring_axis** **(** :ref:`Vector3<class_Vector3>` value **)**
- :ref:`Vector3<class_Vector3>` **get_emission_ring_axis** **(** **)**

使用形为 :ref:`EMISSION_SHAPE_RING<class_ParticleProcessMaterial_constant_EMISSION_SHAPE_RING>` 的发射器时环的轴。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_emission_ring_height:

.. rst-class:: classref-property

:ref:`float<class_float>` **emission_ring_height**

.. rst-class:: classref-property-setget

- void **set_emission_ring_height** **(** :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_emission_ring_height** **(** **)**

使用形为 :ref:`EMISSION_SHAPE_RING<class_ParticleProcessMaterial_constant_EMISSION_SHAPE_RING>` 的发射器时环的高度。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_emission_ring_inner_radius:

.. rst-class:: classref-property

:ref:`float<class_float>` **emission_ring_inner_radius**

.. rst-class:: classref-property-setget

- void **set_emission_ring_inner_radius** **(** :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_emission_ring_inner_radius** **(** **)**

使用形为 :ref:`EMISSION_SHAPE_RING<class_ParticleProcessMaterial_constant_EMISSION_SHAPE_RING>` 的发射器时环的内半径。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_emission_ring_radius:

.. rst-class:: classref-property

:ref:`float<class_float>` **emission_ring_radius**

.. rst-class:: classref-property-setget

- void **set_emission_ring_radius** **(** :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_emission_ring_radius** **(** **)**

使用形为 :ref:`EMISSION_SHAPE_RING<class_ParticleProcessMaterial_constant_EMISSION_SHAPE_RING>` 的发射器时环的半径。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_emission_shape:

.. rst-class:: classref-property

:ref:`EmissionShape<enum_ParticleProcessMaterial_EmissionShape>` **emission_shape** = ``0``

.. rst-class:: classref-property-setget

- void **set_emission_shape** **(** :ref:`EmissionShape<enum_ParticleProcessMaterial_EmissionShape>` value **)**
- :ref:`EmissionShape<enum_ParticleProcessMaterial_EmissionShape>` **get_emission_shape** **(** **)**

粒子将在这个区域内发射。使用\ :ref:`EmissionShape<enum_ParticleProcessMaterial_EmissionShape>`\ 常量作为值。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_emission_shape_offset:

.. rst-class:: classref-property

:ref:`Vector3<class_Vector3>` **emission_shape_offset** = ``Vector3(0, 0, 0)``

.. rst-class:: classref-property-setget

- void **set_emission_shape_offset** **(** :ref:`Vector3<class_Vector3>` value **)**
- :ref:`Vector3<class_Vector3>` **get_emission_shape_offset** **(** **)**

:ref:`emission_shape<class_ParticleProcessMaterial_property_emission_shape>` 在局部空间中的偏移量。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_emission_shape_scale:

.. rst-class:: classref-property

:ref:`Vector3<class_Vector3>` **emission_shape_scale** = ``Vector3(1, 1, 1)``

.. rst-class:: classref-property-setget

- void **set_emission_shape_scale** **(** :ref:`Vector3<class_Vector3>` value **)**
- :ref:`Vector3<class_Vector3>` **get_emission_shape_scale** **(** **)**

局部空间中 :ref:`emission_shape<class_ParticleProcessMaterial_property_emission_shape>` 的缩放。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_emission_sphere_radius:

.. rst-class:: classref-property

:ref:`float<class_float>` **emission_sphere_radius**

.. rst-class:: classref-property-setget

- void **set_emission_sphere_radius** **(** :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_emission_sphere_radius** **(** **)**

:ref:`emission_shape<class_ParticleProcessMaterial_property_emission_shape>` 被设置为 :ref:`EMISSION_SHAPE_SPHERE<class_ParticleProcessMaterial_constant_EMISSION_SHAPE_SPHERE>` 时，该球体的半径。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_flatness:

.. rst-class:: classref-property

:ref:`float<class_float>` **flatness** = ``0.0``

.. rst-class:: classref-property-setget

- void **set_flatness** **(** :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_flatness** **(** **)**

沿 Y 轴的 :ref:`spread<class_ParticleProcessMaterial_property_spread>` 量。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_gravity:

.. rst-class:: classref-property

:ref:`Vector3<class_Vector3>` **gravity** = ``Vector3(0, -9.8, 0)``

.. rst-class:: classref-property-setget

- void **set_gravity** **(** :ref:`Vector3<class_Vector3>` value **)**
- :ref:`Vector3<class_Vector3>` **get_gravity** **(** **)**

应用于每个粒子的重力。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_hue_variation_curve:

.. rst-class:: classref-property

:ref:`Texture2D<class_Texture2D>` **hue_variation_curve**

.. rst-class:: classref-property-setget

- void **set_param_texture** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param, :ref:`Texture2D<class_Texture2D>` texture **)**
- :ref:`Texture2D<class_Texture2D>` **get_param_texture** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param **)** |const|

每个粒子的色调将沿着这个 :ref:`CurveTexture<class_CurveTexture>` 变化。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_hue_variation_max:

.. rst-class:: classref-property

:ref:`float<class_float>` **hue_variation_max** = ``0.0``

.. rst-class:: classref-property-setget

- void **set_param_max** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param, :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_param_max** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param **)** |const|

应用于每个粒子的最大初始色相变化。会改变粒子颜色的色相。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_hue_variation_min:

.. rst-class:: classref-property

:ref:`float<class_float>` **hue_variation_min** = ``0.0``

.. rst-class:: classref-property-setget

- void **set_param_min** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param, :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_param_min** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param **)** |const|

:ref:`hue_variation_max<class_ParticleProcessMaterial_property_hue_variation_max>` 的对应最小值。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_inherit_velocity_ratio:

.. rst-class:: classref-property

:ref:`float<class_float>` **inherit_velocity_ratio** = ``0.0``

.. rst-class:: classref-property-setget

- void **set_inherit_velocity_ratio** **(** :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_inherit_velocity_ratio** **(** **)**

每个粒子在生成时继承的相应 :ref:`GPUParticles2D<class_GPUParticles2D>` 或 :ref:`GPUParticles3D<class_GPUParticles3D>` 的速度百分比。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_initial_velocity_max:

.. rst-class:: classref-property

:ref:`float<class_float>` **initial_velocity_max** = ``0.0``

.. rst-class:: classref-property-setget

- void **set_param_max** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param, :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_param_max** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param **)** |const|

每个粒子的最大初始速度大小。方向来自 :ref:`direction<class_ParticleProcessMaterial_property_direction>` 和 :ref:`spread<class_ParticleProcessMaterial_property_spread>`\ 。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_initial_velocity_min:

.. rst-class:: classref-property

:ref:`float<class_float>` **initial_velocity_min** = ``0.0``

.. rst-class:: classref-property-setget

- void **set_param_min** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param, :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_param_min** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param **)** |const|

:ref:`initial_velocity_max<class_ParticleProcessMaterial_property_initial_velocity_max>` 的对应最小值。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_lifetime_randomness:

.. rst-class:: classref-property

:ref:`float<class_float>` **lifetime_randomness** = ``0.0``

.. rst-class:: classref-property-setget

- void **set_lifetime_randomness** **(** :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_lifetime_randomness** **(** **)**

粒子寿命随机比率。粒子寿命的公式为 ``lifetime * (1.0 - randf() * lifetime_randomness)``\ 。例如 :ref:`lifetime_randomness<class_ParticleProcessMaterial_property_lifetime_randomness>` 为 ``0.4`` 时，寿命会被缩放为原本的 ``0.6`` 到 ``1.0`` 倍。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_linear_accel_curve:

.. rst-class:: classref-property

:ref:`Texture2D<class_Texture2D>` **linear_accel_curve**

.. rst-class:: classref-property-setget

- void **set_param_texture** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param, :ref:`Texture2D<class_Texture2D>` texture **)**
- :ref:`Texture2D<class_Texture2D>` **get_param_texture** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param **)** |const|

每个粒子的线性加速度将沿着这个 :ref:`CurveTexture<class_CurveTexture>` 变化。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_linear_accel_max:

.. rst-class:: classref-property

:ref:`float<class_float>` **linear_accel_max** = ``0.0``

.. rst-class:: classref-property-setget

- void **set_param_max** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param, :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_param_max** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param **)** |const|

在运动方向上应用于每个粒子的最大线性加速度。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_linear_accel_min:

.. rst-class:: classref-property

:ref:`float<class_float>` **linear_accel_min** = ``0.0``

.. rst-class:: classref-property-setget

- void **set_param_min** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param, :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_param_min** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param **)** |const|

:ref:`linear_accel_max<class_ParticleProcessMaterial_property_linear_accel_max>` 的对应最小值。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_orbit_velocity_curve:

.. rst-class:: classref-property

:ref:`Texture2D<class_Texture2D>` **orbit_velocity_curve**

.. rst-class:: classref-property-setget

- void **set_param_texture** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param, :ref:`Texture2D<class_Texture2D>` texture **)**
- :ref:`Texture2D<class_Texture2D>` **get_param_texture** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param **)** |const|

每个粒子的轨道速度将沿着该 :ref:`CurveTexture<class_CurveTexture>` 变化。

\ **注意：**\ 对于 3D 轨道速度，请使用 :ref:`CurveXYZTexture<class_CurveXYZTexture>`\ 。

\ **注意：**\ 动画速度不会受到阻尼的影响，请使用 :ref:`velocity_limit_curve<class_ParticleProcessMaterial_property_velocity_limit_curve>` 代替。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_orbit_velocity_max:

.. rst-class:: classref-property

:ref:`float<class_float>` **orbit_velocity_max** = ``0.0``

.. rst-class:: classref-property-setget

- void **set_param_max** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param, :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_param_max** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param **)** |const|

应用于每个粒子的最大轨道速度。使粒子围绕原点环绕。以每秒围绕原点的完整旋转次数指定。

\ **注意：**\ 动画速度不会受到阻尼的影响，请使用 :ref:`velocity_limit_curve<class_ParticleProcessMaterial_property_velocity_limit_curve>` 代替。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_orbit_velocity_min:

.. rst-class:: classref-property

:ref:`float<class_float>` **orbit_velocity_min** = ``0.0``

.. rst-class:: classref-property-setget

- void **set_param_min** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param, :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_param_min** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param **)** |const|

:ref:`orbit_velocity_max<class_ParticleProcessMaterial_property_orbit_velocity_max>` 的最小等效值。

\ **注意：**\ 动画速度不会受到阻尼的影响，请使用 :ref:`velocity_limit_curve<class_ParticleProcessMaterial_property_velocity_limit_curve>` 代替。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_particle_flag_align_y:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **particle_flag_align_y** = ``false``

.. rst-class:: classref-property-setget

- void **set_particle_flag** **(** :ref:`ParticleFlags<enum_ParticleProcessMaterial_ParticleFlags>` particle_flag, :ref:`bool<class_bool>` enable **)**
- :ref:`bool<class_bool>` **get_particle_flag** **(** :ref:`ParticleFlags<enum_ParticleProcessMaterial_ParticleFlags>` particle_flag **)** |const|

将粒子的 Y 轴与其速度方向对齐。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_particle_flag_damping_as_friction:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **particle_flag_damping_as_friction** = ``false``

.. rst-class:: classref-property-setget

- void **set_particle_flag** **(** :ref:`ParticleFlags<enum_ParticleProcessMaterial_ParticleFlags>` particle_flag, :ref:`bool<class_bool>` enable **)**
- :ref:`bool<class_bool>` **get_particle_flag** **(** :ref:`ParticleFlags<enum_ParticleProcessMaterial_ParticleFlags>` particle_flag **)** |const|

将阻尼属性的行为从线性减速度更改为基于速度百分比的减速度。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_particle_flag_disable_z:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **particle_flag_disable_z** = ``false``

.. rst-class:: classref-property-setget

- void **set_particle_flag** **(** :ref:`ParticleFlags<enum_ParticleProcessMaterial_ParticleFlags>` particle_flag, :ref:`bool<class_bool>` enable **)**
- :ref:`bool<class_bool>` **get_particle_flag** **(** :ref:`ParticleFlags<enum_ParticleProcessMaterial_ParticleFlags>` particle_flag **)** |const|

如果为 ``true``\ ，则粒子将不会在 z 轴上移动。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_particle_flag_rotate_y:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **particle_flag_rotate_y** = ``false``

.. rst-class:: classref-property-setget

- void **set_particle_flag** **(** :ref:`ParticleFlags<enum_ParticleProcessMaterial_ParticleFlags>` particle_flag, :ref:`bool<class_bool>` enable **)**
- :ref:`bool<class_bool>` **get_particle_flag** **(** :ref:`ParticleFlags<enum_ParticleProcessMaterial_ParticleFlags>` particle_flag **)** |const|

如果为 ``true``\ ，则粒子绕 Y 轴旋转 :ref:`angle_min<class_ParticleProcessMaterial_property_angle_min>`\ 。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_radial_accel_curve:

.. rst-class:: classref-property

:ref:`Texture2D<class_Texture2D>` **radial_accel_curve**

.. rst-class:: classref-property-setget

- void **set_param_texture** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param, :ref:`Texture2D<class_Texture2D>` texture **)**
- :ref:`Texture2D<class_Texture2D>` **get_param_texture** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param **)** |const|

每个粒子的径向加速度将沿着这个 :ref:`CurveTexture<class_CurveTexture>` 变化。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_radial_accel_max:

.. rst-class:: classref-property

:ref:`float<class_float>` **radial_accel_max** = ``0.0``

.. rst-class:: classref-property-setget

- void **set_param_max** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param, :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_param_max** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param **)** |const|

应用于每个粒子的最大径向加速度。使粒子加速远离原点；或如果为负，则加速靠近原点。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_radial_accel_min:

.. rst-class:: classref-property

:ref:`float<class_float>` **radial_accel_min** = ``0.0``

.. rst-class:: classref-property-setget

- void **set_param_min** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param, :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_param_min** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param **)** |const|

:ref:`radial_accel_max<class_ParticleProcessMaterial_property_radial_accel_max>` 的对应最小值。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_radial_velocity_curve:

.. rst-class:: classref-property

:ref:`Texture2D<class_Texture2D>` **radial_velocity_curve**

.. rst-class:: classref-property-setget

- void **set_param_texture** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param, :ref:`Texture2D<class_Texture2D>` texture **)**
- :ref:`Texture2D<class_Texture2D>` **get_param_texture** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param **)** |const|

一个 :ref:`CurveTexture<class_CurveTexture>`\ ，定义粒子生命周期中远离（或朝向）\ :ref:`velocity_pivot<class_ParticleProcessMaterial_property_velocity_pivot>` 的速度。

\ **注意：**\ 动画速度不会受到阻尼的影响，请使用 :ref:`velocity_limit_curve<class_ParticleProcessMaterial_property_velocity_limit_curve>` 代替。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_radial_velocity_max:

.. rst-class:: classref-property

:ref:`float<class_float>` **radial_velocity_max** = ``0.0``

.. rst-class:: classref-property-setget

- void **set_param_max** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param, :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_param_max** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param **)** |const|

应用于每个粒子的最大径向速度。使粒子远离 :ref:`velocity_pivot<class_ParticleProcessMaterial_property_velocity_pivot>`\ ，如果为负则朝它移动。

\ **注意：**\ 动画速度不会受到阻尼的影响，请使用 :ref:`velocity_limit_curve<class_ParticleProcessMaterial_property_velocity_limit_curve>` 代替。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_radial_velocity_min:

.. rst-class:: classref-property

:ref:`float<class_float>` **radial_velocity_min** = ``0.0``

.. rst-class:: classref-property-setget

- void **set_param_min** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param, :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_param_min** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param **)** |const|

应用于每个粒子的最小径向速度。使粒子远离 :ref:`velocity_pivot<class_ParticleProcessMaterial_property_velocity_pivot>`\ ，如果为负则朝它移动。

\ **注意：**\ 动画速度不会受到阻尼的影响，请使用 :ref:`velocity_limit_curve<class_ParticleProcessMaterial_property_velocity_limit_curve>` 代替。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_scale_curve:

.. rst-class:: classref-property

:ref:`Texture2D<class_Texture2D>` **scale_curve**

.. rst-class:: classref-property-setget

- void **set_param_texture** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param, :ref:`Texture2D<class_Texture2D>` texture **)**
- :ref:`Texture2D<class_Texture2D>` **get_param_texture** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param **)** |const|

每个粒子的缩放将沿着这个 :ref:`CurveTexture<class_CurveTexture>` 变化。如果改为提供一个 :ref:`CurveXYZTexture<class_CurveXYZTexture>`\ ，则缩放将按轴分离。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_scale_max:

.. rst-class:: classref-property

:ref:`float<class_float>` **scale_max** = ``1.0``

.. rst-class:: classref-property-setget

- void **set_param_max** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param, :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_param_max** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param **)** |const|

应用于每个粒子的最大初始缩放。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_scale_min:

.. rst-class:: classref-property

:ref:`float<class_float>` **scale_min** = ``1.0``

.. rst-class:: classref-property-setget

- void **set_param_min** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param, :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_param_min** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param **)** |const|

:ref:`scale_max<class_ParticleProcessMaterial_property_scale_max>` 对应的最小值。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_scale_over_velocity_curve:

.. rst-class:: classref-property

:ref:`Texture2D<class_Texture2D>` **scale_over_velocity_curve**

.. rst-class:: classref-property-setget

- void **set_param_texture** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param, :ref:`Texture2D<class_Texture2D>` texture **)**
- :ref:`Texture2D<class_Texture2D>` **get_param_texture** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param **)** |const|

根据 :ref:`CurveTexture<class_CurveTexture>` 或 :ref:`CurveXYZTexture<class_CurveXYZTexture>` 缩放每个粒子的速度。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_scale_over_velocity_max:

.. rst-class:: classref-property

:ref:`float<class_float>` **scale_over_velocity_max** = ``0.0``

.. rst-class:: classref-property-setget

- void **set_param_max** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param, :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_param_max** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param **)** |const|

:ref:`scale_over_velocity_curve<class_ParticleProcessMaterial_property_scale_over_velocity_curve>` 的最大速度参考值。

\ :ref:`scale_over_velocity_curve<class_ParticleProcessMaterial_property_scale_over_velocity_curve>` 将在 :ref:`scale_over_velocity_min<class_ParticleProcessMaterial_property_scale_over_velocity_min>` 和 :ref:`scale_over_velocity_max<class_ParticleProcessMaterial_property_scale_over_velocity_max>` 之间插值。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_scale_over_velocity_min:

.. rst-class:: classref-property

:ref:`float<class_float>` **scale_over_velocity_min** = ``0.0``

.. rst-class:: classref-property-setget

- void **set_param_min** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param, :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_param_min** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param **)** |const|

:ref:`scale_over_velocity_curve<class_ParticleProcessMaterial_property_scale_over_velocity_curve>` 的最小速度参考值。

\ :ref:`scale_over_velocity_curve<class_ParticleProcessMaterial_property_scale_over_velocity_curve>` 将在 :ref:`scale_over_velocity_min<class_ParticleProcessMaterial_property_scale_over_velocity_min>` 和 :ref:`scale_over_velocity_max<class_ParticleProcessMaterial_property_scale_over_velocity_max>` 之间插值。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_spread:

.. rst-class:: classref-property

:ref:`float<class_float>` **spread** = ``45.0``

.. rst-class:: classref-property-setget

- void **set_spread** **(** :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_spread** **(** **)**

每个粒子的初始方向范围，从 ``+spread`` 度到 ``-spread`` 度。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_sub_emitter_amount_at_collision:

.. rst-class:: classref-property

:ref:`int<class_int>` **sub_emitter_amount_at_collision**

.. rst-class:: classref-property-setget

- void **set_sub_emitter_amount_at_collision** **(** :ref:`int<class_int>` value **)**
- :ref:`int<class_int>` **get_sub_emitter_amount_at_collision** **(** **)**

发生碰撞时从子发射器节点生成的粒子数量。当与主要粒子材质上的 :ref:`COLLISION_HIDE_ON_CONTACT<class_ParticleProcessMaterial_constant_COLLISION_HIDE_ON_CONTACT>` 结合使用时，可以用来实现雨滴撞击地面等效果。

\ **注意：**\ 该值不应超过\ *子发射器节点*\ （不是主节点）上定义的 :ref:`GPUParticles2D.amount<class_GPUParticles2D_property_amount>` 或 :ref:`GPUParticles3D.amount<class_GPUParticles3D_property_amount>`\ ，相对于子发射器的粒子寿命。如果超过粒子数量，则在足够的粒子过期之前，不会从子发射器中产生新的粒子。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_sub_emitter_amount_at_end:

.. rst-class:: classref-property

:ref:`int<class_int>` **sub_emitter_amount_at_end**

.. rst-class:: classref-property-setget

- void **set_sub_emitter_amount_at_end** **(** :ref:`int<class_int>` value **)**
- :ref:`int<class_int>` **get_sub_emitter_amount_at_end** **(** **)**

粒子过期时从子发射器节点生成的粒子数量。

\ **注意：**\ 该值不应超过\ *子发射器节点*\ （不是主节点）上定义的 :ref:`GPUParticles2D.amount<class_GPUParticles2D_property_amount>` 或 :ref:`GPUParticles3D.amount<class_GPUParticles3D_property_amount>`\ ，相对于子发射器的粒子寿命。如果超过粒子数量，则在足够的粒子过期之前，不会从子发射器中产生新的粒子。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_sub_emitter_frequency:

.. rst-class:: classref-property

:ref:`float<class_float>` **sub_emitter_frequency**

.. rst-class:: classref-property-setget

- void **set_sub_emitter_frequency** **(** :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_sub_emitter_frequency** **(** **)**

从子发射器节点发射粒子的频率。每 :ref:`sub_emitter_frequency<class_ParticleProcessMaterial_property_sub_emitter_frequency>` 秒就会产生一个粒子。

\ **注意：**\ 该值不应超过\ *子发射器节点*\ （不是主节点）上定义的 :ref:`GPUParticles2D.amount<class_GPUParticles2D_property_amount>` 或 :ref:`GPUParticles3D.amount<class_GPUParticles3D_property_amount>`\ ，相对于子发射器的粒子寿命。如果超过粒子数量，则在足够的粒子过期之前，不会从子发射器中产生新的粒子。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_sub_emitter_keep_velocity:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **sub_emitter_keep_velocity** = ``false``

.. rst-class:: classref-property-setget

- void **set_sub_emitter_keep_velocity** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **get_sub_emitter_keep_velocity** **(** **)**

如果为 ``true``\ ，则子发射器在其生成时继承父粒子的速度。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_sub_emitter_mode:

.. rst-class:: classref-property

:ref:`SubEmitterMode<enum_ParticleProcessMaterial_SubEmitterMode>` **sub_emitter_mode** = ``0``

.. rst-class:: classref-property-setget

- void **set_sub_emitter_mode** **(** :ref:`SubEmitterMode<enum_ParticleProcessMaterial_SubEmitterMode>` value **)**
- :ref:`SubEmitterMode<enum_ParticleProcessMaterial_SubEmitterMode>` **get_sub_emitter_mode** **(** **)**

粒子子发射器模式（参见 :ref:`GPUParticles2D.sub_emitter<class_GPUParticles2D_property_sub_emitter>` 和 :ref:`GPUParticles3D.sub_emitter<class_GPUParticles3D_property_sub_emitter>`\ ）。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_tangential_accel_curve:

.. rst-class:: classref-property

:ref:`Texture2D<class_Texture2D>` **tangential_accel_curve**

.. rst-class:: classref-property-setget

- void **set_param_texture** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param, :ref:`Texture2D<class_Texture2D>` texture **)**
- :ref:`Texture2D<class_Texture2D>` **get_param_texture** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param **)** |const|

每个粒子的切向加速度将沿着这个 :ref:`CurveTexture<class_CurveTexture>` 变化。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_tangential_accel_max:

.. rst-class:: classref-property

:ref:`float<class_float>` **tangential_accel_max** = ``0.0``

.. rst-class:: classref-property-setget

- void **set_param_max** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param, :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_param_max** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param **)** |const|

应用于每个粒子的最大切向加速度。切向加速度垂直于粒子的速度，从而使粒子产生涡旋运动。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_tangential_accel_min:

.. rst-class:: classref-property

:ref:`float<class_float>` **tangential_accel_min** = ``0.0``

.. rst-class:: classref-property-setget

- void **set_param_min** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param, :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_param_min** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param **)** |const|

:ref:`tangential_accel_max<class_ParticleProcessMaterial_property_tangential_accel_max>` 的对应最小值。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_turbulence_enabled:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **turbulence_enabled** = ``false``

.. rst-class:: classref-property-setget

- void **set_turbulence_enabled** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **get_turbulence_enabled** **(** **)**

如果为 ``true``\ ，则为粒子系统启用湍流。湍流可以（基于 3D 噪声图案）根据粒子的位置来改变粒子的移动。在 3D 中，可以用 :ref:`GPUParticlesAttractorVectorField3D<class_GPUParticlesAttractorVectorField3D>` 和 :ref:`NoiseTexture3D<class_NoiseTexture3D>` 作为世界空间湍流的平替，能够让不同粒子系统作出相同的反应。

\ **注意：**\ 启用湍流对于 GPU 有较高的性能消耗。请最多只对少量粒子系统启用湍流，以移动/Web 平台作为目标时请考虑禁用湍流。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_turbulence_influence_max:

.. rst-class:: classref-property

:ref:`float<class_float>` **turbulence_influence_max** = ``0.1``

.. rst-class:: classref-property-setget

- void **set_param_max** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param, :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_param_max** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param **)** |const|

对每个粒子的最大湍流影响。

对每个粒子的实际湍流影响量，计算为介于 :ref:`turbulence_influence_min<class_ParticleProcessMaterial_property_turbulence_influence_min>` 和 :ref:`turbulence_influence_max<class_ParticleProcessMaterial_property_turbulence_influence_max>` 之间的一个随机值，并乘以来自 :ref:`turbulence_influence_over_life<class_ParticleProcessMaterial_property_turbulence_influence_over_life>` 的湍流影响量。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_turbulence_influence_min:

.. rst-class:: classref-property

:ref:`float<class_float>` **turbulence_influence_min** = ``0.1``

.. rst-class:: classref-property-setget

- void **set_param_min** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param, :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_param_min** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param **)** |const|

对每个粒子的最小湍流影响。

对每个粒子的实际湍流影响量，计算为介于 :ref:`turbulence_influence_min<class_ParticleProcessMaterial_property_turbulence_influence_min>` 和 :ref:`turbulence_influence_max<class_ParticleProcessMaterial_property_turbulence_influence_max>` 之间的一个随机值，并乘以来自 :ref:`turbulence_influence_over_life<class_ParticleProcessMaterial_property_turbulence_influence_over_life>` 的湍流影响量。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_turbulence_influence_over_life:

.. rst-class:: classref-property

:ref:`Texture2D<class_Texture2D>` **turbulence_influence_over_life**

.. rst-class:: classref-property-setget

- void **set_param_texture** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param, :ref:`Texture2D<class_Texture2D>` texture **)**
- :ref:`Texture2D<class_Texture2D>` **get_param_texture** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param **)** |const|

每个粒子的湍流量，将在其生命周期内沿这条 :ref:`CurveTexture<class_CurveTexture>` 受到影响。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_turbulence_initial_displacement_max:

.. rst-class:: classref-property

:ref:`float<class_float>` **turbulence_initial_displacement_max** = ``0.0``

.. rst-class:: classref-property-setget

- void **set_param_max** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param, :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_param_max** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param **)** |const|

湍流对每个粒子出生位置的最大位移。

实际位移量将是基础湍流乘以一个介于 :ref:`turbulence_initial_displacement_min<class_ParticleProcessMaterial_property_turbulence_initial_displacement_min>` 和 :ref:`turbulence_initial_displacement_max<class_ParticleProcessMaterial_property_turbulence_initial_displacement_max>` 之间的随机值的系数。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_turbulence_initial_displacement_min:

.. rst-class:: classref-property

:ref:`float<class_float>` **turbulence_initial_displacement_min** = ``0.0``

.. rst-class:: classref-property-setget

- void **set_param_min** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param, :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_param_min** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param **)** |const|

湍流对每个粒子出生位置的最小位移。

实际位移量将是基础湍流乘以一个介于 :ref:`turbulence_initial_displacement_min<class_ParticleProcessMaterial_property_turbulence_initial_displacement_min>` 和 :ref:`turbulence_initial_displacement_max<class_ParticleProcessMaterial_property_turbulence_initial_displacement_max>` 之间的随机值的系数。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_turbulence_noise_scale:

.. rst-class:: classref-property

:ref:`float<class_float>` **turbulence_noise_scale** = ``9.0``

.. rst-class:: classref-property-setget

- void **set_turbulence_noise_scale** **(** :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_turbulence_noise_scale** **(** **)**

该值控制湍流噪声图案的整体比例/频率。

小的比例会产生更小的特征具有更多细节，而高的比例会产生具有更大特征的更平滑的噪声。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_turbulence_noise_speed:

.. rst-class:: classref-property

:ref:`Vector3<class_Vector3>` **turbulence_noise_speed** = ``Vector3(0, 0, 0)``

.. rst-class:: classref-property-setget

- void **set_turbulence_noise_speed** **(** :ref:`Vector3<class_Vector3>` value **)**
- :ref:`Vector3<class_Vector3>` **get_turbulence_noise_speed** **(** **)**

湍流场的滚动速度。设置的是图案随时间移动的方向趋势。

默认值 ``Vector3(0, 0, 0)`` 会将滚动关闭。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_turbulence_noise_speed_random:

.. rst-class:: classref-property

:ref:`float<class_float>` **turbulence_noise_speed_random** = ``0.2``

.. rst-class:: classref-property-setget

- void **set_turbulence_noise_speed_random** **(** :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_turbulence_noise_speed_random** **(** **)**

湍流场的原地变化率。会决定噪声图案随时间变化的快慢。

值为 0.0 时得到的是固定的图案。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_turbulence_noise_strength:

.. rst-class:: classref-property

:ref:`float<class_float>` **turbulence_noise_strength** = ``1.0``

.. rst-class:: classref-property-setget

- void **set_turbulence_noise_strength** **(** :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_turbulence_noise_strength** **(** **)**

湍流噪声强度。增加此值将导致更强烈、对比度更高的噪声图案。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_velocity_limit_curve:

.. rst-class:: classref-property

:ref:`Texture2D<class_Texture2D>` **velocity_limit_curve**

.. rst-class:: classref-property-setget

- void **set_velocity_limit_curve** **(** :ref:`Texture2D<class_Texture2D>` value **)**
- :ref:`Texture2D<class_Texture2D>` **get_velocity_limit_curve** **(** **)**

定义粒子在其生命周期内的最大速度的 :ref:`CurveTexture<class_CurveTexture>`\ 。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_property_velocity_pivot:

.. rst-class:: classref-property

:ref:`Vector3<class_Vector3>` **velocity_pivot** = ``Vector3(0, 0, 0)``

.. rst-class:: classref-property-setget

- void **set_velocity_pivot** **(** :ref:`Vector3<class_Vector3>` value **)**
- :ref:`Vector3<class_Vector3>` **get_velocity_pivot** **(** **)**

用于计算粒子的径向速度和轨道速度的轴心点。

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

方法说明
--------

.. _class_ParticleProcessMaterial_method_get_param_max:

.. rst-class:: classref-method

:ref:`float<class_float>` **get_param_max** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param **)** |const|

返回给定参数的最大值范围。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_method_get_param_min:

.. rst-class:: classref-method

:ref:`float<class_float>` **get_param_min** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param **)** |const|

返回给定参数的最小值范围。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_method_get_param_texture:

.. rst-class:: classref-method

:ref:`Texture2D<class_Texture2D>` **get_param_texture** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param **)** |const|

返回指定参数所使用的 :ref:`Texture2D<class_Texture2D>`\ 。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_method_get_particle_flag:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **get_particle_flag** **(** :ref:`ParticleFlags<enum_ParticleProcessMaterial_ParticleFlags>` particle_flag **)** |const|

如果启用了指定的粒子标志，则返回 ``true``\ 。可选项见 :ref:`ParticleFlags<enum_ParticleProcessMaterial_ParticleFlags>`\ 。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_method_set_param_max:

.. rst-class:: classref-method

void **set_param_max** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param, :ref:`float<class_float>` value **)**

设置给定参数的最大值范围。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_method_set_param_min:

.. rst-class:: classref-method

void **set_param_min** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param, :ref:`float<class_float>` value **)**

设置给定参数的最小值范围。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_method_set_param_texture:

.. rst-class:: classref-method

void **set_param_texture** **(** :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` param, :ref:`Texture2D<class_Texture2D>` texture **)**

为指定的 :ref:`Parameter<enum_ParticleProcessMaterial_Parameter>` 设置 :ref:`Texture2D<class_Texture2D>`\ 。

.. rst-class:: classref-item-separator

----

.. _class_ParticleProcessMaterial_method_set_particle_flag:

.. rst-class:: classref-method

void **set_particle_flag** **(** :ref:`ParticleFlags<enum_ParticleProcessMaterial_ParticleFlags>` particle_flag, :ref:`bool<class_bool>` enable **)**

如果为 ``true``\ ，则启用指定的粒子标志。选项见 :ref:`ParticleFlags<enum_ParticleProcessMaterial_ParticleFlags>`\ 。

.. |virtual| replace:: :abbr:`virtual (本方法通常需要用户覆盖才能生效。)`
.. |const| replace:: :abbr:`const (本方法没有副作用。不会修改该实例的任何成员变量。)`
.. |vararg| replace:: :abbr:`vararg (本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。)`
.. |constructor| replace:: :abbr:`constructor (本方法用于构造某个类型。)`
.. |static| replace:: :abbr:`static (调用本方法无需实例，所以可以直接使用类名调用。)`
.. |operator| replace:: :abbr:`operator (本方法描述的是使用本类型作为左操作数的有效操作符。)`
.. |bitfield| replace:: :abbr:`BitField (这个值是由下列标志构成的位掩码整数。)`
