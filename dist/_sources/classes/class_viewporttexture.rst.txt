:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Godot engine sources.
.. Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.
.. XML source: https://github.com/godotengine/godot/tree/master/doc/classes/ViewportTexture.xml.

.. _class_ViewportTexture:

ViewportTexture
===============

**继承：** :ref:`Texture2D<class_Texture2D>` **<** :ref:`Texture<class_Texture>` **<** :ref:`Resource<class_Resource>` **<** :ref:`RefCounted<class_RefCounted>` **<** :ref:`Object<class_Object>`

以动态纹理的形式提供 :ref:`Viewport<class_Viewport>` 的内容。

.. rst-class:: classref-introduction-group

描述
----

以动态 :ref:`Texture2D<class_Texture2D>` 的形式提供 :ref:`Viewport<class_Viewport>` 的内容。可用于在同一场景中混合 :ref:`Control<class_Control>`\ 、\ :ref:`Node2D<class_Node2D>` 和 :ref:`Node3D<class_Node3D>`\ 。例如可以使用这种纹理在 :ref:`TextureRect<class_TextureRect>` 中显示 3D 场景，也可以在 :ref:`Sprite3D<class_Sprite3D>` 中显示 2D 覆盖层。

要在代码中获取 **ViewportTexture**\ ，请在目标视口上使用 :ref:`Viewport.get_texture<class_Viewport_method_get_texture>` 方法。

\ **注意：**\ **ViewportTexture** 始终是局部于其场景的（见 :ref:`Resource.resource_local_to_scene<class_Resource_property_resource_local_to_scene>`\ ）。如果该场景的根节点尚未就绪，可能会返回不正确的数据（见 :ref:`Node.ready<class_Node_signal_ready>`\ ）。

\ **注意：**\ 实例化包含高分辨率 **ViewportTexture** 的场景可能引起显著的卡顿。

.. rst-class:: classref-introduction-group

教程
----

- `3D 视口中的 GUI 演示 <https://godotengine.org/asset-library/asset/2807>`__

- `2D 视口中的 3D 演示 <https://godotengine.org/asset-library/asset/2804>`__

- `3D 视口中的 2D 演示 <https://godotengine.org/asset-library/asset/2803>`__

- `3D 分辨率缩放演示 <https://godotengine.org/asset-library/asset/2805>`__

.. rst-class:: classref-reftable-group

属性
----

.. table::
   :widths: auto

   +---------------------------------+--------------------------------------------------------------------+------------------+
   | :ref:`NodePath<class_NodePath>` | :ref:`viewport_path<class_ViewportTexture_property_viewport_path>` | ``NodePath("")`` |
   +---------------------------------+--------------------------------------------------------------------+------------------+

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

属性说明
--------

.. _class_ViewportTexture_property_viewport_path:

.. rst-class:: classref-property

:ref:`NodePath<class_NodePath>` **viewport_path** = ``NodePath("")`` :ref:`🔗<class_ViewportTexture_property_viewport_path>`

.. rst-class:: classref-property-setget

- |void| **set_viewport_path_in_scene**\ (\ value\: :ref:`NodePath<class_NodePath>`\ )
- :ref:`NodePath<class_NodePath>` **get_viewport_path_in_scene**\ (\ )

The path to the :ref:`Viewport<class_Viewport>` node to display. This is relative to the local scene root (see :ref:`Resource.get_local_scene<class_Resource_method_get_local_scene>`), **not** to the nodes that use this texture.

\ **Note:** In the editor, this path is automatically updated when the target viewport or one of its ancestors is renamed or moved. At runtime, this path may not automatically update if the scene root cannot be found.

.. |virtual| replace:: :abbr:`virtual (本方法通常需要用户覆盖才能生效。)`
.. |const| replace:: :abbr:`const (本方法没有副作用，不会修改该实例的任何成员变量。)`
.. |vararg| replace:: :abbr:`vararg (本方法除了能接受在此处描述的参数外，还能够继续接受任意数量的参数。)`
.. |constructor| replace:: :abbr:`constructor (本方法用于构造某个类型。)`
.. |static| replace:: :abbr:`static (调用本方法无需实例，可直接使用类名进行调用。)`
.. |operator| replace:: :abbr:`operator (本方法描述的是使用本类型作为左操作数的有效操作符。)`
.. |bitfield| replace:: :abbr:`BitField (这个值是由下列标志构成的位掩码整数。)`
.. |void| replace:: :abbr:`void (无返回值。)`
