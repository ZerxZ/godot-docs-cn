:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Godot engine sources.
.. Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.
.. XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/Engine.xml.

.. _class_Engine:

Engine
======

**继承：** :ref:`Object<class_Object>`

提供对引擎属性的访问。

.. rst-class:: classref-introduction-group

描述
----

**Engine** 单例使你可以查询和修改项目的运行时参数，例如每秒帧数，时间范围等。

.. rst-class:: classref-reftable-group

属性
----

.. table::
   :widths: auto

   +---------------------------+---------------------------------------------------------------------------------------+----------+
   | :ref:`int<class_int>`     | :ref:`max_fps<class_Engine_property_max_fps>`                                         | ``0``    |
   +---------------------------+---------------------------------------------------------------------------------------+----------+
   | :ref:`int<class_int>`     | :ref:`max_physics_steps_per_frame<class_Engine_property_max_physics_steps_per_frame>` | ``8``    |
   +---------------------------+---------------------------------------------------------------------------------------+----------+
   | :ref:`float<class_float>` | :ref:`physics_jitter_fix<class_Engine_property_physics_jitter_fix>`                   | ``0.5``  |
   +---------------------------+---------------------------------------------------------------------------------------+----------+
   | :ref:`int<class_int>`     | :ref:`physics_ticks_per_second<class_Engine_property_physics_ticks_per_second>`       | ``60``   |
   +---------------------------+---------------------------------------------------------------------------------------+----------+
   | :ref:`bool<class_bool>`   | :ref:`print_error_messages<class_Engine_property_print_error_messages>`               | ``true`` |
   +---------------------------+---------------------------------------------------------------------------------------+----------+
   | :ref:`float<class_float>` | :ref:`time_scale<class_Engine_property_time_scale>`                                   | ``1.0``  |
   +---------------------------+---------------------------------------------------------------------------------------+----------+

.. rst-class:: classref-reftable-group

方法
----

.. table::
   :widths: auto

   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`String<class_String>`                       | :ref:`get_architecture_name<class_Engine_method_get_architecture_name>` **(** **)** |const|                                                                  |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Dictionary<class_Dictionary>`               | :ref:`get_author_info<class_Engine_method_get_author_info>` **(** **)** |const|                                                                              |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Dictionary[]<class_Dictionary>`             | :ref:`get_copyright_info<class_Engine_method_get_copyright_info>` **(** **)** |const|                                                                        |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Dictionary<class_Dictionary>`               | :ref:`get_donor_info<class_Engine_method_get_donor_info>` **(** **)** |const|                                                                                |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`int<class_int>`                             | :ref:`get_frames_drawn<class_Engine_method_get_frames_drawn>` **(** **)**                                                                                    |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`float<class_float>`                         | :ref:`get_frames_per_second<class_Engine_method_get_frames_per_second>` **(** **)** |const|                                                                  |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Dictionary<class_Dictionary>`               | :ref:`get_license_info<class_Engine_method_get_license_info>` **(** **)** |const|                                                                            |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`String<class_String>`                       | :ref:`get_license_text<class_Engine_method_get_license_text>` **(** **)** |const|                                                                            |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`MainLoop<class_MainLoop>`                   | :ref:`get_main_loop<class_Engine_method_get_main_loop>` **(** **)** |const|                                                                                  |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`int<class_int>`                             | :ref:`get_physics_frames<class_Engine_method_get_physics_frames>` **(** **)** |const|                                                                        |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`float<class_float>`                         | :ref:`get_physics_interpolation_fraction<class_Engine_method_get_physics_interpolation_fraction>` **(** **)** |const|                                        |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`int<class_int>`                             | :ref:`get_process_frames<class_Engine_method_get_process_frames>` **(** **)** |const|                                                                        |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`ScriptLanguage<class_ScriptLanguage>`       | :ref:`get_script_language<class_Engine_method_get_script_language>` **(** :ref:`int<class_int>` index **)** |const|                                          |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`int<class_int>`                             | :ref:`get_script_language_count<class_Engine_method_get_script_language_count>` **(** **)**                                                                  |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Object<class_Object>`                       | :ref:`get_singleton<class_Engine_method_get_singleton>` **(** :ref:`StringName<class_StringName>` name **)** |const|                                         |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`PackedStringArray<class_PackedStringArray>` | :ref:`get_singleton_list<class_Engine_method_get_singleton_list>` **(** **)** |const|                                                                        |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Dictionary<class_Dictionary>`               | :ref:`get_version_info<class_Engine_method_get_version_info>` **(** **)** |const|                                                                            |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`String<class_String>`                       | :ref:`get_write_movie_path<class_Engine_method_get_write_movie_path>` **(** **)** |const|                                                                    |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                           | :ref:`has_singleton<class_Engine_method_has_singleton>` **(** :ref:`StringName<class_StringName>` name **)** |const|                                         |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                           | :ref:`is_editor_hint<class_Engine_method_is_editor_hint>` **(** **)** |const|                                                                                |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                           | :ref:`is_in_physics_frame<class_Engine_method_is_in_physics_frame>` **(** **)** |const|                                                                      |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Error<enum_@GlobalScope_Error>`             | :ref:`register_script_language<class_Engine_method_register_script_language>` **(** :ref:`ScriptLanguage<class_ScriptLanguage>` language **)**               |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                              | :ref:`register_singleton<class_Engine_method_register_singleton>` **(** :ref:`StringName<class_StringName>` name, :ref:`Object<class_Object>` instance **)** |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Error<enum_@GlobalScope_Error>`             | :ref:`unregister_script_language<class_Engine_method_unregister_script_language>` **(** :ref:`ScriptLanguage<class_ScriptLanguage>` language **)**           |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                              | :ref:`unregister_singleton<class_Engine_method_unregister_singleton>` **(** :ref:`StringName<class_StringName>` name **)**                                   |
   +---------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------+

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

属性说明
--------

.. _class_Engine_property_max_fps:

.. rst-class:: classref-property

:ref:`int<class_int>` **max_fps** = ``0``

.. rst-class:: classref-property-setget

- void **set_max_fps** **(** :ref:`int<class_int>` value **)**
- :ref:`int<class_int>` **get_max_fps** **(** **)**

每秒可渲染的最大帧数。值为 ``0`` 表示“无限制”。如果 CPU 或 GPU 跟不上项目逻辑和渲染的速度，实际的每秒帧数仍可能低于这个值。

限制 FPS 会对降低系统功耗很有帮助，可以减少热量和噪音排放（并延长移动设备的电池寿命）。

如果 :ref:`ProjectSettings.display/window/vsync/vsync_mode<class_ProjectSettings_property_display/window/vsync/vsync_mode>` 为 ``Enabled`` 或 ``Adaptive`` ，则该设置将被优先考虑，并且强制的 FPS 数不能超过显示器的刷新率。

如果 :ref:`ProjectSettings.display/window/vsync/vsync_mode<class_ProjectSettings_property_display/window/vsync/vsync_mode>` 为 ``Enabled``\ ，在启用了可变刷新率（G-Sync/FreeSync）的显示器上，使用比显示器刷新率低几帧的 FPS 限制，将\ `减少输入延迟，同时可以避免撕裂 <https://blurbusters.com/howto-low-lag-vsync-on/>`__\ 。

如果 :ref:`ProjectSettings.display/window/vsync/vsync_mode<class_ProjectSettings_property_display/window/vsync/vsync_mode>` 为 ``Disabled``\ ，则与无上限的帧率相比，将 FPS 限制为可以在系统上持续达到的高值，可以减少输入滞后。由于这是通过确保 GPU 负载低于 100% 来实现的，这种延迟减少仅在 GPU 瓶颈场景中有效，在 CPU 瓶颈的情况下无效。

另见 :ref:`physics_ticks_per_second<class_Engine_property_physics_ticks_per_second>` 和 :ref:`ProjectSettings.application/run/max_fps<class_ProjectSettings_property_application/run/max_fps>`\ 。

.. rst-class:: classref-item-separator

----

.. _class_Engine_property_max_physics_steps_per_frame:

.. rst-class:: classref-property

:ref:`int<class_int>` **max_physics_steps_per_frame** = ``8``

.. rst-class:: classref-property-setget

- void **set_max_physics_steps_per_frame** **(** :ref:`int<class_int>` value **)**
- :ref:`int<class_int>` **get_max_physics_steps_per_frame** **(** **)**

控制每个渲染帧所能模拟的最大物理步骤数。默认值经过调试，可以避免“死亡螺旋”，防止开销较大的物理仿真无限触发开销更大的仿真。不过如果渲染 FPS 小于 :ref:`physics_ticks_per_second<class_Engine_property_physics_ticks_per_second>` 的 ``1 / max_physics_steps_per_frame``\ ，游戏看上去会是降速的。即便在物理计算中始终使用 ``delta`` 也一样会发生。要避免这种情况，如果增大了 :ref:`physics_ticks_per_second<class_Engine_property_physics_ticks_per_second>`\ ，而且远大于默认值，那么建议将 :ref:`max_physics_steps_per_frame<class_Engine_property_max_physics_steps_per_frame>` 也调大。

.. rst-class:: classref-item-separator

----

.. _class_Engine_property_physics_jitter_fix:

.. rst-class:: classref-property

:ref:`float<class_float>` **physics_jitter_fix** = ``0.5``

.. rst-class:: classref-property-setget

- void **set_physics_jitter_fix** **(** :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_physics_jitter_fix** **(** **)**

控制物理周期与实际时间的同步程度。如果小于等于 0，则周期是同步的。这样的值建议用于网络游戏，因为时钟的同步性很重要。较高的值会导致游戏中的时钟和真实时钟之间的偏差较大，但可以平滑帧速率的抖动。默认值 0.5 对于大多数人来说应该足够好了；超过 2 的值可能导致游戏对掉帧的反应有明显的延迟，因此不推荐使用。

\ **注意：**\ 为了获得最佳效果，当使用自定义物理插值这种解决方案时，应通过将 :ref:`physics_jitter_fix<class_Engine_property_physics_jitter_fix>` 设置为 ``0`` 来禁用物理抖动修复。

.. rst-class:: classref-item-separator

----

.. _class_Engine_property_physics_ticks_per_second:

.. rst-class:: classref-property

:ref:`int<class_int>` **physics_ticks_per_second** = ``60``

.. rst-class:: classref-property-setget

- void **set_physics_ticks_per_second** **(** :ref:`int<class_int>` value **)**
- :ref:`int<class_int>` **get_physics_ticks_per_second** **(** **)**

每秒执行的固定迭代次数。用于控制物理仿真和 :ref:`Node._physics_process<class_Node_private_method__physics_process>` 的执行频率。因为 Godot 不会进行物理步骤的插值，所以通常应该总是将其设成大于等于 ``60`` 的值。因此，如果值小于 ``60`` 就会看起来卡顿。提高该值可以让输入变得更加灵敏、也可以绕过碰撞隧道问题，但请记得这么做也会提升 CPU 的占用率。另请参阅 :ref:`max_fps<class_Engine_property_max_fps>` 和 :ref:`ProjectSettings.physics/common/physics_ticks_per_second<class_ProjectSettings_property_physics/common/physics_ticks_per_second>`\ 。

\ **注意：**\ 每个渲染帧最多只能模拟 :ref:`max_physics_steps_per_frame<class_Engine_property_max_physics_steps_per_frame>` 个物理周期。如果为了追赶渲染，需要在每个渲染帧中模拟更多物理周期，游戏看上去会是降速的（即便在物理计算中始终使用 ``delta``\ ）。因此，如果增大了 :ref:`physics_ticks_per_second<class_Engine_property_physics_ticks_per_second>`\ ，而且远大于默认值，那么建议将 :ref:`max_physics_steps_per_frame<class_Engine_property_max_physics_steps_per_frame>` 也调大。

.. rst-class:: classref-item-separator

----

.. _class_Engine_property_print_error_messages:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **print_error_messages** = ``true``

.. rst-class:: classref-property-setget

- void **set_print_error_messages** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **is_printing_error_messages** **(** **)**

如果为 ``false``\ ，则停止向控制台和编辑器输出日志打印错误和警告消息。这可用于在单元测试套件运行期间隐藏错误和警告消息。该属性等效于 :ref:`ProjectSettings.application/run/disable_stderr<class_ProjectSettings_property_application/run/disable_stderr>` 项目设置。

\ **警告：**\ 如果在项目的任何地方将该项设置为 ``false``\ ，重要的错误消息可能会被隐藏，即使它们是从其他脚本发出的。如果在 ``@tool`` 脚本中将该项设置为 ``false``\ ，这也会影响编辑器本身。在确保错误消息被启用（默认情况下）之前，\ *不*\ 报告错误。

\ **注意：**\ 从编辑器运行项目时，该属性不会影响编辑器的“错误”选项卡。

.. rst-class:: classref-item-separator

----

.. _class_Engine_property_time_scale:

.. rst-class:: classref-property

:ref:`float<class_float>` **time_scale** = ``1.0``

.. rst-class:: classref-property-setget

- void **set_time_scale** **(** :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_time_scale** **(** **)**

控制游戏中的时钟与现实生活中的时钟的快慢。默认值为 1.0。值为 2.0 意味着游戏的移动速度是现实生活的两倍，而值为 0.5 意味着游戏的移动速度是常规速度的一半。\ :ref:`Timer<class_Timer>` 和 :ref:`SceneTreeTimer<class_SceneTreeTimer>` 也会受到影响（如何控制见 :ref:`SceneTree.create_timer<class_SceneTree_method_create_timer>`\ ）。

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

方法说明
--------

.. _class_Engine_method_get_architecture_name:

.. rst-class:: classref-method

:ref:`String<class_String>` **get_architecture_name** **(** **)** |const|

返回构建 Godot 二进制文件所针对的 CPU 架构的名称。可能的返回值有 ``x86_64``\ 、\ ``x86_32``\ 、\ ``arm64``\ 、\ ``arm32``\ 、\ ``rv64``\ 、\ ``riscv``\ 、\ ``ppc64``\ 、\ ``ppc``\ 、\ ``wasm64`` 和 ``wasm32``\ 。

要检测当前 CPU 架构是否为 64 位，可以利用所有 64 位架构名称中都包含 ``64``\ ：


.. tabs::

 .. code-tab:: gdscript

    if "64" in Engine.get_architecture_name():
        print("正在运行 64 位 Godot。")
    else:
        print("正在运行 32 位 Godot。")

 .. code-tab:: csharp

    if (Engine.GetArchitectureName().Contains("64"))
        GD.Print("正在运行 64 位 Godot。");
    else
        GD.Print("正在运行 32 位 Godot。");



\ **注意：**\ :ref:`get_architecture_name<class_Engine_method_get_architecture_name>` 返回的\ *不是*\ 主机 CPU 架构的名称。例如，如果在 x86_64 系统上运行 x86_32 的 Godot 二进制文件，那么返回值将是 ``x86_32``\ 。

.. rst-class:: classref-item-separator

----

.. _class_Engine_method_get_author_info:

.. rst-class:: classref-method

:ref:`Dictionary<class_Dictionary>` **get_author_info** **(** **)** |const|

返回一个字典中的引擎作者信息。

\ ``lead_developers`` - 字符串的数组，主要开发者的名字

\ ``founders`` - 创始人姓名的字符串数组

\ ``project_managers`` - 项目经理姓名的字符串数组

\ ``developers`` - 开发者名称的字符串数组

.. rst-class:: classref-item-separator

----

.. _class_Engine_method_get_copyright_info:

.. rst-class:: classref-method

:ref:`Dictionary[]<class_Dictionary>` **get_copyright_info** **(** **)** |const|

返回一个版权信息字典数组。

\ ``name`` - 字符串，组件名称。

\ ``partic`` - 描述组件子部分的字典数组 {``files``, ``copyright``, ``license``}

.. rst-class:: classref-item-separator

----

.. _class_Engine_method_get_donor_info:

.. rst-class:: classref-method

:ref:`Dictionary<class_Dictionary>` **get_donor_info** **(** **)** |const|

返回捐赠者姓名数组的字典。

{``platinum_sponsors``, ``gold_sponsors``, ``silver_sponsors``, ``bronze_sponsors``, ``mini_sponsors``, ``gold_donors``, ``silver_donors``, ``bronze_donors``}

.. rst-class:: classref-item-separator

----

.. _class_Engine_method_get_frames_drawn:

.. rst-class:: classref-method

:ref:`int<class_int>` **get_frames_drawn** **(** **)**

返回绘制的总帧数。在无头平台上，或者如果通过命令行使用 ``--disable-render-loop`` 禁用渲染循环，\ :ref:`get_frames_drawn<class_Engine_method_get_frames_drawn>` 总是返回 ``0``\ 。请参阅 :ref:`get_process_frames<class_Engine_method_get_process_frames>`\ 。

.. rst-class:: classref-item-separator

----

.. _class_Engine_method_get_frames_per_second:

.. rst-class:: classref-method

:ref:`float<class_float>` **get_frames_per_second** **(** **)** |const|

返回运行游戏的每秒帧数。

.. rst-class:: classref-item-separator

----

.. _class_Engine_method_get_license_info:

.. rst-class:: classref-method

:ref:`Dictionary<class_Dictionary>` **get_license_info** **(** **)** |const|

返回 Godot 所使用的许可证的 Dictionary 字典列表，其中包括第三方组件。

.. rst-class:: classref-item-separator

----

.. _class_Engine_method_get_license_text:

.. rst-class:: classref-method

:ref:`String<class_String>` **get_license_text** **(** **)** |const|

返回Godot许可证文本。

.. rst-class:: classref-item-separator

----

.. _class_Engine_method_get_main_loop:

.. rst-class:: classref-method

:ref:`MainLoop<class_MainLoop>` **get_main_loop** **(** **)** |const|

返回主循环对象（请参阅\ :ref:`MainLoop<class_MainLoop>`\ 和\ :ref:`SceneTree<class_SceneTree>`\ ）。

.. rst-class:: classref-item-separator

----

.. _class_Engine_method_get_physics_frames:

.. rst-class:: classref-method

:ref:`int<class_int>` **get_physics_frames** **(** **)** |const|

返回自引擎初始化以来通过的总帧数，该帧数在每个\ **物理帧**\ 上行进。参阅 :ref:`get_process_frames<class_Engine_method_get_process_frames>`\ 。

\ :ref:`get_physics_frames<class_Engine_method_get_physics_frames>` 可用于在不依赖 :ref:`Timer<class_Timer>` 的情况下，减少运行昂贵的逻辑的次数：


.. tabs::

 .. code-tab:: gdscript

    func _physics_process(_delta):
        if Engine.get_physics_frames() % 2 == 0:
            pass  # 此处每 2 个物理帧仅运行一次昂贵的逻辑。

 .. code-tab:: csharp

    public override void _PhysicsProcess(double delta)
    {
        base._PhysicsProcess(delta);
    
        if (Engine.GetPhysicsFrames() % 2 == 0)
        {
            // 此处每 2 个物理帧仅运行一次昂贵的逻辑。
        }
    }



.. rst-class:: classref-item-separator

----

.. _class_Engine_method_get_physics_interpolation_fraction:

.. rst-class:: classref-method

:ref:`float<class_float>` **get_physics_interpolation_fraction** **(** **)** |const|

返回渲染帧时当前物理周期中的分数。可用于实现固定的时间步插值。

.. rst-class:: classref-item-separator

----

.. _class_Engine_method_get_process_frames:

.. rst-class:: classref-method

:ref:`int<class_int>` **get_process_frames** **(** **)** |const|

返回自引擎初始化以来通过的总帧数，无论渲染循环是否启用，每个\ **处理帧**\ 都会行进。另见 :ref:`get_frames_drawn<class_Engine_method_get_frames_drawn>` 和 :ref:`get_physics_frames<class_Engine_method_get_physics_frames>`\ 。

\ :ref:`get_process_frames<class_Engine_method_get_process_frames>` 可用于在不依赖 :ref:`Timer<class_Timer>` 的情况下，减少运行昂贵的逻辑的次数：


.. tabs::

 .. code-tab:: gdscript

    func _process(_delta):
        if Engine.get_process_frames() % 2 == 0:
            pass  # 此处每 2 个处理（渲染）帧仅运行一次昂贵的逻辑。

 .. code-tab:: csharp

    public override void _Process(double delta)
    {
        base._Process(delta);
    
        if (Engine.GetProcessFrames() % 2 == 0)
        {
            // 此处每 2 个处理（渲染）帧仅运行一次昂贵的逻辑。
        }
    }



.. rst-class:: classref-item-separator

----

.. _class_Engine_method_get_script_language:

.. rst-class:: classref-method

:ref:`ScriptLanguage<class_ScriptLanguage>` **get_script_language** **(** :ref:`int<class_int>` index **)** |const|

返回给定索引处的 :ref:`ScriptLanguage<class_ScriptLanguage>` 实例。

.. rst-class:: classref-item-separator

----

.. _class_Engine_method_get_script_language_count:

.. rst-class:: classref-method

:ref:`int<class_int>` **get_script_language_count** **(** **)**

返回可用脚本语言的数量。请配合 :ref:`get_script_language<class_Engine_method_get_script_language>` 使用。

.. rst-class:: classref-item-separator

----

.. _class_Engine_method_get_singleton:

.. rst-class:: classref-method

:ref:`Object<class_Object>` **get_singleton** **(** :ref:`StringName<class_StringName>` name **)** |const|

返回具有给定名称 ``name`` 的全局单例。常用于插件，例如 GodotPayments。

.. rst-class:: classref-item-separator

----

.. _class_Engine_method_get_singleton_list:

.. rst-class:: classref-method

:ref:`PackedStringArray<class_PackedStringArray>` **get_singleton_list** **(** **)** |const|

返回可用全局单例的列表。

.. rst-class:: classref-item-separator

----

.. _class_Engine_method_get_version_info:

.. rst-class:: classref-method

:ref:`Dictionary<class_Dictionary>` **get_version_info** **(** **)** |const|

以字典形式返回当前引擎版本信息。

\ ``major`` - 将主要版本号保存为一个 int

\ ``minor`` - 将次要版本号保存为一个 int

\ ``patch`` - 将补丁版本号保存为一个 int

\ ``hex`` - 保存编码为十六进制整数的完整版本号，每个数字一个字节（2 位）（参见下面的示例）

\ ``status`` - 将状态（例如“beta”、“rc1”、“rc2”、...“stable”）保存为字符串

\ ``build`` - 将构建名称（例如“custom_build”）保存为字符串

\ ``hash`` - 将完整的 Git 提交哈希保存为字符串

\ ``year`` - 将版本发布的年份保存为 int

\ ``string`` - 将 ``major`` + ``minor`` + ``patch`` + ``status`` + ``build`` 保存在单个字符串中

\ ``hex`` 值的编码方式如下，从左到右：主版本对应一字节，次版本对应一字节，补丁版本对应一字节。例如，“3.1.12”将是 ``0x03010C``\ 。\ **注意：**\ 它内部还是一个 int，打印出来就是它的十进制表示，没有特别的意义。使用十六进制文字从代码中轻松比较版本：


.. tabs::

 .. code-tab:: gdscript

    if Engine.get_version_info().hex >= 0x030200:
        # 执行特定于版本 3.2 或更高版本的操作
    else:
        # 执行特定于 3.2 之前版本的操作

 .. code-tab:: csharp

    if ((int)Engine.GetVersionInfo()["hex"] >= 0x030200)
    {
        // 执行特定于版本 3.2 或更高版本的操作
    }
    else
    {
        // 执行特定于 3.2 之前版本的操作
    }



.. rst-class:: classref-item-separator

----

.. _class_Engine_method_get_write_movie_path:

.. rst-class:: classref-method

:ref:`String<class_String>` **get_write_movie_path** **(** **)** |const|

返回 :ref:`MovieWriter<class_MovieWriter>` 的输出文件的路径，如果引擎未在 Movie Maker 模式下启动，则返回一个空字符串。该路径可以是绝对路径或相对路径，具体取决于用户指定它的方式。

.. rst-class:: classref-item-separator

----

.. _class_Engine_method_has_singleton:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **has_singleton** **(** :ref:`StringName<class_StringName>` name **)** |const|

如果全局范围内存在具有给定 ``name`` 的单例，则返回 ``true``\ 。

.. rst-class:: classref-item-separator

----

.. _class_Engine_method_is_editor_hint:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **is_editor_hint** **(** **)** |const|

如果脚本当前正在编辑器中运行，则返回 ``true``\ ，否则返回 ``false``\ 。这对于 ``@tool`` 脚本很有用，可以有条件地绘制编辑器助手，或者防止在编辑器中意外运行会影响场景状态的“游戏”代码：


.. tabs::

 .. code-tab:: gdscript

    if Engine.is_editor_hint():
        draw_gizmos()
    else:
        simulate_physics()

 .. code-tab:: csharp

    if (Engine.IsEditorHint())
        DrawGizmos();
    else
        SimulatePhysics();



有关详细信息，请参阅文档中的\ :doc:`《在编辑器中运行代码》 <../tutorials/plugins/running_code_in_the_editor>`\ 。

\ **注意：**\ 要检测脚本是否从编辑器\ *构建*\ 中运行（例如，当按 :kbd:`F5` 时），请改用 :ref:`OS.has_feature<class_OS_method_has_feature>` 和 ``"editor"`` 参数。\ ``OS.has_feature("editor")`` 将在编辑器中运行代码和从编辑器运行项目时，被评估为 ``true``\ ；但当代码从导出的项目运行时，它将被评估为 ``false``\ 。

.. rst-class:: classref-item-separator

----

.. _class_Engine_method_is_in_physics_frame:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **is_in_physics_frame** **(** **)** |const|

如果游戏在游戏循环的固定过程和物理阶段内，返回 ``true``\ 。

.. rst-class:: classref-item-separator

----

.. _class_Engine_method_register_script_language:

.. rst-class:: classref-method

:ref:`Error<enum_@GlobalScope_Error>` **register_script_language** **(** :ref:`ScriptLanguage<class_ScriptLanguage>` language **)**

注册一个 :ref:`ScriptLanguage<class_ScriptLanguage>` 实例以供 ``ScriptServer`` 使用。

返回：

- :ref:`@GlobalScope.OK<class_@GlobalScope_constant_OK>` 成功

- :ref:`@GlobalScope.ERR_UNAVAILABLE<class_@GlobalScope_constant_ERR_UNAVAILABLE>` 如果 ``ScriptServer`` 已达到限制，并且无法注册任何新语言

- :ref:`@GlobalScope.ERR_ALREADY_EXISTS<class_@GlobalScope_constant_ERR_ALREADY_EXISTS>` 如果 ``ScriptServer`` 已经包含一个具有相似扩展名/名称/类型的语言

.. rst-class:: classref-item-separator

----

.. _class_Engine_method_register_singleton:

.. rst-class:: classref-method

void **register_singleton** **(** :ref:`StringName<class_StringName>` name, :ref:`Object<class_Object>` instance **)**

将给定的对象注册为单例，名称 ``name`` 全局可用。

.. rst-class:: classref-item-separator

----

.. _class_Engine_method_unregister_script_language:

.. rst-class:: classref-method

:ref:`Error<enum_@GlobalScope_Error>` **unregister_script_language** **(** :ref:`ScriptLanguage<class_ScriptLanguage>` language **)**

从 ``ScriptServer`` 注销该 :ref:`ScriptLanguage<class_ScriptLanguage>` 实例。

返回：

- :ref:`@GlobalScope.OK<class_@GlobalScope_constant_OK>` 成功

- :ref:`@GlobalScope.ERR_DOES_NOT_EXIST<class_@GlobalScope_constant_ERR_DOES_NOT_EXIST>` 如果该语言尚未在 ``ScriptServer`` 中注册

.. rst-class:: classref-item-separator

----

.. _class_Engine_method_unregister_singleton:

.. rst-class:: classref-method

void **unregister_singleton** **(** :ref:`StringName<class_StringName>` name **)**

将名称为 ``name`` 的单例解除注册。该单例对象不会被释放。仅能够对通过 :ref:`register_singleton<class_Engine_method_register_singleton>` 创建的用户定义单例使用。

.. |virtual| replace:: :abbr:`virtual (本方法通常需要用户覆盖才能生效。)`
.. |const| replace:: :abbr:`const (本方法没有副作用。不会修改该实例的任何成员变量。)`
.. |vararg| replace:: :abbr:`vararg (本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。)`
.. |constructor| replace:: :abbr:`constructor (本方法用于构造某个类型。)`
.. |static| replace:: :abbr:`static (调用本方法无需实例，所以可以直接使用类名调用。)`
.. |operator| replace:: :abbr:`operator (本方法描述的是使用本类型作为左操作数的有效操作符。)`
.. |bitfield| replace:: :abbr:`BitField (这个值是由下列标志构成的位掩码整数。)`
