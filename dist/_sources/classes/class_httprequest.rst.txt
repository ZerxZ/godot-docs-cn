:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Godot engine sources.
.. Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.
.. XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/HTTPRequest.xml.

.. _class_HTTPRequest:

HTTPRequest
===========

**继承：** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

具有发送 HTTP(S) 请求能力的节点。

.. rst-class:: classref-introduction-group

描述
----

一种具有发送 HTTP 请求能力的节点。内部使用 :ref:`HTTPClient<class_HTTPClient>`\ 。

可用于发出 HTTP 请求，即通过 HTTP 下载或上传文件或网络内容。

\ **警告：**\ 请参阅 :ref:`HTTPClient<class_HTTPClient>` 中的注释和警告以了解限制，尤其是有关 TLS 安全性的限制。

\ **注意：**\ 导出到 Android 时，在导出项目或使用一键部署前，请确保在 Android 导出预设中启用 ``INTERNET`` 权限。否则，任何类型的网络通信都将被 Android 阻止。

\ **联系 REST API 并打印其返回字段之一的示例：**\ 


.. tabs::

 .. code-tab:: gdscript

    func _ready():
        # 创建一个 HTTP 请求节点并连接其完成信号。
        var http_request = HTTPRequest.new()
        add_child(http_request)
        http_request.request_completed.connect(self._http_request_completed)
    
        # 执行一个 GET 请求。以下 URL 会将写入作为 JSON 返回。
        var error = http_request.request("https://httpbin.org/get")
        if error != OK:
            push_error("在HTTP请求中发生了一个错误。")
    
        # 执行一个 POST 请求。 以下 URL 会将写入作为 JSON 返回。
        # 注意：不要使用单个 HTTPRequest 节点同时发出请求。
        # 下面的代码片段仅供参考。
        var body = JSON.new().stringify({"name": "Godette"})
        error = http_request.request("https://httpbin.org/post", [], HTTPClient.METHOD_POST, body)
        if error != OK:
            push_error("在HTTP请求中发生了一个错误。")
    
    # 当 HTTP 请求完成时调用。
    func _http_request_completed(result, response_code, headers, body):
        var json = JSON.new()
        json.parse(body.get_string_from_utf8())
        var response = json.get_data()
    
        # 将打印 HTTPRequest 节点使用的用户代理字符串（由 httpbin.org 识别）。
        print(response.headers["User-Agent"])

 .. code-tab:: csharp

    public override void _Ready()
    {
        // 创建一个 HTTP 请求节点并连接其完成信号。
        var httpRequest = new HTTPRequest();
        AddChild(httpRequest);
        httpRequest.RequestCompleted += HttpRequestCompleted;
    
        // 执行一个 GET 请求。以下 URL 会将写入作为 JSON 返回。
        Error error = httpRequest.Request("https://httpbin.org/get");
        if (error != Error.Ok)
        {
            GD.PushError("在HTTP请求中发生了一个错误。");
        }
    
        // 执行一个 POST 请求。 以下 URL 会将写入作为 JSON 返回。
        // 注意：不要使用单个 HTTPRequest 节点同时发出请求。
        // 下面的代码片段仅供参考。
        string body = new Json().Stringify(new Godot.Collections.Dictionary
        {
            { "name", "Godette" }
        });
        error = httpRequest.Request("https://httpbin.org/post", null, HTTPClient.Method.Post, body);
        if (error != Error.Ok)
        {
            GD.PushError("在HTTP请求中发生了一个错误。");
        }
    }
    
    // 当 HTTP 请求完成时调用。
    private void HttpRequestCompleted(long result, long responseCode, string[] headers, byte[] body)
    {
        var json = new Json();
        json.Parse(body.GetStringFromUtf8());
        var response = json.GetData().AsGodotDictionary();
    
        // 将打印 HTTPRequest 节点使用的用户代理字符串（由 httpbin.org 识别）。
        GD.Print((response["headers"].AsGodotDictionary())["User-Agent"]);
    }



\ **使用 HTTPRequest 加载和显示图像的示例：**\ 


.. tabs::

 .. code-tab:: gdscript

    func _ready():
        # 创建一个 HTTP 请求节点并连接其完成信号。
        var http_request = HTTPRequest.new()
        add_child(http_request)
        http_request.request_completed.connect(self._http_request_completed)
    
        # 执行一个 HTTP 请求。下面的 URL 将写入作为一个 PNG 图像返回。
        var error = http_request.request("https://via.placeholder.com/512")
        if error != OK:
            push_error("在HTTP请求中发生了一个错误。")
    
    # 当 HTTP 请求完成时调用。
    func _http_request_completed(result, response_code, headers, body):
        if result != HTTPRequest.RESULT_SUCCESS:
            push_error("无法下载图像。尝试一个不同的图像。")
    
        var image = Image.new()
        var error = image.load_png_from_buffer(body)
        if error != OK:
            push_error("无法加载图像。")
    
        var texture = ImageTexture.create_from_image(image)
    
        # 在 TextureRect 节点中显示图像。
        var texture_rect = TextureRect.new()
        add_child(texture_rect)
        texture_rect.texture = texture

 .. code-tab:: csharp

    public override void _Ready()
    {
        // 创建一个 HTTP 请求节点并连接其完成信号。
        var httpRequest = new HTTPRequest();
        AddChild(httpRequest);
        httpRequest.RequestCompleted += HttpRequestCompleted;
    
        // 执行一个 HTTP 请求。下面的 URL 将写入作为一个 PNG 图像返回。
        Error error = httpRequest.Request("https://via.placeholder.com/512");
        if (error != Error.Ok)
        {
            GD.PushError("在HTTP请求中发生了一个错误。");
        }
    }
    
    // 当 HTTP 请求完成时调用。
    private void HttpRequestCompleted(long result, long responseCode, string[] headers, byte[] body)
    {
        if (result != (long)HTTPRequest.Result.Success)
        {
            GD.PushError("无法下载图像。尝试一个不同的图像。");
        }
        var image = new Image();
        Error error = image.LoadPngFromBuffer(body);
        if (error != Error.Ok)
        {
            GD.PushError("无法加载图像。");
        }
    
        var texture = ImageTexture.CreateFromImage(image);
    
        // 在 TextureRect 节点中显示图像。
        var textureRect = new TextureRect();
        AddChild(textureRect);
        textureRect.Texture = texture;
    }



\ **Gzipped 响应体**\ ：HTTPRequest 将自动处理响应体的解压缩。除非已经指定了一个，否则 ``Accept-Encoding`` 报头将自动添加到你的每个请求中。任何带有 ``Content-Encoding: gzip`` 报头的响应都将自动解压，并作为未压缩的字节传送给你。

.. rst-class:: classref-introduction-group

教程
----

- :doc:`发出 HTTP 请求 <../tutorials/networking/http_request_class>`

- :doc:`TLS 证书 <../tutorials/networking/ssl_certificates>`

.. rst-class:: classref-reftable-group

属性
----

.. table::
   :widths: auto

   +-----------------------------+----------------------------------------------------------------------------+-----------+
   | :ref:`bool<class_bool>`     | :ref:`accept_gzip<class_HTTPRequest_property_accept_gzip>`                 | ``true``  |
   +-----------------------------+----------------------------------------------------------------------------+-----------+
   | :ref:`int<class_int>`       | :ref:`body_size_limit<class_HTTPRequest_property_body_size_limit>`         | ``-1``    |
   +-----------------------------+----------------------------------------------------------------------------+-----------+
   | :ref:`int<class_int>`       | :ref:`download_chunk_size<class_HTTPRequest_property_download_chunk_size>` | ``65536`` |
   +-----------------------------+----------------------------------------------------------------------------+-----------+
   | :ref:`String<class_String>` | :ref:`download_file<class_HTTPRequest_property_download_file>`             | ``""``    |
   +-----------------------------+----------------------------------------------------------------------------+-----------+
   | :ref:`int<class_int>`       | :ref:`max_redirects<class_HTTPRequest_property_max_redirects>`             | ``8``     |
   +-----------------------------+----------------------------------------------------------------------------+-----------+
   | :ref:`float<class_float>`   | :ref:`timeout<class_HTTPRequest_property_timeout>`                         | ``0.0``   |
   +-----------------------------+----------------------------------------------------------------------------+-----------+
   | :ref:`bool<class_bool>`     | :ref:`use_threads<class_HTTPRequest_property_use_threads>`                 | ``false`` |
   +-----------------------------+----------------------------------------------------------------------------+-----------+

.. rst-class:: classref-reftable-group

方法
----

.. table::
   :widths: auto

   +---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                  | :ref:`cancel_request<class_HTTPRequest_method_cancel_request>` **(** **)**                                                                                                                                                                                                                                                   |
   +---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`int<class_int>`                 | :ref:`get_body_size<class_HTTPRequest_method_get_body_size>` **(** **)** |const|                                                                                                                                                                                                                                             |
   +---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`int<class_int>`                 | :ref:`get_downloaded_bytes<class_HTTPRequest_method_get_downloaded_bytes>` **(** **)** |const|                                                                                                                                                                                                                               |
   +---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Status<enum_HTTPClient_Status>` | :ref:`get_http_client_status<class_HTTPRequest_method_get_http_client_status>` **(** **)** |const|                                                                                                                                                                                                                           |
   +---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Error<enum_@GlobalScope_Error>` | :ref:`request<class_HTTPRequest_method_request>` **(** :ref:`String<class_String>` url, :ref:`PackedStringArray<class_PackedStringArray>` custom_headers=PackedStringArray(), :ref:`Method<enum_HTTPClient_Method>` method=0, :ref:`String<class_String>` request_data="" **)**                                              |
   +---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Error<enum_@GlobalScope_Error>` | :ref:`request_raw<class_HTTPRequest_method_request_raw>` **(** :ref:`String<class_String>` url, :ref:`PackedStringArray<class_PackedStringArray>` custom_headers=PackedStringArray(), :ref:`Method<enum_HTTPClient_Method>` method=0, :ref:`PackedByteArray<class_PackedByteArray>` request_data_raw=PackedByteArray() **)** |
   +---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                  | :ref:`set_http_proxy<class_HTTPRequest_method_set_http_proxy>` **(** :ref:`String<class_String>` host, :ref:`int<class_int>` port **)**                                                                                                                                                                                      |
   +---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                  | :ref:`set_https_proxy<class_HTTPRequest_method_set_https_proxy>` **(** :ref:`String<class_String>` host, :ref:`int<class_int>` port **)**                                                                                                                                                                                    |
   +---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                  | :ref:`set_tls_options<class_HTTPRequest_method_set_tls_options>` **(** :ref:`TLSOptions<class_TLSOptions>` client_options **)**                                                                                                                                                                                              |
   +---------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

信号
----

.. _class_HTTPRequest_signal_request_completed:

.. rst-class:: classref-signal

**request_completed** **(** :ref:`int<class_int>` result, :ref:`int<class_int>` response_code, :ref:`PackedStringArray<class_PackedStringArray>` headers, :ref:`PackedByteArray<class_PackedByteArray>` body **)**

请求完成时触发。

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

枚举
----

.. _enum_HTTPRequest_Result:

.. rst-class:: classref-enumeration

enum **Result**:

.. _class_HTTPRequest_constant_RESULT_SUCCESS:

.. rst-class:: classref-enumeration-constant

:ref:`Result<enum_HTTPRequest_Result>` **RESULT_SUCCESS** = ``0``

请求成功。

.. _class_HTTPRequest_constant_RESULT_CHUNKED_BODY_SIZE_MISMATCH:

.. rst-class:: classref-enumeration-constant

:ref:`Result<enum_HTTPRequest_Result>` **RESULT_CHUNKED_BODY_SIZE_MISMATCH** = ``1``



.. _class_HTTPRequest_constant_RESULT_CANT_CONNECT:

.. rst-class:: classref-enumeration-constant

:ref:`Result<enum_HTTPRequest_Result>` **RESULT_CANT_CONNECT** = ``2``

连接时请求失败。

.. _class_HTTPRequest_constant_RESULT_CANT_RESOLVE:

.. rst-class:: classref-enumeration-constant

:ref:`Result<enum_HTTPRequest_Result>` **RESULT_CANT_RESOLVE** = ``3``

解析时请求失败。

.. _class_HTTPRequest_constant_RESULT_CONNECTION_ERROR:

.. rst-class:: classref-enumeration-constant

:ref:`Result<enum_HTTPRequest_Result>` **RESULT_CONNECTION_ERROR** = ``4``

因连接（读写）错误而失败。

.. _class_HTTPRequest_constant_RESULT_TLS_HANDSHAKE_ERROR:

.. rst-class:: classref-enumeration-constant

:ref:`Result<enum_HTTPRequest_Result>` **RESULT_TLS_HANDSHAKE_ERROR** = ``5``

TLS 握手时请求失败。

.. _class_HTTPRequest_constant_RESULT_NO_RESPONSE:

.. rst-class:: classref-enumeration-constant

:ref:`Result<enum_HTTPRequest_Result>` **RESULT_NO_RESPONSE** = ``6``

请求（目前还）没有获得相应。

.. _class_HTTPRequest_constant_RESULT_BODY_SIZE_LIMIT_EXCEEDED:

.. rst-class:: classref-enumeration-constant

:ref:`Result<enum_HTTPRequest_Result>` **RESULT_BODY_SIZE_LIMIT_EXCEEDED** = ``7``

请求超出了大小上限，见 :ref:`body_size_limit<class_HTTPRequest_property_body_size_limit>`\ 。

.. _class_HTTPRequest_constant_RESULT_BODY_DECOMPRESS_FAILED:

.. rst-class:: classref-enumeration-constant

:ref:`Result<enum_HTTPRequest_Result>` **RESULT_BODY_DECOMPRESS_FAILED** = ``8``



.. _class_HTTPRequest_constant_RESULT_REQUEST_FAILED:

.. rst-class:: classref-enumeration-constant

:ref:`Result<enum_HTTPRequest_Result>` **RESULT_REQUEST_FAILED** = ``9``

请求失败（目前未使用）。

.. _class_HTTPRequest_constant_RESULT_DOWNLOAD_FILE_CANT_OPEN:

.. rst-class:: classref-enumeration-constant

:ref:`Result<enum_HTTPRequest_Result>` **RESULT_DOWNLOAD_FILE_CANT_OPEN** = ``10``

HTTPRequest 无法打开下载文件。

.. _class_HTTPRequest_constant_RESULT_DOWNLOAD_FILE_WRITE_ERROR:

.. rst-class:: classref-enumeration-constant

:ref:`Result<enum_HTTPRequest_Result>` **RESULT_DOWNLOAD_FILE_WRITE_ERROR** = ``11``

HTTPRequest 无法写入下载文件。

.. _class_HTTPRequest_constant_RESULT_REDIRECT_LIMIT_REACHED:

.. rst-class:: classref-enumeration-constant

:ref:`Result<enum_HTTPRequest_Result>` **RESULT_REDIRECT_LIMIT_REACHED** = ``12``

请求超出了重定向次数上限，见 :ref:`max_redirects<class_HTTPRequest_property_max_redirects>`\ 。

.. _class_HTTPRequest_constant_RESULT_TIMEOUT:

.. rst-class:: classref-enumeration-constant

:ref:`Result<enum_HTTPRequest_Result>` **RESULT_TIMEOUT** = ``13``

请求由于超时而失败。如果本就希望请求花费较长的时间，请尝试增大 :ref:`timeout<class_HTTPRequest_property_timeout>`\ ，或将其设为 ``0.0`` 从而完全移除超时。

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

属性说明
--------

.. _class_HTTPRequest_property_accept_gzip:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **accept_gzip** = ``true``

.. rst-class:: classref-property-setget

- void **set_accept_gzip** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **is_accepting_gzip** **(** **)**

如果为 ``true``\ ，这个报头会被添加到每个请求中：\ ``Accept-Encoding: gzip, deflate`` 告诉服务器可以压缩响应正文。

任何声明 ``gzip`` 或 ``deflate`` 的 ``Content-Encoding`` 的响应正文，将被自动解压缩，并且未压缩的字节将通过 :ref:`request_completed<class_HTTPRequest_signal_request_completed>` 被传递。

如果用户指定了自己的 ``Accept-Encoding`` 报头，那么无论 :ref:`accept_gzip<class_HTTPRequest_property_accept_gzip>` 是什么，都不会添加任何报头。

如果为 ``false``\ ，这将不会添加报头，并且不会对响应正文执行任何解压缩。响应正文的原始字节将通过 :ref:`request_completed<class_HTTPRequest_signal_request_completed>` 返回。

.. rst-class:: classref-item-separator

----

.. _class_HTTPRequest_property_body_size_limit:

.. rst-class:: classref-property

:ref:`int<class_int>` **body_size_limit** = ``-1``

.. rst-class:: classref-property-setget

- void **set_body_size_limit** **(** :ref:`int<class_int>` value **)**
- :ref:`int<class_int>` **get_body_size_limit** **(** **)**

响应正文的最大允许大小。如果响应正文被压缩，这将用作解压缩的正文的最大允许大小。

.. rst-class:: classref-item-separator

----

.. _class_HTTPRequest_property_download_chunk_size:

.. rst-class:: classref-property

:ref:`int<class_int>` **download_chunk_size** = ``65536``

.. rst-class:: classref-property-setget

- void **set_download_chunk_size** **(** :ref:`int<class_int>` value **)**
- :ref:`int<class_int>` **get_download_chunk_size** **(** **)**

使用的缓冲区大小和每次迭代读取的最大字节数。参阅 :ref:`HTTPClient.read_chunk_size<class_HTTPClient_property_read_chunk_size>`\ 。

下载小文件时将其设置为较低的值，以降低内存使用量，但会降低下载速度，例如 4096 表示 4 KiB。

.. rst-class:: classref-item-separator

----

.. _class_HTTPRequest_property_download_file:

.. rst-class:: classref-property

:ref:`String<class_String>` **download_file** = ``""``

.. rst-class:: classref-property-setget

- void **set_download_file** **(** :ref:`String<class_String>` value **)**
- :ref:`String<class_String>` **get_download_file** **(** **)**

要下载到的文件。将任何接收到的文件输出到其中。

.. rst-class:: classref-item-separator

----

.. _class_HTTPRequest_property_max_redirects:

.. rst-class:: classref-property

:ref:`int<class_int>` **max_redirects** = ``8``

.. rst-class:: classref-property-setget

- void **set_max_redirects** **(** :ref:`int<class_int>` value **)**
- :ref:`int<class_int>` **get_max_redirects** **(** **)**

允许的最大重定向数。

.. rst-class:: classref-item-separator

----

.. _class_HTTPRequest_property_timeout:

.. rst-class:: classref-property

:ref:`float<class_float>` **timeout** = ``0.0``

.. rst-class:: classref-property-setget

- void **set_timeout** **(** :ref:`float<class_float>` value **)**
- :ref:`float<class_float>` **get_timeout** **(** **)**

请求超时前等待的秒数。如果 :ref:`timeout<class_HTTPRequest_property_timeout>` 为 ``0.0``\ ，则请求不会超时。对于简单的请求，例如与 REST API 通信，建议将 :ref:`timeout<class_HTTPRequest_property_timeout>` 设为与服务器响应时间匹配的值（例如 ``1.0`` 和 ``10.0`` 之间）。这样能够防止由于服务器响应时间的变化而造成的超时，同时仍然允许应用程序检测到请求超时。对于大型请求，例如下载文件，建议将 :ref:`timeout<class_HTTPRequest_property_timeout>` 设置为 ``0.0`` 禁用超时功能。这样有助于防止由于超时而让大型传输失败。

.. rst-class:: classref-item-separator

----

.. _class_HTTPRequest_property_use_threads:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **use_threads** = ``false``

.. rst-class:: classref-property-setget

- void **set_use_threads** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **is_using_threads** **(** **)**

为 ``true`` 时，将启用多线程提高性能。

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

方法说明
--------

.. _class_HTTPRequest_method_cancel_request:

.. rst-class:: classref-method

void **cancel_request** **(** **)**

取消当前请求。

.. rst-class:: classref-item-separator

----

.. _class_HTTPRequest_method_get_body_size:

.. rst-class:: classref-method

:ref:`int<class_int>` **get_body_size** **(** **)** |const|

返回响应体长度。

\ **注意：**\ 部分 Web 服务器可能不发送响应体长度，此时返回值将为 ``-1``\ 。如果使用分块传输编码，响应体的长度也将为 ``-1``\ 。

.. rst-class:: classref-item-separator

----

.. _class_HTTPRequest_method_get_downloaded_bytes:

.. rst-class:: classref-method

:ref:`int<class_int>` **get_downloaded_bytes** **(** **)** |const|

返回该 HTTPRequest 已下载的字节数。

.. rst-class:: classref-item-separator

----

.. _class_HTTPRequest_method_get_http_client_status:

.. rst-class:: classref-method

:ref:`Status<enum_HTTPClient_Status>` **get_http_client_status** **(** **)** |const|

返回内部 :ref:`HTTPClient<class_HTTPClient>` 的当前状态。见 :ref:`Status<enum_HTTPClient_Status>`\ 。

.. rst-class:: classref-item-separator

----

.. _class_HTTPRequest_method_request:

.. rst-class:: classref-method

:ref:`Error<enum_@GlobalScope_Error>` **request** **(** :ref:`String<class_String>` url, :ref:`PackedStringArray<class_PackedStringArray>` custom_headers=PackedStringArray(), :ref:`Method<enum_HTTPClient_Method>` method=0, :ref:`String<class_String>` request_data="" **)**

在底层的 :ref:`HTTPClient<class_HTTPClient>` 上创建请求。如果没有配置错误，它会尝试使用 :ref:`HTTPClient.connect_to_host<class_HTTPClient_method_connect_to_host>` 连接并将参数传递给 :ref:`HTTPClient.request<class_HTTPClient_method_request>`\ 。

如果成功创建请求，则返回 :ref:`@GlobalScope.OK<class_@GlobalScope_constant_OK>`\ 。（并不意味着服务器已响应），如果不在树中，则返回 :ref:`@GlobalScope.ERR_UNCONFIGURED<class_@GlobalScope_constant_ERR_UNCONFIGURED>`\ ；如果仍在处理先前的请求，则返回 :ref:`@GlobalScope.ERR_BUSY<class_@GlobalScope_constant_ERR_BUSY>`\ ；如果给定的字符串不是有效的 URL 格式，则返回 :ref:`@GlobalScope.ERR_INVALID_PARAMETER<class_@GlobalScope_constant_ERR_INVALID_PARAMETER>`\ ；或者如果不使用线程并且 :ref:`HTTPClient<class_HTTPClient>` 无法连接到主机，则返回 :ref:`@GlobalScope.ERR_CANT_CONNECT<class_@GlobalScope_constant_ERR_CANT_CONNECT>`\ 。

\ **注意：**\ 当 ``method`` 为 :ref:`HTTPClient.METHOD_GET<class_HTTPClient_constant_METHOD_GET>` 时，通过 ``request_data`` 发送的有效载荷可能会被服务器忽略，甚至导致服务器拒绝请求（见 `RFC 7231 第 4.3.1 节 <https://datatracker.ietf.org/doc/html/rfc7231#section-4.3.1>`__\ 了解更多详情）。作为一种变通方法，可以在 URL 中将数据作为查询字符串发送（有关示例，请参见 :ref:`String.uri_encode<class_String_method_uri_encode>`\ ）。

\ **注意：**\ 建议使用传输加密（TLS）并避免在 HTTP GET URL 参数中发送敏感信息（例如登录凭据）。考虑改用 HTTP POST 请求或 HTTP 报头来获取此类信息。

.. rst-class:: classref-item-separator

----

.. _class_HTTPRequest_method_request_raw:

.. rst-class:: classref-method

:ref:`Error<enum_@GlobalScope_Error>` **request_raw** **(** :ref:`String<class_String>` url, :ref:`PackedStringArray<class_PackedStringArray>` custom_headers=PackedStringArray(), :ref:`Method<enum_HTTPClient_Method>` method=0, :ref:`PackedByteArray<class_PackedByteArray>` request_data_raw=PackedByteArray() **)**

在底层的\ :ref:`HTTPClient<class_HTTPClient>`\ 上创建请求，使用一个原始字节数组作为请求主体。如果没有配置错误，它会尝试使用 :ref:`HTTPClient.connect_to_host<class_HTTPClient_method_connect_to_host>` 连接并将参数传递给 :ref:`HTTPClient.request<class_HTTPClient_method_request>`\ 。

如果请求创建成功，则返回 :ref:`@GlobalScope.OK<class_@GlobalScope_constant_OK>`\ 。（并不意味着服务器已响应），\ :ref:`@GlobalScope.ERR_UNCONFIGURED<class_@GlobalScope_constant_ERR_UNCONFIGURED>` 如果不在树中，\ :ref:`@GlobalScope.ERR_BUSY<class_@GlobalScope_constant_ERR_BUSY>` 如果仍在处理先前的请求，\ :ref:`@GlobalScope.ERR_INVALID_PARAMETER<class_@GlobalScope_constant_ERR_INVALID_PARAMETER>` 如果给定的字符串不是有效的 URL 格式，或 :ref:`@GlobalScope.ERR_CANT_CONNECT<class_@GlobalScope_constant_ERR_CANT_CONNECT>`\ 如果不使用线程并且 :ref:`HTTPClient<class_HTTPClient>` 无法连接到主机。

.. rst-class:: classref-item-separator

----

.. _class_HTTPRequest_method_set_http_proxy:

.. rst-class:: classref-method

void **set_http_proxy** **(** :ref:`String<class_String>` host, :ref:`int<class_int>` port **)**

设置 HTTP 请求使用的代理服务器。

如果 ``host`` 为空或者 ``port`` 为 -1，则会取消设置代理服务器。

.. rst-class:: classref-item-separator

----

.. _class_HTTPRequest_method_set_https_proxy:

.. rst-class:: classref-method

void **set_https_proxy** **(** :ref:`String<class_String>` host, :ref:`int<class_int>` port **)**

设置 HTTPS 请求使用的代理服务器。

如果 ``host`` 为空或者 ``port`` 为 -1，则会取消设置代理服务器。

.. rst-class:: classref-item-separator

----

.. _class_HTTPRequest_method_set_tls_options:

.. rst-class:: classref-method

void **set_tls_options** **(** :ref:`TLSOptions<class_TLSOptions>` client_options **)**

设置连接到 HTTPS 服务器时使用的 :ref:`TLSOptions<class_TLSOptions>`\ 。见 :ref:`TLSOptions.client<class_TLSOptions_method_client>`\ 。

.. |virtual| replace:: :abbr:`virtual (本方法通常需要用户覆盖才能生效。)`
.. |const| replace:: :abbr:`const (本方法没有副作用。不会修改该实例的任何成员变量。)`
.. |vararg| replace:: :abbr:`vararg (本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。)`
.. |constructor| replace:: :abbr:`constructor (本方法用于构造某个类型。)`
.. |static| replace:: :abbr:`static (调用本方法无需实例，所以可以直接使用类名调用。)`
.. |operator| replace:: :abbr:`operator (本方法描述的是使用本类型作为左操作数的有效操作符。)`
.. |bitfield| replace:: :abbr:`BitField (这个值是由下列标志构成的位掩码整数。)`
