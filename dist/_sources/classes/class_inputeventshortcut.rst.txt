:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Godot engine sources.
.. Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.
.. XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/InputEventShortcut.xml.

.. _class_InputEventShortcut:

InputEventShortcut
==================

**继承：** :ref:`InputEvent<class_InputEvent>` **<** :ref:`Resource<class_Resource>` **<** :ref:`RefCounted<class_RefCounted>` **<** :ref:`Object<class_Object>`

代表触发的键盘快捷键 :ref:`Shortcut<class_Shortcut>`\ 。

.. rst-class:: classref-introduction-group

描述
----

InputEventShortcut 是一种可以在 :ref:`Node._unhandled_key_input<class_Node_private_method__unhandled_key_input>` 中收到的特殊事件。通常由编辑器的“命令面板”发送，用于触发动作，但也可以使用 :ref:`Viewport.push_input<class_Viewport_method_push_input>` 手动发送。

.. rst-class:: classref-reftable-group

属性
----

.. table::
   :widths: auto

   +---------------------------------+-------------------------------------------------------------+
   | :ref:`Shortcut<class_Shortcut>` | :ref:`shortcut<class_InputEventShortcut_property_shortcut>` |
   +---------------------------------+-------------------------------------------------------------+

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

属性说明
--------

.. _class_InputEventShortcut_property_shortcut:

.. rst-class:: classref-property

:ref:`Shortcut<class_Shortcut>` **shortcut**

.. rst-class:: classref-property-setget

- void **set_shortcut** **(** :ref:`Shortcut<class_Shortcut>` value **)**
- :ref:`Shortcut<class_Shortcut>` **get_shortcut** **(** **)**

这个事件代表的 :ref:`Shortcut<class_Shortcut>`\ 。它的 :ref:`Shortcut.matches_event<class_Shortcut_method_matches_event>` 方法对这个事件始终返回 ``true``\ 。

.. |virtual| replace:: :abbr:`virtual (本方法通常需要用户覆盖才能生效。)`
.. |const| replace:: :abbr:`const (本方法没有副作用。不会修改该实例的任何成员变量。)`
.. |vararg| replace:: :abbr:`vararg (本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。)`
.. |constructor| replace:: :abbr:`constructor (本方法用于构造某个类型。)`
.. |static| replace:: :abbr:`static (调用本方法无需实例，所以可以直接使用类名调用。)`
.. |operator| replace:: :abbr:`operator (本方法描述的是使用本类型作为左操作数的有效操作符。)`
.. |bitfield| replace:: :abbr:`BitField (这个值是由下列标志构成的位掩码整数。)`
