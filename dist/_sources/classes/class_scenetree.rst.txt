:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Godot engine sources.
.. Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.
.. XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/SceneTree.xml.

.. _class_SceneTree:

SceneTree
=========

**继承：** :ref:`MainLoop<class_MainLoop>` **<** :ref:`Object<class_Object>`

通过节点层次结构管理游戏循环。

.. rst-class:: classref-introduction-group

描述
----

作为最重要的类之一，\ **SceneTree** 管理着场景中节点的层次结构以及场景本身。节点可以被添加、检索和删除。整个场景树可以被暂停，包括当前场景。场景可以被加载、切换和重新加载。

你也可以使用 **SceneTree** 将你的节点组织成组，每个节点都可以被分配到你想要创建的组，例如“敌人”组。然后你可以遍历这些组，甚至可以统一对所有组成员调用方法并设置属性。

\ **SceneTree** 是场景所使用的默认 :ref:`MainLoop<class_MainLoop>` 实现，因此掌控着游戏循环。

.. rst-class:: classref-introduction-group

教程
----

- :doc:`SceneTree <../tutorials/scripting/scene_tree>`

- :doc:`多分辨率 <../tutorials/rendering/multiple_resolutions>`

.. rst-class:: classref-reftable-group

属性
----

.. table::
   :widths: auto

   +-----------------------------+------------------------------------------------------------------------------+-----------+
   | :ref:`bool<class_bool>`     | :ref:`auto_accept_quit<class_SceneTree_property_auto_accept_quit>`           | ``true``  |
   +-----------------------------+------------------------------------------------------------------------------+-----------+
   | :ref:`Node<class_Node>`     | :ref:`current_scene<class_SceneTree_property_current_scene>`                 |           |
   +-----------------------------+------------------------------------------------------------------------------+-----------+
   | :ref:`bool<class_bool>`     | :ref:`debug_collisions_hint<class_SceneTree_property_debug_collisions_hint>` | ``false`` |
   +-----------------------------+------------------------------------------------------------------------------+-----------+
   | :ref:`bool<class_bool>`     | :ref:`debug_navigation_hint<class_SceneTree_property_debug_navigation_hint>` | ``false`` |
   +-----------------------------+------------------------------------------------------------------------------+-----------+
   | :ref:`bool<class_bool>`     | :ref:`debug_paths_hint<class_SceneTree_property_debug_paths_hint>`           | ``false`` |
   +-----------------------------+------------------------------------------------------------------------------+-----------+
   | :ref:`Node<class_Node>`     | :ref:`edited_scene_root<class_SceneTree_property_edited_scene_root>`         |           |
   +-----------------------------+------------------------------------------------------------------------------+-----------+
   | :ref:`bool<class_bool>`     | :ref:`multiplayer_poll<class_SceneTree_property_multiplayer_poll>`           | ``true``  |
   +-----------------------------+------------------------------------------------------------------------------+-----------+
   | :ref:`bool<class_bool>`     | :ref:`paused<class_SceneTree_property_paused>`                               | ``false`` |
   +-----------------------------+------------------------------------------------------------------------------+-----------+
   | :ref:`bool<class_bool>`     | :ref:`quit_on_go_back<class_SceneTree_property_quit_on_go_back>`             | ``true``  |
   +-----------------------------+------------------------------------------------------------------------------+-----------+
   | :ref:`Window<class_Window>` | :ref:`root<class_SceneTree_property_root>`                                   |           |
   +-----------------------------+------------------------------------------------------------------------------+-----------+

.. rst-class:: classref-reftable-group

方法
----

.. table::
   :widths: auto

   +---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                        | :ref:`call_group<class_SceneTree_method_call_group>` **(** :ref:`StringName<class_StringName>` group, :ref:`StringName<class_StringName>` method, ... **)** |vararg|                                                                                    |
   +---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                        | :ref:`call_group_flags<class_SceneTree_method_call_group_flags>` **(** :ref:`int<class_int>` flags, :ref:`StringName<class_StringName>` group, :ref:`StringName<class_StringName>` method, ... **)** |vararg|                                           |
   +---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Error<enum_@GlobalScope_Error>`       | :ref:`change_scene_to_file<class_SceneTree_method_change_scene_to_file>` **(** :ref:`String<class_String>` path **)**                                                                                                                                   |
   +---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Error<enum_@GlobalScope_Error>`       | :ref:`change_scene_to_packed<class_SceneTree_method_change_scene_to_packed>` **(** :ref:`PackedScene<class_PackedScene>` packed_scene **)**                                                                                                             |
   +---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`SceneTreeTimer<class_SceneTreeTimer>` | :ref:`create_timer<class_SceneTree_method_create_timer>` **(** :ref:`float<class_float>` time_sec, :ref:`bool<class_bool>` process_always=true, :ref:`bool<class_bool>` process_in_physics=false, :ref:`bool<class_bool>` ignore_time_scale=false **)** |
   +---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Tween<class_Tween>`                   | :ref:`create_tween<class_SceneTree_method_create_tween>` **(** **)**                                                                                                                                                                                    |
   +---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Node<class_Node>`                     | :ref:`get_first_node_in_group<class_SceneTree_method_get_first_node_in_group>` **(** :ref:`StringName<class_StringName>` group **)**                                                                                                                    |
   +---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`int<class_int>`                       | :ref:`get_frame<class_SceneTree_method_get_frame>` **(** **)** |const|                                                                                                                                                                                  |
   +---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`MultiplayerAPI<class_MultiplayerAPI>` | :ref:`get_multiplayer<class_SceneTree_method_get_multiplayer>` **(** :ref:`NodePath<class_NodePath>` for_path=NodePath("") **)** |const|                                                                                                                |
   +---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`int<class_int>`                       | :ref:`get_node_count<class_SceneTree_method_get_node_count>` **(** **)** |const|                                                                                                                                                                        |
   +---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Node[]<class_Node>`                   | :ref:`get_nodes_in_group<class_SceneTree_method_get_nodes_in_group>` **(** :ref:`StringName<class_StringName>` group **)**                                                                                                                              |
   +---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Tween[]<class_Tween>`                 | :ref:`get_processed_tweens<class_SceneTree_method_get_processed_tweens>` **(** **)**                                                                                                                                                                    |
   +---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                     | :ref:`has_group<class_SceneTree_method_has_group>` **(** :ref:`StringName<class_StringName>` name **)** |const|                                                                                                                                         |
   +---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                        | :ref:`notify_group<class_SceneTree_method_notify_group>` **(** :ref:`StringName<class_StringName>` group, :ref:`int<class_int>` notification **)**                                                                                                      |
   +---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                        | :ref:`notify_group_flags<class_SceneTree_method_notify_group_flags>` **(** :ref:`int<class_int>` call_flags, :ref:`StringName<class_StringName>` group, :ref:`int<class_int>` notification **)**                                                        |
   +---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                        | :ref:`queue_delete<class_SceneTree_method_queue_delete>` **(** :ref:`Object<class_Object>` obj **)**                                                                                                                                                    |
   +---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                        | :ref:`quit<class_SceneTree_method_quit>` **(** :ref:`int<class_int>` exit_code=0 **)**                                                                                                                                                                  |
   +---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Error<enum_@GlobalScope_Error>`       | :ref:`reload_current_scene<class_SceneTree_method_reload_current_scene>` **(** **)**                                                                                                                                                                    |
   +---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                        | :ref:`set_group<class_SceneTree_method_set_group>` **(** :ref:`StringName<class_StringName>` group, :ref:`String<class_String>` property, :ref:`Variant<class_Variant>` value **)**                                                                     |
   +---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                        | :ref:`set_group_flags<class_SceneTree_method_set_group_flags>` **(** :ref:`int<class_int>` call_flags, :ref:`StringName<class_StringName>` group, :ref:`String<class_String>` property, :ref:`Variant<class_Variant>` value **)**                       |
   +---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                        | :ref:`set_multiplayer<class_SceneTree_method_set_multiplayer>` **(** :ref:`MultiplayerAPI<class_MultiplayerAPI>` multiplayer, :ref:`NodePath<class_NodePath>` root_path=NodePath("") **)**                                                              |
   +---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                        | :ref:`unload_current_scene<class_SceneTree_method_unload_current_scene>` **(** **)**                                                                                                                                                                    |
   +---------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

信号
----

.. _class_SceneTree_signal_node_added:

.. rst-class:: classref-signal

**node_added** **(** :ref:`Node<class_Node>` node **)**

当将节点添加到 **SceneTree** 时发出。

.. rst-class:: classref-item-separator

----

.. _class_SceneTree_signal_node_configuration_warning_changed:

.. rst-class:: classref-signal

**node_configuration_warning_changed** **(** :ref:`Node<class_Node>` node **)**

当节点的配置更改时发出。仅在 ``tool`` 模式下发射。

.. rst-class:: classref-item-separator

----

.. _class_SceneTree_signal_node_removed:

.. rst-class:: classref-signal

**node_removed** **(** :ref:`Node<class_Node>` node **)**

当从 **SceneTree** 中移除节点时发出。

.. rst-class:: classref-item-separator

----

.. _class_SceneTree_signal_node_renamed:

.. rst-class:: classref-signal

**node_renamed** **(** :ref:`Node<class_Node>` node **)**

当节点重命名时发出。

.. rst-class:: classref-item-separator

----

.. _class_SceneTree_signal_physics_frame:

.. rst-class:: classref-signal

**physics_frame** **(** **)**

在 **SceneTree** 中的每个节点上调用 :ref:`Node._physics_process<class_Node_private_method__physics_process>` 之前立即发出。

.. rst-class:: classref-item-separator

----

.. _class_SceneTree_signal_process_frame:

.. rst-class:: classref-signal

**process_frame** **(** **)**

在对 **SceneTree** 中的每个节点调用 :ref:`Node._process<class_Node_private_method__process>` 之前立即发出。

.. rst-class:: classref-item-separator

----

.. _class_SceneTree_signal_tree_changed:

.. rst-class:: classref-signal

**tree_changed** **(** **)**

当 **SceneTree** 层次结构发生变化（移动或重命名子项等）时发出。

.. rst-class:: classref-item-separator

----

.. _class_SceneTree_signal_tree_process_mode_changed:

.. rst-class:: classref-signal

**tree_process_mode_changed** **(** **)**

该信号仅在编辑器中发出，允许编辑器更新被禁用节点的可见性。任何节点的 :ref:`Node.process_mode<class_Node_property_process_mode>` 更改时发出。

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

枚举
----

.. _enum_SceneTree_GroupCallFlags:

.. rst-class:: classref-enumeration

enum **GroupCallFlags**:

.. _class_SceneTree_constant_GROUP_CALL_DEFAULT:

.. rst-class:: classref-enumeration-constant

:ref:`GroupCallFlags<enum_SceneTree_GroupCallFlags>` **GROUP_CALL_DEFAULT** = ``0``

对分组进行调用时，不使用标志（默认）。

.. _class_SceneTree_constant_GROUP_CALL_REVERSE:

.. rst-class:: classref-enumeration-constant

:ref:`GroupCallFlags<enum_SceneTree_GroupCallFlags>` **GROUP_CALL_REVERSE** = ``1``

对分组进行调用时，使用逆场景序。

.. _class_SceneTree_constant_GROUP_CALL_DEFERRED:

.. rst-class:: classref-enumeration-constant

:ref:`GroupCallFlags<enum_SceneTree_GroupCallFlags>` **GROUP_CALL_DEFERRED** = ``2``

在当前帧的末尾对分组进行调用（处理帧或物理帧）。

.. _class_SceneTree_constant_GROUP_CALL_UNIQUE:

.. rst-class:: classref-enumeration-constant

:ref:`GroupCallFlags<enum_SceneTree_GroupCallFlags>` **GROUP_CALL_UNIQUE** = ``4``

即便执行了多次调用，也只对分组进行一次调用。

\ **注意：**\ 确定调用是否唯一时不考虑参数。因此，如果使用不同的参数调用了同一个方法，那么只会执行第一个调用。

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

属性说明
--------

.. _class_SceneTree_property_auto_accept_quit:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **auto_accept_quit** = ``true``

.. rst-class:: classref-property-setget

- void **set_auto_accept_quit** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **is_auto_accept_quit** **(** **)**

如果为 ``true``\ ，则应用程序会自动接受退出请求。

移动平台见 :ref:`quit_on_go_back<class_SceneTree_property_quit_on_go_back>`\ 。

.. rst-class:: classref-item-separator

----

.. _class_SceneTree_property_current_scene:

.. rst-class:: classref-property

:ref:`Node<class_Node>` **current_scene**

.. rst-class:: classref-property-setget

- void **set_current_scene** **(** :ref:`Node<class_Node>` value **)**
- :ref:`Node<class_Node>` **get_current_scene** **(** **)**

返回当前运行场景的根节点，无视其结构。

\ **警告：**\ 直接设置这个属性可能无法达到预期效果，\ *不会*\ 为场景树添加或移除任何节点，请考虑改用 :ref:`change_scene_to_file<class_SceneTree_method_change_scene_to_file>` 或 :ref:`change_scene_to_packed<class_SceneTree_method_change_scene_to_packed>`\ 。

.. rst-class:: classref-item-separator

----

.. _class_SceneTree_property_debug_collisions_hint:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **debug_collisions_hint** = ``false``

.. rst-class:: classref-property-setget

- void **set_debug_collisions_hint** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **is_debugging_collisions_hint** **(** **)**

如果为 ``true``\ ，从编辑器中运行游戏时会显示碰撞形状，方便调试。

\ **注意：**\ 这个属性不应在运行时更改。在运行项目时更改 :ref:`debug_collisions_hint<class_SceneTree_property_debug_collisions_hint>` 的值不会有想要的效果。

.. rst-class:: classref-item-separator

----

.. _class_SceneTree_property_debug_navigation_hint:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **debug_navigation_hint** = ``false``

.. rst-class:: classref-property-setget

- void **set_debug_navigation_hint** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **is_debugging_navigation_hint** **(** **)**

如果为 ``true``\ ，从编辑器中运行游戏时会显示导航多边形，方便调试。

\ **注意：**\ 这个属性不应在运行时更改。在运行项目时更改 :ref:`debug_navigation_hint<class_SceneTree_property_debug_navigation_hint>` 的值不会有想要的效果。

.. rst-class:: classref-item-separator

----

.. _class_SceneTree_property_debug_paths_hint:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **debug_paths_hint** = ``false``

.. rst-class:: classref-property-setget

- void **set_debug_paths_hint** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **is_debugging_paths_hint** **(** **)**

如果为 ``true``\ ，从编辑器中运行游戏时，来自 :ref:`Path2D<class_Path2D>` 和 :ref:`Path3D<class_Path3D>` 节点的曲线将可见以进行调试。

\ **注意：**\ 该属性没有被设计为在运行时更改。在项目运行时更改 :ref:`debug_paths_hint<class_SceneTree_property_debug_paths_hint>` 的值不会产生预期的效果。

.. rst-class:: classref-item-separator

----

.. _class_SceneTree_property_edited_scene_root:

.. rst-class:: classref-property

:ref:`Node<class_Node>` **edited_scene_root**

.. rst-class:: classref-property-setget

- void **set_edited_scene_root** **(** :ref:`Node<class_Node>` value **)**
- :ref:`Node<class_Node>` **get_edited_scene_root** **(** **)**

编辑场景的根。

.. rst-class:: classref-item-separator

----

.. _class_SceneTree_property_multiplayer_poll:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **multiplayer_poll** = ``true``

.. rst-class:: classref-property-setget

- void **set_multiplayer_poll_enabled** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **is_multiplayer_poll_enabled** **(** **)**

如果为 ``true``\ （默认值），则在 :ref:`process_frame<class_SceneTree_signal_process_frame>` 期间为该 SceneTree 启用 :ref:`MultiplayerAPI<class_MultiplayerAPI>` 的自动轮询。

如果为 ``false``\ ，则需要手动调用 :ref:`MultiplayerAPI.poll<class_MultiplayerAPI_method_poll>` 以处理网络数据包并下发 RPC。这允许在一个不同的循环（例如物理、线程、特定时间步长）中运行 RPC，并在从线程访问 :ref:`MultiplayerAPI<class_MultiplayerAPI>` 时进行手动 :ref:`Mutex<class_Mutex>` 保护。

.. rst-class:: classref-item-separator

----

.. _class_SceneTree_property_paused:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **paused** = ``false``

.. rst-class:: classref-property-setget

- void **set_pause** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **is_paused** **(** **)**

如果为 ``true``\ ，\ **SceneTree** 会暂停。这样做会有以下行为：

- 2D 和 3D 物理将停止，包括信号和碰撞检测。

- 节点不再调用 :ref:`Node._process<class_Node_private_method__process>`\ 、\ :ref:`Node._physics_process<class_Node_private_method__physics_process>` 和 :ref:`Node._input<class_Node_private_method__input>`\ 。

.. rst-class:: classref-item-separator

----

.. _class_SceneTree_property_quit_on_go_back:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **quit_on_go_back** = ``true``

.. rst-class:: classref-property-setget

- void **set_quit_on_go_back** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **is_quit_on_go_back** **(** **)**

如果为 ``true``\ ，则该应用程序会在导航返回时自动退出（例如在 Android 上使用系统“返回”键）。

禁用这个选项时，如果要处理“返回”按钮，请使用 :ref:`DisplayServer.WINDOW_EVENT_GO_BACK_REQUEST<class_DisplayServer_constant_WINDOW_EVENT_GO_BACK_REQUEST>`\ 。

.. rst-class:: classref-item-separator

----

.. _class_SceneTree_property_root:

.. rst-class:: classref-property

:ref:`Window<class_Window>` **root**

.. rst-class:: classref-property-setget

- :ref:`Window<class_Window>` **get_root** **(** **)**

**SceneTree** 的根 :ref:`Window<class_Window>`\ 。

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

方法说明
--------

.. _class_SceneTree_method_call_group:

.. rst-class:: classref-method

void **call_group** **(** :ref:`StringName<class_StringName>` group, :ref:`StringName<class_StringName>` method, ... **)** |vararg|

对给定分组的每个成员调用 ``method``\ 。调用方法时在末尾指定的参数会传递给 ``method``\ 。如果节点没有给定的方法或参数列表不匹配（无论是数量还是类型），那么就会跳过这个节点。

\ **注意：**\ :ref:`call_group<class_SceneTree_method_call_group>` 将立即对所有成员调用一次方法，如果对大量成员调用昂贵的方法，这可能会导致卡顿。

.. rst-class:: classref-item-separator

----

.. _class_SceneTree_method_call_group_flags:

.. rst-class:: classref-method

void **call_group_flags** **(** :ref:`int<class_int>` flags, :ref:`StringName<class_StringName>` group, :ref:`StringName<class_StringName>` method, ... **)** |vararg|

调用给定分组中每个成员的 ``method`` 方法，遵循给定的 :ref:`GroupCallFlags<enum_SceneTree_GroupCallFlags>`\ 。你可以在方法调用末尾指定要传递给 ``method`` 的参数。如果某个节点没有给定的方法，或者方法的参数列表不匹配（无论是数量还是类型不匹配），则会跳过这个节点。

::

    # 使用延迟方式逆序调用该方法。
    get_tree().call_group_flags(SceneTree.GROUP_CALL_DEFERRED | SceneTree.GROUP_CALL_REVERSE)

\ **注意：**\ 分组调用标志可用于控制方法调用的行为。默认情况下方法是立即调用的，与 :ref:`call_group<class_SceneTree_method_call_group>` 类似。但是如果在 ``flags`` 中存在 :ref:`GROUP_CALL_DEFERRED<class_SceneTree_constant_GROUP_CALL_DEFERRED>` 标志，则方法会在该帧末尾调用，与 :ref:`Object.set_deferred<class_Object_method_set_deferred>` 类似。

.. rst-class:: classref-item-separator

----

.. _class_SceneTree_method_change_scene_to_file:

.. rst-class:: classref-method

:ref:`Error<enum_@GlobalScope_Error>` **change_scene_to_file** **(** :ref:`String<class_String>` path **)**

将位于给定路径 ``path`` 的场景加载进一个 :ref:`PackedScene<class_PackedScene>` 并新建其实例，然后将正在运行的场景修改为这个场景。

成功时返回 :ref:`@GlobalScope.OK<class_@GlobalScope_constant_OK>`\ ；如果 ``path`` 不能被加载到一个 :ref:`PackedScene<class_PackedScene>` 中，则返回 :ref:`@GlobalScope.ERR_CANT_OPEN<class_@GlobalScope_constant_ERR_CANT_OPEN>`\ ；如果该场景无法被实例化，则返回 :ref:`@GlobalScope.ERR_CANT_CREATE<class_@GlobalScope_constant_ERR_CANT_CREATE>`\ 。

\ **注意：**\ 有关操作顺序的详细信息，请参阅 :ref:`change_scene_to_packed<class_SceneTree_method_change_scene_to_packed>`\ 。

.. rst-class:: classref-item-separator

----

.. _class_SceneTree_method_change_scene_to_packed:

.. rst-class:: classref-method

:ref:`Error<enum_@GlobalScope_Error>` **change_scene_to_packed** **(** :ref:`PackedScene<class_PackedScene>` packed_scene **)**

将正在运行的场景更改为给定 :ref:`PackedScene<class_PackedScene>` 的新实例（新实例必须有效）。

成功时返回 :ref:`@GlobalScope.OK<class_@GlobalScope_constant_OK>`\ ，场景无法被实例化时返回 :ref:`@GlobalScope.ERR_CANT_CREATE<class_@GlobalScope_constant_ERR_CANT_CREATE>`\ ，场景无效时返回 :ref:`@GlobalScope.ERR_INVALID_PARAMETER<class_@GlobalScope_constant_ERR_INVALID_PARAMETER>`\ 。

\ **注意：**\ 当 :ref:`change_scene_to_packed<class_SceneTree_method_change_scene_to_packed>` 被调用时，操作按以下顺序发生：

1. 当前场景节点被立即从树中移除。从那时起，在当前（传出）场景上调用的 :ref:`Node.get_tree<class_Node_method_get_tree>` 将返回 ``null``\ 。\ :ref:`current_scene<class_SceneTree_property_current_scene>` 也将变为 ``null``\ ，因为新场景尚不可用。

2. 在帧末尾时，已从树中移除的、之前的当前场景将被删除（从内存中释放），然后新场景将被实例化并添加到树中。\ :ref:`Node.get_tree<class_Node_method_get_tree>` 和 :ref:`current_scene<class_SceneTree_property_current_scene>` 将恢复正常工作。

这确保了两个场景不会同时运行，并且仍然会以类似于 :ref:`Node.queue_free<class_Node_method_queue_free>` 的安全方式释放之前的场景。

.. rst-class:: classref-item-separator

----

.. _class_SceneTree_method_create_timer:

.. rst-class:: classref-method

:ref:`SceneTreeTimer<class_SceneTreeTimer>` **create_timer** **(** :ref:`float<class_float>` time_sec, :ref:`bool<class_bool>` process_always=true, :ref:`bool<class_bool>` process_in_physics=false, :ref:`bool<class_bool>` ignore_time_scale=false **)**

返回一个 :ref:`SceneTreeTimer<class_SceneTreeTimer>`\ ，会在 **SceneTree** 中经过给定秒数后发出 :ref:`SceneTreeTimer.timeout<class_SceneTreeTimer_signal_timeout>` 信号。

如果 ``process_always`` 为 ``false``\ ，则暂停 **SceneTree** 也会暂停计时器。

如果 ``process_in_physics`` 为 ``true``\ ，则将在物理帧而不是处理帧期间更新 :ref:`SceneTreeTimer<class_SceneTreeTimer>`\ （固定帧率处理）。

如果 ``ignore_time_scale`` 为 ``true``\ ，则将忽略 :ref:`Engine.time_scale<class_Engine_property_time_scale>` 并使用实际帧增量来更新 :ref:`SceneTreeTimer<class_SceneTreeTimer>`\ 。

通常用于创建一次性的延迟定时器，如下例所示：


.. tabs::

 .. code-tab:: gdscript

    func some_function():
        print("开始")
        await get_tree().create_timer(1.0).timeout
        print("结束")

 .. code-tab:: csharp

    public async Task SomeFunction()
    {
        GD.Print("开始");
        await ToSignal(GetTree().CreateTimer(1.0f), SceneTreeTimer.SignalName.Timeout);
        GD.Print("结束");
    }



计时器将在其时间结束后被自动释放。

\ **注意：**\ 计时器是在当前帧所有节点之后处理的，即节点的 :ref:`Node._process<class_Node_private_method__process>` 方法比计时器先调用（\ ``process_in_physics`` 为 ``true`` 时为 :ref:`Node._physics_process<class_Node_private_method__physics_process>`\ ）。

.. rst-class:: classref-item-separator

----

.. _class_SceneTree_method_create_tween:

.. rst-class:: classref-method

:ref:`Tween<class_Tween>` **create_tween** **(** **)**

创建并返回新的 :ref:`Tween<class_Tween>`\ 。该 Tween 会在下一个处理帧或物理帧中自动开始（取决于 :ref:`TweenProcessMode<enum_Tween_TweenProcessMode>`\ ）。

\ **注意：**\ 使用这个方法创建 :ref:`Tween<class_Tween>` 时，\ :ref:`Tween<class_Tween>` 不会与调用的 :ref:`Node<class_Node>` 绑定。即便在该 :ref:`Node<class_Node>` 释放后也仍然会继续进行动画，但是在已经没有任何可以动画的东西时会自动结束。如果你想要让 :ref:`Tween<class_Tween>` 在该 :ref:`Node<class_Node>` 释放时自动销毁，请使用 :ref:`Node.create_tween<class_Node_method_create_tween>` 或 :ref:`Tween.bind_node<class_Tween_method_bind_node>`\ 。

.. rst-class:: classref-item-separator

----

.. _class_SceneTree_method_get_first_node_in_group:

.. rst-class:: classref-method

:ref:`Node<class_Node>` **get_first_node_in_group** **(** :ref:`StringName<class_StringName>` group **)**

返回指定组中的第一个节点，如果组为空或不存在，则返回 ``null``\ 。

.. rst-class:: classref-item-separator

----

.. _class_SceneTree_method_get_frame:

.. rst-class:: classref-method

:ref:`int<class_int>` **get_frame** **(** **)** |const|

返回当前的帧数，即自应用程序启动以来的总帧数。

.. rst-class:: classref-item-separator

----

.. _class_SceneTree_method_get_multiplayer:

.. rst-class:: classref-method

:ref:`MultiplayerAPI<class_MultiplayerAPI>` **get_multiplayer** **(** :ref:`NodePath<class_NodePath>` for_path=NodePath("") **)** |const|

搜索为给定路径配置的 :ref:`MultiplayerAPI<class_MultiplayerAPI>`\ ，如果不存在，则会搜索父路径，直到找到为止。如果路径为空，或者没有找到，则返回默认路径。参见 :ref:`set_multiplayer<class_SceneTree_method_set_multiplayer>`\ 。

.. rst-class:: classref-item-separator

----

.. _class_SceneTree_method_get_node_count:

.. rst-class:: classref-method

:ref:`int<class_int>` **get_node_count** **(** **)** |const|

返回此 **SceneTree** 中的节点数。

.. rst-class:: classref-item-separator

----

.. _class_SceneTree_method_get_nodes_in_group:

.. rst-class:: classref-method

:ref:`Node[]<class_Node>` **get_nodes_in_group** **(** :ref:`StringName<class_StringName>` group **)**

返回一个分配给给定组的所有节点的列表。

.. rst-class:: classref-item-separator

----

.. _class_SceneTree_method_get_processed_tweens:

.. rst-class:: classref-method

:ref:`Tween[]<class_Tween>` **get_processed_tweens** **(** **)**

返回在 **SceneTree** 中当前存在的 :ref:`Tween<class_Tween>` 的数组（包括正在运行的和已暂停的）。

.. rst-class:: classref-item-separator

----

.. _class_SceneTree_method_has_group:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **has_group** **(** :ref:`StringName<class_StringName>` name **)** |const|

如果存在给定的分组，则返回 ``true``\ 。

场景中存在属于某个分组的 :ref:`Node<class_Node>` 时，该分组才存在（见 :ref:`Node.add_to_group<class_Node_method_add_to_group>`\ ）。不含任何节点的分组会被自动移除。

.. rst-class:: classref-item-separator

----

.. _class_SceneTree_method_notify_group:

.. rst-class:: classref-method

void **notify_group** **(** :ref:`StringName<class_StringName>` group, :ref:`int<class_int>` notification **)**

向 ``group`` 中的所有成员发送给定的通知。

\ **注意：**\ :ref:`notify_group<class_SceneTree_method_notify_group>` 会立即通知所有成员，如果向大量成员发送了通知，进而调用了开销很大的方法，则可能导致卡顿。

.. rst-class:: classref-item-separator

----

.. _class_SceneTree_method_notify_group_flags:

.. rst-class:: classref-method

void **notify_group_flags** **(** :ref:`int<class_int>` call_flags, :ref:`StringName<class_StringName>` group, :ref:`int<class_int>` notification **)**

将给定的通知发送到 ``group`` 中的所有成员，同时遵循给定的 :ref:`GroupCallFlags<enum_SceneTree_GroupCallFlags>`\ 。

\ **注意：**\ 分组调用标志用于控制通知发送的行为。默认情况下通知会立即发送，类似于 :ref:`notify_group<class_SceneTree_method_notify_group>`\ 。但是，如果 ``call_flags`` 参数中包含 :ref:`GROUP_CALL_DEFERRED<class_SceneTree_constant_GROUP_CALL_DEFERRED>` 标志，则通知将在当前帧的末尾发送，类似于使用 ``Object.call_deferred("notification", ...)``\ 。

.. rst-class:: classref-item-separator

----

.. _class_SceneTree_method_queue_delete:

.. rst-class:: classref-method

void **queue_delete** **(** :ref:`Object<class_Object>` obj **)**

将给定的对象加入删除队列，将对 :ref:`Object.free<class_Object_method_free>` 的调用推迟到当前帧的末尾。

.. rst-class:: classref-item-separator

----

.. _class_SceneTree_method_quit:

.. rst-class:: classref-method

void **quit** **(** :ref:`int<class_int>` exit_code=0 **)**

在当前迭代结束时退出应用程序。可以选择给出参数 ``exit_code``\ （默认为 0），以自定义退出状态代码。

按照惯例，退出代码 ``0`` 表示成功，而非零的退出代码表示错误。

出于可移植性的原因，退出代码应设置在 0 到 125（含）之间。

\ **注意：**\ 这个方法在 iOS 上不起作用。根据《iOS 人机界面指南》中的建议，用户应该通过 Home 键来关闭应用程序。

.. rst-class:: classref-item-separator

----

.. _class_SceneTree_method_reload_current_scene:

.. rst-class:: classref-method

:ref:`Error<enum_@GlobalScope_Error>` **reload_current_scene** **(** **)**

重新加载当前活动的场景。

成功时返回 :ref:`@GlobalScope.OK<class_@GlobalScope_constant_OK>`\ ，如果尚未定义 :ref:`current_scene<class_SceneTree_property_current_scene>`\ ，则返回 :ref:`@GlobalScope.ERR_UNCONFIGURED<class_@GlobalScope_constant_ERR_UNCONFIGURED>`\ ，如果 :ref:`current_scene<class_SceneTree_property_current_scene>` 无法加载到 :ref:`PackedScene<class_PackedScene>` 中，则返回 :ref:`@GlobalScope.ERR_CANT_OPEN<class_@GlobalScope_constant_ERR_CANT_OPEN>`\ ，如果场景无法加载，则返回 :ref:`@GlobalScope.ERR_CANT_CREATE<class_@GlobalScope_constant_ERR_CANT_CREATE>`\ 。

.. rst-class:: classref-item-separator

----

.. _class_SceneTree_method_set_group:

.. rst-class:: classref-method

void **set_group** **(** :ref:`StringName<class_StringName>` group, :ref:`String<class_String>` property, :ref:`Variant<class_Variant>` value **)**

将给定分组中所有成员的 ``property`` 设置为 ``value``\ 。

\ **注意：**\ :ref:`set_group<class_SceneTree_method_set_group>` 会立即在所有成员上设置属性，如果对许多成员设置具有大量耗费的 setter 的属性，则可能会导致卡顿。

.. rst-class:: classref-item-separator

----

.. _class_SceneTree_method_set_group_flags:

.. rst-class:: classref-method

void **set_group_flags** **(** :ref:`int<class_int>` call_flags, :ref:`StringName<class_StringName>` group, :ref:`String<class_String>` property, :ref:`Variant<class_Variant>` value **)**

将给定分组中所有成员的 ``property`` 设置为 ``value``\ ，设置时会考虑给定的 :ref:`GroupCallFlags<enum_SceneTree_GroupCallFlags>`\ 。

\ **注意：**\ 分组调用标志可用于控制属性设置的行为。默认情况下会立即设置属性，类似于 :ref:`set_group<class_SceneTree_method_set_group>`\ 。但是，如果在 ``call_flags`` 参数中存在 :ref:`GROUP_CALL_DEFERRED<class_SceneTree_constant_GROUP_CALL_DEFERRED>` 标志，则属性将在该帧的末尾再设置，类似于 :ref:`Object.call_deferred<class_Object_method_call_deferred>`\ 。

.. rst-class:: classref-item-separator

----

.. _class_SceneTree_method_set_multiplayer:

.. rst-class:: classref-method

void **set_multiplayer** **(** :ref:`MultiplayerAPI<class_MultiplayerAPI>` multiplayer, :ref:`NodePath<class_NodePath>` root_path=NodePath("") **)**

用给定的 ``root_path`` 设置自定义的 :ref:`MultiplayerAPI<class_MultiplayerAPI>`\ （同时控制相对的子路径），如果 ``root_path`` 为空，则会覆盖默认值。

\ **注意：**\ :ref:`MultiplayerAPI<class_MultiplayerAPI>` 不能为包含 ``root_path`` 的子路径配置，嵌套的自定义多人游戏是不被允许的。例如，如果为 ``"/root/Foo"`` 配置了一项，则为 ``"/root/Foo/Bar"`` 设置一项将导致错误。

.. rst-class:: classref-item-separator

----

.. _class_SceneTree_method_unload_current_scene:

.. rst-class:: classref-method

void **unload_current_scene** **(** **)**

如果当前场景已加载，调用此方法将进行卸载。

.. |virtual| replace:: :abbr:`virtual (本方法通常需要用户覆盖才能生效。)`
.. |const| replace:: :abbr:`const (本方法没有副作用。不会修改该实例的任何成员变量。)`
.. |vararg| replace:: :abbr:`vararg (本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。)`
.. |constructor| replace:: :abbr:`constructor (本方法用于构造某个类型。)`
.. |static| replace:: :abbr:`static (调用本方法无需实例，所以可以直接使用类名调用。)`
.. |operator| replace:: :abbr:`operator (本方法描述的是使用本类型作为左操作数的有效操作符。)`
.. |bitfield| replace:: :abbr:`BitField (这个值是由下列标志构成的位掩码整数。)`
