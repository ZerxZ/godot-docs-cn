:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Godot engine sources.
.. Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.
.. XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/AudioStreamWAV.xml.

.. _class_AudioStreamWAV:

AudioStreamWAV
==============

**继承：** :ref:`AudioStream<class_AudioStream>` **<** :ref:`Resource<class_Resource>` **<** :ref:`RefCounted<class_RefCounted>` **<** :ref:`Object<class_Object>`

存储从 WAV 文件加载的音频数据。

.. rst-class:: classref-introduction-group

描述
----

AudioStreamWAV 存储从 WAV 文件加载的声音样本。要播放存储的声音，请使用 :ref:`AudioStreamPlayer<class_AudioStreamPlayer>`\ （用于非空间定位音频）或 :ref:`AudioStreamPlayer2D<class_AudioStreamPlayer2D>`/:ref:`AudioStreamPlayer3D<class_AudioStreamPlayer3D>`\ （用于空间定位音频）。声音可以循环播放。

这个类还可用于存储动态生成的 PCM 音频数据。另请参阅 :ref:`AudioStreamGenerator<class_AudioStreamGenerator>` 以了解程序化音频生成。

.. rst-class:: classref-introduction-group

教程
----

- :doc:`运行时文件加载与保存 <../tutorials/io/runtime_file_loading_and_saving>`

.. rst-class:: classref-reftable-group

属性
----

.. table::
   :widths: auto

   +-----------------------------------------------+-------------------------------------------------------------+-----------------------+
   | :ref:`PackedByteArray<class_PackedByteArray>` | :ref:`data<class_AudioStreamWAV_property_data>`             | ``PackedByteArray()`` |
   +-----------------------------------------------+-------------------------------------------------------------+-----------------------+
   | :ref:`Format<enum_AudioStreamWAV_Format>`     | :ref:`format<class_AudioStreamWAV_property_format>`         | ``0``                 |
   +-----------------------------------------------+-------------------------------------------------------------+-----------------------+
   | :ref:`int<class_int>`                         | :ref:`loop_begin<class_AudioStreamWAV_property_loop_begin>` | ``0``                 |
   +-----------------------------------------------+-------------------------------------------------------------+-----------------------+
   | :ref:`int<class_int>`                         | :ref:`loop_end<class_AudioStreamWAV_property_loop_end>`     | ``0``                 |
   +-----------------------------------------------+-------------------------------------------------------------+-----------------------+
   | :ref:`LoopMode<enum_AudioStreamWAV_LoopMode>` | :ref:`loop_mode<class_AudioStreamWAV_property_loop_mode>`   | ``0``                 |
   +-----------------------------------------------+-------------------------------------------------------------+-----------------------+
   | :ref:`int<class_int>`                         | :ref:`mix_rate<class_AudioStreamWAV_property_mix_rate>`     | ``44100``             |
   +-----------------------------------------------+-------------------------------------------------------------+-----------------------+
   | :ref:`bool<class_bool>`                       | :ref:`stereo<class_AudioStreamWAV_property_stereo>`         | ``false``             |
   +-----------------------------------------------+-------------------------------------------------------------+-----------------------+

.. rst-class:: classref-reftable-group

方法
----

.. table::
   :widths: auto

   +---------------------------------------+----------------------------------------------------------------------------------------------------------+
   | :ref:`Error<enum_@GlobalScope_Error>` | :ref:`save_to_wav<class_AudioStreamWAV_method_save_to_wav>` **(** :ref:`String<class_String>` path **)** |
   +---------------------------------------+----------------------------------------------------------------------------------------------------------+

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

枚举
----

.. _enum_AudioStreamWAV_Format:

.. rst-class:: classref-enumeration

enum **Format**:

.. _class_AudioStreamWAV_constant_FORMAT_8_BITS:

.. rst-class:: classref-enumeration-constant

:ref:`Format<enum_AudioStreamWAV_Format>` **FORMAT_8_BITS** = ``0``

8 位音频编解码器。

.. _class_AudioStreamWAV_constant_FORMAT_16_BITS:

.. rst-class:: classref-enumeration-constant

:ref:`Format<enum_AudioStreamWAV_Format>` **FORMAT_16_BITS** = ``1``

16 位音频编解码器。

.. _class_AudioStreamWAV_constant_FORMAT_IMA_ADPCM:

.. rst-class:: classref-enumeration-constant

:ref:`Format<enum_AudioStreamWAV_Format>` **FORMAT_IMA_ADPCM** = ``2``

音频使用 IMA ADPCM 进行压缩。

.. rst-class:: classref-item-separator

----

.. _enum_AudioStreamWAV_LoopMode:

.. rst-class:: classref-enumeration

enum **LoopMode**:

.. _class_AudioStreamWAV_constant_LOOP_DISABLED:

.. rst-class:: classref-enumeration-constant

:ref:`LoopMode<enum_AudioStreamWAV_LoopMode>` **LOOP_DISABLED** = ``0``

音频不循环。

.. _class_AudioStreamWAV_constant_LOOP_FORWARD:

.. rst-class:: classref-enumeration-constant

:ref:`LoopMode<enum_AudioStreamWAV_LoopMode>` **LOOP_FORWARD** = ``1``

音频在 :ref:`loop_begin<class_AudioStreamWAV_property_loop_begin>` 和 :ref:`loop_end<class_AudioStreamWAV_property_loop_end>` 之间循环数据，仅向前播放。

.. _class_AudioStreamWAV_constant_LOOP_PINGPONG:

.. rst-class:: classref-enumeration-constant

:ref:`LoopMode<enum_AudioStreamWAV_LoopMode>` **LOOP_PINGPONG** = ``2``

音频在 :ref:`loop_begin<class_AudioStreamWAV_property_loop_begin>` 和 :ref:`loop_end<class_AudioStreamWAV_property_loop_end>` 之间循环数据，来回播放。

.. _class_AudioStreamWAV_constant_LOOP_BACKWARD:

.. rst-class:: classref-enumeration-constant

:ref:`LoopMode<enum_AudioStreamWAV_LoopMode>` **LOOP_BACKWARD** = ``3``

音频在 :ref:`loop_begin<class_AudioStreamWAV_property_loop_begin>` 和 :ref:`loop_end<class_AudioStreamWAV_property_loop_end>` 之间循环数据，仅向后播放。

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

属性说明
--------

.. _class_AudioStreamWAV_property_data:

.. rst-class:: classref-property

:ref:`PackedByteArray<class_PackedByteArray>` **data** = ``PackedByteArray()``

.. rst-class:: classref-property-setget

- void **set_data** **(** :ref:`PackedByteArray<class_PackedByteArray>` value **)**
- :ref:`PackedByteArray<class_PackedByteArray>` **get_data** **(** **)**

包含以字节为单位的音频数据。

\ **注意：**\ 此属性需要有符号的 PCM8 数据。要将无符号的 PCM8 转换为有符号的 PCM8，需要从每个字节中减去 128。

.. rst-class:: classref-item-separator

----

.. _class_AudioStreamWAV_property_format:

.. rst-class:: classref-property

:ref:`Format<enum_AudioStreamWAV_Format>` **format** = ``0``

.. rst-class:: classref-property-setget

- void **set_format** **(** :ref:`Format<enum_AudioStreamWAV_Format>` value **)**
- :ref:`Format<enum_AudioStreamWAV_Format>` **get_format** **(** **)**

音频格式。取值见 :ref:`Format<enum_AudioStreamWAV_Format>` 常量。

.. rst-class:: classref-item-separator

----

.. _class_AudioStreamWAV_property_loop_begin:

.. rst-class:: classref-property

:ref:`int<class_int>` **loop_begin** = ``0``

.. rst-class:: classref-property-setget

- void **set_loop_begin** **(** :ref:`int<class_int>` value **)**
- :ref:`int<class_int>` **get_loop_begin** **(** **)**

循环起始点（相对于样本开始的样本数）。如果 WAV 文件中存在此信息，则将自动导入。

.. rst-class:: classref-item-separator

----

.. _class_AudioStreamWAV_property_loop_end:

.. rst-class:: classref-property

:ref:`int<class_int>` **loop_end** = ``0``

.. rst-class:: classref-property-setget

- void **set_loop_end** **(** :ref:`int<class_int>` value **)**
- :ref:`int<class_int>` **get_loop_end** **(** **)**

循环结束点（相对于样本开始的样本数）。如果 WAV 文件中存在此信息，则将自动导入。

.. rst-class:: classref-item-separator

----

.. _class_AudioStreamWAV_property_loop_mode:

.. rst-class:: classref-property

:ref:`LoopMode<enum_AudioStreamWAV_LoopMode>` **loop_mode** = ``0``

.. rst-class:: classref-property-setget

- void **set_loop_mode** **(** :ref:`LoopMode<enum_AudioStreamWAV_LoopMode>` value **)**
- :ref:`LoopMode<enum_AudioStreamWAV_LoopMode>` **get_loop_mode** **(** **)**

循环模式。如果 WAV 文件中存在此信息，则将自动导入。取值请参阅 :ref:`LoopMode<enum_AudioStreamWAV_LoopMode>` 常量。

.. rst-class:: classref-item-separator

----

.. _class_AudioStreamWAV_property_mix_rate:

.. rst-class:: classref-property

:ref:`int<class_int>` **mix_rate** = ``44100``

.. rst-class:: classref-property-setget

- void **set_mix_rate** **(** :ref:`int<class_int>` value **)**
- :ref:`int<class_int>` **get_mix_rate** **(** **)**

混合这个音频的采样率。更高的数值需要更多的存储空间，但会带来更好的质量。

在游戏中，常用的采样率有 ``11025``\ 、\ ``16000``\ 、\ ``22050``\ 、\ ``32000``\ 、\ ``44100``\ 、\ ``48000``\ 。

根据\ `奈奎斯特–香农采样定理 <https://zh.wikipedia.org/wiki/%E9%87%87%E6%A0%B7%E5%AE%9A%E7%90%86>`__\ ，当超过 40000 赫兹时，人类的听觉没有质量上的差别（因为大多数人只能听到 ~20000 赫兹，往往更少）。如果你要使用语音等音高较低的声音，则可以使用 ``32000`` 或 ``22050`` 等较低的采样率，不会降低质量。

.. rst-class:: classref-item-separator

----

.. _class_AudioStreamWAV_property_stereo:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **stereo** = ``false``

.. rst-class:: classref-property-setget

- void **set_stereo** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **is_stereo** **(** **)**

如果为 ``true``\ ，则音频为立体声。

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

方法说明
--------

.. _class_AudioStreamWAV_method_save_to_wav:

.. rst-class:: classref-method

:ref:`Error<enum_@GlobalScope_Error>` **save_to_wav** **(** :ref:`String<class_String>` path **)**

将 AudioStreamWAV 作为 WAV 文件保存到 ``path``\ 。无法保存 IMA ADPCM 格式的样本。

\ **注意：**\ 如果缺少 ``.wav`` 扩展名，则会自动将其追加到 ``path``\ 。

.. |virtual| replace:: :abbr:`virtual (本方法通常需要用户覆盖才能生效。)`
.. |const| replace:: :abbr:`const (本方法没有副作用。不会修改该实例的任何成员变量。)`
.. |vararg| replace:: :abbr:`vararg (本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。)`
.. |constructor| replace:: :abbr:`constructor (本方法用于构造某个类型。)`
.. |static| replace:: :abbr:`static (调用本方法无需实例，所以可以直接使用类名调用。)`
.. |operator| replace:: :abbr:`operator (本方法描述的是使用本类型作为左操作数的有效操作符。)`
.. |bitfield| replace:: :abbr:`BitField (这个值是由下列标志构成的位掩码整数。)`
