:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Godot engine sources.
.. Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.
.. XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/TLSOptions.xml.

.. _class_TLSOptions:

TLSOptions
==========

**继承：** :ref:`RefCounted<class_RefCounted>` **<** :ref:`Object<class_Object>`

客户端与服务器的 TLS 配置。

.. rst-class:: classref-introduction-group

描述
----

TLSOptions 是对 :ref:`StreamPeerTLS<class_StreamPeerTLS>` 和 :ref:`PacketPeerDTLS<class_PacketPeerDTLS>` 类中配置选项的抽象。

无法直接实例化这个类的对象，应改用静态方法 :ref:`client<class_TLSOptions_method_client>`\ 、\ :ref:`client_unsafe<class_TLSOptions_method_client_unsafe>` 或 :ref:`server<class_TLSOptions_method_server>`\ 。


.. tabs::

 .. code-tab:: gdscript

    # 创建 TLS 客户端配置，使用自定义 CA 信任链。
    var client_trusted_cas = load("res://my_trusted_cas.crt")
    var client_tls_options = TLSOptions.client(client_trusted_cas)
    
    # 创建 TLS 服务器配置。
    var server_certs = load("res://my_server_cas.crt")
    var server_key = load("res://my_server_key.key")
    var server_tls_options = TLSOptions.server(server_key, server_certs)



.. rst-class:: classref-reftable-group

方法
----

.. table::
   :widths: auto

   +-------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`TLSOptions<class_TLSOptions>` | :ref:`client<class_TLSOptions_method_client>` **(** :ref:`X509Certificate<class_X509Certificate>` trusted_chain=null, :ref:`String<class_String>` common_name_override="" **)** |static| |
   +-------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`TLSOptions<class_TLSOptions>` | :ref:`client_unsafe<class_TLSOptions_method_client_unsafe>` **(** :ref:`X509Certificate<class_X509Certificate>` trusted_chain=null **)** |static|                                        |
   +-------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`TLSOptions<class_TLSOptions>` | :ref:`server<class_TLSOptions_method_server>` **(** :ref:`CryptoKey<class_CryptoKey>` key, :ref:`X509Certificate<class_X509Certificate>` certificate **)** |static|                      |
   +-------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

方法说明
--------

.. _class_TLSOptions_method_client:

.. rst-class:: classref-method

:ref:`TLSOptions<class_TLSOptions>` **client** **(** :ref:`X509Certificate<class_X509Certificate>` trusted_chain=null, :ref:`String<class_String>` common_name_override="" **)** |static|

创建 TLS 客户端配置，验证证书及其通用名称（完整域名）。

你可以指定自定义的证书颁发机构信任链 ``trusted_chain``\ （如果为 ``null`` 则使用默认 CA 列表）。如果你希望证书拥有服务器 FQDN 之外的通用名称，还可以提供通用名称覆盖 ``common_name_override``\ 。

\ **注意：**\ 在 Web 平台上，TLS 验证始终强制使用 Web 浏览器的 CA 列表。这是一种安全特性。

.. rst-class:: classref-item-separator

----

.. _class_TLSOptions_method_client_unsafe:

.. rst-class:: classref-method

:ref:`TLSOptions<class_TLSOptions>` **client_unsafe** **(** :ref:`X509Certificate<class_X509Certificate>` trusted_chain=null **)** |static|

创建\ **不安全**\ 的 TLS 客户端配置，证书验证为可选项。你可以选择提供有效的信任链 ``trusted_chain``\ ，但永远不会对证书的通用名称进行检查。这种配置\ **不推荐**\ 用于测试之外的用途。

\ **注意：**\ 在 Web 平台上，TLS 验证始终强制使用 Web 浏览器的 CA 列表。这是一种安全特性。

.. rst-class:: classref-item-separator

----

.. _class_TLSOptions_method_server:

.. rst-class:: classref-method

:ref:`TLSOptions<class_TLSOptions>` **server** **(** :ref:`CryptoKey<class_CryptoKey>` key, :ref:`X509Certificate<class_X509Certificate>` certificate **)** |static|

使用提供的密钥 ``key`` 和证书 ``certificate`` 创建 TLS 服务器配置。

\ **注意：**\ ``certificate`` 中应当包含签名 CA 的完整证书链（可以使用通用文本编辑器连接证书文件）。

.. |virtual| replace:: :abbr:`virtual (本方法通常需要用户覆盖才能生效。)`
.. |const| replace:: :abbr:`const (本方法没有副作用。不会修改该实例的任何成员变量。)`
.. |vararg| replace:: :abbr:`vararg (本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。)`
.. |constructor| replace:: :abbr:`constructor (本方法用于构造某个类型。)`
.. |static| replace:: :abbr:`static (调用本方法无需实例，所以可以直接使用类名调用。)`
.. |operator| replace:: :abbr:`operator (本方法描述的是使用本类型作为左操作数的有效操作符。)`
.. |bitfield| replace:: :abbr:`BitField (这个值是由下列标志构成的位掩码整数。)`
