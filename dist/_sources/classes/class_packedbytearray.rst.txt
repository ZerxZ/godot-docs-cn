:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Godot engine sources.
.. Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.
.. XML source: https://github.com/godotengine/godot/tree/4.2/doc/classes/PackedByteArray.xml.

.. _class_PackedByteArray:

PackedByteArray
===============

字节紧缩数组。

.. rst-class:: classref-introduction-group

描述
----

专门设计用于存放字节的数组。数据是紧密存放的，因此能够在数组较大时节省内存。

\ **PackedByteArray** 还提供了在许多类型和字节之间进行编码/解码的方法。这些值的编码方式属于实现细节，与外部应用程序交互时不应依赖这种编码。

.. note::

	通过 C# 使用这个 API 时有显著的不同。详见 :ref:`doc_c_sharp_differences`\ 。

.. rst-class:: classref-reftable-group

构造函数
--------

.. table::
   :widths: auto

   +-----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`PackedByteArray<class_PackedByteArray>` | :ref:`PackedByteArray<class_PackedByteArray_constructor_PackedByteArray>` **(** **)**                                                    |
   +-----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`PackedByteArray<class_PackedByteArray>` | :ref:`PackedByteArray<class_PackedByteArray_constructor_PackedByteArray>` **(** :ref:`PackedByteArray<class_PackedByteArray>` from **)** |
   +-----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`PackedByteArray<class_PackedByteArray>` | :ref:`PackedByteArray<class_PackedByteArray_constructor_PackedByteArray>` **(** :ref:`Array<class_Array>` from **)**                     |
   +-----------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------+

.. rst-class:: classref-reftable-group

方法
----

.. table::
   :widths: auto

   +-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                             | :ref:`append<class_PackedByteArray_method_append>` **(** :ref:`int<class_int>` value **)**                                                                                                 |
   +-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                                | :ref:`append_array<class_PackedByteArray_method_append_array>` **(** :ref:`PackedByteArray<class_PackedByteArray>` array **)**                                                             |
   +-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`int<class_int>`                               | :ref:`bsearch<class_PackedByteArray_method_bsearch>` **(** :ref:`int<class_int>` value, :ref:`bool<class_bool>` before=true **)**                                                          |
   +-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                                | :ref:`clear<class_PackedByteArray_method_clear>` **(** **)**                                                                                                                               |
   +-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`PackedByteArray<class_PackedByteArray>`       | :ref:`compress<class_PackedByteArray_method_compress>` **(** :ref:`int<class_int>` compression_mode=0 **)** |const|                                                                        |
   +-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`int<class_int>`                               | :ref:`count<class_PackedByteArray_method_count>` **(** :ref:`int<class_int>` value **)** |const|                                                                                           |
   +-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`float<class_float>`                           | :ref:`decode_double<class_PackedByteArray_method_decode_double>` **(** :ref:`int<class_int>` byte_offset **)** |const|                                                                     |
   +-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`float<class_float>`                           | :ref:`decode_float<class_PackedByteArray_method_decode_float>` **(** :ref:`int<class_int>` byte_offset **)** |const|                                                                       |
   +-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`float<class_float>`                           | :ref:`decode_half<class_PackedByteArray_method_decode_half>` **(** :ref:`int<class_int>` byte_offset **)** |const|                                                                         |
   +-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`int<class_int>`                               | :ref:`decode_s8<class_PackedByteArray_method_decode_s8>` **(** :ref:`int<class_int>` byte_offset **)** |const|                                                                             |
   +-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`int<class_int>`                               | :ref:`decode_s16<class_PackedByteArray_method_decode_s16>` **(** :ref:`int<class_int>` byte_offset **)** |const|                                                                           |
   +-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`int<class_int>`                               | :ref:`decode_s32<class_PackedByteArray_method_decode_s32>` **(** :ref:`int<class_int>` byte_offset **)** |const|                                                                           |
   +-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`int<class_int>`                               | :ref:`decode_s64<class_PackedByteArray_method_decode_s64>` **(** :ref:`int<class_int>` byte_offset **)** |const|                                                                           |
   +-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`int<class_int>`                               | :ref:`decode_u8<class_PackedByteArray_method_decode_u8>` **(** :ref:`int<class_int>` byte_offset **)** |const|                                                                             |
   +-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`int<class_int>`                               | :ref:`decode_u16<class_PackedByteArray_method_decode_u16>` **(** :ref:`int<class_int>` byte_offset **)** |const|                                                                           |
   +-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`int<class_int>`                               | :ref:`decode_u32<class_PackedByteArray_method_decode_u32>` **(** :ref:`int<class_int>` byte_offset **)** |const|                                                                           |
   +-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`int<class_int>`                               | :ref:`decode_u64<class_PackedByteArray_method_decode_u64>` **(** :ref:`int<class_int>` byte_offset **)** |const|                                                                           |
   +-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Variant<class_Variant>`                       | :ref:`decode_var<class_PackedByteArray_method_decode_var>` **(** :ref:`int<class_int>` byte_offset, :ref:`bool<class_bool>` allow_objects=false **)** |const|                              |
   +-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`int<class_int>`                               | :ref:`decode_var_size<class_PackedByteArray_method_decode_var_size>` **(** :ref:`int<class_int>` byte_offset, :ref:`bool<class_bool>` allow_objects=false **)** |const|                    |
   +-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`PackedByteArray<class_PackedByteArray>`       | :ref:`decompress<class_PackedByteArray_method_decompress>` **(** :ref:`int<class_int>` buffer_size, :ref:`int<class_int>` compression_mode=0 **)** |const|                                 |
   +-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`PackedByteArray<class_PackedByteArray>`       | :ref:`decompress_dynamic<class_PackedByteArray_method_decompress_dynamic>` **(** :ref:`int<class_int>` max_output_size, :ref:`int<class_int>` compression_mode=0 **)** |const|             |
   +-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`PackedByteArray<class_PackedByteArray>`       | :ref:`duplicate<class_PackedByteArray_method_duplicate>` **(** **)**                                                                                                                       |
   +-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                                | :ref:`encode_double<class_PackedByteArray_method_encode_double>` **(** :ref:`int<class_int>` byte_offset, :ref:`float<class_float>` value **)**                                            |
   +-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                                | :ref:`encode_float<class_PackedByteArray_method_encode_float>` **(** :ref:`int<class_int>` byte_offset, :ref:`float<class_float>` value **)**                                              |
   +-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                                | :ref:`encode_half<class_PackedByteArray_method_encode_half>` **(** :ref:`int<class_int>` byte_offset, :ref:`float<class_float>` value **)**                                                |
   +-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                                | :ref:`encode_s8<class_PackedByteArray_method_encode_s8>` **(** :ref:`int<class_int>` byte_offset, :ref:`int<class_int>` value **)**                                                        |
   +-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                                | :ref:`encode_s16<class_PackedByteArray_method_encode_s16>` **(** :ref:`int<class_int>` byte_offset, :ref:`int<class_int>` value **)**                                                      |
   +-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                                | :ref:`encode_s32<class_PackedByteArray_method_encode_s32>` **(** :ref:`int<class_int>` byte_offset, :ref:`int<class_int>` value **)**                                                      |
   +-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                                | :ref:`encode_s64<class_PackedByteArray_method_encode_s64>` **(** :ref:`int<class_int>` byte_offset, :ref:`int<class_int>` value **)**                                                      |
   +-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                                | :ref:`encode_u8<class_PackedByteArray_method_encode_u8>` **(** :ref:`int<class_int>` byte_offset, :ref:`int<class_int>` value **)**                                                        |
   +-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                                | :ref:`encode_u16<class_PackedByteArray_method_encode_u16>` **(** :ref:`int<class_int>` byte_offset, :ref:`int<class_int>` value **)**                                                      |
   +-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                                | :ref:`encode_u32<class_PackedByteArray_method_encode_u32>` **(** :ref:`int<class_int>` byte_offset, :ref:`int<class_int>` value **)**                                                      |
   +-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                                | :ref:`encode_u64<class_PackedByteArray_method_encode_u64>` **(** :ref:`int<class_int>` byte_offset, :ref:`int<class_int>` value **)**                                                      |
   +-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`int<class_int>`                               | :ref:`encode_var<class_PackedByteArray_method_encode_var>` **(** :ref:`int<class_int>` byte_offset, :ref:`Variant<class_Variant>` value, :ref:`bool<class_bool>` allow_objects=false **)** |
   +-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                                | :ref:`fill<class_PackedByteArray_method_fill>` **(** :ref:`int<class_int>` value **)**                                                                                                     |
   +-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`int<class_int>`                               | :ref:`find<class_PackedByteArray_method_find>` **(** :ref:`int<class_int>` value, :ref:`int<class_int>` from=0 **)** |const|                                                               |
   +-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`String<class_String>`                         | :ref:`get_string_from_ascii<class_PackedByteArray_method_get_string_from_ascii>` **(** **)** |const|                                                                                       |
   +-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`String<class_String>`                         | :ref:`get_string_from_utf8<class_PackedByteArray_method_get_string_from_utf8>` **(** **)** |const|                                                                                         |
   +-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`String<class_String>`                         | :ref:`get_string_from_utf16<class_PackedByteArray_method_get_string_from_utf16>` **(** **)** |const|                                                                                       |
   +-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`String<class_String>`                         | :ref:`get_string_from_utf32<class_PackedByteArray_method_get_string_from_utf32>` **(** **)** |const|                                                                                       |
   +-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`String<class_String>`                         | :ref:`get_string_from_wchar<class_PackedByteArray_method_get_string_from_wchar>` **(** **)** |const|                                                                                       |
   +-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                             | :ref:`has<class_PackedByteArray_method_has>` **(** :ref:`int<class_int>` value **)** |const|                                                                                               |
   +-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                             | :ref:`has_encoded_var<class_PackedByteArray_method_has_encoded_var>` **(** :ref:`int<class_int>` byte_offset, :ref:`bool<class_bool>` allow_objects=false **)** |const|                    |
   +-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`String<class_String>`                         | :ref:`hex_encode<class_PackedByteArray_method_hex_encode>` **(** **)** |const|                                                                                                             |
   +-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`int<class_int>`                               | :ref:`insert<class_PackedByteArray_method_insert>` **(** :ref:`int<class_int>` at_index, :ref:`int<class_int>` value **)**                                                                 |
   +-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                             | :ref:`is_empty<class_PackedByteArray_method_is_empty>` **(** **)** |const|                                                                                                                 |
   +-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                             | :ref:`push_back<class_PackedByteArray_method_push_back>` **(** :ref:`int<class_int>` value **)**                                                                                           |
   +-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                                | :ref:`remove_at<class_PackedByteArray_method_remove_at>` **(** :ref:`int<class_int>` index **)**                                                                                           |
   +-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`int<class_int>`                               | :ref:`resize<class_PackedByteArray_method_resize>` **(** :ref:`int<class_int>` new_size **)**                                                                                              |
   +-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                                | :ref:`reverse<class_PackedByteArray_method_reverse>` **(** **)**                                                                                                                           |
   +-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`int<class_int>`                               | :ref:`rfind<class_PackedByteArray_method_rfind>` **(** :ref:`int<class_int>` value, :ref:`int<class_int>` from=-1 **)** |const|                                                            |
   +-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                                | :ref:`set<class_PackedByteArray_method_set>` **(** :ref:`int<class_int>` index, :ref:`int<class_int>` value **)**                                                                          |
   +-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`int<class_int>`                               | :ref:`size<class_PackedByteArray_method_size>` **(** **)** |const|                                                                                                                         |
   +-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`PackedByteArray<class_PackedByteArray>`       | :ref:`slice<class_PackedByteArray_method_slice>` **(** :ref:`int<class_int>` begin, :ref:`int<class_int>` end=2147483647 **)** |const|                                                     |
   +-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                                | :ref:`sort<class_PackedByteArray_method_sort>` **(** **)**                                                                                                                                 |
   +-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`PackedFloat32Array<class_PackedFloat32Array>` | :ref:`to_float32_array<class_PackedByteArray_method_to_float32_array>` **(** **)** |const|                                                                                                 |
   +-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`PackedFloat64Array<class_PackedFloat64Array>` | :ref:`to_float64_array<class_PackedByteArray_method_to_float64_array>` **(** **)** |const|                                                                                                 |
   +-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`PackedInt32Array<class_PackedInt32Array>`     | :ref:`to_int32_array<class_PackedByteArray_method_to_int32_array>` **(** **)** |const|                                                                                                     |
   +-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`PackedInt64Array<class_PackedInt64Array>`     | :ref:`to_int64_array<class_PackedByteArray_method_to_int64_array>` **(** **)** |const|                                                                                                     |
   +-----------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

.. rst-class:: classref-reftable-group

操作符
------

.. table::
   :widths: auto

   +-----------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                       | :ref:`operator !=<class_PackedByteArray_operator_neq_PackedByteArray>` **(** :ref:`PackedByteArray<class_PackedByteArray>` right **)** |
   +-----------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`PackedByteArray<class_PackedByteArray>` | :ref:`operator +<class_PackedByteArray_operator_sum_PackedByteArray>` **(** :ref:`PackedByteArray<class_PackedByteArray>` right **)**  |
   +-----------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`bool<class_bool>`                       | :ref:`operator ==<class_PackedByteArray_operator_eq_PackedByteArray>` **(** :ref:`PackedByteArray<class_PackedByteArray>` right **)**  |
   +-----------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`int<class_int>`                         | :ref:`operator []<class_PackedByteArray_operator_idx_int>` **(** :ref:`int<class_int>` index **)**                                     |
   +-----------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------+

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

构造函数说明
------------

.. _class_PackedByteArray_constructor_PackedByteArray:

.. rst-class:: classref-constructor

:ref:`PackedByteArray<class_PackedByteArray>` **PackedByteArray** **(** **)**

构造空的 **PackedByteArray**\ 。

.. rst-class:: classref-item-separator

----

.. rst-class:: classref-constructor

:ref:`PackedByteArray<class_PackedByteArray>` **PackedByteArray** **(** :ref:`PackedByteArray<class_PackedByteArray>` from **)**

构造给定 **PackedByteArray** 的副本。

.. rst-class:: classref-item-separator

----

.. rst-class:: classref-constructor

:ref:`PackedByteArray<class_PackedByteArray>` **PackedByteArray** **(** :ref:`Array<class_Array>` from **)**

构造新 **PackedByteArray**\ 。你还可以传入通用 :ref:`Array<class_Array>` 进行转换。

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

方法说明
--------

.. _class_PackedByteArray_method_append:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **append** **(** :ref:`int<class_int>` value **)**

向数组末尾追加一个元素（\ :ref:`push_back<class_PackedByteArray_method_push_back>` 的别名）。

.. rst-class:: classref-item-separator

----

.. _class_PackedByteArray_method_append_array:

.. rst-class:: classref-method

void **append_array** **(** :ref:`PackedByteArray<class_PackedByteArray>` array **)**

在该数组的末尾追加一个 **PackedByteArray**\ 。

.. rst-class:: classref-item-separator

----

.. _class_PackedByteArray_method_bsearch:

.. rst-class:: classref-method

:ref:`int<class_int>` **bsearch** **(** :ref:`int<class_int>` value, :ref:`bool<class_bool>` before=true **)**

使用二进法查找已有值的索引（如果该值尚未存在于数组中，则为保持排序顺序的插入索引）。传递 ``before`` 说明符是可选的。如果该参数为 ``false``\ ，则返回的索引位于数组中该值的所有已有的条目之后。

\ **注意：**\ 在未排序的数组上调用 :ref:`bsearch<class_PackedByteArray_method_bsearch>` 会产生预料之外的行为。

.. rst-class:: classref-item-separator

----

.. _class_PackedByteArray_method_clear:

.. rst-class:: classref-method

void **clear** **(** **)**

清空数组。相当于调用 :ref:`resize<class_PackedByteArray_method_resize>` 时指定大小为 ``0``\ 。

.. rst-class:: classref-item-separator

----

.. _class_PackedByteArray_method_compress:

.. rst-class:: classref-method

:ref:`PackedByteArray<class_PackedByteArray>` **compress** **(** :ref:`int<class_int>` compression_mode=0 **)** |const|

返回新的 **PackedByteArray**\ ，其中的数据已压缩。请将压缩模式设置为 :ref:`CompressionMode<enum_FileAccess_CompressionMode>` 常量。

.. rst-class:: classref-item-separator

----

.. _class_PackedByteArray_method_count:

.. rst-class:: classref-method

:ref:`int<class_int>` **count** **(** :ref:`int<class_int>` value **)** |const|

返回元素在数组中出现的次数。

.. rst-class:: classref-item-separator

----

.. _class_PackedByteArray_method_decode_double:

.. rst-class:: classref-method

:ref:`float<class_float>` **decode_double** **(** :ref:`int<class_int>` byte_offset **)** |const|

将字节序列解码为 64 位浮点数，起始位置字节偏移量为 ``byte_offset``\ 。字节数不足时会失败。如果无法解码有效的数字，则返回 ``0.0``\ 。

.. rst-class:: classref-item-separator

----

.. _class_PackedByteArray_method_decode_float:

.. rst-class:: classref-method

:ref:`float<class_float>` **decode_float** **(** :ref:`int<class_int>` byte_offset **)** |const|

将字节序列解码为 32 位浮点数，起始位置字节偏移量为 ``byte_offset``\ 。字节数不足时会失败。如果无法解码有效的数字，则返回 ``0.0``\ 。

.. rst-class:: classref-item-separator

----

.. _class_PackedByteArray_method_decode_half:

.. rst-class:: classref-method

:ref:`float<class_float>` **decode_half** **(** :ref:`int<class_int>` byte_offset **)** |const|

将字节序列解码为 16 位浮点数，起始位置字节偏移量为 ``byte_offset``\ 。字节数不足时会失败。如果无法解码有效的数字，则返回 ``0.0``\ 。

.. rst-class:: classref-item-separator

----

.. _class_PackedByteArray_method_decode_s8:

.. rst-class:: classref-method

:ref:`int<class_int>` **decode_s8** **(** :ref:`int<class_int>` byte_offset **)** |const|

将字节序列解码为 8 位有符号整数，起始位置字节偏移量为 ``byte_offset``\ 。字节数不足时会失败。如果无法解码有效的数字，则返回 ``0.0``\ 。

.. rst-class:: classref-item-separator

----

.. _class_PackedByteArray_method_decode_s16:

.. rst-class:: classref-method

:ref:`int<class_int>` **decode_s16** **(** :ref:`int<class_int>` byte_offset **)** |const|

将字节序列解码为 16 位有符号整数，起始位置字节偏移量为 ``byte_offset``\ 。字节数不足时会失败。如果无法解码有效的数字，则返回 ``0.0``\ 。

.. rst-class:: classref-item-separator

----

.. _class_PackedByteArray_method_decode_s32:

.. rst-class:: classref-method

:ref:`int<class_int>` **decode_s32** **(** :ref:`int<class_int>` byte_offset **)** |const|

将字节序列解码为 32 位有符号整数，起始位置字节偏移量为 ``byte_offset``\ 。字节数不足时会失败。如果无法解码有效的数字，则返回 ``0.0``\ 。

.. rst-class:: classref-item-separator

----

.. _class_PackedByteArray_method_decode_s64:

.. rst-class:: classref-method

:ref:`int<class_int>` **decode_s64** **(** :ref:`int<class_int>` byte_offset **)** |const|

将字节序列解码为 64 位有符号整数，起始位置字节偏移量为 ``byte_offset``\ 。字节数不足时会失败。如果无法解码有效的数字，则返回 ``0.0``\ 。

.. rst-class:: classref-item-separator

----

.. _class_PackedByteArray_method_decode_u8:

.. rst-class:: classref-method

:ref:`int<class_int>` **decode_u8** **(** :ref:`int<class_int>` byte_offset **)** |const|

将字节序列解码为 8 位无符号整数，起始位置字节偏移量为 ``byte_offset``\ 。字节数不足时会失败。如果无法解码有效的数字，则返回 ``0.0``\ 。

.. rst-class:: classref-item-separator

----

.. _class_PackedByteArray_method_decode_u16:

.. rst-class:: classref-method

:ref:`int<class_int>` **decode_u16** **(** :ref:`int<class_int>` byte_offset **)** |const|

将字节序列解码为 16 位无符号整数，起始位置字节偏移量为 ``byte_offset``\ 。字节数不足时会失败。如果无法解码有效的数字，则返回 ``0.0``\ 。

.. rst-class:: classref-item-separator

----

.. _class_PackedByteArray_method_decode_u32:

.. rst-class:: classref-method

:ref:`int<class_int>` **decode_u32** **(** :ref:`int<class_int>` byte_offset **)** |const|

将字节序列解码为 32 位无符号整数，起始位置字节偏移量为 ``byte_offset``\ 。字节数不足时会失败。如果无法解码有效的数字，则返回 ``0.0``\ 。

.. rst-class:: classref-item-separator

----

.. _class_PackedByteArray_method_decode_u64:

.. rst-class:: classref-method

:ref:`int<class_int>` **decode_u64** **(** :ref:`int<class_int>` byte_offset **)** |const|

将字节序列解码为 64 位无符号整数，起始位置字节偏移量为 ``byte_offset``\ 。字节数不足时会失败。如果无法解码有效的数字，则返回 ``0.0``\ 。

.. rst-class:: classref-item-separator

----

.. _class_PackedByteArray_method_decode_var:

.. rst-class:: classref-method

:ref:`Variant<class_Variant>` **decode_var** **(** :ref:`int<class_int>` byte_offset, :ref:`bool<class_bool>` allow_objects=false **)** |const|

将字节序列解码为 :ref:`Variant<class_Variant>`\ ，起始位置字节偏移量为 ``byte_offset``\ 。如果无法解码有效的变体，或者其值派生自 :ref:`Object<class_Object>` 而 ``allow_objects`` 为 ``false``\ ，则返回 ``null``\ 。

.. rst-class:: classref-item-separator

----

.. _class_PackedByteArray_method_decode_var_size:

.. rst-class:: classref-method

:ref:`int<class_int>` **decode_var_size** **(** :ref:`int<class_int>` byte_offset, :ref:`bool<class_bool>` allow_objects=false **)** |const|

将字节序列解码为 :ref:`Variant<class_Variant>` 的大小，起始位置字节偏移量为 ``byte_offset``\ 。要求起始位置后至少有 4 个字节的数据，否则返回 ``null``\ 。

.. rst-class:: classref-item-separator

----

.. _class_PackedByteArray_method_decompress:

.. rst-class:: classref-method

:ref:`PackedByteArray<class_PackedByteArray>` **decompress** **(** :ref:`int<class_int>` buffer_size, :ref:`int<class_int>` compression_mode=0 **)** |const|

返回新的 **PackedByteArray**\ ，其中的数据已解压。请将 ``buffer_size`` 设置为数据解压后的大小。请将压缩模式设置为 :ref:`CompressionMode<enum_FileAccess_CompressionMode>` 常量。

\ **注意：**\ 不保证解压缩可以处理未经 Godot 压缩的数据，例如，如果使用 deflate 压缩模式压缩的数据缺少校验和或标头。

.. rst-class:: classref-item-separator

----

.. _class_PackedByteArray_method_decompress_dynamic:

.. rst-class:: classref-method

:ref:`PackedByteArray<class_PackedByteArray>` **decompress_dynamic** **(** :ref:`int<class_int>` max_output_size, :ref:`int<class_int>` compression_mode=0 **)** |const|

返回新的 **PackedByteArray**\ ，其中的数据已解压。请将压缩模式设置为 :ref:`CompressionMode<enum_FileAccess_CompressionMode>` 常量。\ **这个方法只接受 brotli、gzip 和 deflate 压缩模式。**\ 

这个方法可能比 :ref:`decompress<class_PackedByteArray_method_decompress>` 慢，因为在解压时可能需要多次重新分配输出缓冲区，而 :ref:`decompress<class_PackedByteArray_method_decompress>` 则在一开始就知道输出缓冲区的大小。

GZIP 的最大压缩率为 1032:1，这意味着较小的压缩后负载很有可能解压出非常巨大的输出。为了防止这种情况，你可以通过 ``max_output_size`` 提供允许这个函数分配的最大字节数。传入 -1 则不限制输出。传入正数且解压超过该字节数时，会返回错误。

\ **注意：**\ 不保证解压缩可以处理未经 Godot 压缩的数据，例如，如果使用 deflate 压缩模式压缩的数据缺少校验和或标头。

.. rst-class:: classref-item-separator

----

.. _class_PackedByteArray_method_duplicate:

.. rst-class:: classref-method

:ref:`PackedByteArray<class_PackedByteArray>` **duplicate** **(** **)**

创建该数组的副本，并将该副本返回。

.. rst-class:: classref-item-separator

----

.. _class_PackedByteArray_method_encode_double:

.. rst-class:: classref-method

void **encode_double** **(** :ref:`int<class_int>` byte_offset, :ref:`float<class_float>` value **)**

将 64 位浮点数编码为字节序列，起始位置字节偏移量为 ``byte_offset``\ 。从偏移量位置开始，该数组必须还分配有至少 8 个字节的空间。

.. rst-class:: classref-item-separator

----

.. _class_PackedByteArray_method_encode_float:

.. rst-class:: classref-method

void **encode_float** **(** :ref:`int<class_int>` byte_offset, :ref:`float<class_float>` value **)**

将 32 位浮点数编码为字节序列，起始位置字节偏移量为 ``byte_offset``\ 。从偏移量位置开始，该数组必须还分配有至少 4 个字节的空间。

.. rst-class:: classref-item-separator

----

.. _class_PackedByteArray_method_encode_half:

.. rst-class:: classref-method

void **encode_half** **(** :ref:`int<class_int>` byte_offset, :ref:`float<class_float>` value **)**

将 16 位浮点数编码为字节序列，起始位置字节偏移量为 ``byte_offset``\ 。从偏移量位置开始，该数组必须还分配有至少 2 个字节的空间。

.. rst-class:: classref-item-separator

----

.. _class_PackedByteArray_method_encode_s8:

.. rst-class:: classref-method

void **encode_s8** **(** :ref:`int<class_int>` byte_offset, :ref:`int<class_int>` value **)**

将 8 位有符号整数编码为字节序列，起始位置字节偏移量为 ``byte_offset``\ 。从偏移量位置开始，该数组必须还分配有至少 1 个字节的空间。

.. rst-class:: classref-item-separator

----

.. _class_PackedByteArray_method_encode_s16:

.. rst-class:: classref-method

void **encode_s16** **(** :ref:`int<class_int>` byte_offset, :ref:`int<class_int>` value **)**

将 16 位有符号整数编码为字节序列，起始位置字节偏移量为 ``byte_offset``\ 。从偏移量位置开始，该数组必须还分配有至少 2 个字节的空间。

.. rst-class:: classref-item-separator

----

.. _class_PackedByteArray_method_encode_s32:

.. rst-class:: classref-method

void **encode_s32** **(** :ref:`int<class_int>` byte_offset, :ref:`int<class_int>` value **)**

将 32 位无符号整数编码为字节序列，起始位置字节偏移量为 ``byte_offset``\ 。从偏移量位置开始，该数组必须还分配有至少 4 个字节的空间。

.. rst-class:: classref-item-separator

----

.. _class_PackedByteArray_method_encode_s64:

.. rst-class:: classref-method

void **encode_s64** **(** :ref:`int<class_int>` byte_offset, :ref:`int<class_int>` value **)**

将 64 位有符号整数编码为字节序列，起始位置字节偏移量为 ``byte_offset``\ 。从偏移量位置开始，该数组必须还分配有至少 8 个字节的空间。

.. rst-class:: classref-item-separator

----

.. _class_PackedByteArray_method_encode_u8:

.. rst-class:: classref-method

void **encode_u8** **(** :ref:`int<class_int>` byte_offset, :ref:`int<class_int>` value **)**

将 8 位无符号整数编码为字节序列，起始位置字节偏移量为 ``byte_offset``\ 。从偏移量位置开始，该数组必须还分配有至少 1 个字节的空间。

.. rst-class:: classref-item-separator

----

.. _class_PackedByteArray_method_encode_u16:

.. rst-class:: classref-method

void **encode_u16** **(** :ref:`int<class_int>` byte_offset, :ref:`int<class_int>` value **)**

将 16 位无符号整数编码为字节序列，起始位置字节偏移量为 ``byte_offset``\ 。从偏移量位置开始，该数组必须还分配有至少 2 个字节的空间。

.. rst-class:: classref-item-separator

----

.. _class_PackedByteArray_method_encode_u32:

.. rst-class:: classref-method

void **encode_u32** **(** :ref:`int<class_int>` byte_offset, :ref:`int<class_int>` value **)**

将 32 位无符号整数编码为字节序列，起始位置字节偏移量为 ``byte_offset``\ 。从偏移量位置开始，该数组必须还分配有至少 4 个字节的空间。

.. rst-class:: classref-item-separator

----

.. _class_PackedByteArray_method_encode_u64:

.. rst-class:: classref-method

void **encode_u64** **(** :ref:`int<class_int>` byte_offset, :ref:`int<class_int>` value **)**

将 64 位无符号整数编码为字节序列，起始位置字节偏移量为 ``byte_offset``\ 。从偏移量位置开始，该数组必须还分配有至少 8 个字节的空间。

.. rst-class:: classref-item-separator

----

.. _class_PackedByteArray_method_encode_var:

.. rst-class:: classref-method

:ref:`int<class_int>` **encode_var** **(** :ref:`int<class_int>` byte_offset, :ref:`Variant<class_Variant>` value, :ref:`bool<class_bool>` allow_objects=false **)**

将 :ref:`Variant<class_Variant>` 编码为字节序列，起始位置字节偏移量为 ``byte_offset``\ 。必须分配有足够的空间，空间大小取决于编码后变体的大小。如果 ``allow_objects`` 为 ``false``\ ，则不允许派生自 :ref:`Object<class_Object>` 的值，只会将其 ID 进行序列化。

.. rst-class:: classref-item-separator

----

.. _class_PackedByteArray_method_fill:

.. rst-class:: classref-method

void **fill** **(** :ref:`int<class_int>` value **)**

将数组中的所有元素都设为给定的值。通常与 :ref:`resize<class_PackedByteArray_method_resize>` 一起使用，创建给定大小的数组并初始化元素。

.. rst-class:: classref-item-separator

----

.. _class_PackedByteArray_method_find:

.. rst-class:: classref-method

:ref:`int<class_int>` **find** **(** :ref:`int<class_int>` value, :ref:`int<class_int>` from=0 **)** |const|

在数组中搜索值并返回其索引，如果未找到则返回 ``-1`` 。可选地，可以传递起始搜索索引。

.. rst-class:: classref-item-separator

----

.. _class_PackedByteArray_method_get_string_from_ascii:

.. rst-class:: classref-method

:ref:`String<class_String>` **get_string_from_ascii** **(** **)** |const|

将 ASCII/Latin-1 编码的数组转换为 :ref:`String<class_String>`\ 。如果内容仅为 ASCII/Latin-1，则是比 :ref:`get_string_from_utf8<class_PackedByteArray_method_get_string_from_utf8>` 更快的选择。与 UTF-8 函数不同，这个函数会将数组中的每个字节都映射到一个字符。多字节序列无法正确解析。要解析用户的输入内容，请始终使用 :ref:`get_string_from_utf8<class_PackedByteArray_method_get_string_from_utf8>`\ 。这是 :ref:`String.to_ascii_buffer<class_String_method_to_ascii_buffer>` 的逆运算。

.. rst-class:: classref-item-separator

----

.. _class_PackedByteArray_method_get_string_from_utf8:

.. rst-class:: classref-method

:ref:`String<class_String>` **get_string_from_utf8** **(** **)** |const|

将 UTF-8 编码的数组转换为 :ref:`String<class_String>`\ 。比 :ref:`get_string_from_ascii<class_PackedByteArray_method_get_string_from_ascii>` 慢，但支持 UTF-8 编码的数据。不确定数据来源时请使用此函数。对于用户的输入内容，应始终首选此函数。如果源数组不是有效的 UTF-8 字符串，则返回空字符串。这是 :ref:`String.to_utf8_buffer<class_String_method_to_utf8_buffer>` 的逆运算。

.. rst-class:: classref-item-separator

----

.. _class_PackedByteArray_method_get_string_from_utf16:

.. rst-class:: classref-method

:ref:`String<class_String>` **get_string_from_utf16** **(** **)** |const|

将 UTF-16 编码的数组转换为 :ref:`String<class_String>`\ 。如果缺少 BOM，则假定为系统字节序。如果源数组不是有效的 UTF-16 字符串，则返回空字符串。这是 :ref:`String.to_utf16_buffer<class_String_method_to_utf16_buffer>` 的逆运算。

.. rst-class:: classref-item-separator

----

.. _class_PackedByteArray_method_get_string_from_utf32:

.. rst-class:: classref-method

:ref:`String<class_String>` **get_string_from_utf32** **(** **)** |const|

将 UTF-32 编码的数组转换为 :ref:`String<class_String>`\ 。假定为系统字节序。如果源数组不是有效的 UTF-32 字符串，则返回空字符串。这是 :ref:`String.to_utf32_buffer<class_String_method_to_utf32_buffer>` 的逆运算。

.. rst-class:: classref-item-separator

----

.. _class_PackedByteArray_method_get_string_from_wchar:

.. rst-class:: classref-method

:ref:`String<class_String>` **get_string_from_wchar** **(** **)** |const|

将宽字符（\ ``wchar_t``\ ，在 Windows 上为 UTF-16，在其他平台上为 UTF-32）编码的数组转换为 :ref:`String<class_String>`\ 。如果源数组不是有效的宽字符串，则返回空字符串。这是 :ref:`String.to_wchar_buffer<class_String_method_to_wchar_buffer>` 的逆运算。

.. rst-class:: classref-item-separator

----

.. _class_PackedByteArray_method_has:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **has** **(** :ref:`int<class_int>` value **)** |const|

如果该数组包含 ``value``\ ，则返回 ``true``\ 。

.. rst-class:: classref-item-separator

----

.. _class_PackedByteArray_method_has_encoded_var:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **has_encoded_var** **(** :ref:`int<class_int>` byte_offset, :ref:`bool<class_bool>` allow_objects=false **)** |const|

如果可以从字节偏移量 ``byte_offset`` 处解码出有效的 :ref:`Variant<class_Variant>`\ ，则返回 ``true``\ 。其他情况，或者当该值派生自 :ref:`Object<class_Object>` 而 ``allow_objects`` 为 ``false`` 时，则返回 ``false``\ 。

.. rst-class:: classref-item-separator

----

.. _class_PackedByteArray_method_hex_encode:

.. rst-class:: classref-method

:ref:`String<class_String>` **hex_encode** **(** **)** |const|

返回该数组的十六进制表示，类型为 :ref:`String<class_String>`\ 。


.. tabs::

 .. code-tab:: gdscript

    var array = PackedByteArray([11, 46, 255])
    print(array.hex_encode()) # 输出：0b2eff

 .. code-tab:: csharp

    var array = new byte[] {11, 46, 255};
    GD.Print(array.HexEncode()); // 输出：0b2eff



.. rst-class:: classref-item-separator

----

.. _class_PackedByteArray_method_insert:

.. rst-class:: classref-method

:ref:`int<class_int>` **insert** **(** :ref:`int<class_int>` at_index, :ref:`int<class_int>` value **)**

在数组中给定的位置插入一个新元素。这个位置必须是有效的，或者是在数组的末端（\ ``idx == size()``\ ）。

.. rst-class:: classref-item-separator

----

.. _class_PackedByteArray_method_is_empty:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **is_empty** **(** **)** |const|

该数组为空时，返回 ``true``\ 。

.. rst-class:: classref-item-separator

----

.. _class_PackedByteArray_method_push_back:

.. rst-class:: classref-method

:ref:`bool<class_bool>` **push_back** **(** :ref:`int<class_int>` value **)**

在数组的末尾追加一个元素。

.. rst-class:: classref-item-separator

----

.. _class_PackedByteArray_method_remove_at:

.. rst-class:: classref-method

void **remove_at** **(** :ref:`int<class_int>` index **)**

从数组中删除位于索引的元素。

.. rst-class:: classref-item-separator

----

.. _class_PackedByteArray_method_resize:

.. rst-class:: classref-method

:ref:`int<class_int>` **resize** **(** :ref:`int<class_int>` new_size **)**

设置数组的大小。如果数组被增大，则保留数组末端的元素。如果数组被缩小，则将数组截断到新的大小。调用一次 :ref:`resize<class_PackedByteArray_method_resize>` 并分配新值比逐个添加新元素要快。

.. rst-class:: classref-item-separator

----

.. _class_PackedByteArray_method_reverse:

.. rst-class:: classref-method

void **reverse** **(** **)**

将数组中的元素逆序排列。

.. rst-class:: classref-item-separator

----

.. _class_PackedByteArray_method_rfind:

.. rst-class:: classref-method

:ref:`int<class_int>` **rfind** **(** :ref:`int<class_int>` value, :ref:`int<class_int>` from=-1 **)** |const|

逆序搜索数组。还可以传递起始搜索位置索引。如果为负，则起始索引被视为相对于数组的结尾。

.. rst-class:: classref-item-separator

----

.. _class_PackedByteArray_method_set:

.. rst-class:: classref-method

void **set** **(** :ref:`int<class_int>` index, :ref:`int<class_int>` value **)**

改变给定索引处的字节。

.. rst-class:: classref-item-separator

----

.. _class_PackedByteArray_method_size:

.. rst-class:: classref-method

:ref:`int<class_int>` **size** **(** **)** |const|

返回数组中元素的个数。

.. rst-class:: classref-item-separator

----

.. _class_PackedByteArray_method_slice:

.. rst-class:: classref-method

:ref:`PackedByteArray<class_PackedByteArray>` **slice** **(** :ref:`int<class_int>` begin, :ref:`int<class_int>` end=2147483647 **)** |const|

返回该 **PackedByteArray** 的切片，是从 ``begin``\ （含）到 ``end``\ （不含）的全新 **PackedByteArray**\ 。

\ ``begin`` 和 ``end`` 的绝对值会按数组大小进行限制，所以 ``end`` 的默认值会切到数组大小为止（即 ``arr.slice(1)`` 是 ``arr.slice(1, arr.size())`` 的简写）。

如果 ``begin`` 或 ``end`` 为负，则表示相对于数组的末尾（即 ``arr.slice(0, -2)`` 是 ``arr.slice(0, arr.size() - 2)`` 的简写）。

.. rst-class:: classref-item-separator

----

.. _class_PackedByteArray_method_sort:

.. rst-class:: classref-method

void **sort** **(** **)**

将该数组中的元素按升序排列。

.. rst-class:: classref-item-separator

----

.. _class_PackedByteArray_method_to_float32_array:

.. rst-class:: classref-method

:ref:`PackedFloat32Array<class_PackedFloat32Array>` **to_float32_array** **(** **)** |const|

返回将数据转换为 :ref:`PackedFloat32Array<class_PackedFloat32Array>` 的副本，每 4 个字节块转换为一个 32 位浮点数（C++ 的 ``float``\ ）。

输入数组的大小必须为 4 的倍数（32 位浮点数的大小）。新数组的大小为 ``byte_array.size() / 4``\ 。

如果原始数据无法转换为 32 位浮点数，则最终的数据未定义。

.. rst-class:: classref-item-separator

----

.. _class_PackedByteArray_method_to_float64_array:

.. rst-class:: classref-method

:ref:`PackedFloat64Array<class_PackedFloat64Array>` **to_float64_array** **(** **)** |const|

返回将数据转换为 :ref:`PackedFloat64Array<class_PackedFloat64Array>` 的副本，每 8 个字节块转换为一个 64 位浮点数（C++ 的 ``double``\ ）。

输入数组的大小必须为 8 的倍数（64 位浮点数的大小）。新数组的大小为 ``byte_array.size() / 8``\ 。

如果原始数据无法转换为 64 位浮点数，则最终的数据未定义。

.. rst-class:: classref-item-separator

----

.. _class_PackedByteArray_method_to_int32_array:

.. rst-class:: classref-method

:ref:`PackedInt32Array<class_PackedInt32Array>` **to_int32_array** **(** **)** |const|

返回将数据转换为 :ref:`PackedInt32Array<class_PackedInt32Array>` 的副本，每 4 个字节块转换为一个 32 位有符号整数（C++ 的 ``int32_t``\ ）。

输入数组的大小必须为 4 的倍数（32 位整数的大小）。新数组的大小为 ``byte_array.size() / 4``\ 。

如果原始数据无法转换为 32 位有符号整数，则最终的数据未定义。

.. rst-class:: classref-item-separator

----

.. _class_PackedByteArray_method_to_int64_array:

.. rst-class:: classref-method

:ref:`PackedInt64Array<class_PackedInt64Array>` **to_int64_array** **(** **)** |const|

返回将数据转换为 :ref:`PackedInt64Array<class_PackedInt64Array>` 的副本，每 8 个字节块转换为一个 64 位有符号整数（C++ 的 ``int64_t``\ ）。

输入数组的大小必须为 8 的倍数（64 位整数的大小）。新数组的大小为 ``byte_array.size() / 8``\ 。

如果原始数据无法转换为 64 位有符号整数，则最终的数据未定义。

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

操作符说明
----------

.. _class_PackedByteArray_operator_neq_PackedByteArray:

.. rst-class:: classref-operator

:ref:`bool<class_bool>` **operator !=** **(** :ref:`PackedByteArray<class_PackedByteArray>` right **)**

如果数组内容不同，则返回 ``true``\ 。

.. rst-class:: classref-item-separator

----

.. _class_PackedByteArray_operator_sum_PackedByteArray:

.. rst-class:: classref-operator

:ref:`PackedByteArray<class_PackedByteArray>` **operator +** **(** :ref:`PackedByteArray<class_PackedByteArray>` right **)**

返回新的 **PackedByteArray**\ ，新数组的内容为此数组在末尾加上 ``right``\ 。为了提高性能，请考虑改用 :ref:`append_array<class_PackedByteArray_method_append_array>`\ 。

.. rst-class:: classref-item-separator

----

.. _class_PackedByteArray_operator_eq_PackedByteArray:

.. rst-class:: classref-operator

:ref:`bool<class_bool>` **operator ==** **(** :ref:`PackedByteArray<class_PackedByteArray>` right **)**

如果两个数组的内容相同，即对应索引号的字节相等，则返回 ``true``\ 。

.. rst-class:: classref-item-separator

----

.. _class_PackedByteArray_operator_idx_int:

.. rst-class:: classref-operator

:ref:`int<class_int>` **operator []** **(** :ref:`int<class_int>` index **)**

返回索引 ``index`` 处的字节。负数索引可以从末尾开始访问元素。使用越界的索引会报错。

请注意，返回的字节是 64 位 :ref:`int<class_int>`\ 。

.. |virtual| replace:: :abbr:`virtual (本方法通常需要用户覆盖才能生效。)`
.. |const| replace:: :abbr:`const (本方法没有副作用。不会修改该实例的任何成员变量。)`
.. |vararg| replace:: :abbr:`vararg (本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。)`
.. |constructor| replace:: :abbr:`constructor (本方法用于构造某个类型。)`
.. |static| replace:: :abbr:`static (调用本方法无需实例，所以可以直接使用类名调用。)`
.. |operator| replace:: :abbr:`operator (本方法描述的是使用本类型作为左操作数的有效操作符。)`
.. |bitfield| replace:: :abbr:`BitField (这个值是由下列标志构成的位掩码整数。)`
