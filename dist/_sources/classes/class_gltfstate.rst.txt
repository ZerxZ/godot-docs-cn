:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Godot engine sources.
.. Generator: https://github.com/godotengine/godot/tree/4.2/doc/tools/make_rst.py.
.. XML source: https://github.com/godotengine/godot/tree/4.2/modules/gltf/doc_classes/GLTFState.xml.

.. _class_GLTFState:

GLTFState
=========

**继承：** :ref:`Resource<class_Resource>` **<** :ref:`RefCounted<class_RefCounted>` **<** :ref:`Object<class_Object>`

代表 GLTF 文件中的所有数据。

.. rst-class:: classref-introduction-group

描述
----

包含 GLTF 文件中的所有节点和资源。用于 :ref:`GLTFDocument<class_GLTFDocument>` 的数据存储，能够让 :ref:`GLTFDocument<class_GLTFDocument>` 和所有 :ref:`GLTFDocumentExtension<class_GLTFDocumentExtension>` 类保持无状态。

GLTFState 的填写可以通过 :ref:`GLTFDocument<class_GLTFDocument>` 读取文件进行，也可以通过转换 Godot 场景进行。填写完成后，可以将数据用于 Godot 场景的创建或者 GLTF 文件的保存。与 Godot 场景之间进行转换的代码可以通过 :ref:`GLTFDocumentExtension<class_GLTFDocumentExtension>` 类在任意时刻拦截。这样就能够在 GLTF 文件中存储自定义数据，也可以将自定义数据保存到 Godot 节点或者从 Godot 节点读取。

.. rst-class:: classref-introduction-group

教程
----

- :doc:`运行时文件加载与保存 <../tutorials/io/runtime_file_loading_and_saving>`

- `GLTF 资产头的模式 <https://github.com/KhronosGroup/glTF/blob/main/specification/2.0/schema/asset.schema.json">`__

.. rst-class:: classref-reftable-group

属性
----

.. table::
   :widths: auto

   +-------------------------------------------------+----------------------------------------------------------------------------+------------------------+
   | :ref:`String<class_String>`                     | :ref:`base_path<class_GLTFState_property_base_path>`                       | ``""``                 |
   +-------------------------------------------------+----------------------------------------------------------------------------+------------------------+
   | :ref:`PackedByteArray[]<class_PackedByteArray>` | :ref:`buffers<class_GLTFState_property_buffers>`                           | ``[]``                 |
   +-------------------------------------------------+----------------------------------------------------------------------------+------------------------+
   | :ref:`String<class_String>`                     | :ref:`copyright<class_GLTFState_property_copyright>`                       | ``""``                 |
   +-------------------------------------------------+----------------------------------------------------------------------------+------------------------+
   | :ref:`bool<class_bool>`                         | :ref:`create_animations<class_GLTFState_property_create_animations>`       | ``true``               |
   +-------------------------------------------------+----------------------------------------------------------------------------+------------------------+
   | :ref:`String<class_String>`                     | :ref:`filename<class_GLTFState_property_filename>`                         | ``""``                 |
   +-------------------------------------------------+----------------------------------------------------------------------------+------------------------+
   | :ref:`PackedByteArray<class_PackedByteArray>`   | :ref:`glb_data<class_GLTFState_property_glb_data>`                         | ``PackedByteArray()``  |
   +-------------------------------------------------+----------------------------------------------------------------------------+------------------------+
   | :ref:`Dictionary<class_Dictionary>`             | :ref:`json<class_GLTFState_property_json>`                                 | ``{}``                 |
   +-------------------------------------------------+----------------------------------------------------------------------------+------------------------+
   | :ref:`int<class_int>`                           | :ref:`major_version<class_GLTFState_property_major_version>`               | ``0``                  |
   +-------------------------------------------------+----------------------------------------------------------------------------+------------------------+
   | :ref:`int<class_int>`                           | :ref:`minor_version<class_GLTFState_property_minor_version>`               | ``0``                  |
   +-------------------------------------------------+----------------------------------------------------------------------------+------------------------+
   | :ref:`PackedInt32Array<class_PackedInt32Array>` | :ref:`root_nodes<class_GLTFState_property_root_nodes>`                     | ``PackedInt32Array()`` |
   +-------------------------------------------------+----------------------------------------------------------------------------+------------------------+
   | :ref:`String<class_String>`                     | :ref:`scene_name<class_GLTFState_property_scene_name>`                     | ``""``                 |
   +-------------------------------------------------+----------------------------------------------------------------------------+------------------------+
   | :ref:`bool<class_bool>`                         | :ref:`use_named_skin_binds<class_GLTFState_property_use_named_skin_binds>` | ``false``              |
   +-------------------------------------------------+----------------------------------------------------------------------------+------------------------+

.. rst-class:: classref-reftable-group

方法
----

.. table::
   :widths: auto

   +-------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                                  | :ref:`add_used_extension<class_GLTFState_method_add_used_extension>` **(** :ref:`String<class_String>` extension_name, :ref:`bool<class_bool>` required **)**                        |
   +-------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`GLTFAccessor[]<class_GLTFAccessor>`             | :ref:`get_accessors<class_GLTFState_method_get_accessors>` **(** **)**                                                                                                               |
   +-------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Variant<class_Variant>`                         | :ref:`get_additional_data<class_GLTFState_method_get_additional_data>` **(** :ref:`StringName<class_StringName>` extension_name **)**                                                |
   +-------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`AnimationPlayer<class_AnimationPlayer>`         | :ref:`get_animation_player<class_GLTFState_method_get_animation_player>` **(** :ref:`int<class_int>` idx **)**                                                                       |
   +-------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`int<class_int>`                                 | :ref:`get_animation_players_count<class_GLTFState_method_get_animation_players_count>` **(** :ref:`int<class_int>` idx **)**                                                         |
   +-------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`GLTFAnimation[]<class_GLTFAnimation>`           | :ref:`get_animations<class_GLTFState_method_get_animations>` **(** **)**                                                                                                             |
   +-------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`GLTFBufferView[]<class_GLTFBufferView>`         | :ref:`get_buffer_views<class_GLTFState_method_get_buffer_views>` **(** **)**                                                                                                         |
   +-------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`GLTFCamera[]<class_GLTFCamera>`                 | :ref:`get_cameras<class_GLTFState_method_get_cameras>` **(** **)**                                                                                                                   |
   +-------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`int<class_int>`                                 | :ref:`get_handle_binary_image<class_GLTFState_method_get_handle_binary_image>` **(** **)**                                                                                           |
   +-------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Texture2D[]<class_Texture2D>`                   | :ref:`get_images<class_GLTFState_method_get_images>` **(** **)**                                                                                                                     |
   +-------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`GLTFLight[]<class_GLTFLight>`                   | :ref:`get_lights<class_GLTFState_method_get_lights>` **(** **)**                                                                                                                     |
   +-------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Material[]<class_Material>`                     | :ref:`get_materials<class_GLTFState_method_get_materials>` **(** **)**                                                                                                               |
   +-------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`GLTFMesh[]<class_GLTFMesh>`                     | :ref:`get_meshes<class_GLTFState_method_get_meshes>` **(** **)**                                                                                                                     |
   +-------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`int<class_int>`                                 | :ref:`get_node_index<class_GLTFState_method_get_node_index>` **(** :ref:`Node<class_Node>` scene_node **)**                                                                          |
   +-------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`GLTFNode[]<class_GLTFNode>`                     | :ref:`get_nodes<class_GLTFState_method_get_nodes>` **(** **)**                                                                                                                       |
   +-------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Node<class_Node>`                               | :ref:`get_scene_node<class_GLTFState_method_get_scene_node>` **(** :ref:`int<class_int>` idx **)**                                                                                   |
   +-------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`GLTFSkeleton[]<class_GLTFSkeleton>`             | :ref:`get_skeletons<class_GLTFState_method_get_skeletons>` **(** **)**                                                                                                               |
   +-------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`GLTFSkin[]<class_GLTFSkin>`                     | :ref:`get_skins<class_GLTFState_method_get_skins>` **(** **)**                                                                                                                       |
   +-------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`GLTFTextureSampler[]<class_GLTFTextureSampler>` | :ref:`get_texture_samplers<class_GLTFState_method_get_texture_samplers>` **(** **)**                                                                                                 |
   +-------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`GLTFTexture[]<class_GLTFTexture>`               | :ref:`get_textures<class_GLTFState_method_get_textures>` **(** **)**                                                                                                                 |
   +-------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`String[]<class_String>`                         | :ref:`get_unique_animation_names<class_GLTFState_method_get_unique_animation_names>` **(** **)**                                                                                     |
   +-------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`String[]<class_String>`                         | :ref:`get_unique_names<class_GLTFState_method_get_unique_names>` **(** **)**                                                                                                         |
   +-------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                                  | :ref:`set_accessors<class_GLTFState_method_set_accessors>` **(** :ref:`GLTFAccessor[]<class_GLTFAccessor>` accessors **)**                                                           |
   +-------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                                  | :ref:`set_additional_data<class_GLTFState_method_set_additional_data>` **(** :ref:`StringName<class_StringName>` extension_name, :ref:`Variant<class_Variant>` additional_data **)** |
   +-------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                                  | :ref:`set_animations<class_GLTFState_method_set_animations>` **(** :ref:`GLTFAnimation[]<class_GLTFAnimation>` animations **)**                                                      |
   +-------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                                  | :ref:`set_buffer_views<class_GLTFState_method_set_buffer_views>` **(** :ref:`GLTFBufferView[]<class_GLTFBufferView>` buffer_views **)**                                              |
   +-------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                                  | :ref:`set_cameras<class_GLTFState_method_set_cameras>` **(** :ref:`GLTFCamera[]<class_GLTFCamera>` cameras **)**                                                                     |
   +-------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                                  | :ref:`set_handle_binary_image<class_GLTFState_method_set_handle_binary_image>` **(** :ref:`int<class_int>` method **)**                                                              |
   +-------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                                  | :ref:`set_images<class_GLTFState_method_set_images>` **(** :ref:`Texture2D[]<class_Texture2D>` images **)**                                                                          |
   +-------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                                  | :ref:`set_lights<class_GLTFState_method_set_lights>` **(** :ref:`GLTFLight[]<class_GLTFLight>` lights **)**                                                                          |
   +-------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                                  | :ref:`set_materials<class_GLTFState_method_set_materials>` **(** :ref:`Material[]<class_Material>` materials **)**                                                                   |
   +-------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                                  | :ref:`set_meshes<class_GLTFState_method_set_meshes>` **(** :ref:`GLTFMesh[]<class_GLTFMesh>` meshes **)**                                                                            |
   +-------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                                  | :ref:`set_nodes<class_GLTFState_method_set_nodes>` **(** :ref:`GLTFNode[]<class_GLTFNode>` nodes **)**                                                                               |
   +-------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                                  | :ref:`set_skeletons<class_GLTFState_method_set_skeletons>` **(** :ref:`GLTFSkeleton[]<class_GLTFSkeleton>` skeletons **)**                                                           |
   +-------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                                  | :ref:`set_skins<class_GLTFState_method_set_skins>` **(** :ref:`GLTFSkin[]<class_GLTFSkin>` skins **)**                                                                               |
   +-------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                                  | :ref:`set_texture_samplers<class_GLTFState_method_set_texture_samplers>` **(** :ref:`GLTFTextureSampler[]<class_GLTFTextureSampler>` texture_samplers **)**                          |
   +-------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                                  | :ref:`set_textures<class_GLTFState_method_set_textures>` **(** :ref:`GLTFTexture[]<class_GLTFTexture>` textures **)**                                                                |
   +-------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                                  | :ref:`set_unique_animation_names<class_GLTFState_method_set_unique_animation_names>` **(** :ref:`String[]<class_String>` unique_animation_names **)**                                |
   +-------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | void                                                  | :ref:`set_unique_names<class_GLTFState_method_set_unique_names>` **(** :ref:`String[]<class_String>` unique_names **)**                                                              |
   +-------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

常量
----

.. _class_GLTFState_constant_HANDLE_BINARY_DISCARD_TEXTURES:

.. rst-class:: classref-constant

**HANDLE_BINARY_DISCARD_TEXTURES** = ``0``

丢弃所有内嵌的纹理，并使用无纹理的材质。

.. _class_GLTFState_constant_HANDLE_BINARY_EXTRACT_TEXTURES:

.. rst-class:: classref-constant

**HANDLE_BINARY_EXTRACT_TEXTURES** = ``1``

提取内嵌的纹理以重新导入和压缩。仅限编辑器。在运行时充当未压缩的。

.. _class_GLTFState_constant_HANDLE_BINARY_EMBED_AS_BASISU:

.. rst-class:: classref-constant

**HANDLE_BINARY_EMBED_AS_BASISU** = ``2``

将使用 Basis Universal 压缩的纹理 VRAM 嵌入到生成的场景中。

.. _class_GLTFState_constant_HANDLE_BINARY_EMBED_AS_UNCOMPRESSED:

.. rst-class:: classref-constant

**HANDLE_BINARY_EMBED_AS_UNCOMPRESSED** = ``3``

将无损压缩的纹理嵌入到生成的场景中，匹配旧行为。

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

属性说明
--------

.. _class_GLTFState_property_base_path:

.. rst-class:: classref-property

:ref:`String<class_String>` **base_path** = ``""``

.. rst-class:: classref-property-setget

- void **set_base_path** **(** :ref:`String<class_String>` value **)**
- :ref:`String<class_String>` **get_base_path** **(** **)**

与该 GLTF 数据关联的文件夹路径。这用于查找该 GLTF 文件引用的其他文件，例如图像或二进制缓冲区。这将在导入期间从文件追加时设置，并将在导出期间写入文件时设置。

.. rst-class:: classref-item-separator

----

.. _class_GLTFState_property_buffers:

.. rst-class:: classref-property

:ref:`PackedByteArray[]<class_PackedByteArray>` **buffers** = ``[]``

.. rst-class:: classref-property-setget

- void **set_buffers** **(** :ref:`PackedByteArray[]<class_PackedByteArray>` value **)**
- :ref:`PackedByteArray[]<class_PackedByteArray>` **get_buffers** **(** **)**

.. container:: contribute

	目前没有这个属性的描述。请帮我们\ :ref:`贡献一个 <doc_updating_the_class_reference>`\ ！

.. rst-class:: classref-item-separator

----

.. _class_GLTFState_property_copyright:

.. rst-class:: classref-property

:ref:`String<class_String>` **copyright** = ``""``

.. rst-class:: classref-property-setget

- void **set_copyright** **(** :ref:`String<class_String>` value **)**
- :ref:`String<class_String>` **get_copyright** **(** **)**

该 GLTF 文件的资产标头中的版权字符串。如果存在，则在导入期间设置；如果非空则在导出期间设置。详见 GLTF 资产标头文档。

.. rst-class:: classref-item-separator

----

.. _class_GLTFState_property_create_animations:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **create_animations** = ``true``

.. rst-class:: classref-property-setget

- void **set_create_animations** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **get_create_animations** **(** **)**

.. container:: contribute

	目前没有这个属性的描述。请帮我们\ :ref:`贡献一个 <doc_updating_the_class_reference>`\ ！

.. rst-class:: classref-item-separator

----

.. _class_GLTFState_property_filename:

.. rst-class:: classref-property

:ref:`String<class_String>` **filename** = ``""``

.. rst-class:: classref-property-setget

- void **set_filename** **(** :ref:`String<class_String>` value **)**
- :ref:`String<class_String>` **get_filename** **(** **)**

与该 GLTF 数据关联的文件名。如果它以 ``.gltf`` 结尾，则这是基于文本的 GLTF，否则这是二进制 GLB。这将在导入期间从文件追加时设置，并将在导出期间写入文件时设置。如果写入到缓冲区，这将是一个空字符串。

.. rst-class:: classref-item-separator

----

.. _class_GLTFState_property_glb_data:

.. rst-class:: classref-property

:ref:`PackedByteArray<class_PackedByteArray>` **glb_data** = ``PackedByteArray()``

.. rst-class:: classref-property-setget

- void **set_glb_data** **(** :ref:`PackedByteArray<class_PackedByteArray>` value **)**
- :ref:`PackedByteArray<class_PackedByteArray>` **get_glb_data** **(** **)**

.. container:: contribute

	目前没有这个属性的描述。请帮我们\ :ref:`贡献一个 <doc_updating_the_class_reference>`\ ！

.. rst-class:: classref-item-separator

----

.. _class_GLTFState_property_json:

.. rst-class:: classref-property

:ref:`Dictionary<class_Dictionary>` **json** = ``{}``

.. rst-class:: classref-property-setget

- void **set_json** **(** :ref:`Dictionary<class_Dictionary>` value **)**
- :ref:`Dictionary<class_Dictionary>` **get_json** **(** **)**

.. container:: contribute

	目前没有这个属性的描述。请帮我们\ :ref:`贡献一个 <doc_updating_the_class_reference>`\ ！

.. rst-class:: classref-item-separator

----

.. _class_GLTFState_property_major_version:

.. rst-class:: classref-property

:ref:`int<class_int>` **major_version** = ``0``

.. rst-class:: classref-property-setget

- void **set_major_version** **(** :ref:`int<class_int>` value **)**
- :ref:`int<class_int>` **get_major_version** **(** **)**

.. container:: contribute

	目前没有这个属性的描述。请帮我们\ :ref:`贡献一个 <doc_updating_the_class_reference>`\ ！

.. rst-class:: classref-item-separator

----

.. _class_GLTFState_property_minor_version:

.. rst-class:: classref-property

:ref:`int<class_int>` **minor_version** = ``0``

.. rst-class:: classref-property-setget

- void **set_minor_version** **(** :ref:`int<class_int>` value **)**
- :ref:`int<class_int>` **get_minor_version** **(** **)**

.. container:: contribute

	目前没有这个属性的描述。请帮我们\ :ref:`贡献一个 <doc_updating_the_class_reference>`\ ！

.. rst-class:: classref-item-separator

----

.. _class_GLTFState_property_root_nodes:

.. rst-class:: classref-property

:ref:`PackedInt32Array<class_PackedInt32Array>` **root_nodes** = ``PackedInt32Array()``

.. rst-class:: classref-property-setget

- void **set_root_nodes** **(** :ref:`PackedInt32Array<class_PackedInt32Array>` value **)**
- :ref:`PackedInt32Array<class_PackedInt32Array>` **get_root_nodes** **(** **)**

GLTF 文件的根节点。通常，一个 GLTF 文件只有一个场景，因此只有一个根节点。然而，一个 GLTF 文件可能有多个场景，因此可以有多个根节点，它们将作为彼此的兄弟节点生成，并作为生成的 Godot 场景的根节点的子节点生成。

.. rst-class:: classref-item-separator

----

.. _class_GLTFState_property_scene_name:

.. rst-class:: classref-property

:ref:`String<class_String>` **scene_name** = ``""``

.. rst-class:: classref-property-setget

- void **set_scene_name** **(** :ref:`String<class_String>` value **)**
- :ref:`String<class_String>` **get_scene_name** **(** **)**

场景的名称。导入时，如果没有指定，这将是文件名。导出时，如果指定，场景名称将被保存到 GLTF 文件中。

.. rst-class:: classref-item-separator

----

.. _class_GLTFState_property_use_named_skin_binds:

.. rst-class:: classref-property

:ref:`bool<class_bool>` **use_named_skin_binds** = ``false``

.. rst-class:: classref-property-setget

- void **set_use_named_skin_binds** **(** :ref:`bool<class_bool>` value **)**
- :ref:`bool<class_bool>` **get_use_named_skin_binds** **(** **)**

.. container:: contribute

	目前没有这个属性的描述。请帮我们\ :ref:`贡献一个 <doc_updating_the_class_reference>`\ ！

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

方法说明
--------

.. _class_GLTFState_method_add_used_extension:

.. rst-class:: classref-method

void **add_used_extension** **(** :ref:`String<class_String>` extension_name, :ref:`bool<class_bool>` required **)**

在序列化期间，将一个扩展名追加到该 GLTF 文件使用的扩展名列表在。如果 ``required`` 为 true，则该扩展名也将被添加到所需扩展名列表中。不要在 :ref:`GLTFDocumentExtension._export_post<class_GLTFDocumentExtension_private_method__export_post>` 中运行它，因为那个阶段已来不及添加扩展。最终的列表将按字母顺序排序。

.. rst-class:: classref-item-separator

----

.. _class_GLTFState_method_get_accessors:

.. rst-class:: classref-method

:ref:`GLTFAccessor[]<class_GLTFAccessor>` **get_accessors** **(** **)**

.. container:: contribute

	目前没有这个方法的描述。请帮我们\ :ref:`贡献一个 <doc_updating_the_class_reference>`\ ！

.. rst-class:: classref-item-separator

----

.. _class_GLTFState_method_get_additional_data:

.. rst-class:: classref-method

:ref:`Variant<class_Variant>` **get_additional_data** **(** :ref:`StringName<class_StringName>` extension_name **)**

在该 **GLTFState** 实例中，获取额外的任意数据。这可用于保留在 :ref:`GLTFDocumentExtension<class_GLTFDocumentExtension>` 类中的每个文件的状态数据，这很重要，因为它们是无状态的。

该参数应该是 :ref:`GLTFDocumentExtension<class_GLTFDocumentExtension>` 的名称（不必与 GLTF 文件中的扩展名相匹配），而该返回值可以是你设置的任何东西。如果没有设置任何东西，则该返回值为 null。

.. rst-class:: classref-item-separator

----

.. _class_GLTFState_method_get_animation_player:

.. rst-class:: classref-method

:ref:`AnimationPlayer<class_AnimationPlayer>` **get_animation_player** **(** :ref:`int<class_int>` idx **)**

返回具有给定索引的 :ref:`AnimationPlayer<class_AnimationPlayer>` 节点。这些节点仅在将 Godot :ref:`AnimationPlayer<class_AnimationPlayer>` 节点转换为 GLTF 动画时的导出过程中使用。

.. rst-class:: classref-item-separator

----

.. _class_GLTFState_method_get_animation_players_count:

.. rst-class:: classref-method

:ref:`int<class_int>` **get_animation_players_count** **(** :ref:`int<class_int>` idx **)**

返回该 **GLTFState** 中 :ref:`AnimationPlayer<class_AnimationPlayer>` 节点的数量。这些节点仅在将 Godot :ref:`AnimationPlayer<class_AnimationPlayer>` 节点转换为 GLTF 动画时的导出过程中使用。

.. rst-class:: classref-item-separator

----

.. _class_GLTFState_method_get_animations:

.. rst-class:: classref-method

:ref:`GLTFAnimation[]<class_GLTFAnimation>` **get_animations** **(** **)**

返回 GLTF 文件中所有 :ref:`GLTFAnimation<class_GLTFAnimation>` 的数组。导入时，这些将在一个 :ref:`AnimationPlayer<class_AnimationPlayer>` 节点生成为动画。导出时，这些将从 Godot :ref:`AnimationPlayer<class_AnimationPlayer>` 节点生成。

.. rst-class:: classref-item-separator

----

.. _class_GLTFState_method_get_buffer_views:

.. rst-class:: classref-method

:ref:`GLTFBufferView[]<class_GLTFBufferView>` **get_buffer_views** **(** **)**

.. container:: contribute

	目前没有这个方法的描述。请帮我们\ :ref:`贡献一个 <doc_updating_the_class_reference>`\ ！

.. rst-class:: classref-item-separator

----

.. _class_GLTFState_method_get_cameras:

.. rst-class:: classref-method

:ref:`GLTFCamera[]<class_GLTFCamera>` **get_cameras** **(** **)**

返回 GLTF 文件中所有 :ref:`GLTFCamera<class_GLTFCamera>` 的数组。这些是 :ref:`GLTFNode.camera<class_GLTFNode_property_camera>` 索引引用的相机。

.. rst-class:: classref-item-separator

----

.. _class_GLTFState_method_get_handle_binary_image:

.. rst-class:: classref-method

:ref:`int<class_int>` **get_handle_binary_image** **(** **)**

.. container:: contribute

	目前没有这个方法的描述。请帮我们\ :ref:`贡献一个 <doc_updating_the_class_reference>`\ ！

.. rst-class:: classref-item-separator

----

.. _class_GLTFState_method_get_images:

.. rst-class:: classref-method

:ref:`Texture2D[]<class_Texture2D>` **get_images** **(** **)**

以 :ref:`Texture2D<class_Texture2D>` 数组的形式获取 GLTF 文件中的图像。这些是 :ref:`GLTFTexture.src_image<class_GLTFTexture_property_src_image>` 索引引用的图像。

.. rst-class:: classref-item-separator

----

.. _class_GLTFState_method_get_lights:

.. rst-class:: classref-method

:ref:`GLTFLight[]<class_GLTFLight>` **get_lights** **(** **)**

返回 GLTF 文件中所有 :ref:`GLTFLight<class_GLTFLight>` 的数组。这些是 :ref:`GLTFNode.light<class_GLTFNode_property_light>` 索引引用的灯。

.. rst-class:: classref-item-separator

----

.. _class_GLTFState_method_get_materials:

.. rst-class:: classref-method

:ref:`Material[]<class_Material>` **get_materials** **(** **)**

.. container:: contribute

	目前没有这个方法的描述。请帮我们\ :ref:`贡献一个 <doc_updating_the_class_reference>`\ ！

.. rst-class:: classref-item-separator

----

.. _class_GLTFState_method_get_meshes:

.. rst-class:: classref-method

:ref:`GLTFMesh[]<class_GLTFMesh>` **get_meshes** **(** **)**

返回 GLTF 文件中所有 :ref:`GLTFMesh<class_GLTFMesh>` 的数组。这些是 :ref:`GLTFNode.mesh<class_GLTFNode_property_mesh>` 索引引用的网格。

.. rst-class:: classref-item-separator

----

.. _class_GLTFState_method_get_node_index:

.. rst-class:: classref-method

:ref:`int<class_int>` **get_node_index** **(** :ref:`Node<class_Node>` scene_node **)**

返回与该 Godot 场景节点对应的 :ref:`GLTFNode<class_GLTFNode>` 的索引。这个方法与 :ref:`get_scene_node<class_GLTFState_method_get_scene_node>` 互逆。可以在导出过程中使用。

\ **注意：**\ 并不是所有 Godot 场景节点都有对应的 :ref:`GLTFNode<class_GLTFNode>`\ ，也并不是所有 :ref:`GLTFNode<class_GLTFNode>` 都会生成场景节点。如果该场景节点没有 :ref:`GLTFNode<class_GLTFNode>` 索引，则会返回 ``-1``\ 。

.. rst-class:: classref-item-separator

----

.. _class_GLTFState_method_get_nodes:

.. rst-class:: classref-method

:ref:`GLTFNode[]<class_GLTFNode>` **get_nodes** **(** **)**

返回 GLTF 文件中所有 :ref:`GLTFNode<class_GLTFNode>` 的数组。这些是 :ref:`GLTFNode.children<class_GLTFNode_property_children>` 和 :ref:`root_nodes<class_GLTFState_property_root_nodes>` 引用的节点。这包括可能不会在 Godot 场景中生成的节点，或者可能生成多个 Godot 场景节点的节点。

.. rst-class:: classref-item-separator

----

.. _class_GLTFState_method_get_scene_node:

.. rst-class:: classref-method

:ref:`Node<class_Node>` **get_scene_node** **(** :ref:`int<class_int>` idx **)**

返回指定索引的 :ref:`GLTFNode<class_GLTFNode>` 对应生成的 Godot 场景节点。这个方法与 :ref:`get_node_index<class_GLTFState_method_get_node_index>` 互逆。可以在导入过程中使用。

\ **注意：**\ 并不是所有 :ref:`GLTFNode<class_GLTFNode>` 都会生成场景节点，也并不是所有 Godot 场景节点都有对应的 :ref:`GLTFNode<class_GLTFNode>`\ 。如果该 :ref:`GLTFNode<class_GLTFNode>` 索引没有场景节点，则会返回 ``null``\ 。

.. rst-class:: classref-item-separator

----

.. _class_GLTFState_method_get_skeletons:

.. rst-class:: classref-method

:ref:`GLTFSkeleton[]<class_GLTFSkeleton>` **get_skeletons** **(** **)**

返回 GLTF 文件中所有 :ref:`GLTFSkeleton<class_GLTFSkeleton>` 的数组。这些是 :ref:`GLTFNode.skeleton<class_GLTFNode_property_skeleton>` 索引引用的骨架。

.. rst-class:: classref-item-separator

----

.. _class_GLTFState_method_get_skins:

.. rst-class:: classref-method

:ref:`GLTFSkin[]<class_GLTFSkin>` **get_skins** **(** **)**

返回 GLTF 文件中所有 :ref:`GLTFSkin<class_GLTFSkin>` 的数组。这些是 :ref:`GLTFNode.skin<class_GLTFNode_property_skin>` 索引引用的皮肤。

.. rst-class:: classref-item-separator

----

.. _class_GLTFState_method_get_texture_samplers:

.. rst-class:: classref-method

:ref:`GLTFTextureSampler[]<class_GLTFTextureSampler>` **get_texture_samplers** **(** **)**

检索 GLTF 中包含的纹理所使用的纹理采样器的数组。

.. rst-class:: classref-item-separator

----

.. _class_GLTFState_method_get_textures:

.. rst-class:: classref-method

:ref:`GLTFTexture[]<class_GLTFTexture>` **get_textures** **(** **)**

.. container:: contribute

	目前没有这个方法的描述。请帮我们\ :ref:`贡献一个 <doc_updating_the_class_reference>`\ ！

.. rst-class:: classref-item-separator

----

.. _class_GLTFState_method_get_unique_animation_names:

.. rst-class:: classref-method

:ref:`String[]<class_String>` **get_unique_animation_names** **(** **)**

返回一组唯一的动画名称。这仅在导入过程中使用。

.. rst-class:: classref-item-separator

----

.. _class_GLTFState_method_get_unique_names:

.. rst-class:: classref-method

:ref:`String[]<class_String>` **get_unique_names** **(** **)**

返回唯一节点名称的数组。这用于导入过程和导出过程。

.. rst-class:: classref-item-separator

----

.. _class_GLTFState_method_set_accessors:

.. rst-class:: classref-method

void **set_accessors** **(** :ref:`GLTFAccessor[]<class_GLTFAccessor>` accessors **)**

.. container:: contribute

	目前没有这个方法的描述。请帮我们\ :ref:`贡献一个 <doc_updating_the_class_reference>`\ ！

.. rst-class:: classref-item-separator

----

.. _class_GLTFState_method_set_additional_data:

.. rst-class:: classref-method

void **set_additional_data** **(** :ref:`StringName<class_StringName>` extension_name, :ref:`Variant<class_Variant>` additional_data **)**

在这个 **GLTFState** 实例中设置额外的任意数据。这可以用来保留在 :ref:`GLTFDocumentExtension<class_GLTFDocumentExtension>` 类中的每个文件的状态数据，这很重要，因为它们是无状态的。

第一个参数应该是 :ref:`GLTFDocumentExtension<class_GLTFDocumentExtension>` 的名称（不必与 GLTF 文件中的扩展名相匹配），第二个参数可以是任何你想要的东西。

.. rst-class:: classref-item-separator

----

.. _class_GLTFState_method_set_animations:

.. rst-class:: classref-method

void **set_animations** **(** :ref:`GLTFAnimation[]<class_GLTFAnimation>` animations **)**

设置该状态中的 :ref:`GLTFAnimation<class_GLTFAnimation>`\ 。导入时，这些将在 :ref:`AnimationPlayer<class_AnimationPlayer>` 节点中生成为动画。导出时，这些将由 Godot :ref:`AnimationPlayer<class_AnimationPlayer>` 节点生成。

.. rst-class:: classref-item-separator

----

.. _class_GLTFState_method_set_buffer_views:

.. rst-class:: classref-method

void **set_buffer_views** **(** :ref:`GLTFBufferView[]<class_GLTFBufferView>` buffer_views **)**

.. container:: contribute

	目前没有这个方法的描述。请帮我们\ :ref:`贡献一个 <doc_updating_the_class_reference>`\ ！

.. rst-class:: classref-item-separator

----

.. _class_GLTFState_method_set_cameras:

.. rst-class:: classref-method

void **set_cameras** **(** :ref:`GLTFCamera[]<class_GLTFCamera>` cameras **)**

设置该状态中的 :ref:`GLTFCamera<class_GLTFCamera>`\ 。这些是 :ref:`GLTFNode.camera<class_GLTFNode_property_camera>` 索引引用的相机。

.. rst-class:: classref-item-separator

----

.. _class_GLTFState_method_set_handle_binary_image:

.. rst-class:: classref-method

void **set_handle_binary_image** **(** :ref:`int<class_int>` method **)**

.. container:: contribute

	目前没有这个方法的描述。请帮我们\ :ref:`贡献一个 <doc_updating_the_class_reference>`\ ！

.. rst-class:: classref-item-separator

----

.. _class_GLTFState_method_set_images:

.. rst-class:: classref-method

void **set_images** **(** :ref:`Texture2D[]<class_Texture2D>` images **)**

设置状态中以 :ref:`Texture2D<class_Texture2D>` 数组形式存储的图像。可以在导出时使用。这些是 :ref:`GLTFTexture.src_image<class_GLTFTexture_property_src_image>` 索引所引用的图像。

.. rst-class:: classref-item-separator

----

.. _class_GLTFState_method_set_lights:

.. rst-class:: classref-method

void **set_lights** **(** :ref:`GLTFLight[]<class_GLTFLight>` lights **)**

设置该状态中的 :ref:`GLTFLight<class_GLTFLight>`\ 。这些是 :ref:`GLTFNode.light<class_GLTFNode_property_light>` 索引引用的灯。

.. rst-class:: classref-item-separator

----

.. _class_GLTFState_method_set_materials:

.. rst-class:: classref-method

void **set_materials** **(** :ref:`Material[]<class_Material>` materials **)**

.. container:: contribute

	目前没有这个方法的描述。请帮我们\ :ref:`贡献一个 <doc_updating_the_class_reference>`\ ！

.. rst-class:: classref-item-separator

----

.. _class_GLTFState_method_set_meshes:

.. rst-class:: classref-method

void **set_meshes** **(** :ref:`GLTFMesh[]<class_GLTFMesh>` meshes **)**

设置该状态中的 :ref:`GLTFMesh<class_GLTFMesh>`\ 。这些是 :ref:`GLTFNode.mesh<class_GLTFNode_property_mesh>` 索引引用的网格。

.. rst-class:: classref-item-separator

----

.. _class_GLTFState_method_set_nodes:

.. rst-class:: classref-method

void **set_nodes** **(** :ref:`GLTFNode[]<class_GLTFNode>` nodes **)**

设置该状态中的 :ref:`GLTFNode<class_GLTFNode>`\ 。这些是 :ref:`GLTFNode.children<class_GLTFNode_property_children>` 和 :ref:`root_nodes<class_GLTFState_property_root_nodes>` 引用的节点。这里设置的一些节点在 Godot 场景中可能不会生成，也可能会生成多个 Godot 场景节点。

.. rst-class:: classref-item-separator

----

.. _class_GLTFState_method_set_skeletons:

.. rst-class:: classref-method

void **set_skeletons** **(** :ref:`GLTFSkeleton[]<class_GLTFSkeleton>` skeletons **)**

设置该状态中的 :ref:`GLTFSkeleton<class_GLTFSkeleton>`\ 。这些是 :ref:`GLTFNode.skeleton<class_GLTFNode_property_skeleton>` 索引引用的骨架。

.. rst-class:: classref-item-separator

----

.. _class_GLTFState_method_set_skins:

.. rst-class:: classref-method

void **set_skins** **(** :ref:`GLTFSkin[]<class_GLTFSkin>` skins **)**

设置该状态中的 :ref:`GLTFSkin<class_GLTFSkin>`\ 。这些是 :ref:`GLTFNode.skin<class_GLTFNode_property_skin>` 索引引用的皮肤。

.. rst-class:: classref-item-separator

----

.. _class_GLTFState_method_set_texture_samplers:

.. rst-class:: classref-method

void **set_texture_samplers** **(** :ref:`GLTFTextureSampler[]<class_GLTFTextureSampler>` texture_samplers **)**

设置由 GLTF 中包含的纹理所使用的纹理采样器的数组。

.. rst-class:: classref-item-separator

----

.. _class_GLTFState_method_set_textures:

.. rst-class:: classref-method

void **set_textures** **(** :ref:`GLTFTexture[]<class_GLTFTexture>` textures **)**

.. container:: contribute

	目前没有这个方法的描述。请帮我们\ :ref:`贡献一个 <doc_updating_the_class_reference>`\ ！

.. rst-class:: classref-item-separator

----

.. _class_GLTFState_method_set_unique_animation_names:

.. rst-class:: classref-method

void **set_unique_animation_names** **(** :ref:`String[]<class_String>` unique_animation_names **)**

设置该状态中的唯一动画名称。这仅在导入过程中使用。

.. rst-class:: classref-item-separator

----

.. _class_GLTFState_method_set_unique_names:

.. rst-class:: classref-method

void **set_unique_names** **(** :ref:`String[]<class_String>` unique_names **)**

设置该状态中的唯一节点名称。这用于导入过程和导出过程。

.. |virtual| replace:: :abbr:`virtual (本方法通常需要用户覆盖才能生效。)`
.. |const| replace:: :abbr:`const (本方法没有副作用。不会修改该实例的任何成员变量。)`
.. |vararg| replace:: :abbr:`vararg (本方法除了在此处描述的参数外，还能够继续接受任意数量的参数。)`
.. |constructor| replace:: :abbr:`constructor (本方法用于构造某个类型。)`
.. |static| replace:: :abbr:`static (调用本方法无需实例，所以可以直接使用类名调用。)`
.. |operator| replace:: :abbr:`operator (本方法描述的是使用本类型作为左操作数的有效操作符。)`
.. |bitfield| replace:: :abbr:`BitField (这个值是由下列标志构成的位掩码整数。)`
